"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return fn(new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))); } };

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) { $froundBuf[0] = f; return $froundBuf[0]; };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(method) {
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $internalCopy(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copy = function(dst, src, typ) {
  switch (typ.kind) {
  case $kindArray:
    $internalCopy(dst, src, 0, 0, src.length, typ.elem);
    break;
  case $kindStruct:
    for (var i = 0; i < typ.fields.length; i++) {
      var f = typ.fields[i];
      switch (f.typ.kind) {
      case $kindArray:
      case $kindStruct:
        $copy(dst[f.prop], src[f.prop], f.typ);
        continue;
      default:
        dst[f.prop] = src[f.prop];
        continue;
      }
    }
    break;
  }
};

var $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        $copy(dst[dstOffset + i], src[srcOffset + i], elem);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      $copy(dst[dstOffset + i], src[srcOffset + i], elem);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  $copy(clone, src, type);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; },
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $internalCopy(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $newType = function(size, kind, string, name, pkg, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindString:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + this.$val; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + $floatKey(this.$val); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$real + "$" + this.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$real + "$" + this.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { $copy(this, v, typ); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.prototype.$key = function() {
        return string + "$" + Array.prototype.join.call($mapArray(this.$val, function(e) {
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(capacity) {
      this.$val = this;
      this.$capacity = capacity;
      this.$buffer = [];
      this.$sendQueue = [];
      this.$recvQueue = [];
      this.$closed = false;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
      typ.nil = new typ(0);
      typ.nil.$sendQueue = typ.nil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { $copy(this, v, typ); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.prototype.$key = function() {
        var val = this.$val;
        return string + "$" + $mapArray(fields, function(f) {
          var e = val[f.prop];
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindChan:
  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkg = pkg;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if(e.typ.typeName !== "") {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var string = "[" + len + "]" + elem.string;
  var typ = $arrayTypes[string];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, string, "", "", null);
    $arrayTypes[string] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var paramTypes = $mapArray(params, function(p) { return p.string; });
  if (variadic) {
    paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
  }
  var string = "func(" + paramTypes.join(", ") + ")";
  if (results.length === 1) {
    string += " " + results[0].string;
  } else if (results.length > 1) {
    string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
  }
  var typ = $funcTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[string] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var string = "interface {}";
  if (methods.length !== 0) {
    string = "interface { " + $mapArray(methods, function(m) {
      return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
    }).join("; ") + " }";
  }
  var typ = $interfaceTypes[string];
  if (typ === undefined) {
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[string] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = { $key: function() { return "nil"; } };
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $Map = function() {};
(function() {
  var names = Object.getOwnPropertyNames(Object.prototype);
  for (var i = 0; i < names.length; i++) {
    $Map.prototype[names[i]] = undefined;
  }
})();
var $mapTypes = {};
var $mapType = function(key, elem) {
  var string = "map[" + key.string + "]" + elem.string;
  var typ = $mapTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, string, "", "", null);
    $mapTypes[string] = typ;
    typ.init(key, elem);
  }
  return typ;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.Slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.Slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(fields) {
  var string = "struct { " + $mapArray(fields, function(f) {
    return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
  }).join("; ") + " }";
  if (fields.length === 0) {
    string = "struct {}";
  }
  var typ = $structTypes[string];
  if (typ === undefined) {
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[string] = typ;
    typ.init(fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === 1/0 || n.$real === -1/0 || n.$imag === 1/0 || n.$imag === -1/0;
  var dinf = d.$real === 1/0 || d.$real === -1/0 || d.$imag === 1/0 || d.$imag === -1/0;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(0/0, 0/0);
  }
  if (ninf && !dinf) {
    return new n.constructor(1/0, 1/0);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(0/0, 0/0);
    }
    return new n.constructor(1/0, 1/0);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    var rescheduled = false;
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { r.$blk(); };
        args = [];
        rescheduled = true;
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      $goroutine.exit = true;
      throw err;
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit && !rescheduled) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep && !rescheduled) {
        $awakeGoroutines--;
        if ($awakeGoroutines === 0 && $totalGoroutines !== 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerLoopActive = false;
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerLoopActive) {
    $schedulerLoopActive = true;
    setTimeout(function() {
      while (true) {
        var r = $scheduled.shift();
        if (r === undefined) {
          $schedulerLoopActive = false;
          break;
        }
        r();
      };
    }, 0);
  }
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
    },
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.constructor.elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.constructor.elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      s += String.fromCharCode(r[0]);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $panic(new $String("cannot externalize " + t.string));
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $panic(new $String("cannot internalize js.Object, use *js.Object instead"));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $panic(new $String("cannot internalize " + t.string));
    }
    if (v === null) {
      return $ifaceNil;
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      var timePkg = $packages["time"];
      if (timePkg) {
        return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));
      }
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = new $Map();
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var key = $internalize(keys[i], t.key);
      m[key.$key ? key.$key() : key] = { k: key, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    for (var i = 0; i < v.length; i++) {
      s += $encodeRune(v.charCodeAt(i));
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $panic(new $String("cannot internalize js.Object, use *js.Object instead"));
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $panic(new $String("cannot internalize " + t.string));
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, NewArrayBuffer, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	NewArrayBuffer = function(b) {
		var $ptr, b, length, offset, slice;
		slice = b;
		offset = $parseInt(slice.$offset) >> 0;
		length = $parseInt(slice.$length) >> 0;
		return slice.$array.buffer.slice(offset, offset + length >> 0);
	};
	$pkg.NewArrayBuffer = NewArrayBuffer;
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init([{prop: "object", name: "object", pkg: "github.com/gopherjs/gopherjs/js", typ: ptrType, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, TypeAssertionError, errorString, ptrType$5, init, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
	ptrType$5 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$5.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, runtime, atomic, Pool, Mutex, Locker, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, chanType, sliceType$1, ptrType$2, ptrType$4, ptrType$6, sliceType$3, ptrType$7, ptrType$8, funcType, ptrType$10, arrayType, semWaiters, allPools, runtime_Syncsemcheck, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, poolCleanup, init, indexLocal, raceEnable, init$1;
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", "Locker", "sync", null);
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr();
			this.pad = arrayType.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr();
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr();
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$2 = $ptrType($Uint32);
	ptrType$4 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$10 = $ptrType(Mutex);
	arrayType = $arrayType($Uint8, 128);
	runtime_Syncsemcheck = function(size) {
		var $ptr, size;
	};
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				return _r;
			/* } */ case 4:
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new chanType(0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: $append((_entry = semWaiters[s.$key()], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[s.$key()], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[s.$key()];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			return;
		}
		awoke = false;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$2(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$2(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	raceEnable = function() {
		var $ptr;
	};
	init$1 = function() {
		var $ptr, s;
		s = $clone(new syncSema.ptr(), syncSema);
		runtime_Syncsemcheck(12);
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$2(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				raceEnable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$2(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$2(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			raceEnable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$2(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$7);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$10.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "New", name: "New", pkg: "", typ: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", typ: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", typ: arrayType, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", typ: $UnsafePointer, tag: ""}]);
	RWMutex.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	rlocker.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = runtime.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = new $Map();
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, ByteReader, RuneReader, sliceType, errWhence, errOffset;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", "WriterTo", "io", null);
	ByteReader = $pkg.ByteReader = $newType(8, $kindInterface, "io.ByteReader", "ByteReader", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
	sliceType = $sliceType($Uint8);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteReader.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, sliceType, sliceType$1, sliceType$3, _White_Space, _CaseRanges, to, IsSpace, is16, is32, Is, isExcludingLatin, To, ToLower;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = d.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$3 = $sliceType(CaseRange);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsSpace = function(r) {
		var $ptr, _ref, r;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var $ptr, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", typ: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", typ: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", typ: d, tag: ""}]);
	d.init($Int32, 3);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	decodeRuneInternal = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, p, r, short$1, size;
		r = 0;
		size = 0;
		short$1 = false;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r, s, short$1, size;
		r = 0;
		size = 0;
		short$1 = false;
		n = s.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	FullRune = function(p) {
		var $ptr, _tuple, p, short$1;
		_tuple = decodeRuneInternal(p); short$1 = _tuple[2];
		return !short$1;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var $ptr, _tuple, p, r, size;
		r = 0;
		size = 0;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tuple, r, s, size;
		r = 0;
		size = 0;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString(s.substring(start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, _tuple, i, n, p, size;
		i = 0;
		n = 0;
		n = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < 128) {
				i = i + (1) >> 0;
			} else {
				_tuple = DecodeRune($subslice(p, i)); size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + (1) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, _i, _ref, _rune, n, s;
		n = 0;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			n = n + (1) >> 0;
			_i += _rune[1];
		}
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBuffer, Contains, Index;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((2 * b.buf.$capacity >> 0) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((2 * b.buf.$capacity >> 0) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; m = _tuple[0]; e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1;
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; r = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r; _tmp$7 = n; _tmp$8 = $ifaceNil; r = _tmp$6; size = _tmp$7; err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var $ptr, buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	Contains = function(b, subslice) {
		var $ptr, b, subslice;
		return !((Index(b, subslice) === -1));
	};
	$pkg.Contains = Contains;
	Index = function(s, sep) {
		var $ptr, c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.Index = Index;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", typ: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "bytes", typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, Writer, sliceType, ptrType, sliceType$1, ptrType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", "Reader", "bufio", function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "bufio.Writer", "Writer", "bufio", function(err_, buf_, n_, wr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.buf = sliceType.nil;
			this.n = 0;
			this.wr = $ifaceNil;
			return;
		}
		this.err = err_;
		this.buf = buf_;
		this.n = n_;
		this.wr = wr_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	ptrType$1 = $ptrType(Writer);
	NewReaderSize = function(rd, size) {
		var $ptr, _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true); b = _tuple[0]; ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr();
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var $ptr, rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var $ptr, b, buf, r;
		b = this;
		$copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1), Reader);
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var $ptr, _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; n = _tuple[0]; err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				return;
			}
			if (n > 0) {
				return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var $ptr, b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var $ptr, avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		if (n > b.buf.$length) {
			return [sliceType.nil, $pkg.ErrBufferFull];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0; _tmp$1 = b.readErr(); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = b.readErr(); n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; n = _tuple[0]; b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n; _tmp$5 = b.readErr(); n = _tmp$4; err = _tmp$5;
				return [n, err];
			/* } */ case 4:
			$r = b.fill(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (b.r === b.w) {
				_tmp$6 = 0; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
				return [n, err];
			}
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n; _tmp$9 = $ifaceNil; n = _tmp$8; err = _tmp$9;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; b = $f.b; c = $f.c; err = $f.err; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = b.readErr(); c = _tmp; err = _tmp$1;
				return [c, err];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.b = b; $f.c = c; $f.err = err; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24)));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = b.readErr(); r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0); _tmp$4 = 1; r = _tmp$3; size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w)); r = _tuple[0]; size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r; _tmp$6 = size; _tmp$7 = $ifaceNil; r = _tmp$5; size = _tmp$6; err = _tmp$7;
		return [r, size, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var $ptr, b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + i$1]) >> 0);
			b.lastRuneSize = -1;
		}
		return [line, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.$ptr = $ptr; $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; line = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line; _tmp$1 = true; _tmp$2 = $ifaceNil; line = _tmp; isPrefix = _tmp$1; err = _tmp$2;
			return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		return [line, isPrefix, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, line, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; line = $f.line; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; frag = _tuple[0]; e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		_tmp = buf$1; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, bytes$1, delim, err, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = "";
		err = $ifaceNil;
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; bytes$1 = _tuple[0]; err = _tuple[1];
		line = $bytesToString(bytes$1);
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true); r = _tuple$1[0]; ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1; m = _tuple$2[0]; err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true); w$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2; m$1 = _tuple$4[0]; err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n; _tmp$3 = err$2; n = _tmp$2; err = _tmp$3;
			return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3; m$2 = _tuple$5[0]; err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = err$3; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var $ptr, _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		return [new $Int64(0, n), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	Writer.ptr.prototype.Reset = function(w) {
		var $ptr, b, w;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.Flush = function() {
		var $ptr, _r, b, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.flush = function() {
		var $ptr, _r, _tuple, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (b.n === 0) {
			return $ifaceNil;
		}
		_r = b.wr.Write($subslice(b.buf, 0, b.n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			return err;
		}
		b.n = 0;
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.flush }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.ptr.prototype.Available = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.ptr.prototype.Write = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, n$1, nn, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = 0;
			/* */ if (b.Buffered() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.Buffered() === 0) { */ case 3:
				_r = b.wr.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; n = _tuple[0]; b.err = _tuple[1];
				$s = 5; continue;
			/* } else { */ case 4:
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				_r$1 = b.flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn; _tmp$1 = b.err; nn = _tmp; err = _tmp$1;
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn; _tmp$3 = $ifaceNil; nn = _tmp$2; err = _tmp$3;
		return [nn, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.WriteByte = function(c) {
		var $ptr, _r, _v, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (!(b.Available() <= 0)) { _v = false; $s = 3; continue s; }
		_r = b.flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !($interfaceIsEqual(_r, $ifaceNil)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			return b.err;
		/* } */ case 2:
		(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.n = b.n + (1) >> 0;
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		size = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (r < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 128) { */ case 1:
			_r = b.WriteByte((r << 24 >>> 24)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = err; size = _tmp; err = _tmp$1;
				return [size, err];
			}
			_tmp$2 = 1; _tmp$3 = $ifaceNil; size = _tmp$2; err = _tmp$3;
			return [size, err];
		/* } */ case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0; _tmp$5 = b.err; size = _tmp$4; err = _tmp$5;
			return [size, err];
		}
		n = b.Available();
		/* */ if (n < 4) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (n < 4) { */ case 4:
			_r$1 = b.flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			/* */ if (!($interfaceIsEqual(b.err, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(b.err, $ifaceNil))) { */ case 7:
				_tmp$6 = 0; _tmp$7 = b.err; size = _tmp$6; err = _tmp$7;
				return [size, err];
			/* } */ case 8:
			n = b.Available();
			/* */ if (n < 4) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (n < 4) { */ case 9:
				_r$2 = b.WriteString($encodeRune(r)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2; size = _tuple[0]; err = _tuple[1];
				return [size, err];
			/* } */ case 10:
		/* } */ case 5:
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size; _tmp$9 = $ifaceNil; size = _tmp$8; err = _tmp$9;
		return [size, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteRune }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, b, n, n$1, nn, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; n$1 = $f.n$1; nn = $f.nn; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		nn = 0;
		/* while (true) { */ case 1:
			/* if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = s.substring(n);
			_r = b.flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		return [nn, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err, err1, m, n, nr, ok, r, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err1 = $f.err1; m = $f.m; n = $f.n; nr = $f.nr; ok = $f.ok; r = $f.r; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		/* */ if (b.Buffered() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.Buffered() === 0) { */ case 1:
			_tuple = $assertType(b.wr, io.ReaderFrom, true); w = _tuple[0]; ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = w.ReadFrom(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r; n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			/* } */ case 4:
		/* } */ case 2:
		m = 0;
		/* while (true) { */ case 6:
			/* */ if (b.Available() === 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (b.Available() === 0) { */ case 8:
				_r$1 = b.flush(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err1 = _r$1;
				/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 11:
					_tmp = n; _tmp$1 = err1; n = _tmp; err = _tmp$1;
					return [n, err];
				/* } */ case 12:
			/* } */ case 9:
			nr = 0;
			/* while (true) { */ case 13:
				/* if (!(nr < 100)) { break; } */ if(!(nr < 100)) { $s = 14; continue; }
				_r$2 = r.Read($subslice(b.buf, b.n)); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2; m = _tuple$2[0]; err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 14; continue;
				}
				nr = nr + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			if (nr === 100) {
				_tmp$2 = n; _tmp$3 = io.ErrNoProgress; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* break; */ $s = 7; continue;
			}
		/* } */ $s = 6; continue; case 7:
		/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ($interfaceIsEqual(err, io.EOF)) { */ case 16:
			/* */ if (b.Available() === 0) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (b.Available() === 0) { */ case 18:
				_r$3 = b.flush(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 20; continue;
			/* } else { */ case 19:
				err = $ifaceNil;
			/* } */ case 20:
		/* } */ case 17:
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err1 = err1; $f.m = m; $f.n = n; $f.nr = nr; $f.ok = ok; $f.r = r; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "flush", name: "flush", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	Reader.init([{prop: "buf", name: "buf", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "rd", name: "rd", pkg: "bufio", typ: io.Reader, tag: ""}, {prop: "r", name: "r", pkg: "bufio", typ: $Int, tag: ""}, {prop: "w", name: "w", pkg: "bufio", typ: $Int, tag: ""}, {prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", pkg: "bufio", typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", pkg: "bufio", typ: $Int, tag: ""}]);
	Writer.init([{prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "buf", name: "buf", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "n", name: "n", pkg: "bufio", typ: $Int, tag: ""}, {prop: "wr", name: "wr", pkg: "bufio", typ: io.Writer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, TextMarshaler, TextUnmarshaler, sliceType;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", "TextUnmarshaler", "encoding", null);
	sliceType = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Inf, IsInf, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType([{prop: "uint32array", name: "uint32array", pkg: "math", typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", pkg: "math", typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", pkg: "math", typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr();
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, sliceType, sliceType$1, IsSurrogate, DecodeRune, EncodeRune, Encode, Decode;
	sliceType = $sliceType($Uint16);
	sliceType$1 = $sliceType($Int32);
	IsSurrogate = function(r) {
		var $ptr, r;
		return 55296 <= r && r < 57344;
	};
	$pkg.IsSurrogate = IsSurrogate;
	DecodeRune = function(r1, r2) {
		var $ptr, r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	EncodeRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, r, r1, r2;
		r1 = 0;
		r2 = 0;
		if (r < 65536 || r > 1114111 || IsSurrogate(r)) {
			_tmp = 65533; _tmp$1 = 65533; r1 = _tmp; r2 = _tmp$1;
			return [r1, r2];
		}
		r = r - (65536) >> 0;
		_tmp$2 = 55296 + (((r >> 10 >> 0)) & 1023) >> 0; _tmp$3 = 56320 + (r & 1023) >> 0; r1 = _tmp$2; r2 = _tmp$3;
		return [r1, r2];
	};
	$pkg.EncodeRune = EncodeRune;
	Encode = function(s) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tuple, a, n, r1, r2, s, v, v$1, x;
		n = s.$length;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v >= 65536) {
				n = n + (1) >> 0;
			}
			_i++;
		}
		a = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = s;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (v$1 < 0 || 55296 <= v$1 && v$1 < 57344 || v$1 > 1114111) {
				v$1 = 65533;
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (v$1 << 16 >>> 16));
				n = n + (1) >> 0;
			} else if (v$1 < 65536) {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (v$1 << 16 >>> 16));
				n = n + (1) >> 0;
			} else {
				_tuple = EncodeRune(v$1); r1 = _tuple[0]; r2 = _tuple[1];
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (r1 << 16 >>> 16));
				(x = n + 1 >> 0, ((x < 0 || x >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x] = (r2 << 16 >>> 16)));
				n = n + (2) >> 0;
			}
			_i$1++;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Encode = Encode;
	Decode = function(s) {
		var $ptr, a, i, n, r, s, x, x$1, x$2;
		a = $makeSlice(sliceType$1, s.$length);
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			r = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.$length && 56320 <= (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) && (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) < 57344) {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = DecodeRune((r >> 0), ((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$2])) >> 0)));
				i = i + (1) >> 0;
				n = n + (1) >> 0;
			} else if (55296 <= r && r < 57344) {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = 65533);
				n = n + (1) >> 0;
			} else {
				((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (r >> 0));
				n = n + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Decode = Decode;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, bytes, errors, js, sync, atomic, utf16, DummyError, DLLError, DLL, Proc, LazyDLL, LazyProc, Handle, Errno, SecurityAttributes, Overlapped, Filetime, Win32finddata, win32finddata1, ByHandleFileInformation, Win32FileAttributeData, reparseDataBuffer, sliceType, ptrType, arrayType, ptrType$1, arrayType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$2, sliceType$3, ptrType$6, ptrType$10, ptrType$11, ptrType$15, arrayType$2, ptrType$18, ptrType$19, ptrType$20, ptrType$27, sliceType$6, ptrType$28, arrayType$8, arrayType$9, arrayType$10, arrayType$11, arrayType$20, warningPrinted, lineBuffer, minusOne, errors$1, modkernel32, modadvapi32, modshell32, modmswsock, modcrypt32, modws2_32, moddnsapi, modiphlpapi, modsecur32, modnetapi32, moduserenv, procGetLastError, procLoadLibraryW, procFreeLibrary, procGetProcAddress, procGetVersion, procFormatMessageW, procExitProcess, procCreateFileW, procReadFile, procWriteFile, procSetFilePointer, procCloseHandle, procGetStdHandle, procFindFirstFileW, procFindNextFileW, procFindClose, procGetFileInformationByHandle, procGetCurrentDirectoryW, procSetCurrentDirectoryW, procCreateDirectoryW, procRemoveDirectoryW, procDeleteFileW, procMoveFileW, procGetComputerNameW, procSetEndOfFile, procGetSystemTimeAsFileTime, procGetTimeZoneInformation, procCreateIoCompletionPort, procGetQueuedCompletionStatus, procPostQueuedCompletionStatus, procCancelIo, procCancelIoEx, procCreateProcessW, procOpenProcess, procTerminateProcess, procGetExitCodeProcess, procGetStartupInfoW, procGetCurrentProcess, procGetProcessTimes, procDuplicateHandle, procWaitForSingleObject, procGetTempPathW, procCreatePipe, procGetFileType, procCryptAcquireContextW, procCryptReleaseContext, procCryptGenRandom, procGetEnvironmentStringsW, procFreeEnvironmentStringsW, procGetEnvironmentVariableW, procSetEnvironmentVariableW, procSetFileTime, procGetFileAttributesW, procSetFileAttributesW, procGetFileAttributesExW, procGetCommandLineW, procCommandLineToArgvW, procLocalFree, procSetHandleInformation, procFlushFileBuffers, procGetFullPathNameW, procGetLongPathNameW, procGetShortPathNameW, procCreateFileMappingW, procMapViewOfFile, procUnmapViewOfFile, procFlushViewOfFile, procVirtualLock, procVirtualUnlock, procTransmitFile, procReadDirectoryChangesW, procCertOpenSystemStoreW, procCertOpenStore, procCertEnumCertificatesInStore, procCertAddCertificateContextToStore, procCertCloseStore, procCertGetCertificateChain, procCertFreeCertificateChain, procCertCreateCertificateContext, procCertFreeCertificateContext, procCertVerifyCertificateChainPolicy, procRegOpenKeyExW, procRegCloseKey, procRegQueryInfoKeyW, procRegEnumKeyExW, procRegQueryValueExW, procGetCurrentProcessId, procGetConsoleMode, procWriteConsoleW, procReadConsoleW, procCreateToolhelp32Snapshot, procProcess32FirstW, procProcess32NextW, procDeviceIoControl, procCreateSymbolicLinkW, procCreateHardLinkW, procWSAStartup, procWSACleanup, procWSAIoctl, procsocket, procsetsockopt, procgetsockopt, procbind, procconnect, procgetsockname, procgetpeername, proclisten, procshutdown, procclosesocket, procAcceptEx, procGetAcceptExSockaddrs, procWSARecv, procWSASend, procWSARecvFrom, procWSASendTo, procgethostbyname, procgetservbyname, procntohs, procgetprotobyname, procDnsQuery_W, procDnsRecordListFree, procDnsNameCompare_W, procGetAddrInfoW, procFreeAddrInfoW, procGetIfEntry, procGetAdaptersInfo, procSetFileCompletionNotificationModes, procWSAEnumProtocolsW, procTranslateNameW, procGetUserNameExW, procNetUserGetInfo, procNetGetJoinInformation, procNetApiBufferFree, procLookupAccountSidW, procLookupAccountNameW, procConvertSidToStringSidW, procConvertStringSidToSidW, procGetLengthSid, procCopySid, procOpenProcessToken, procGetTokenInformation, procGetUserProfileDirectoryW, init, printWarning, printToConsole, use, Syscall, Syscall6, Syscall9, Syscall12, Syscall15, getprocaddress, getStdHandle, GetConsoleMode, WriteFile, GetCommandLine, CommandLineToArgv, Getenv, NewLazyDLL, FullPath, itoa, uitoa, ByteSliceFromString, BytePtrFromString, StringToUTF16, UTF16FromString, UTF16ToString, StringToUTF16Ptr, UTF16PtrFromString, langid, Read, Write, Seek, Ftruncate, Fsync, FindNextFile, Fchdir, Fchmod, Fchown, Readlink, FreeLibrary, FormatMessage, CreateFile, ReadFile, SetFilePointer, CloseHandle, findNextFile1, FindClose, GetFileInformationByHandle, SetEndOfFile, GetFileType, GetFileAttributesEx, LocalFree, FlushFileBuffers, GetFullPathName, WriteConsole, ReadConsole, DeviceIoControl, copyFindData;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	utf16 = $packages["unicode/utf16"];
	DummyError = $pkg.DummyError = $newType(0, $kindStruct, "syscall.DummyError", "DummyError", "syscall", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	DLLError = $pkg.DLLError = $newType(0, $kindStruct, "syscall.DLLError", "DLLError", "syscall", function(Err_, ObjName_, Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = $ifaceNil;
			this.ObjName = "";
			this.Msg = "";
			return;
		}
		this.Err = Err_;
		this.ObjName = ObjName_;
		this.Msg = Msg_;
	});
	DLL = $pkg.DLL = $newType(0, $kindStruct, "syscall.DLL", "DLL", "syscall", function(Name_, Handle_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Handle = 0;
			return;
		}
		this.Name = Name_;
		this.Handle = Handle_;
	});
	Proc = $pkg.Proc = $newType(0, $kindStruct, "syscall.Proc", "Proc", "syscall", function(Dll_, Name_, addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dll = ptrType$3.nil;
			this.Name = "";
			this.addr = 0;
			return;
		}
		this.Dll = Dll_;
		this.Name = Name_;
		this.addr = addr_;
	});
	LazyDLL = $pkg.LazyDLL = $newType(0, $kindStruct, "syscall.LazyDLL", "LazyDLL", "syscall", function(mu_, dll_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new sync.Mutex.ptr();
			this.dll = ptrType$3.nil;
			this.Name = "";
			return;
		}
		this.mu = mu_;
		this.dll = dll_;
		this.Name = Name_;
	});
	LazyProc = $pkg.LazyProc = $newType(0, $kindStruct, "syscall.LazyProc", "LazyProc", "syscall", function(mu_, Name_, l_, proc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new sync.Mutex.ptr();
			this.Name = "";
			this.l = ptrType$5.nil;
			this.proc = ptrType$4.nil;
			return;
		}
		this.mu = mu_;
		this.Name = Name_;
		this.l = l_;
		this.proc = proc_;
	});
	Handle = $pkg.Handle = $newType(4, $kindUintptr, "syscall.Handle", "Handle", "syscall", null);
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	SecurityAttributes = $pkg.SecurityAttributes = $newType(0, $kindStruct, "syscall.SecurityAttributes", "SecurityAttributes", "syscall", function(Length_, SecurityDescriptor_, InheritHandle_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Length = 0;
			this.SecurityDescriptor = 0;
			this.InheritHandle = 0;
			return;
		}
		this.Length = Length_;
		this.SecurityDescriptor = SecurityDescriptor_;
		this.InheritHandle = InheritHandle_;
	});
	Overlapped = $pkg.Overlapped = $newType(0, $kindStruct, "syscall.Overlapped", "Overlapped", "syscall", function(Internal_, InternalHigh_, Offset_, OffsetHigh_, HEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Internal = 0;
			this.InternalHigh = 0;
			this.Offset = 0;
			this.OffsetHigh = 0;
			this.HEvent = 0;
			return;
		}
		this.Internal = Internal_;
		this.InternalHigh = InternalHigh_;
		this.Offset = Offset_;
		this.OffsetHigh = OffsetHigh_;
		this.HEvent = HEvent_;
	});
	Filetime = $pkg.Filetime = $newType(0, $kindStruct, "syscall.Filetime", "Filetime", "syscall", function(LowDateTime_, HighDateTime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LowDateTime = 0;
			this.HighDateTime = 0;
			return;
		}
		this.LowDateTime = LowDateTime_;
		this.HighDateTime = HighDateTime_;
	});
	Win32finddata = $pkg.Win32finddata = $newType(0, $kindStruct, "syscall.Win32finddata", "Win32finddata", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr();
			this.LastAccessTime = new Filetime.ptr();
			this.LastWriteTime = new Filetime.ptr();
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			this.Reserved0 = 0;
			this.Reserved1 = 0;
			this.FileName = arrayType$8.zero();
			this.AlternateFileName = arrayType$9.zero();
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
		this.Reserved0 = Reserved0_;
		this.Reserved1 = Reserved1_;
		this.FileName = FileName_;
		this.AlternateFileName = AlternateFileName_;
	});
	win32finddata1 = $pkg.win32finddata1 = $newType(0, $kindStruct, "syscall.win32finddata1", "win32finddata1", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr();
			this.LastAccessTime = new Filetime.ptr();
			this.LastWriteTime = new Filetime.ptr();
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			this.Reserved0 = 0;
			this.Reserved1 = 0;
			this.FileName = arrayType$10.zero();
			this.AlternateFileName = arrayType$11.zero();
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
		this.Reserved0 = Reserved0_;
		this.Reserved1 = Reserved1_;
		this.FileName = FileName_;
		this.AlternateFileName = AlternateFileName_;
	});
	ByHandleFileInformation = $pkg.ByHandleFileInformation = $newType(0, $kindStruct, "syscall.ByHandleFileInformation", "ByHandleFileInformation", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, VolumeSerialNumber_, FileSizeHigh_, FileSizeLow_, NumberOfLinks_, FileIndexHigh_, FileIndexLow_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr();
			this.LastAccessTime = new Filetime.ptr();
			this.LastWriteTime = new Filetime.ptr();
			this.VolumeSerialNumber = 0;
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			this.NumberOfLinks = 0;
			this.FileIndexHigh = 0;
			this.FileIndexLow = 0;
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.VolumeSerialNumber = VolumeSerialNumber_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
		this.NumberOfLinks = NumberOfLinks_;
		this.FileIndexHigh = FileIndexHigh_;
		this.FileIndexLow = FileIndexLow_;
	});
	Win32FileAttributeData = $pkg.Win32FileAttributeData = $newType(0, $kindStruct, "syscall.Win32FileAttributeData", "Win32FileAttributeData", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr();
			this.LastAccessTime = new Filetime.ptr();
			this.LastWriteTime = new Filetime.ptr();
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
	});
	reparseDataBuffer = $pkg.reparseDataBuffer = $newType(0, $kindStruct, "syscall.reparseDataBuffer", "reparseDataBuffer", "syscall", function(ReparseTag_, ReparseDataLength_, Reserved_, SubstituteNameOffset_, SubstituteNameLength_, PrintNameOffset_, PrintNameLength_, Flags_, PathBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ReparseTag = 0;
			this.ReparseDataLength = 0;
			this.Reserved = 0;
			this.SubstituteNameOffset = 0;
			this.SubstituteNameLength = 0;
			this.PrintNameOffset = 0;
			this.PrintNameLength = 0;
			this.Flags = 0;
			this.PathBuffer = arrayType$20.zero();
			return;
		}
		this.ReparseTag = ReparseTag_;
		this.ReparseDataLength = ReparseDataLength_;
		this.Reserved = Reserved_;
		this.SubstituteNameOffset = SubstituteNameOffset_;
		this.SubstituteNameLength = SubstituteNameLength_;
		this.PrintNameOffset = PrintNameOffset_;
		this.PrintNameLength = PrintNameLength_;
		this.Flags = Flags_;
		this.PathBuffer = PathBuffer_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType($Uint16);
	arrayType = $arrayType($Uint16, 8192);
	ptrType$1 = $ptrType(arrayType);
	arrayType$1 = $arrayType(ptrType$1, 8192);
	ptrType$2 = $ptrType(arrayType$1);
	ptrType$3 = $ptrType(DLL);
	ptrType$4 = $ptrType(Proc);
	ptrType$5 = $ptrType(LazyDLL);
	sliceType$2 = $sliceType($Uint16);
	sliceType$3 = $sliceType($Int32);
	ptrType$6 = $ptrType(ptrType);
	ptrType$10 = $ptrType(SecurityAttributes);
	ptrType$11 = $ptrType($Uint32);
	ptrType$15 = $ptrType($Uint8);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$18 = $ptrType(Overlapped);
	ptrType$19 = $ptrType($Int32);
	ptrType$20 = $ptrType(Filetime);
	ptrType$27 = $ptrType(DLLError);
	sliceType$6 = $sliceType($Uintptr);
	ptrType$28 = $ptrType(LazyProc);
	arrayType$8 = $arrayType($Uint16, 259);
	arrayType$9 = $arrayType($Uint16, 13);
	arrayType$10 = $arrayType($Uint16, 260);
	arrayType$11 = $arrayType($Uint16, 14);
	arrayType$20 = $arrayType($Uint16, 1);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			console.log("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	Syscall = function(trap, nargs, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a2, a3, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, nargs, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a2, a3, a4, a5, a6, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	Syscall9 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a2, a3, a4, a5, a6, a7, a8, a9, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall9 = Syscall9;
	Syscall12 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a10, a11, a12, a2, a3, a4, a5, a6, a7, a8, a9, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall12 = Syscall12;
	Syscall15 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a10, a11, a12, a13, a14, a15, a2, a3, a4, a5, a6, a7, a8, a9, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall15 = Syscall15;
	getprocaddress = function(handle, procname) {
		var $ptr, _tmp, _tmp$1, err, handle, proc, procname;
		proc = 0;
		err = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 536870913; proc = _tmp; err = _tmp$1;
		return [proc, err];
	};
	LazyDLL.ptr.prototype.Load = function() {
		var $ptr, d;
		d = this;
		return new DLLError.ptr($ifaceNil, "", "system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
	};
	LazyDLL.prototype.Load = function() { return this.$val.Load(); };
	LazyProc.ptr.prototype.Find = function() {
		var $ptr, p;
		p = this;
		return new DLLError.ptr($ifaceNil, "", "system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
	};
	LazyProc.prototype.Find = function() { return this.$val.Find(); };
	getStdHandle = function(h) {
		var $ptr, fd, h;
		fd = 0;
		if (h === -11) {
			fd = 1;
			return fd;
		}
		if (h === -12) {
			fd = 2;
			return fd;
		}
		fd = 0;
		return fd;
	};
	GetConsoleMode = function(console, mode) {
		var $ptr, console, err, mode, x;
		err = $ifaceNil;
		err = (x = new DummyError.ptr(), new x.constructor.elem(x));
		return err;
	};
	$pkg.GetConsoleMode = GetConsoleMode;
	WriteFile = function(handle, buf, done, overlapped) {
		var $ptr, buf, done, err, handle, overlapped;
		err = $ifaceNil;
		if ((handle === 1) || (handle === 2)) {
			printToConsole(buf);
			done.$set((buf.$length >>> 0));
			err = $ifaceNil;
			return err;
		}
		printWarning();
		err = $ifaceNil;
		return err;
	};
	$pkg.WriteFile = WriteFile;
	GetCommandLine = function() {
		var $ptr, cmd;
		cmd = ptrType.nil;
		return cmd;
	};
	$pkg.GetCommandLine = GetCommandLine;
	CommandLineToArgv = function(cmd, argc) {
		var $ptr, _tmp, _tmp$1, argc, argv, cmd, err, x;
		argv = ptrType$2.nil;
		err = $ifaceNil;
		_tmp = ptrType$2.nil; _tmp$1 = (x = new DummyError.ptr(), new x.constructor.elem(x)); argv = _tmp; err = _tmp$1;
		return [argv, err];
	};
	$pkg.CommandLineToArgv = CommandLineToArgv;
	Getenv = function(key) {
		var $ptr, _tmp, _tmp$1, found, key, value;
		value = "";
		found = false;
		_tmp = ""; _tmp$1 = false; value = _tmp; found = _tmp$1;
		return [value, found];
	};
	$pkg.Getenv = Getenv;
	DummyError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = $clone(this, DummyError);
		return "";
	};
	DummyError.prototype.Error = function() { return this.$val.Error(); };
	DLLError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.Msg;
	};
	DLLError.prototype.Error = function() { return this.$val.Error(); };
	DLL.ptr.prototype.FindProc = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, a, d, e, err, name, namep, p, proc;
		proc = ptrType$4.nil;
		err = $ifaceNil;
		d = this;
		_tuple = BytePtrFromString(name); namep = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$4.nil; _tmp$1 = err; proc = _tmp; err = _tmp$1;
			return [proc, err];
		}
		_tuple$1 = getprocaddress((d.Handle >>> 0), namep); a = _tuple$1[0]; e = _tuple$1[1];
		use(namep);
		if (!((e === 0))) {
			_tmp$2 = ptrType$4.nil; _tmp$3 = new DLLError.ptr(new Errno(e), name, "Failed to find " + name + " procedure in " + d.Name + ": " + new Errno(e).Error()); proc = _tmp$2; err = _tmp$3;
			return [proc, err];
		}
		p = new Proc.ptr(d, name, a);
		_tmp$4 = p; _tmp$5 = $ifaceNil; proc = _tmp$4; err = _tmp$5;
		return [proc, err];
	};
	DLL.prototype.FindProc = function(name) { return this.$val.FindProc(name); };
	DLL.ptr.prototype.MustFindProc = function(name) {
		var $ptr, _tuple, d, e, name, p;
		d = this;
		_tuple = d.FindProc(name); p = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
		return p;
	};
	DLL.prototype.MustFindProc = function(name) { return this.$val.MustFindProc(name); };
	DLL.ptr.prototype.Release = function() {
		var $ptr, d, err;
		err = $ifaceNil;
		d = this;
		err = FreeLibrary(d.Handle);
		return err;
	};
	DLL.prototype.Release = function() { return this.$val.Release(); };
	Proc.ptr.prototype.Addr = function() {
		var $ptr, p;
		p = this;
		return p.addr;
	};
	Proc.prototype.Addr = function() { return this.$val.Addr(); };
	Proc.ptr.prototype.Call = function(a) {
		var $ptr, _ref, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, lastErr, p, r1, r2;
		r1 = 0;
		r2 = 0;
		lastErr = $ifaceNil;
		p = this;
		_ref = a.$length;
		if (_ref === 0) {
			_tuple = Syscall(p.Addr(), (a.$length >>> 0), 0, 0, 0); r1 = _tuple[0]; r2 = _tuple[1]; lastErr = new Errno(_tuple[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 1) {
			_tuple$1 = Syscall(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), 0, 0); r1 = _tuple$1[0]; r2 = _tuple$1[1]; lastErr = new Errno(_tuple$1[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 2) {
			_tuple$2 = Syscall(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), 0); r1 = _tuple$2[0]; r2 = _tuple$2[1]; lastErr = new Errno(_tuple$2[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 3) {
			_tuple$3 = Syscall(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2])); r1 = _tuple$3[0]; r2 = _tuple$3[1]; lastErr = new Errno(_tuple$3[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 4) {
			_tuple$4 = Syscall6(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), 0, 0); r1 = _tuple$4[0]; r2 = _tuple$4[1]; lastErr = new Errno(_tuple$4[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 5) {
			_tuple$5 = Syscall6(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), 0); r1 = _tuple$5[0]; r2 = _tuple$5[1]; lastErr = new Errno(_tuple$5[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 6) {
			_tuple$6 = Syscall6(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5])); r1 = _tuple$6[0]; r2 = _tuple$6[1]; lastErr = new Errno(_tuple$6[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 7) {
			_tuple$7 = Syscall9(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), 0, 0); r1 = _tuple$7[0]; r2 = _tuple$7[1]; lastErr = new Errno(_tuple$7[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 8) {
			_tuple$8 = Syscall9(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), 0); r1 = _tuple$8[0]; r2 = _tuple$8[1]; lastErr = new Errno(_tuple$8[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 9) {
			_tuple$9 = Syscall9(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8])); r1 = _tuple$9[0]; r2 = _tuple$9[1]; lastErr = new Errno(_tuple$9[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 10) {
			_tuple$10 = Syscall12(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), (9 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), 0, 0); r1 = _tuple$10[0]; r2 = _tuple$10[1]; lastErr = new Errno(_tuple$10[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 11) {
			_tuple$11 = Syscall12(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), (9 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), (10 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), 0); r1 = _tuple$11[0]; r2 = _tuple$11[1]; lastErr = new Errno(_tuple$11[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 12) {
			_tuple$12 = Syscall12(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), (9 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), (10 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), (11 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11])); r1 = _tuple$12[0]; r2 = _tuple$12[1]; lastErr = new Errno(_tuple$12[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 13) {
			_tuple$13 = Syscall15(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), (9 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), (10 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), (11 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11]), (12 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 12]), 0, 0); r1 = _tuple$13[0]; r2 = _tuple$13[1]; lastErr = new Errno(_tuple$13[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 14) {
			_tuple$14 = Syscall15(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), (9 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), (10 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), (11 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11]), (12 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 12]), (13 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 13]), 0); r1 = _tuple$14[0]; r2 = _tuple$14[1]; lastErr = new Errno(_tuple$14[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 15) {
			_tuple$15 = Syscall15(p.Addr(), (a.$length >>> 0), (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), (1 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), (2 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), (3 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), (4 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), (5 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), (6 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), (7 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), (8 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), (9 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), (10 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), (11 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11]), (12 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 12]), (13 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 13]), (14 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 14])); r1 = _tuple$15[0]; r2 = _tuple$15[1]; lastErr = new Errno(_tuple$15[2]);
			return [r1, r2, lastErr];
		} else {
			$panic(new $String("Call " + p.Name + " with too many arguments " + itoa(a.$length) + "."));
		}
		return [r1, r2, lastErr];
	};
	Proc.prototype.Call = function(a) { return this.$val.Call(a); };
	LazyDLL.ptr.prototype.mustLoad = function() {
		var $ptr, d, e;
		d = this;
		e = d.Load();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
	};
	LazyDLL.prototype.mustLoad = function() { return this.$val.mustLoad(); };
	LazyDLL.ptr.prototype.Handle = function() {
		var $ptr, d;
		d = this;
		d.mustLoad();
		return (d.dll.Handle >>> 0);
	};
	LazyDLL.prototype.Handle = function() { return this.$val.Handle(); };
	LazyDLL.ptr.prototype.NewProc = function(name) {
		var $ptr, d, name;
		d = this;
		return new LazyProc.ptr(new sync.Mutex.ptr(), name, d, ptrType$4.nil);
	};
	LazyDLL.prototype.NewProc = function(name) { return this.$val.NewProc(name); };
	NewLazyDLL = function(name) {
		var $ptr, name;
		return new LazyDLL.ptr(new sync.Mutex.ptr(), ptrType$3.nil, name);
	};
	$pkg.NewLazyDLL = NewLazyDLL;
	LazyProc.ptr.prototype.mustFind = function() {
		var $ptr, e, p;
		p = this;
		e = p.Find();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
	};
	LazyProc.prototype.mustFind = function() { return this.$val.mustFind(); };
	LazyProc.ptr.prototype.Addr = function() {
		var $ptr, p;
		p = this;
		p.mustFind();
		return p.proc.Addr();
	};
	LazyProc.prototype.Addr = function() { return this.$val.Addr(); };
	LazyProc.ptr.prototype.Call = function(a) {
		var $ptr, _tuple, a, lastErr, p, r1, r2;
		r1 = 0;
		r2 = 0;
		lastErr = $ifaceNil;
		p = this;
		p.mustFind();
		_tuple = p.proc.Call(a); r1 = _tuple[0]; r2 = _tuple[1]; lastErr = _tuple[2];
		return [r1, r2, lastErr];
	};
	LazyProc.prototype.Call = function(a) { return this.$val.Call(a); };
	FullPath = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, buf, err, n, name, p, path;
		path = "";
		err = $ifaceNil;
		_tuple = UTF16PtrFromString(name); p = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ""; _tmp$1 = err; path = _tmp; err = _tmp$1;
			return [path, err];
		}
		buf = $makeSlice(sliceType$2, 100);
		_tuple$1 = GetFullPathName(p, (buf.$length >>> 0), $indexPtr(buf.$array, buf.$offset + 0, ptrType), ptrType$6.nil); n = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ""; _tmp$3 = err; path = _tmp$2; err = _tmp$3;
			return [path, err];
		}
		if (n > (buf.$length >>> 0)) {
			buf = $makeSlice(sliceType$2, n);
			_tuple$2 = GetFullPathName(p, (buf.$length >>> 0), $indexPtr(buf.$array, buf.$offset + 0, ptrType), ptrType$6.nil); n = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = ""; _tmp$5 = err; path = _tmp$4; err = _tmp$5;
				return [path, err];
			}
			if (n > (buf.$length >>> 0)) {
				_tmp$6 = ""; _tmp$7 = new Errno(536870951); path = _tmp$6; err = _tmp$7;
				return [path, err];
			}
		}
		_tmp$8 = UTF16ToString($subslice(buf, 0, n)); _tmp$9 = $ifaceNil; path = _tmp$8; err = _tmp$9;
		return [path, err];
	};
	$pkg.FullPath = FullPath;
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	ByteSliceFromString = function(s) {
		var $ptr, a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(536870951)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	$pkg.ByteSliceFromString = ByteSliceFromString;
	BytePtrFromString = function(s) {
		var $ptr, _tuple, a, err, s;
		_tuple = ByteSliceFromString(s); a = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$15.nil, err];
		}
		return [$indexPtr(a.$array, a.$offset + 0, ptrType$15), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	StringToUTF16 = function(s) {
		var $ptr, _tuple, a, err, s;
		_tuple = UTF16FromString(s); a = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("syscall: string with NUL passed to StringToUTF16"));
		}
		return a;
	};
	$pkg.StringToUTF16 = StringToUTF16;
	UTF16FromString = function(s) {
		var $ptr, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType$2.nil, new Errno(536870951)];
			}
			i = i + (1) >> 0;
		}
		return [utf16.Encode(new sliceType$3($stringToRunes(s + "\x00"))), $ifaceNil];
	};
	$pkg.UTF16FromString = UTF16FromString;
	UTF16ToString = function(s) {
		var $ptr, _i, _ref, i, s, v;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v === 0) {
				s = $subslice(s, 0, i);
				break;
			}
			_i++;
		}
		return $runesToString(utf16.Decode(s));
	};
	$pkg.UTF16ToString = UTF16ToString;
	StringToUTF16Ptr = function(s) {
		var $ptr, s, x;
		return (x = StringToUTF16(s), $indexPtr(x.$array, x.$offset + 0, ptrType));
	};
	$pkg.StringToUTF16Ptr = StringToUTF16Ptr;
	UTF16PtrFromString = function(s) {
		var $ptr, _tuple, a, err, s;
		_tuple = UTF16FromString(s); a = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		return [$indexPtr(a.$array, a.$offset + 0, ptrType), $ifaceNil];
	};
	$pkg.UTF16PtrFromString = UTF16PtrFromString;
	langid = function(pri, sub) {
		var $ptr, pri, sub;
		return (((sub >>> 0) << 10 >>> 0) | (pri >>> 0)) >>> 0;
	};
	Errno.prototype.Error = function() {
		var $ptr, _tuple, _tuple$1, b, e, err, flags, idx, n, x, x$1;
		e = this.$val;
		idx = ((e - 536870912 >>> 0) >> 0);
		if (0 <= idx && idx < 131) {
			return ((idx < 0 || idx >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[idx]);
		}
		flags = 12800;
		b = $makeSlice(sliceType$2, 300);
		_tuple = FormatMessage(flags, 0, (e >>> 0), langid(9, 1), b, ptrType$15.nil); n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple$1 = FormatMessage(flags, 0, (e >>> 0), 0, b, ptrType$15.nil); n = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return "winapi error #" + itoa((e >> 0));
			}
		}
		while (true) {
			if (!(n > 0 && (((x = n - 1 >>> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x])) === 10) || ((x$1 = n - 1 >>> 0, ((x$1 < 0 || x$1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$1])) === 13)))) { break; }
			n = n - (1) >>> 0;
		}
		return $runesToString(utf16.Decode($subslice(b, 0, n)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 536870950) || (e === 536870971) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 536870918) || (e === 536871039) || (e === 536871033);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Read = function(fd, p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, done, done_ptr, e, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		done = 0;
		e = ReadFile(fd, p, (done_ptr || (done_ptr = new ptrType$11(function() { return done; }, function($v) { done = $v; }))), ptrType$18.nil);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, new Errno(109))) {
				_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0; _tmp$3 = e; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		_tmp$4 = (done >> 0); _tmp$5 = $ifaceNil; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, done, done_ptr, e, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		done = 0;
		e = WriteFile(fd, p, (done_ptr || (done_ptr = new ptrType$11(function() { return done; }, function($v) { done = $v; }))), ptrType$18.nil);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tmp$2 = (done >> 0); _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	$pkg.Write = Write;
	Seek = function(fd, offset, whence) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, fd, ft, hi, hi_ptr, lo, newoffset, offset, rlo, w, whence, x, x$1, x$2;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		w = 0;
		_ref = whence;
		if (_ref === 0) {
			w = 0;
		} else if (_ref === 1) {
			w = 1;
		} else if (_ref === 2) {
			w = 2;
		}
		hi = ((x = $shiftRightInt64(offset, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		lo = ((offset.$low + ((offset.$high >> 31) * 4294967296)) >> 0);
		_tuple = GetFileType(fd); ft = _tuple[0];
		if (ft === 3) {
			_tmp = new $Int64(0, 0); _tmp$1 = new Errno(536871015); newoffset = _tmp; err = _tmp$1;
			return [newoffset, err];
		}
		_tuple$1 = SetFilePointer(fd, lo, (hi_ptr || (hi_ptr = new ptrType$19(function() { return hi; }, function($v) { hi = $v; }))), w); rlo = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = e; newoffset = _tmp$2; err = _tmp$3;
			return [newoffset, err];
		}
		_tmp$4 = (x$1 = $shiftLeft64(new $Int64(0, hi), 32), x$2 = new $Int64(0, rlo), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)); _tmp$5 = $ifaceNil; newoffset = _tmp$4; err = _tmp$5;
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, _tuple$1, curoffset, e, err, fd, length, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		_tuple = Seek(fd, new $Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		$deferred.push([Seek, [fd, curoffset, 0]]);
		_tuple$1 = Seek(fd, length, 0); e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		e = SetEndOfFile(fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } }
	};
	$pkg.Ftruncate = Ftruncate;
	Fsync = function(fd) {
		var $ptr, err, fd;
		err = $ifaceNil;
		err = FlushFileBuffers(fd);
		return err;
	};
	$pkg.Fsync = Fsync;
	FindNextFile = function(handle, data) {
		var $ptr, data, data1, err, handle;
		err = $ifaceNil;
		data1 = $clone(new win32finddata1.ptr(), win32finddata1);
		err = findNextFile1(handle, data1);
		if ($interfaceIsEqual(err, $ifaceNil)) {
			copyFindData(data, data1);
		}
		return err;
	};
	$pkg.FindNextFile = FindNextFile;
	Fchdir = function(fd) {
		var $ptr, err, fd;
		err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, err, fd, mode;
		err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var $ptr, err, fd, gid, uid;
		err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	$pkg.Fchown = Fchown;
	Readlink = function(path, buf) {
		var $ptr, _array, _q, _struct, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _view, buf, bytesReturned, bytesReturned_ptr, err, fd, n, path, rdb, rdbbuf, s, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		n = 0;
		err = $ifaceNil;
		_tuple = CreateFile(StringToUTF16Ptr(path), 2147483648, 0, ptrType$10.nil, 3, 35651584, 0); fd = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = -1; _tmp$1 = err; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([CloseHandle, [fd]]);
		rdbbuf = $makeSlice(sliceType, 16384);
		bytesReturned = 0;
		err = DeviceIoControl(fd, 589992, ptrType$15.nil, 0, $indexPtr(rdbbuf.$array, rdbbuf.$offset + 0, ptrType$15), (rdbbuf.$length >>> 0), (bytesReturned_ptr || (bytesReturned_ptr = new ptrType$11(function() { return bytesReturned; }, function($v) { bytesReturned = $v; }))), ptrType$18.nil);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = -1; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		rdb = (_array = $sliceToArray(rdbbuf), _struct = new reparseDataBuffer.ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.ReparseTag = _view.getUint32(0, true), _struct.ReparseDataLength = _view.getUint16(4, true), _struct.Reserved = _view.getUint16(6, true), _struct.SubstituteNameOffset = _view.getUint16(8, true), _struct.SubstituteNameLength = _view.getUint16(10, true), _struct.PrintNameOffset = _view.getUint16(12, true), _struct.PrintNameLength = _view.getUint16(14, true), _struct.Flags = _view.getUint32(16, true), _struct.PathBuffer = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct);
		if ((bytesReturned >>> 0) < 22 || !((rdb.ReparseTag === 2684354572))) {
			_tmp$4 = -1; _tmp$5 = new Errno(2); n = _tmp$4; err = _tmp$5;
			return [n, err];
		}
		s = UTF16ToString($subslice(new sliceType$2($sliceToArray(new sliceType(rdb.PathBuffer))), 0, (_q = rdb.PrintNameLength / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))));
		n = $copySlice(buf, new sliceType($stringToBytes(s)));
		_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } }
	};
	$pkg.Readlink = Readlink;
	FreeLibrary = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procFreeLibrary.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.FreeLibrary = FreeLibrary;
	FormatMessage = function(flags, msgsrc, msgid, langid$1, buf, args) {
		var $ptr, _p0, _tuple, args, buf, e1, err, flags, langid$1, msgid, msgsrc, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = ptrType.nil;
		if (buf.$length > 0) {
			_p0 = $indexPtr(buf.$array, buf.$offset + 0, ptrType);
		}
		_tuple = Syscall9(procFormatMessageW.Addr(), 7, (flags >>> 0), (msgsrc >>> 0), (msgid >>> 0), (langid$1 >>> 0), _p0, (buf.$length >>> 0), args, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	$pkg.FormatMessage = FormatMessage;
	CreateFile = function(name, access, mode, sa, createmode, attrs, templatefile) {
		var $ptr, _array, _struct, _tuple, _view, access, attrs, createmode, e1, err, handle, mode, name, r0, sa, templatefile;
		handle = 0;
		err = $ifaceNil;
		_array = new Uint8Array(12);
		_tuple = Syscall9(procCreateFileW.Addr(), 7, name, (access >>> 0), (mode >>> 0), _array, (createmode >>> 0), (attrs >>> 0), (templatefile >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = sa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Length = _view.getUint32(0, true), _struct.SecurityDescriptor = _view.getUintptr(4, true), _struct.InheritHandle = _view.getUint32(8, true);
		handle = (r0 >>> 0);
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	$pkg.CreateFile = CreateFile;
	ReadFile = function(handle, buf, done, overlapped) {
		var $ptr, _array, _p0, _struct, _tuple, _view, buf, done, e1, err, handle, overlapped, r1;
		err = $ifaceNil;
		_p0 = ptrType$15.nil;
		if (buf.$length > 0) {
			_p0 = $indexPtr(buf.$array, buf.$offset + 0, ptrType$15);
		}
		_array = new Uint8Array(20);
		_tuple = Syscall6(procReadFile.Addr(), 5, (handle >>> 0), _p0, (buf.$length >>> 0), done, _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.ReadFile = ReadFile;
	SetFilePointer = function(handle, lowoffset, highoffsetptr, whence) {
		var $ptr, _tuple, e1, err, handle, highoffsetptr, lowoffset, newlowoffset, r0, whence;
		newlowoffset = 0;
		err = $ifaceNil;
		_tuple = Syscall6(procSetFilePointer.Addr(), 4, (handle >>> 0), (lowoffset >>> 0), highoffsetptr, (whence >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		newlowoffset = (r0 >>> 0);
		if (newlowoffset === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [newlowoffset, err];
	};
	$pkg.SetFilePointer = SetFilePointer;
	CloseHandle = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procCloseHandle.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.CloseHandle = CloseHandle;
	findNextFile1 = function(handle, data) {
		var $ptr, _array, _struct, _tuple, _view, data, e1, err, handle, r1;
		err = $ifaceNil;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindNextFileW.Addr(), 2, (handle >>> 0), _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 564, _array.buffer.byteLength));
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FindClose = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procFindClose.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.FindClose = FindClose;
	GetFileInformationByHandle = function(handle, data) {
		var $ptr, _array, _struct, _tuple, _view, data, e1, err, handle, r1;
		err = $ifaceNil;
		_array = new Uint8Array(52);
		_tuple = Syscall(procGetFileInformationByHandle.Addr(), 2, (handle >>> 0), _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.VolumeSerialNumber = _view.getUint32(28, true), _struct.FileSizeHigh = _view.getUint32(32, true), _struct.FileSizeLow = _view.getUint32(36, true), _struct.NumberOfLinks = _view.getUint32(40, true), _struct.FileIndexHigh = _view.getUint32(44, true), _struct.FileIndexLow = _view.getUint32(48, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.GetFileInformationByHandle = GetFileInformationByHandle;
	SetEndOfFile = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procSetEndOfFile.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.SetEndOfFile = SetEndOfFile;
	GetFileType = function(filehandle) {
		var $ptr, _tuple, e1, err, filehandle, n, r0;
		n = 0;
		err = $ifaceNil;
		_tuple = Syscall(procGetFileType.Addr(), 1, (filehandle >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	$pkg.GetFileType = GetFileType;
	GetFileAttributesEx = function(name, level, info) {
		var $ptr, _tuple, e1, err, info, level, name, r1;
		err = $ifaceNil;
		_tuple = Syscall(procGetFileAttributesExW.Addr(), 3, name, (level >>> 0), info); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.GetFileAttributesEx = GetFileAttributesEx;
	LocalFree = function(hmem) {
		var $ptr, _tuple, e1, err, handle, hmem, r0;
		handle = 0;
		err = $ifaceNil;
		_tuple = Syscall(procLocalFree.Addr(), 1, (hmem >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		handle = (r0 >>> 0);
		if (!((handle === 0))) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	$pkg.LocalFree = LocalFree;
	FlushFileBuffers = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procFlushFileBuffers.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.FlushFileBuffers = FlushFileBuffers;
	GetFullPathName = function(path, buflen, buf, fname) {
		var $ptr, _tuple, buf, buflen, e1, err, fname, n, path, r0;
		n = 0;
		err = $ifaceNil;
		_tuple = Syscall6(procGetFullPathNameW.Addr(), 4, path, (buflen >>> 0), buf, fname, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	$pkg.GetFullPathName = GetFullPathName;
	WriteConsole = function(console, buf, towrite, written, reserved) {
		var $ptr, _tuple, buf, console, e1, err, r1, reserved, towrite, written;
		err = $ifaceNil;
		_tuple = Syscall6(procWriteConsoleW.Addr(), 5, (console >>> 0), buf, (towrite >>> 0), written, reserved, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.WriteConsole = WriteConsole;
	ReadConsole = function(console, buf, toread, read, inputControl) {
		var $ptr, _tuple, buf, console, e1, err, inputControl, r1, read, toread;
		err = $ifaceNil;
		_tuple = Syscall6(procReadConsoleW.Addr(), 5, (console >>> 0), buf, (toread >>> 0), read, inputControl, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.ReadConsole = ReadConsole;
	DeviceIoControl = function(handle, ioControlCode, inBuffer, inBufferSize, outBuffer, outBufferSize, bytesReturned, overlapped) {
		var $ptr, _array, _struct, _tuple, _view, bytesReturned, e1, err, handle, inBuffer, inBufferSize, ioControlCode, outBuffer, outBufferSize, overlapped, r1;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		_tuple = Syscall9(procDeviceIoControl.Addr(), 8, (handle >>> 0), (ioControlCode >>> 0), inBuffer, (inBufferSize >>> 0), outBuffer, (outBufferSize >>> 0), bytesReturned, _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.DeviceIoControl = DeviceIoControl;
	Filetime.ptr.prototype.Nanoseconds = function() {
		var $ptr, ft, nsec, x, x$1, x$2;
		ft = this;
		nsec = (x = $shiftLeft64(new $Int64(0, ft.HighDateTime), 32), x$1 = new $Int64(0, ft.LowDateTime), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = (x$2 = new $Int64(27111902, 3577643008), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
		nsec = $mul64(nsec, (new $Int64(0, 100)));
		return nsec;
	};
	Filetime.prototype.Nanoseconds = function() { return this.$val.Nanoseconds(); };
	copyFindData = function(dst, src) {
		var $ptr, dst, src;
		dst.FileAttributes = src.FileAttributes;
		$copy(dst.CreationTime, src.CreationTime, Filetime);
		$copy(dst.LastAccessTime, src.LastAccessTime, Filetime);
		$copy(dst.LastWriteTime, src.LastWriteTime, Filetime);
		dst.FileSizeHigh = src.FileSizeHigh;
		dst.FileSizeLow = src.FileSizeLow;
		dst.Reserved0 = src.Reserved0;
		dst.Reserved1 = src.Reserved1;
		$copySlice(new sliceType$2(dst.FileName), new sliceType$2(src.FileName));
		$copySlice(new sliceType$2(dst.AlternateFileName), new sliceType$2(src.AlternateFileName));
	};
	DummyError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$27.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "FindProc", name: "FindProc", pkg: "", typ: $funcType([$String], [ptrType$4, $error], false)}, {prop: "MustFindProc", name: "MustFindProc", pkg: "", typ: $funcType([$String], [ptrType$4], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$4.methods = [{prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$6], [$Uintptr, $Uintptr, $error], true)}];
	ptrType$5.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$error], false)}, {prop: "mustLoad", name: "mustLoad", pkg: "syscall", typ: $funcType([], [], false)}, {prop: "Handle", name: "Handle", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "NewProc", name: "NewProc", pkg: "", typ: $funcType([$String], [ptrType$28], false)}];
	ptrType$28.methods = [{prop: "Find", name: "Find", pkg: "", typ: $funcType([], [$error], false)}, {prop: "mustFind", name: "mustFind", pkg: "syscall", typ: $funcType([], [], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$6], [$Uintptr, $Uintptr, $error], true)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$20.methods = [{prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}];
	DummyError.init([]);
	DLLError.init([{prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}, {prop: "ObjName", name: "ObjName", pkg: "", typ: $String, tag: ""}, {prop: "Msg", name: "Msg", pkg: "", typ: $String, tag: ""}]);
	DLL.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Handle", name: "Handle", pkg: "", typ: Handle, tag: ""}]);
	Proc.init([{prop: "Dll", name: "Dll", pkg: "", typ: ptrType$3, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "addr", name: "addr", pkg: "syscall", typ: $Uintptr, tag: ""}]);
	LazyDLL.init([{prop: "mu", name: "mu", pkg: "syscall", typ: sync.Mutex, tag: ""}, {prop: "dll", name: "dll", pkg: "syscall", typ: ptrType$3, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}]);
	LazyProc.init([{prop: "mu", name: "mu", pkg: "syscall", typ: sync.Mutex, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "l", name: "l", pkg: "syscall", typ: ptrType$5, tag: ""}, {prop: "proc", name: "proc", pkg: "syscall", typ: ptrType$4, tag: ""}]);
	SecurityAttributes.init([{prop: "Length", name: "Length", pkg: "", typ: $Uint32, tag: ""}, {prop: "SecurityDescriptor", name: "SecurityDescriptor", pkg: "", typ: $Uintptr, tag: ""}, {prop: "InheritHandle", name: "InheritHandle", pkg: "", typ: $Uint32, tag: ""}]);
	Overlapped.init([{prop: "Internal", name: "Internal", pkg: "", typ: $Uintptr, tag: ""}, {prop: "InternalHigh", name: "InternalHigh", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uint32, tag: ""}, {prop: "OffsetHigh", name: "OffsetHigh", pkg: "", typ: $Uint32, tag: ""}, {prop: "HEvent", name: "HEvent", pkg: "", typ: Handle, tag: ""}]);
	Filetime.init([{prop: "LowDateTime", name: "LowDateTime", pkg: "", typ: $Uint32, tag: ""}, {prop: "HighDateTime", name: "HighDateTime", pkg: "", typ: $Uint32, tag: ""}]);
	Win32finddata.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", typ: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", typ: $Uint32, tag: ""}, {prop: "Reserved0", name: "Reserved0", pkg: "", typ: $Uint32, tag: ""}, {prop: "Reserved1", name: "Reserved1", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileName", name: "FileName", pkg: "", typ: arrayType$8, tag: ""}, {prop: "AlternateFileName", name: "AlternateFileName", pkg: "", typ: arrayType$9, tag: ""}]);
	win32finddata1.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", typ: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", typ: $Uint32, tag: ""}, {prop: "Reserved0", name: "Reserved0", pkg: "", typ: $Uint32, tag: ""}, {prop: "Reserved1", name: "Reserved1", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileName", name: "FileName", pkg: "", typ: arrayType$10, tag: ""}, {prop: "AlternateFileName", name: "AlternateFileName", pkg: "", typ: arrayType$11, tag: ""}]);
	ByHandleFileInformation.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", typ: Filetime, tag: ""}, {prop: "VolumeSerialNumber", name: "VolumeSerialNumber", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", typ: $Uint32, tag: ""}, {prop: "NumberOfLinks", name: "NumberOfLinks", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileIndexHigh", name: "FileIndexHigh", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileIndexLow", name: "FileIndexLow", pkg: "", typ: $Uint32, tag: ""}]);
	Win32FileAttributeData.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", typ: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", typ: $Uint32, tag: ""}]);
	reparseDataBuffer.init([{prop: "ReparseTag", name: "ReparseTag", pkg: "", typ: $Uint32, tag: ""}, {prop: "ReparseDataLength", name: "ReparseDataLength", pkg: "", typ: $Uint16, tag: ""}, {prop: "Reserved", name: "Reserved", pkg: "", typ: $Uint16, tag: ""}, {prop: "SubstituteNameOffset", name: "SubstituteNameOffset", pkg: "", typ: $Uint16, tag: ""}, {prop: "SubstituteNameLength", name: "SubstituteNameLength", pkg: "", typ: $Uint16, tag: ""}, {prop: "PrintNameOffset", name: "PrintNameOffset", pkg: "", typ: $Uint16, tag: ""}, {prop: "PrintNameLength", name: "PrintNameLength", pkg: "", typ: $Uint16, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint32, tag: ""}, {prop: "PathBuffer", name: "PathBuffer", pkg: "", typ: arrayType$20, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		warningPrinted = false;
		minusOne = -1;
		errors$1 = $toNativeArray($kindString, ["argument list too long", "permission denied", "address already in use", "cannot assign requested address", "advertise error", "address family not supported by protocol", "resource temporarily unavailable", "operation already in progress", "invalid exchange", "bad file descriptor", "file descriptor in bad state", "bad message", "invalid request descriptor", "invalid request code", "invalid slot", "bad font file format", "device or resource busy", "operation canceled", "no child processes", "channel number out of range", "communication error on send", "software caused connection abort", "connection refused", "connection reset by peer", "resource deadlock avoided", "resource deadlock avoided", "destination address required", "numerical argument out of domain", "RFS specific error", "disk quota exceeded", "file exists", "bad address", "file too large", "host is down", "no route to host", "identifier removed", "invalid or incomplete multibyte or wide character", "operation now in progress", "interrupted system call", "invalid argument", "input/output error", "transport endpoint is already connected", "is a directory", "is a named type file", "key has expired", "key was rejected by service", "key has been revoked", "level 2 halted", "level 2 not synchronized", "level 3 halted", "level 3 reset", "can not access a needed shared library", "accessing a corrupted shared library", "cannot exec a shared library directly", "attempting to link in too many shared libraries", ".lib section in a.out corrupted", "link number out of range", "too many levels of symbolic links", "wrong medium type", "too many open files", "too many links", "message too long", "multihop attempted", "file name too long", "no XENIX semaphores available", "network is down", "network dropped connection on reset", "network is unreachable", "too many open files in system", "no anode", "no buffer space available", "no CSI structure available", "no data available", "no such device", "exec format error", "required key not available", "no locks available", "link has been severed", "no medium found", "cannot allocate memory", "no message of desired type", "machine is not on the network", "package not installed", "protocol not available", "no space left on device", "out of streams resources", "device not a stream", "function not implemented", "block device required", "transport endpoint is not connected", "directory not empty", "not a XENIX named type file", "state not recoverable", "socket operation on non-socket", "operation not supported", "inappropriate ioctl for device", "name not unique on network", "no such device or address", "operation not supported", "value too large for defined data type", "owner died", "operation not permitted", "protocol family not supported", "broken pipe", "protocol error", "protocol not supported", "protocol wrong type for socket", "numerical result out of range", "remote address changed", "object is remote", "remote I/O error", "interrupted system call should be restarted", "read-only file system", "cannot send after transport endpoint shutdown", "socket type not supported", "illegal seek", "no such process", "srmount error", "stale NFS file handle", "streams pipe error", "timer expired", "connection timed out", "too many references: cannot splice", "text file busy", "structure needs cleaning", "protocol driver not attached", "too many users", "resource temporarily unavailable", "invalid cross-device link", "exchange full", "not supported by windows"]);
		modkernel32 = NewLazyDLL("kernel32.dll");
		modadvapi32 = NewLazyDLL("advapi32.dll");
		modshell32 = NewLazyDLL("shell32.dll");
		modmswsock = NewLazyDLL("mswsock.dll");
		modcrypt32 = NewLazyDLL("crypt32.dll");
		modws2_32 = NewLazyDLL("ws2_32.dll");
		moddnsapi = NewLazyDLL("dnsapi.dll");
		modiphlpapi = NewLazyDLL("iphlpapi.dll");
		modsecur32 = NewLazyDLL("secur32.dll");
		modnetapi32 = NewLazyDLL("netapi32.dll");
		moduserenv = NewLazyDLL("userenv.dll");
		procGetLastError = modkernel32.NewProc("GetLastError");
		procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");
		procFreeLibrary = modkernel32.NewProc("FreeLibrary");
		procGetProcAddress = modkernel32.NewProc("GetProcAddress");
		procGetVersion = modkernel32.NewProc("GetVersion");
		procFormatMessageW = modkernel32.NewProc("FormatMessageW");
		procExitProcess = modkernel32.NewProc("ExitProcess");
		procCreateFileW = modkernel32.NewProc("CreateFileW");
		procReadFile = modkernel32.NewProc("ReadFile");
		procWriteFile = modkernel32.NewProc("WriteFile");
		procSetFilePointer = modkernel32.NewProc("SetFilePointer");
		procCloseHandle = modkernel32.NewProc("CloseHandle");
		procGetStdHandle = modkernel32.NewProc("GetStdHandle");
		procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");
		procFindNextFileW = modkernel32.NewProc("FindNextFileW");
		procFindClose = modkernel32.NewProc("FindClose");
		procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");
		procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");
		procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");
		procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");
		procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");
		procDeleteFileW = modkernel32.NewProc("DeleteFileW");
		procMoveFileW = modkernel32.NewProc("MoveFileW");
		procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");
		procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");
		procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");
		procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");
		procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");
		procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");
		procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");
		procCancelIo = modkernel32.NewProc("CancelIo");
		procCancelIoEx = modkernel32.NewProc("CancelIoEx");
		procCreateProcessW = modkernel32.NewProc("CreateProcessW");
		procOpenProcess = modkernel32.NewProc("OpenProcess");
		procTerminateProcess = modkernel32.NewProc("TerminateProcess");
		procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");
		procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");
		procGetCurrentProcess = modkernel32.NewProc("GetCurrentProcess");
		procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");
		procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");
		procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");
		procGetTempPathW = modkernel32.NewProc("GetTempPathW");
		procCreatePipe = modkernel32.NewProc("CreatePipe");
		procGetFileType = modkernel32.NewProc("GetFileType");
		procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");
		procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");
		procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");
		procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");
		procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");
		procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");
		procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");
		procSetFileTime = modkernel32.NewProc("SetFileTime");
		procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");
		procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");
		procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");
		procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");
		procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");
		procLocalFree = modkernel32.NewProc("LocalFree");
		procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");
		procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");
		procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");
		procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");
		procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");
		procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");
		procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");
		procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");
		procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");
		procVirtualLock = modkernel32.NewProc("VirtualLock");
		procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");
		procTransmitFile = modmswsock.NewProc("TransmitFile");
		procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");
		procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");
		procCertOpenStore = modcrypt32.NewProc("CertOpenStore");
		procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");
		procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");
		procCertCloseStore = modcrypt32.NewProc("CertCloseStore");
		procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");
		procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");
		procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");
		procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");
		procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");
		procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");
		procRegCloseKey = modadvapi32.NewProc("RegCloseKey");
		procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");
		procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");
		procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");
		procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");
		procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");
		procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");
		procReadConsoleW = modkernel32.NewProc("ReadConsoleW");
		procCreateToolhelp32Snapshot = modkernel32.NewProc("CreateToolhelp32Snapshot");
		procProcess32FirstW = modkernel32.NewProc("Process32FirstW");
		procProcess32NextW = modkernel32.NewProc("Process32NextW");
		procDeviceIoControl = modkernel32.NewProc("DeviceIoControl");
		procCreateSymbolicLinkW = modkernel32.NewProc("CreateSymbolicLinkW");
		procCreateHardLinkW = modkernel32.NewProc("CreateHardLinkW");
		procWSAStartup = modws2_32.NewProc("WSAStartup");
		procWSACleanup = modws2_32.NewProc("WSACleanup");
		procWSAIoctl = modws2_32.NewProc("WSAIoctl");
		procsocket = modws2_32.NewProc("socket");
		procsetsockopt = modws2_32.NewProc("setsockopt");
		procgetsockopt = modws2_32.NewProc("getsockopt");
		procbind = modws2_32.NewProc("bind");
		procconnect = modws2_32.NewProc("connect");
		procgetsockname = modws2_32.NewProc("getsockname");
		procgetpeername = modws2_32.NewProc("getpeername");
		proclisten = modws2_32.NewProc("listen");
		procshutdown = modws2_32.NewProc("shutdown");
		procclosesocket = modws2_32.NewProc("closesocket");
		procAcceptEx = modmswsock.NewProc("AcceptEx");
		procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");
		procWSARecv = modws2_32.NewProc("WSARecv");
		procWSASend = modws2_32.NewProc("WSASend");
		procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");
		procWSASendTo = modws2_32.NewProc("WSASendTo");
		procgethostbyname = modws2_32.NewProc("gethostbyname");
		procgetservbyname = modws2_32.NewProc("getservbyname");
		procntohs = modws2_32.NewProc("ntohs");
		procgetprotobyname = modws2_32.NewProc("getprotobyname");
		procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");
		procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");
		procDnsNameCompare_W = moddnsapi.NewProc("DnsNameCompare_W");
		procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");
		procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");
		procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");
		procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");
		procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");
		procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");
		procTranslateNameW = modsecur32.NewProc("TranslateNameW");
		procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");
		procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");
		procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");
		procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");
		procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");
		procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");
		procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");
		procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");
		procGetLengthSid = modadvapi32.NewProc("GetLengthSid");
		procCopySid = modadvapi32.NewProc("CopySid");
		procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");
		procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");
		procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");
		$pkg.Stdin = getStdHandle(-10);
		$pkg.Stdout = getStdHandle(-11);
		$pkg.Stderr = getStdHandle(-12);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Once, funcType, ptrType$3;
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType, sliceType$3, IndexByte, explode, hashStr, hashStrRev, Count, Contains, Index, LastIndex, IndexRune, genSplit, Split, Join, HasPrefix, Map, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, Trim, TrimRight, TrimSpace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($Uint8);
	sliceType$3 = $sliceType($String);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	explode = function(s, n) {
		var $ptr, _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;
		if (n === 0) {
			return sliceType$3.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		size = 0;
		ch = 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;
		while (true) {
			if (!((i + 1 >> 0) < n)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur));
		}
		return a;
	};
	hashStr = function(sep) {
		var $ptr, _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;
		hash = 0;
		i = 0;
		while (true) {
			if (!(i < sep.length)) { break; }
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	hashStrRev = function(sep) {
		var $ptr, _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;
		hash = 0;
		i = sep.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i - (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	Count = function(s, sep) {
		var $ptr, _tuple, c, h, hashsep, i, i$1, i$2, lastmatch, n, pow, s, sep, x, x$1;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				if (s.charCodeAt(i) === c) {
					n = n + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < sep.length)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + (1) >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (true) {
			if (!(i$2 < s.length)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$2 = i$2 + (1) >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {
				n = n + (1) >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	$pkg.Count = Count;
	Contains = function(s, substr) {
		var $ptr, s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	Index = function(s, sep) {
		var $ptr, _tuple, h, hashsep, i, i$1, n, pow, s, sep, x, x$1;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var $ptr, _tuple, c, h, hashsep, i, i$1, i$2, last, n, pow, s, sep, x, x$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		} else if (n === 1) {
			c = sep.charCodeAt(0);
			i = s.length - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - (1) >> 0;
			}
			return -1;
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStrRev(sep); hashsep = _tuple[0]; pow = _tuple[1];
		last = s.length - n >> 0;
		h = 0;
		i$1 = s.length - 1 >> 0;
		while (true) {
			if (!(i$1 >= last)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 - (1) >> 0;
		}
		if ((h === hashsep) && s.substring(last) === sep) {
			return last;
		}
		i$2 = last - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 + n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			if ((h === hashsep) && s.substring(i$2, (i$2 + n >> 0)) === sep) {
				return i$2;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return -1;
	};
	$pkg.LastIndex = LastIndex;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexRune = IndexRune;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = function(s, sep) {
		var $ptr, s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var $ptr, _i, _ref, a, b, bp, i, n, s, sep;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = sep.length * ((a.$length - 1 >> 0)) >> 0;
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = (maxbytes * 2 >> 0) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			return "";
		}
		return s.substring(i);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString(s.substring(i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return s.substring(0, i);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start)); r = _tuple[0]; wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString(s.substring(0, i)); r = _tuple[0]; size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	Trim = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Trim }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Trim = Trim;
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, sliceType$2, ptrType, arrayType$1, sliceType$3, arrayType$2, arrayType$3, ptrType$1, ptrType$7, ptrType$10, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc_ptr, localLoc, localLoc_ptr, localOnce, zoneinfo, badData, _tuple, initLocal, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType$1.nil;
			this.tx = sliceType$2.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(zone);
	sliceType$2 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	arrayType$1 = $arrayType($Uint8, 32);
	sliceType$3 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 9);
	arrayType$3 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	ptrType$7 = $ptrType(ParseError);
	ptrType$10 = $ptrType(Time);
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType$1([new zone.ptr(localLoc.name, ($parseInt(d.getTimezoneOffset()) >> 0) * -60 >> 0, false)]);
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i); _tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x])); _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = ""; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var $ptr, _q, _q$1, _r, _r$1, b, buf, n, pad, x;
		if (x < 10) {
			if (!((pad === 0))) {
				b = $append(b, pad);
			}
			return $append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = $append(b, ((48 + (_r = x % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = $clone(arrayType$1.zero(), arrayType$1);
		n = 32;
		if (x === 0) {
			return $append(b, 48);
		}
		while (true) {
			if (!(x >= 10)) { break; }
			n = n - (1) >> 0;
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (((_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			x = (_q$1 = x / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		n = n - (1) >> 0;
		((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = ((x + 48 >>> 0) << 24 >>> 24));
		return $appendSlice(b, $subslice(new sliceType$3(buf), n));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x; _tmp$3 = $ifaceNil; x = _tmp$2; err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, buf, day, hour, hr, hr$1, layout, m, max, min, month, name, offset, prefix, s, sec, std, suffix, t, y, y$1, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; buf = $f.buf; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; max = $f.max; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; y$1 = $f.y$1; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = sliceType$3.nil;
		buf = $clone(arrayType$3.zero(), arrayType$3);
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = $append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("000")));
				} else if (year < 100) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("00")));
				} else if (year < 1000) {
					b = $append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(new Month(month).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = new Month(month).String();
				b = $appendSlice(b, new sliceType$3($stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(new Weekday(absWeekday(abs)).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = new Weekday(absWeekday(abs)).String();
				b = $appendSlice(b, new sliceType$3($stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("PM")));
				} else {
					b = $appendSlice(b, new sliceType$3($stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("pm")));
				} else {
					b = $appendSlice(b, new sliceType$3($stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29) || (std === 25) || (std === 30)) {
					b = $append(b, 58);
				}
				b = appendUint(b, ((_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendUint(b, ((_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, new sliceType$3($stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return $bytesToString(b);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.buf = buf; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.max = max; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.y$1 = y$1; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0) * 10 >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;
				_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];
				if (year >= 69) {
					year = year + (1900) >> 0;
				} else {
					year = year + (2000) >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];
					std = std & (65535);
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (true) {
						if (!(n < value.length && isDigit(value, n))) { break; }
						n = n + (1) >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = ""; _tmp$11 = ""; _tmp$12 = ""; _tmp$13 = ""; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = "00"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = "00"; _tmp$22 = "00"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = "00"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;
				}
				_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;
				_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];
				}
				zoneOffset = ((((hr * 60 >> 0) + mm >> 0)) * 60 >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (true) {
					if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
					i = i + (1) >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$2 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$23 = _r$2; name = _tuple$23[0]; offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$24 = _r$4; offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];
				offset$1 = offset$1 * (3600) >> 0;
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		return [_r$5, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = ns * (10) >> 0;
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low >= 3435973835))) {
				_tmp = new $Int64(0, 0); _tmp$1 = ""; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			i = i + (1) >> 0;
		}
		_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = $ifaceNil; x = _tmp$3; rem = _tmp$4; err = _tmp$5;
		return [x, rem, err];
	};
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r, _r$1, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1; offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r, _r$1, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1; name = _tuple$1[0]; offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		return [year, month, day];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; year = _tuple$1[0];
		return year;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; month = _tuple$1[1];
		return month;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; day = _tuple$1[2];
		return day;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		_r$2 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = ((_r$2 + 6 >> 0) >> 0) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r, _r$1, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return [hour, min, sec];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((hour * 3600 >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((min * 60 >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return (_q = ($div64(_r, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return (_q = ($div64(_r, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return ($div64(_r, new $Uint64(0, 60), true).$low >> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; yday = _tuple$1[3];
		return yday + 1 >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = $clone(arrayType$1.zero(), arrayType$1);
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (digit.$low << 24 >>> 24) + 48 << 24 >>> 24);
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24);
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		t = $clone(this, Time);
		u = $clone(u, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r, _r$1, _r$2, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		_r$1 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1; hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];
		_r$2 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r, _r$1, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		return [year, month, day, yday];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; name = _tuple$1[0]; offset = _tuple$1[1];
		return [name, offset];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r, _r$1, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; offset = _tuple$1[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = ((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0) * 60 >> 0;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; localoff = _tuple$1[1];
			/* */ if (offset === localoff) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (offset === localoff) { */ case 5:
				t.loc = $pkg.Local;
				$s = 7; continue;
			/* } else { */ case 6:
				t.loc = FixedZone("", offset);
			/* } */ case 7:
		/* } */ case 3:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r = _r; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r, _r$1, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (y < 0 || y >= 10000) { */ case 2:
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		/* } */ case 3:
		_r$1 = t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return [new sliceType$3($stringToBytes(_r$1)), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r, _r$1, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (y < 0 || y >= 10000) { */ case 2:
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		/* } */ case 3:
		_r$1 = t.Format("2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return [new sliceType$3($stringToBytes(_r$1)), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + ((n * base >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - ((n$1 * base >> 0)) >> 0;
		}
		_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r, _r$1, _r$2, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, (((hour * 3600 >> 0) + (min * 60 >> 0) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$6 = _r; offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
			utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
			/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 4; continue; }
			/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 4:
				_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$7 = _r$1; offset = _tuple$7[1];
				$s = 6; continue;
			/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 5:
				_r$2 = loc.lookup(end); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$8 = _r$2; offset = _tuple$8[1];
			/* } */ case 6:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0; _tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low); u0x = _tmp; u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0; _tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low)); u0x = _tmp$2; u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0; _tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low); u0x = _tmp$4; u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return l;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r.name;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType$1([new zone.ptr(name, offset, false)]), new sliceType$2([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1; nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$10.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", typ: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", typ: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", typ: ptrType$1, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", typ: sliceType$1, tag: ""}, {prop: "tx", name: "tx", pkg: "time", typ: sliceType$2, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", typ: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", typ: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", typ: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr();
		localOnce = new nosync.Once.ptr();
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType$1.nil, sliceType$2.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_tuple = syscall.Getenv("ZONEINFO"); zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, utf16, utf8, PathError, SyscallError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$4, arrayType, ptrType$8, arrayType$1, ptrType$9, sliceType$4, sliceType$5, ptrType$10, sliceType$7, ptrType$11, funcType$1, ptrType$12, ptrType$13, ptrType$14, ptrType$17, devNullStat, devNullStat_ptr, runtime_args, init, NewSyscallError, init$1, fixCount, Readlink, syscallMode, newFile, NewFile, epipecheck, IsPathSeparator, init$2, Stat, Lstat, basename, isAbs, volumeName;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$11.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_, l_, isConsole_, lastbits_, readbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType$10.nil;
			this.l = new sync.Mutex.ptr();
			this.isConsole = false;
			this.lastbits = sliceType$2.nil;
			this.readbuf = sliceType$7.nil;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.l = l_;
		this.isConsole = isConsole_;
		this.lastbits = lastbits_;
		this.readbuf = readbuf_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(data_, needdata_, path_, isempty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = new syscall.Win32finddata.ptr();
			this.needdata = false;
			this.path = "";
			this.isempty = false;
			return;
		}
		this.data = data_;
		this.needdata = needdata_;
		this.path = path_;
		this.isempty = isempty_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, sys_, Mutex_, path_, vol_, idxhi_, idxlo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.sys = new syscall.Win32FileAttributeData.ptr();
			this.Mutex = new sync.Mutex.ptr();
			this.path = "";
			this.vol = 0;
			this.idxhi = 0;
			this.idxlo = 0;
			return;
		}
		this.name = name_;
		this.sys = sys_;
		this.Mutex = Mutex_;
		this.path = path_;
		this.vol = vol_;
		this.idxhi = idxhi_;
		this.idxlo = idxlo_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(File);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$4 = $ptrType($Uint32);
	arrayType = $arrayType($Uint8, 32);
	ptrType$8 = $ptrType($Int32);
	arrayType$1 = $arrayType($Uint16, 8192);
	ptrType$9 = $ptrType(arrayType$1);
	sliceType$4 = $sliceType(ptrType$9);
	sliceType$5 = $sliceType($Uint16);
	ptrType$10 = $ptrType(dirInfo);
	sliceType$7 = $sliceType($Int32);
	ptrType$11 = $ptrType(file);
	funcType$1 = $funcType([ptrType$11], [$error], false);
	ptrType$12 = $ptrType($Uint16);
	ptrType$13 = $ptrType($Uint8);
	ptrType$14 = $ptrType(fileStat);
	ptrType$17 = $ptrType(SyscallError);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tuple, err, fi, file$1, fis, i, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; fi = $f.fi; file$1 = $f.file$1; fis = $f.fis; i = $f.i; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		file$1 = this;
		_tuple = file$1.Readdir(n); fis = _tuple[0]; err = _tuple[1];
		names = $makeSlice(sliceType, fis.$length);
		_ref = fis;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			fi = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = fi.Name(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= names.$length) ? $throwRuntimeError("index out of range") : names.$array[names.$offset + i] = _r);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp = names; _tmp$1 = err; names = _tmp; err = _tmp$1;
		return [names, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.fi = fi; $f.file$1 = file$1; $f.fis = fis; $f.i = i; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, fi, n;
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType$1.nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tuple = f.readdir(n); fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;
			return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; names = _tuple[0]; err = _tuple[1];
		return [names, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return e.Op + " " + e.Path + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return e.Syscall + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	init$1 = function() {
		var $ptr, _i, _ref, _tuple, argc, argc_ptr, argv, cmd, e, i, v, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		argc = 0;
		cmd = syscall.GetCommandLine();
		_tuple = syscall.CommandLineToArgv(cmd, (argc_ptr || (argc_ptr = new ptrType$8(function() { return argc; }, function($v) { argc = $v; })))); argv = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return;
		}
		$deferred.push([syscall.LocalFree, [(argv >>> 0)]]);
		$pkg.Args = $makeSlice(sliceType, argc);
		_ref = $subslice(new sliceType$4((argv)), 0, argc);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = syscall.UTF16ToString(new sliceType$5((v))));
			_i++;
		}
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; m = _tuple[0]; e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; m = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$10.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(536870954);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.ptr("seek", f.file.name, e); ret = _tmp$2; err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r; _tmp$5 = $ifaceNil; ret = _tmp$4; err = _tmp$5;
		return [ret, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, ret, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; ret = $f.ret; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_r = f.Write(new sliceType$2($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.ret = ret; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	Readlink = function(name) {
		var $ptr, _tuple, _tuple$1, b, e, len, n, name;
		len = 128;
		while (true) {
			b = $makeSlice(sliceType$2, len);
			_tuple$1 = syscall.Readlink(name, b);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				return ["", new PathError.ptr("readlink", name, e)];
			}
			if (n < len) {
				return [$bytesToString($subslice(b, 0, n)), $ifaceNil];
			}
			len = len * (2) >> 0;
		}
	};
	$pkg.Readlink = Readlink;
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, err, f;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			err = $pkg.ErrInvalid;
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, file$1;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			return 4294967295;
		}
		return (file$1.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	newFile = function(h, name) {
		var $ptr, f, h, m, m_ptr, name;
		f = new File.ptr(new file.ptr(h, name, ptrType$10.nil, new sync.Mutex.ptr(), false, sliceType$2.nil, sliceType$7.nil));
		m = 0;
		if ($interfaceIsEqual(syscall.GetConsoleMode(f.file.fd, (m_ptr || (m_ptr = new ptrType$4(function() { return m; }, function($v) { m = $v; })))), $ifaceNil)) {
			f.file.isConsole = true;
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$11.prototype.close)));
		return f;
	};
	NewFile = function(fd, name) {
		var $ptr, fd, h, name;
		h = (fd >>> 0);
		if (h === 4294967295) {
			return ptrType$1.nil;
		}
		return newFile(h, name);
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
	};
	file.ptr.prototype.isdir = function() {
		var $ptr, f;
		f = this;
		return !(f === ptrType$11.nil) && !(f.dirinfo === ptrType$10.nil);
	};
	file.prototype.isdir = function() { return this.$val.isdir(); };
	File.ptr.prototype.Close = function() {
		var $ptr, file$1;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return file$1.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$11.nil) {
			return new syscall.Errno(536870951);
		}
		if (file$1.isdir() && file$1.dirinfo.isempty) {
			return $ifaceNil;
		}
		if (file$1.fd === 4294967295) {
			return new syscall.Errno(536870951);
		}
		e = $ifaceNil;
		if (file$1.isdir()) {
			e = syscall.FindClose(file$1.fd);
		} else {
			e = syscall.CloseHandle(file$1.fd);
		}
		err = $ifaceNil;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = 4294967295;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, d, e, err, f, fi, file$1, n, name, size, wantAll;
		fi = sliceType$1.nil;
		err = $ifaceNil;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			_tmp = sliceType$1.nil; _tmp$1 = new syscall.Errno(536870951); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		if (!file$1.file.isdir()) {
			_tmp$2 = sliceType$1.nil; _tmp$3 = new PathError.ptr("Readdir", file$1.file.name, new syscall.Errno(3)); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		if (!file$1.file.dirinfo.isempty && (file$1.file.fd === 4294967295)) {
			_tmp$4 = sliceType$1.nil; _tmp$5 = new syscall.Errno(536870951); fi = _tmp$4; err = _tmp$5;
			return [fi, err];
		}
		wantAll = n <= 0;
		size = n;
		if (wantAll) {
			n = -1;
			size = 100;
		}
		fi = $makeSlice(sliceType$1, 0, size);
		d = file$1.file.dirinfo.data;
		while (true) {
			if (!(!((n === 0)) && !file$1.file.dirinfo.isempty)) { break; }
			if (file$1.file.dirinfo.needdata) {
				e = syscall.FindNextFile(file$1.file.fd, d);
				if (!($interfaceIsEqual(e, $ifaceNil))) {
					if ($interfaceIsEqual(e, new syscall.Errno(18))) {
						break;
					} else {
						err = new PathError.ptr("FindNextFile", file$1.file.name, e);
						if (!wantAll) {
							fi = sliceType$1.nil;
						}
						return [fi, err];
					}
				}
			}
			file$1.file.dirinfo.needdata = true;
			name = syscall.UTF16ToString($subslice(new sliceType$5(d.FileName), 0));
			if (name === "." || name === "..") {
				continue;
			}
			f = new fileStat.ptr(name, new syscall.Win32FileAttributeData.ptr(d.FileAttributes, $clone(d.CreationTime, syscall.Filetime), $clone(d.LastAccessTime, syscall.Filetime), $clone(d.LastWriteTime, syscall.Filetime), d.FileSizeHigh, d.FileSizeLow), new sync.Mutex.ptr(), file$1.file.dirinfo.path + "\\" + name, 0, 0, 0);
			n = n - (1) >> 0;
			fi = $append(fi, f);
		}
		if (!wantAll && (fi.$length === 0)) {
			_tmp$6 = fi; _tmp$7 = io.EOF; fi = _tmp$6; err = _tmp$7;
			return [fi, err];
		}
		_tmp$8 = fi; _tmp$9 = $ifaceNil; fi = _tmp$8; err = _tmp$9;
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readConsole = function(b) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, b, err, err$1, f, i, n, nr, numBytes, nw, nw_ptr, p, r, wchars;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (b.$length === 0) {
			_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (f.file.readbuf.$length === 0) {
			numBytes = b.$length;
			if (numBytes > 16000) {
				numBytes = 16000;
			}
			wchars = $makeSlice(sliceType$5, numBytes);
			p = ptrType$12.nil;
			if (b.$length > 0) {
				p = $indexPtr(wchars.$array, wchars.$offset + 0, ptrType$12);
			}
			nw = 0;
			err$1 = syscall.ReadConsole(f.file.fd, p, (wchars.$length >>> 0), (nw_ptr || (nw_ptr = new ptrType$4(function() { return nw; }, function($v) { nw = $v; }))), ptrType$13.nil);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = err$1; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			f.file.readbuf = utf16.Decode($subslice(wchars, 0, nw));
		}
		_ref = f.file.readbuf;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (utf8.RuneLen(r) > b.$length) {
				f.file.readbuf = $subslice(f.file.readbuf, i);
				_tmp$4 = n; _tmp$5 = $ifaceNil; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			nr = utf8.EncodeRune(b, r);
			b = $subslice(b, nr);
			n = n + (nr) >> 0;
			_i++;
		}
		f.file.readbuf = sliceType$7.nil;
		_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	File.prototype.readConsole = function(b) { return this.$val.readConsole(b); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, _tuple$2, b, err, f, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		if (f.file.isConsole) {
			_tuple = f.readConsole(b); n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$2 = syscall.Read(f.file.fd, b);
		_tuple$1 = fixCount(_tuple$2[0], _tuple$2[1]); n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, curoffset, done, e, err, f, n, o, off, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; curoffset = $f.curoffset; done = $f.done; e = $f.e; err = $f.err; f = $f.f; n = $f.n; o = $f.o; off = $f.off; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		done = [done];
		o = [o];
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, new $Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([syscall.Seek, [f.file.fd, curoffset, 0]]);
		o[0] = new syscall.Overlapped.ptr(0, 0, (off.$low >>> 0), ($shiftRightInt64(off, 32).$low >>> 0), 0);
		done[0] = 0;
		e = syscall.ReadFile(f.file.fd, b, (done.$ptr || (done.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, done))), o[0]);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, new syscall.Errno(38))) {
				_tmp$2 = 0; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			_tmp$4 = 0; _tmp$5 = e; n = _tmp$4; err = _tmp$5;
			return [n, err];
		}
		_tmp$6 = (done[0] >> 0); _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.curoffset = curoffset; $f.done = done; $f.e = e; $f.err = err; $f.f = f; $f.n = n; $f.o = o; $f.off = off; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.writeConsole = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, chunk, err, f, l, m, n, r, runes, uint16s, written;
		n = 0;
		err = $ifaceNil;
		f = this;
		n = b.$length;
		runes = $makeSlice(sliceType$7, 0, 256);
		if (f.file.lastbits.$length > 0) {
			b = $appendSlice(f.file.lastbits, b);
			f.file.lastbits = sliceType$2.nil;
		}
		while (true) {
			if (!(b.$length >= 4 || utf8.FullRune(b))) { break; }
			_tuple = utf8.DecodeRune(b); r = _tuple[0]; l = _tuple[1];
			runes = $append(runes, r);
			b = $subslice(b, l);
		}
		if (b.$length > 0) {
			f.file.lastbits = $makeSlice(sliceType$2, b.$length);
			$copySlice(f.file.lastbits, b);
		}
		while (true) {
			if (!(runes.$length > 0)) { break; }
			m = runes.$length;
			if (m > 16000) {
				m = 16000;
			}
			chunk = $subslice(runes, 0, m);
			runes = $subslice(runes, m);
			uint16s = utf16.Encode(chunk);
			while (true) {
				if (!(uint16s.$length > 0)) { break; }
				written = [written];
				written[0] = 0;
				err = syscall.WriteConsole(f.file.fd, $indexPtr(uint16s.$array, uint16s.$offset + 0, ptrType$12), (uint16s.$length >>> 0), (written.$ptr || (written.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, written))), ptrType$13.nil);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
					return [n, err];
				}
				uint16s = $subslice(uint16s, written[0]);
			}
		}
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.writeConsole = function(b) { return this.$val.writeConsole(b); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tuple, _tuple$1, _tuple$2, b, err, f, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		if (f.file.isConsole) {
			_tuple = f.writeConsole(b); n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$2 = syscall.Write(f.file.fd, b);
		_tuple$1 = fixCount(_tuple$2[0], _tuple$2[1]); n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, curoffset, done, e, err, f, n, o, off, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; curoffset = $f.curoffset; done = $f.done; e = $f.e; err = $f.err; f = $f.f; n = $f.n; o = $f.o; off = $f.off; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		done = [done];
		o = [o];
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, new $Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([syscall.Seek, [f.file.fd, curoffset, 0]]);
		o[0] = new syscall.Overlapped.ptr(0, 0, (off.$low >>> 0), ($shiftRightInt64(off, 32).$low >>> 0), 0);
		done[0] = 0;
		e = syscall.WriteFile(f.file.fd, b, (done.$ptr || (done.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, done))), o[0]);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = e; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		_tmp$4 = (done[0] >> 0); _tmp$5 = $ifaceNil; n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.curoffset = curoffset; $f.done = done; $f.e = e; $f.err = err; $f.f = f; $f.n = n; $f.o = o; $f.off = off; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [ret, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	IsPathSeparator = function(c) {
		var $ptr, c;
		return (c === 92) || (c === 47);
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	init$2 = function() {
		var $ptr;
		return;
		$pkg.Args = runtime_args();
	};
	File.ptr.prototype.Stat = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, d, e, err, fi, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; d = $f.d; e = $f.e; err = $f.err; fi = $f.fi; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		fi = $ifaceNil;
		err = $ifaceNil;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			_tmp = $ifaceNil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		if (file$1 === ptrType$1.nil || file$1.file.fd < 0) {
			_tmp$2 = $ifaceNil; _tmp$3 = new syscall.Errno(536870951); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		/* */ if (file$1.file.isdir()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (file$1.file.isdir()) { */ case 1:
			_r = Stat(file$1.file.name); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; fi = _tuple[0]; err = _tuple[1];
			return [fi, err];
		/* } */ case 2:
		if (file$1.file.name === "NUL") {
			_tmp$4 = devNullStat; _tmp$5 = $ifaceNil; fi = _tmp$4; err = _tmp$5;
			return [fi, err];
		}
		d[0] = $clone(new syscall.ByHandleFileInformation.ptr(), syscall.ByHandleFileInformation);
		e = syscall.GetFileInformationByHandle(file$1.file.fd, d[0]);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$6 = $ifaceNil; _tmp$7 = new PathError.ptr("GetFileInformationByHandle", file$1.file.name, e); fi = _tmp$6; err = _tmp$7;
			return [fi, err];
		}
		_tmp$8 = new fileStat.ptr(basename(file$1.file.name), new syscall.Win32FileAttributeData.ptr(d[0].FileAttributes, $clone(d[0].CreationTime, syscall.Filetime), $clone(d[0].LastAccessTime, syscall.Filetime), $clone(d[0].LastWriteTime, syscall.Filetime), d[0].FileSizeHigh, d[0].FileSizeLow), new sync.Mutex.ptr(), "", d[0].VolumeSerialNumber, d[0].FileIndexHigh, d[0].FileIndexLow); _tmp$9 = $ifaceNil; fi = _tmp$8; err = _tmp$9;
		return [fi, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.d = d; $f.e = e; $f.err = err; $f.fi = fi; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = function(name) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, _tuple$1, err, fi, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fi = $f.fi; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = $ifaceNil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			_tuple = Lstat(name); fi = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [fi, err];
			}
			_r = fi.Mode(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (((_r & 134217728) >>> 0) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((_r & 134217728) >>> 0) === 0) { */ case 3:
				return [fi, err];
			/* } */ case 4:
			_tuple$1 = Readlink(name); name = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [fi, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp = fi; _tmp$1 = err; fi = _tmp; err = _tmp$1;
		return [fi, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fi = fi; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, e, err, fi, fs, name, namep;
		fi = $ifaceNil;
		err = $ifaceNil;
		if (name.length === 0) {
			_tmp = $ifaceNil; _tmp$1 = new PathError.ptr("Lstat", name, new syscall.Errno(3)); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		if (name === "NUL") {
			_tmp$2 = devNullStat; _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		fs = new fileStat.ptr(basename(name), new syscall.Win32FileAttributeData.ptr(), new sync.Mutex.ptr(), "", 0, 0, 0);
		_tuple = syscall.UTF16PtrFromString(name); namep = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$4 = $ifaceNil; _tmp$5 = new PathError.ptr("Lstat", name, e); fi = _tmp$4; err = _tmp$5;
			return [fi, err];
		}
		e = syscall.GetFileAttributesEx(namep, 0, fs.sys);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$6 = $ifaceNil; _tmp$7 = new PathError.ptr("GetFileAttributesEx", name, e); fi = _tmp$6; err = _tmp$7;
			return [fi, err];
		}
		fs.path = name;
		if (!isAbs(fs.path)) {
			_tuple$1 = syscall.FullPath(fs.path); fs.path = _tuple$1[0]; e = _tuple$1[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$8 = $ifaceNil; _tmp$9 = e; fi = _tmp$8; err = _tmp$9;
				return [fi, err];
			}
		}
		_tmp$10 = fs; _tmp$11 = $ifaceNil; fi = _tmp$10; err = _tmp$11;
		return [fi, err];
	};
	$pkg.Lstat = Lstat;
	basename = function(name) {
		var $ptr, i, name;
		if ((name.length === 2) && (name.charCodeAt(1) === 58)) {
			name = ".";
		} else if (name.length > 2 && (name.charCodeAt(1) === 58)) {
			name = name.substring(2);
		}
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92)))) { break; }
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92)) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	isAbs = function(path) {
		var $ptr, b, path, v;
		b = false;
		v = volumeName(path);
		if (v === "") {
			b = false;
			return b;
		}
		path = path.substring(v.length);
		if (path === "") {
			b = false;
			return b;
		}
		b = IsPathSeparator(path.charCodeAt(0));
		return b;
	};
	volumeName = function(path) {
		var $ptr, c, l, n, path, v;
		v = "";
		if (path.length < 2) {
			v = "";
			return v;
		}
		c = path.charCodeAt(0);
		if ((path.charCodeAt(1) === 58) && (48 <= c && c <= 57 || 97 <= c && c <= 122 || 65 <= c && c <= 90)) {
			v = path.substring(0, 2);
			return v;
		}
		l = path.length;
		if (l >= 5 && IsPathSeparator(path.charCodeAt(0)) && IsPathSeparator(path.charCodeAt(1)) && !IsPathSeparator(path.charCodeAt(2)) && !((path.charCodeAt(2) === 46))) {
			n = 3;
			while (true) {
				if (!(n < (l - 1 >> 0))) { break; }
				if (IsPathSeparator(path.charCodeAt(n))) {
					n = n + (1) >> 0;
					if (!IsPathSeparator(path.charCodeAt(n))) {
						if (path.charCodeAt(n) === 46) {
							break;
						}
						while (true) {
							if (!(n < l)) { break; }
							if (IsPathSeparator(path.charCodeAt(n))) {
								break;
							}
							n = n + (1) >> 0;
						}
						v = path.substring(0, n);
						return v;
					}
					break;
				}
				n = n + (1) >> 0;
			}
		}
		v = "";
		return v;
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = $clone(arrayType.zero(), arrayType);
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$2(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs, x, x$1;
		fs = this;
		return (x = $shiftLeft64(new $Int64(0, fs.sys.FileSizeHigh), 32), x$1 = new $Int64(0, fs.sys.FileSizeLow), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs, m;
		m = 0;
		fs = this;
		if (fs === devNullStat) {
			m = 69206454;
			return m;
		}
		if (!((((fs.sys.FileAttributes & 16) >>> 0) === 0))) {
			m = (m | (2147483721)) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1) >>> 0) === 0))) {
			m = (m | (292)) >>> 0;
		} else {
			m = (m | (438)) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1024) >>> 0) === 0))) {
			m = (m | (134217728)) >>> 0;
		}
		m = m;
		return m;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return time.Unix(new $Int64(0, 0), fs.sys.LastWriteTime.Nanoseconds());
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readConsole", name: "readConsole", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "writeConsole", name: "writeConsole", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	ptrType$11.methods = [{prop: "isdir", name: "isdir", pkg: "os", typ: $funcType([], [$Bool], false)}, {prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$14.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "loadFileId", name: "loadFileId", pkg: "os", typ: $funcType([], [$error], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", typ: ptrType$11, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", typ: syscall.Handle, tag: ""}, {prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", typ: ptrType$10, tag: ""}, {prop: "l", name: "l", pkg: "os", typ: sync.Mutex, tag: ""}, {prop: "isConsole", name: "isConsole", pkg: "os", typ: $Bool, tag: ""}, {prop: "lastbits", name: "lastbits", pkg: "os", typ: sliceType$2, tag: ""}, {prop: "readbuf", name: "readbuf", pkg: "os", typ: sliceType$7, tag: ""}]);
	dirInfo.init([{prop: "data", name: "data", pkg: "os", typ: syscall.Win32finddata, tag: ""}, {prop: "needdata", name: "needdata", pkg: "os", typ: $Bool, tag: ""}, {prop: "path", name: "path", pkg: "os", typ: $String, tag: ""}, {prop: "isempty", name: "isempty", pkg: "os", typ: $Bool, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "sys", name: "sys", pkg: "os", typ: syscall.Win32FileAttributeData, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: sync.Mutex, tag: ""}, {prop: "path", name: "path", pkg: "os", typ: $String, tag: ""}, {prop: "vol", name: "vol", pkg: "os", typ: $Uint32, tag: ""}, {prop: "idxhi", name: "idxhi", pkg: "os", typ: $Uint32, tag: ""}, {prop: "idxlo", name: "idxlo", pkg: "os", typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		devNullStat = new fileStat.ptr("NUL", new syscall.Win32FileAttributeData.ptr(), new sync.Mutex.ptr(), "", 0, 0, 0);
		init();
		init$1();
		init$2();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, arrayType$6, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info_ptr, float64info, float64info_ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, FormatBool, AppendBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatUint, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType$6.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	sliceType$6 = $sliceType($Uint8);
	ptrType = $ptrType(NumError);
	arrayType = $arrayType($Uint8, 24);
	arrayType$1 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$2 = $arrayType($Uint8, 3);
	arrayType$3 = $arrayType($Uint8, 50);
	arrayType$4 = $arrayType($Uint8, 65);
	arrayType$5 = $arrayType($Uint8, 4);
	arrayType$6 = $arrayType($Uint8, 800);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	ParseBool = function(str) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, str, value;
		value = false;
		err = $ifaceNil;
		_ref = str;
		if (_ref === "1" || _ref === "t" || _ref === "T" || _ref === "true" || _ref === "TRUE" || _ref === "True") {
			_tmp = true; _tmp$1 = $ifaceNil; value = _tmp; err = _tmp$1;
			return [value, err];
		} else if (_ref === "0" || _ref === "f" || _ref === "F" || _ref === "false" || _ref === "FALSE" || _ref === "False") {
			_tmp$2 = false; _tmp$3 = $ifaceNil; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false; _tmp$5 = syntaxError("ParseBool", str); value = _tmp$4; err = _tmp$5;
		return [value, err];
	};
	$pkg.ParseBool = ParseBool;
	FormatBool = function(b) {
		var $ptr, b;
		if (b) {
			return "true";
		}
		return "false";
	};
	$pkg.FormatBool = FormatBool;
	AppendBool = function(dst, b) {
		var $ptr, b, dst;
		if (b) {
			return $appendSlice(dst, new sliceType$6($stringToBytes("true")));
		}
		return $appendSlice(dst, new sliceType$6($stringToBytes("false")));
	};
	$pkg.AppendBool = AppendBool;
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, _ref, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_ref = true;
			if (_ref === (c === 46)) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_ref === 48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;
		return [b, overflow];
		/* */ $s = -1; case -1: } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp])); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2]))); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val); _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err, err1, err1$1, f, f1, f1$1, s;
		f = 0;
		err = $ifaceNil;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tmp = f1; _tmp$1 = err1; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];
		_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var $ptr, base, x;
		if (base < 2) {
			return new $Uint64(0, 0);
		}
		return (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, s0, v, x, x$1, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* */ if (s.length < 1) { $s = 1; continue; }
		/* */ if (2 <= base && base <= 36) { $s = 2; continue; }
		/* */ if (base === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (s.length < 1) { */ case 1:
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 6; continue;
			$s = 5; continue;
		/* } else if (2 <= base && base <= 36) { */ case 2:
			$s = 5; continue;
		/* } else if (base === 0) { */ case 3:
			/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 7; continue; }
			/* */ if (s.charCodeAt(0) === 48) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 7:
				base = 16;
				s = s.substring(2);
				/* */ if (s.length < 1) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (s.length < 1) { */ case 11:
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 6; continue;
				/* } */ case 12:
				$s = 10; continue;
			/* } else if (s.charCodeAt(0) === 48) { */ case 8:
				base = 8;
				$s = 10; continue;
			/* } else { */ case 9:
				base = 10;
			/* } */ case 10:
			$s = 5; continue;
		/* } else { */ case 4:
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 6; continue;
		/* } */ case 5:
		n = new $Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.$high - 0, x.$low - 1));
		i = 0;
		/* while (true) { */ case 13:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 14; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* */ if (48 <= d && d <= 57) { $s = 15; continue; }
			/* */ if (97 <= d && d <= 122) { $s = 16; continue; }
			/* */ if (65 <= d && d <= 90) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (48 <= d && d <= 57) { */ case 15:
				v = d - 48 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (97 <= d && d <= 122) { */ case 16:
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (65 <= d && d <= 90) { */ case 17:
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else { */ case 18:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 19:
			/* */ if ((v >> 0) >= base) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((v >> 0) >= base) { */ case 20:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 21:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 22:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 23:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$1 = new $Uint64(0, v), new $Uint64(n.$high + x$1.$high, n.$low + x$1.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 24:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 25:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* Error: */ case 6:
		_tmp$4 = n; _tmp$5 = new NumError.ptr("ParseUint", s0, err); n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0); _tmp$1 = syntaxError("ParseInt", s); i = _tmp; err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)); _tmp$5 = rangeError("ParseInt", s0); i = _tmp$4; err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low)); _tmp$7 = rangeError("ParseInt", s0); i = _tmp$6; err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n; _tmp$9 = $ifaceNil; i = _tmp$8; err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, i, i64, s;
		i = 0;
		err = $ifaceNil;
		_tuple = ParseInt(s, 10, 0); i64 = _tuple[0]; err = _tuple[1];
		_tmp = ((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0); _tmp$1 = err; i = _tmp; err = _tmp$1;
		return [i, err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = $clone(arrayType.zero(), arrayType);
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }
					n = n * 10 >> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0);
			n = ((n * 10 >> 0) + c >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >> 0);
			dig = (n >> $min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (n >> $min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 27)) { break; }
				leftShift(a, 27);
				k = k - (27) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -27)) { break; }
				rightShift(a, 27);
				k = k + (27) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = (x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr();
		upper = new extFloat.ptr();
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat); _tmp$1 = $clone(f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		$copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg), extFloat);
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			$copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg), extFloat);
		} else {
			$copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg), extFloat);
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		g = $clone(g, extFloat);
		_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.$low >>> 0)); fhi = _tmp; flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.$low >>> 0)); ghi = _tmp$2; glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = (((-46 - f.exp >> 0)) * 28 >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + (i * 8 >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, nonAsciiName, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		nonAsciiName = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$5 = (pow10.$low >>> 0), (((integer >>> 16 << 16) * x$5 >>> 0) + (integer << 16 >>> 16) * x$5) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = $clone(arrayType$1.zero(), arrayType$1);
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$6 = d.d, x$7 = i$1 - pos >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				nonAsciiName = $mul64(nonAsciiName, (new $Uint64(0, 10)));
				if ((x$8 = $mul64(new $Uint64(0, 2), nonAsciiName), x$9 = $shiftLeft64(new $Uint64(0, 1), shift), (x$8.$high > x$9.$high || (x$8.$high === x$9.$high && x$8.$low > x$9.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$10 = d.d, ((nd < 0 || nd >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$11 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$11.$high, fraction.$low - x$11.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$12 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$12.$high | fraction.$high, (x$12.$low | fraction.$low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$13 = d.d, ((i$2 < 0 || i$2 >= x$13.$length) ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var $ptr, d, den, i, nonAsciiName, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + nonAsciiName.$high, num.$low + nonAsciiName.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - nonAsciiName.$high, num.$low - nonAsciiName.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = (x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = $clone(arrayType.zero(), arrayType);
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - ((x$19 = (pow$1.$low >>> 0), (((digit >>> 16 << 16) * x$19 >>> 0) + (digit << 16 >>> 16) * x$19) >>> 0)) >>> 0;
			currentDiff = (x$20 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$20.$high + fraction.$high, x$20.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$21 = d.d, x$22 = d.nd, ((x$22 < 0 || x$22 >= x$21.$length) ? $throwRuntimeError("index out of range") : x$21.$array[x$21.$offset + x$22] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$23 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$23.$high, fraction.$low - x$23.$low));
			if ((x$24 = $mul64(allowance, multiplier), (fraction.$high < x$24.$high || (fraction.$high === x$24.$high && fraction.$low < x$24.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = (x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = function(f, fmt, prec, bitSize) {
		var $ptr, bitSize, f, fmt, prec;
		return $bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	$pkg.FormatFloat = FormatFloat;
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _ref, _ref$1, _ref$2, _ref$3, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, new sliceType$6($stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = $clone(_tuple[0], extFloat); upper = $clone(_tuple[1], extFloat);
			buf = $clone(arrayType$1.zero(), arrayType$1);
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + (1) >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = $clone(arrayType.zero(), arrayType);
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _ref, _ref$1, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _ref, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, _tmp, _tmp$1, _tmp$2, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (332 * ((d.dp - d.nd >> 0)) >> 0) >= (100 * ((exp - (flt.mantbits >> 0) >> 0)) >> 0)) {
			return;
		}
		upper = new decimal.ptr();
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr();
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			} else {
				l = 48;
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _r, _ref, buf, ch, d, dst, exp, fmt, i, i$1, m, neg, prec, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (true) {
				if (!(i < m)) { break; }
				dst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i$1 = 3;
		while (true) {
			if (!(exp >= 10)) { break; }
			i$1 = i$1 - (1) >> 0;
			((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24));
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - (1) >> 0;
		((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24));
		_ref = i$1;
		if (_ref === 0) {
			dst = $append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = $append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = $append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, i$1, j, neg, prec, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (true) {
				if (!(i < d.dp && i < d.nd)) { break; }
				dst = $append(dst, (x = d.d, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i < d.dp)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i$1 = 0;
			while (true) {
				if (!(i$1 < prec)) { break; }
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x$1 = d.d, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				}
				dst = $append(dst, ch);
				i$1 = i$1 + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _q, _r, buf, dst, esign, exp, flt, mant, n, neg, w, x;
		buf = $clone(arrayType$3.zero(), arrayType$3);
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (true) {
			if (!(exp > 0 || n < 1)) { break; }
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24));
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		w = w - (1) >> 0;
		((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = esign);
		w = w - (1) >> 0;
		((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 112);
		n = 0;
		while (true) {
			if (!((mant.$high > 0 || (mant.$high === 0 && mant.$low > 0)) || n < 1)) { break; }
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.$high + 0, x.$low + 48)).$low << 24 >>> 24));
			mant = $div64(mant, (new $Uint64(0, 10)), false);
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $appendSlice(dst, $subslice(new sliceType$6(buf), w));
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, i, base, false, false); s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false); s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true); dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	AppendUint = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, i, base, false, true); dst = _tuple[0];
		return dst;
	};
	$pkg.AppendUint = AppendUint;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, s, s$1, u, x, x$1, x$2, x$3;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = $clone(arrayType$4.zero(), arrayType$4);
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 100)))) { break; }
				i = i - (2) >> 0;
				q = $div64(u, new $Uint64(0, 100), false);
				j = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
				(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a[x$1] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j)));
				(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a[x$2] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j)));
				u = q;
			}
			if ((u.$high > 0 || (u.$high === 0 && u.$low >= 10))) {
				i = i - (1) >> 0;
				q$1 = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$3 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.$high - x$3.$high, u.$low - x$3.$low)).$low >>> 0)));
				u = q$1;
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(($div64(u, b$1, true).$low >>> 0)));
					u = $div64(u, (b$1), false);
				}
			}
		}
		i = i - (1) >> 0;
		((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var $ptr, ASCIIonly, _q, _ref, _tuple, buf, n, quote, r, runeTmp, s, s$1, s$2, width;
		runeTmp = $clone(arrayType$5.zero(), arrayType$5);
		buf = $makeSlice(sliceType$6, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\x")));
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\x")));
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\u")));
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\u")));
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\U")));
					s$2 = 28;
					while (true) {
						if (!(s$2 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false);
	};
	$pkg.Quote = Quote;
	QuoteToASCII = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, true);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	QuoteRune = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, false);
	};
	$pkg.QuoteRune = QuoteRune;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRune(r))));
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	QuoteRuneToASCII = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, true);
	};
	$pkg.QuoteRuneToASCII = QuoteRuneToASCII;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRuneToASCII(r))));
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = $ifaceNil; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = $ifaceNil; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (true) {
				if (!(j < n)) { break; }
				_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + (1) >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (true) {
				if (!(j$1 < 2)) { break; }
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + (1) >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _q, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t;
		t = "";
		err = $ifaceNil;
		n = s.length;
		if (n < 2) {
			_tmp = ""; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = ""; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = ""; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s; _tmp$7 = $ifaceNil; t = _tmp$6; err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = ""; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = ""; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s; _tmp$13 = $ifaceNil; t = _tmp$12; err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s; _tmp$15 = $ifaceNil; t = _tmp$14; err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = $clone(arrayType$5.zero(), arrayType$5);
		buf = $makeSlice(sliceType$6, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = ""; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = ""; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf); _tmp$21 = $ifaceNil; t = _tmp$20; err = _tmp$21;
		return [t, err];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", typ: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", typ: arrayType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", typ: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", typ: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", typ: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2226, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8381, 8400, 8432, 8448, 8585, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42929, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43871, 43876, 43877, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65069, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42654, 42895, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70088, 70093, 70093, 70096, 70106, 70113, 70132, 70144, 70205, 70320, 70378, 70384, 70393, 70401, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71113, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74648, 74752, 74868, 77824, 78894, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127788, 127792, 127869, 127872, 127950, 127956, 127991, 128000, 128330, 128336, 128578, 128581, 128719, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 4626, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62719, 62842, 62884]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, sliceType$1, ptrType$3, funcType$1, sliceType$2, ptrType$4, arrayType$1, ptrType$5, ptrType$6, sliceType$3, sliceType$4, sliceType$5, sliceType$6, structType$5, sliceType$7, ptrType$7, arrayType$2, structType$6, ptrType$8, sliceType$8, ptrType$9, sliceType$9, ptrType$10, ptrType$11, ptrType$12, sliceType$11, sliceType$12, ptrType$13, ptrType$18, sliceType$14, sliceType$15, funcType$3, funcType$4, funcType$5, arrayType$3, ptrType$21, initialized, stringPtrMap, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, Indirect, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.hash = 0;
			this._$2 = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gc = arrayType$1.zero();
			this.string = ptrType$5.nil;
			this.uncommonType = ptrType$6.nil;
			this.ptrToThis = ptrType$1.nil;
			this.zero = 0;
			return;
		}
		this.size = size_;
		this.hash = hash_;
		this._$2 = _$2_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gc = gc_;
		this.string = string_;
		this.uncommonType = uncommonType_;
		this.ptrToThis = ptrToThis_;
		this.zero = zero_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.mtyp = ptrType$1.nil;
			this.typ = ptrType$1.nil;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.mtyp = mtyp_;
		this.typ = typ_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.methods = sliceType$3.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.dotdotdot = false;
			this.in$2 = sliceType$4.nil;
			this.out = sliceType$4.nil;
			return;
		}
		this.rtype = rtype_;
		this.dotdotdot = dotdotdot_;
		this.in$2 = in$2_;
		this.out = out_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.typ = ptrType$1.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.methods = sliceType$5.nil;
			return;
		}
		this.rtype = rtype_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.typ = ptrType$1.nil;
			this.tag = ptrType$5.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
		this.tag = tag_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.fields = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr();
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$11.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$11.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.itab = ptrType$8.nil;
			this.word = 0;
			return;
		}
		this.itab = itab_;
		this.word = word_;
	});
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$1], [ptrType$3], true);
	sliceType$2 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	arrayType$1 = $arrayType($UnsafePointer, 2);
	ptrType$5 = $ptrType($String);
	ptrType$6 = $ptrType(uncommonType);
	sliceType$3 = $sliceType(method);
	sliceType$4 = $sliceType(ptrType$1);
	sliceType$5 = $sliceType(imethod);
	sliceType$6 = $sliceType(structField);
	structType$5 = $structType([{prop: "str", name: "str", pkg: "reflect", typ: $String, tag: ""}]);
	sliceType$7 = $sliceType(Value);
	ptrType$7 = $ptrType(nonEmptyInterface);
	arrayType$2 = $arrayType($UnsafePointer, 100000);
	structType$6 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "link", name: "link", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", typ: arrayType$2, tag: ""}]);
	ptrType$8 = $ptrType(structType$6);
	sliceType$8 = $sliceType(ptrType$3);
	ptrType$9 = $ptrType($Uint8);
	sliceType$9 = $sliceType(sliceType$1);
	ptrType$10 = $ptrType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$11 = $sliceType($Int);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	ptrType$18 = $ptrType($UnsafePointer);
	sliceType$14 = $sliceType($Uint8);
	sliceType$15 = $sliceType($Int32);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer, $Uintptr], [$Bool], false);
	arrayType$3 = $arrayType($Uintptr, 2);
	ptrType$21 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil, arrayType$1.zero(), ptrType$5.nil, ptrType$6.nil, ptrType$1.nil, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(ptrType$5.nil, ptrType$5.nil, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(), false, sliceType$4.nil, sliceType$4.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(), sliceType$5.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(), sliceType$6.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil, ptrType$5.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, arrayType$1.zero(), newStringPtr(typ.string), ptrType$6.nil, ptrType$1.nil, 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!($internalize(typ.typeName, $String) === "") || !(($parseInt(methodSet.length) === 0))) {
				reflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					t = m.typ;
					$copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0), method);
					_i++;
				}
				rt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);
				rt.uncommonType.jsType = typ;
			}
			_ref$1 = rt.Kind();
			if (_ref$1 === 17) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_ref$1 === 18) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(), reflectType(typ.elem), (dir >>> 0)));
			} else if (_ref$1 === 19) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$4, $parseInt(params.length));
				_ref$2 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$2.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$4, $parseInt(results.length));
				_ref$3 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));
			} else if (_ref$1 === 20) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$5, $parseInt(methods.length));
				_ref$4 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$4.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					$copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)), imethod);
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));
			} else if (_ref$1 === 21) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0));
			} else if (_ref$1 === 22) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(), reflectType(typ.elem)));
			} else if (_ref$1 === 23) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(), reflectType(typ.elem)));
			} else if (_ref$1 === 25) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$6, $parseInt(fields.length));
				_ref$5 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$5.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					$copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)), structField);
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	newStringPtr = function(strObj) {
		var $ptr, _entry, _key, _tuple, c, ok, ptr, str, strObj, str_ptr;
		c = $clone(new structType$5.ptr(), structType$5);
		c.str = strObj;
		str = c.str;
		if (str === "") {
			return ptrType$5.nil;
		}
		_tuple = (_entry = stringPtrMap[str], _entry !== undefined ? [_entry.v, true] : [ptrType$5.nil, false]); ptr = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			ptr = (str_ptr || (str_ptr = new ptrType$5(function() { return str; }, function($v) { str = $v; })));
			_key = str; (stringPtrMap || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: ptr };
		}
		return ptr;
	};
	isWrapped = function(typ) {
		var $ptr, _r, _r$1, _r$2, _ref, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) { $s = 2; continue; }
		/* */ if (_ref === 22) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) { */ case 2:
			return true;
			$s = 4; continue;
		/* } else if (_ref === 22) { */ case 3:
			_r$1 = typ.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = _r$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			return _r$2 === 17;
		/* } */ case 4:
		return false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: isWrapped }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 64) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			return _r$2.zero();
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil, arrayType$1.zero(), ptrType$5.nil, ptrType$6.nil, ptrType$1.nil, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _ref, typ;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _r, _ref, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.Kind();
		if (_ref === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_ref === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			ptr.$set((bits.$low >> 0));
		} else if (_ref === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_ref === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_ref === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			ptr.$set((bits.$low >>> 0));
		} else if (_ref === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	memmove = function(adst, asrc, n) {
		var $ptr, adst, asrc, n;
		adst.$set(asrc.$get());
	};
	mapaccess = function(t, m, key) {
		var $ptr, entry, k, key, m, t;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		entry = m[$externalize($internalize(k, $String), $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		kv = key.$get();
		k = kv;
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize($internalize(k, $String), $String)] = entry;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, k, key, m, t;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		delete m[$externalize($internalize(k, $String), $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		val = null;
		_r$1 = typ.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		k = _r$1;
		_ref = k;
		/* */ if (_ref === 18) { $s = 5; continue; }
		/* */ if (_ref === 23) { $s = 6; continue; }
		/* */ if (_ref === 22) { $s = 7; continue; }
		/* */ if (_ref === 25) { $s = 8; continue; }
		/* */ if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* switch (0) { default: if (_ref === 18) { */ case 5:
			val = new (jsType(typ))();
			$s = 11; continue;
		/* } else if (_ref === 23) { */ case 6:
			slice = new (jsType(typ))(srcVal.$array);
			slice.$offset = srcVal.$offset;
			slice.$length = srcVal.$length;
			slice.$capacity = srcVal.$capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
			$s = 11; continue;
		/* } else if (_ref === 22) { */ case 7:
			_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 25) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$3 === 25) { */ case 12:
				_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
					val = srcVal;
					/* break; */ $s = 11; continue;
				/* } */ case 17:
				val = new (jsType(typ))();
				_arg = val;
				_arg$1 = srcVal;
				_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$2 = _r$5;
				$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 11; continue;
			/* } */ case 13:
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
			$s = 11; continue;
		/* } else if (_ref === 25) { */ case 8:
			val = new (jsType(typ).ptr)();
			copyStruct(val, srcVal, typ);
			$s = 11; continue;
		/* } else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { */ case 9:
			val = v.ptr;
			$s = 11; continue;
		/* } else { */ case 10:
			$panic(new ValueError.ptr("reflect.Convert", k));
		/* } } */ case 11:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		return new Value.ptr(_r$6, val, (((v.flag & 96) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, _r, fn, i, iface, m, m$1, op, prop, rcvr, rcvrtype, t, tt, ut, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; fn = $f.fn; i = $f.i; iface = $f.iface; m = $f.m; m$1 = $f.m$1; op = $f.op; prop = $f.prop; rcvr = $f.rcvr; rcvrtype = $f.rcvrtype; t = $f.t; tt = $f.tt; ut = $f.ut; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rcvrtype = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(m.pkgPath === ptrType$5.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$7);
			if (iface.itab === ptrType$8.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$6.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(m$1.pkgPath === ptrType$5.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		_r = isWrapped(v.typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			rcvr = new (jsType(v.typ))(rcvr);
		/* } */ case 2:
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: methodReceiver }; } $f.$ptr = $ptr; $f._r = _r; $f.fn = fn; $f.i = i; $f.iface = iface; $f.m = m; $f.m$1 = m$1; $f.op = op; $f.prop = prop; $f.rcvr = rcvr; $f.rcvrtype = rcvrtype; $f.t = t; $f.tt = tt; $f.ut = ut; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, _r$1, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 32) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = isWrapped(v.typ); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$1) { */ case 4:
			return new (jsType(v.typ))(v.object());
		/* } */ case 5:
		return v.object();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _r$1, _r$2, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_r = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; fn[0] = _tuple[2];
		rcvr[0] = v.object();
		_r$1 = isWrapped(v.typ); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1) { */ case 2:
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		/* } */ case 3:
		fv = $makeFunc((function(fn, rcvr) { return function(arguments$1) {
			var $ptr, arguments$1;
			return fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8));
		}; })(fn, rcvr));
		_r$2 = v.Type().common(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return new Value.ptr(_r$2, fv, (((v.flag & 32) >>> 0) | 19) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _ref, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _r, _r$1, _r$2, _ref, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_ref = t.Kind();
		/* */ if (_ref === 19 || _ref === 23 || _ref === 21) { $s = 1; continue; }
		/* */ if (_ref === 17) { $s = 2; continue; }
		/* */ if (_ref === 25) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 19 || _ref === 23 || _ref === 21) { */ case 1:
			return false;
			$s = 4; continue;
		/* } else if (_ref === 17) { */ case 2:
			_r = t.Elem().Comparable(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 4; continue;
		/* } else if (_ref === 25) { */ case 3:
			i = 0;
			/* while (true) { */ case 6:
				/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 7; continue; }
				_r$1 = t.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!_r$2) { */ case 8:
					return false;
				/* } */ case 9:
				i = i + (1) >> 0;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 4:
		return true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var $ptr, fl, fn, i, m, mt, p, prop, t, x;
		m = new Method.ptr();
		t = this;
		if (t === ptrType$6.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!(p.name === ptrType$5.nil)) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!(p.pkgPath === ptrType$5.nil)) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = $makeFunc((function(arguments$1) {
			var $ptr, arguments$1, rcvr;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8));
		}));
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _ref, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.$high, val.$low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.$real, val.$imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.$array);
					newVal.$offset = val.$offset;
					newVal.$length = val.$length;
					newVal.$capacity = val.$capacity;
					val = newVal;
				} }
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; t = _tuple[1]; fn = _tuple[2];
			rcvr = v.object();
			_r$1 = isWrapped(v.typ); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$1) { */ case 5:
				rcvr = new (jsType(v.typ))(rcvr);
			/* } */ case 6:
			$s = 3; continue;
		/* } else { */ case 2:
			fn = v.object();
			rcvr = undefined;
		/* } */ case 3:
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 8:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 9; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;
			_r$2 = xt.AssignableTo(targ); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!_r$2) { */ case 10:
				_r$3 = xt.String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = targ.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$3 + " as type " + _r$4));
			/* } */ case 11:
			i = i + (1) >> 0;
		/* } */ $s = 8; continue; case 9:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 15:
			m = in$1.$length - n >> 0;
			_r$5 = MakeSlice(t.In(n), m, m); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			slice = _r$5;
			_r$6 = t.In(n).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			elem = _r$6;
			i$1 = 0;
			/* while (true) { */ case 19:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 20; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$7 = xt$1.AssignableTo(elem); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (!_r$7) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!_r$7) { */ case 21:
					_r$8 = xt$1.String(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$9 = elem.String(); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$8 + " as type " + _r$9 + " in " + op));
				/* } */ case 22:
				_r$10 = slice.Index(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$r = _r$10.Set(x$2); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 19; continue; case 20:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$7, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 16:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 28:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 29; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$11 = t.In(i$2).common(); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$1 = _r$11;
			_arg$2 = 0;
			_r$12 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = _r$12.object(); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_arg$3 = _r$13;
			_r$14 = unwrapJsObject(_arg, _arg$3); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$14;
			_i$1++;
		/* } */ $s = 28; continue; case 29:
		_r$15 = callHelper(new sliceType$1([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		results = _r$15;
		_ref$2 = nout;
		/* */ if (_ref$2 === 0) { $s = 35; continue; }
		/* */ if (_ref$2 === 1) { $s = 36; continue; }
		/* */ $s = 37; continue;
		/* if (_ref$2 === 0) { */ case 35:
			return sliceType$7.nil;
			$s = 38; continue;
		/* } else if (_ref$2 === 1) { */ case 36:
			_r$16 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			return new sliceType$7([$clone(_r$16, Value)]);
			$s = 38; continue;
		/* } else { */ case 37:
			ret = $makeSlice(sliceType$7, nout);
			_ref$3 = ret;
			_i$2 = 0;
			/* while (true) { */ case 40:
				/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 41; continue; }
				i$3 = _i$2;
				_r$17 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$17);
				_i$2++;
			/* } */ $s = 40; continue; case 41:
			return ret;
		/* } */ case 38:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 18 || _ref === 23) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _r, _ref, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		/* */ if (_ref === 20) { $s = 1; continue; }
		/* */ if (_ref === 22) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 20) { */ case 1:
			val = v.object();
			if (val === $ifaceNil) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			typ = reflectType(val.constructor);
			_r = makeValue(typ, val.$val, (v.flag & 32) >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 4; continue;
		/* } else if (_ref === 22) { */ case 2:
			if (v.IsNil()) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			val$1 = v.object();
			tt = v.typ.kindType;
			fl = (((((v.flag & 32) >>> 0) | 64) >>> 0) | 128) >>> 0;
			fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
			return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			$s = 4; continue;
		/* } else { */ case 3:
			$panic(new ValueError.ptr("reflect.Value.Elem", k));
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (v.flag & 224) >>> 0;
		if (!(field.pkgPath === ptrType$5.nil)) {
			fl = (fl | (32)) >>> 0;
		}
		fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).tag;
		/* */ if (!(tag === ptrType$5.nil) && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === ptrType$5.nil) && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag.$get());
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (name === "js") {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _r, _r$1, _ref, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 24) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 17) { */ case 1:
			tt = v.typ.kindType;
			if (i[0] < 0 || i[0] > (tt.len >> 0)) {
				$panic(new $String("reflect: array index out of range"));
			}
			typ$1[0] = tt.elem;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((typ$1[0].Kind() >>> 0))) >>> 0;
			a$1[0] = v.ptr;
			/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!((((fl & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 6:
				return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
					var $ptr;
					return wrapJsObject(typ$1[0], a$1[0][i[0]]);
				}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
					var $ptr, x;
					a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
				}; })(a, a$1, c, i, typ, typ$1)), fl);
			/* } */ case 7:
			_r = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 5; continue;
		/* } else if (_ref === 23) { */ case 2:
			s = v.object();
			if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
				$panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.kindType;
			typ[0] = tt$1.elem;
			fl$1 = (192 | ((v.flag & 32) >>> 0)) >>> 0;
			fl$1 = (fl$1 | ((typ[0].Kind() >>> 0))) >>> 0;
			i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
			a[0] = s.$array;
			/* */ if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 9:
				return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
					var $ptr;
					return wrapJsObject(typ[0], a[0][i[0]]);
				}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
					var $ptr, x;
					a[0][i[0]] = unwrapJsObject(typ[0], x);
				}; })(a, a$1, c, i, typ, typ$1)), fl$1);
			/* } */ case 10:
			_r$1 = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
			$s = 5; continue;
		/* } else if (_ref === 24) { */ case 3:
			str = v.ptr.$get();
			if (i[0] < 0 || i[0] >= str.length) {
				$panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 32) >>> 0) | 8) >>> 0;
			c[0] = str.charCodeAt(i[0]);
			return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 64) >>> 0);
			$s = 5; continue;
		/* } else { */ case 4:
			$panic(new ValueError.ptr("reflect.Value.Index", k));
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 22 || _ref === 23) {
			return v.object() === jsType(v.typ).nil;
		} else if (_ref === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.object() === false;
		} else if (_ref === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17 || _ref === 24) {
			return $parseInt(v.object().length);
		} else if (_ref === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_ref === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_ref === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_ref === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _r, _r$1, _ref, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		x = x;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 64) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 64) >>> 0) === 0))) { */ case 2:
			_ref = v.typ.Kind();
			/* */ if (_ref === 17) { $s = 4; continue; }
			/* */ if (_ref === 20) { $s = 5; continue; }
			/* */ if (_ref === 25) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_ref === 17) { */ case 4:
				$copy(v.ptr, x.ptr, jsType(v.typ));
				$s = 8; continue;
			/* } else if (_ref === 20) { */ case 5:
				_r$1 = valueInterface(x, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				v.ptr.$set(_r$1);
				$s = 8; continue;
			/* } else if (_ref === 25) { */ case 6:
				copyStruct(v.ptr, x.ptr, v.typ);
				$s = 8; continue;
			/* } else { */ case 7:
				v.ptr.$set(x.object());
			/* } */ case 8:
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _r, _r$1, _ref, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 24) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 17) { */ case 1:
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
			$s = 5; continue;
		/* } else if (_ref === 23) { */ case 2:
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
			$s = 5; continue;
		/* } else if (_ref === 24) { */ case 3:
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			_r = ValueOf(new $String(str.substring(i, j))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 5; continue;
		/* } else { */ case 4:
			$panic(new ValueError.ptr("reflect.Value.Slice", kind));
		/* } */ case 5:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 32) >>> 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _r, _ref, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 32) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$9([new sliceType$1([new $jsObjectPtr(ch)])]);
		if (nb) {
			comms = $append(comms, new sliceType$1([]));
		}
		_r = selectHelper(new sliceType$1([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false; _tmp$1 = false; selected = _tmp; received = _tmp$1;
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true; _tmp$3 = !!(recvRes[1]); selected = _tmp$2; received = _tmp$3;
		return [selected, received];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$9([new sliceType$1([new $jsObjectPtr(ch), new $jsObjectPtr(val.$get())])]);
		if (nb) {
			comms = $append(comms, new sliceType$1([]));
		}
		_r = selectHelper(new sliceType$1([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			return false;
		}
		return true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$6.nil || t.pkgPath === ptrType$5.nil) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$6.nil || t.name === ptrType$5.nil) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (t.size >> 0) * 8 >> 0;
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$6.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr();
		ok = false;
		t = this;
		if (t === ptrType$6.nil) {
			return [m, ok];
		}
		p = ptrType$10.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(p.name === ptrType$5.nil) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, i, m, t, tt;
		m = new Method.ptr();
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			$copy(m, tt.Method(i), Method);
			return m;
		}
		$copy(m, t.uncommonType.Method(i), Method);
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, _tuple$1, m, name, ok, t, tt;
		m = new Method.ptr();
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _ref, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, name, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _ref, d;
		d = this.$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, t, x;
		m = new Method.ptr();
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!(p.pkgPath === ptrType$5.nil)) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr();
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, i, key, name, qvalue, tag, value;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, p, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; p = $f.p; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr();
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		/* */ if (!(p.name === ptrType$5.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.name === ptrType$5.nil)) { */ case 1:
			f.Name = p.name.$get();
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!(p.pkgPath === ptrType$5.nil)) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!(p.tag === ptrType$5.nil)) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$11([i]);
		return f;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr();
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$copy(f, _r$4, StructField);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return f;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _map, _map$1, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _map = $f._map; _map$1 = $f._map$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr();
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([new fieldScan.ptr(t, sliceType$11.nil)]);
		nextCount = false;
		visited = (_map = new $Map(), _map);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key$1 = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					/* */ if (!(f.name === ptrType$5.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(f.name === ptrType$5.nil)) { */ case 9:
						fname = f.name.$get();
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[t$1.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$copy(result, _r$2, StructField);
						result.Index = sliceType$11.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[styp.$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new $Map(), _map$1);
					}
					_key$4 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: 2 };
					}
					index = sliceType$11.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return [result, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._map = _map; $f._map$1 = _map$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name = $f.name; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		f = new StructField.ptr();
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				/* */ if (tf.name === ptrType$5.nil) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tf.name === ptrType$5.nil) { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tf.name.$get() === name[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tf.name.$get() === name[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name) { return function(s) {
			var $ptr, s;
			return s === name[0];
		}; })(name)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; $copy(f, _tuple[0], StructField); present = _tuple[1];
		return [f, present];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name = name; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		return implements$1($assertType(u, ptrType$1), t);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return !(_r === $throwNilPointerError);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (vm.name === tm.name && vm.pkgPath === tm.pkgPath && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$6.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (true) {
			if (!(j$1 < v$1.methods.$length)) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if (vm$1.name === tm$1.name && vm$1.pkgPath === tm$1.pkgPath && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.kindType;
			v = V.kindType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!(tf.name === vf.name) && (tf.name === ptrType$5.nil || vf.name === ptrType$5.nil || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!(tf.pkgPath === vf.pkgPath) && (tf.pkgPath === ptrType$5.nil || vf.pkgPath === ptrType$5.nil || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.tag === vf.tag) && (tf.tag === ptrType$5.nil || vf.tag === ptrType$5.nil || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 128) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 32) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 128) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 160) >>> 0) === 128;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!(v.Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = v.Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		return v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, _r$1, _tuple, f, name, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name = $f.name; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; f = $clone(_tuple[0], StructField); ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name = name; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; f = $clone(_tuple[0], StructField); ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return v.ptr.$get();
		} else if (_ref === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _ref, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 32) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		return i;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(20);
		return v.ptr;
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		key = key;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 32) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			memmove(c, e, typ.size);
			return new Value.ptr(typ, c, (fl | 64) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 32) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$7, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				memmove(c, key, keyType.size);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 64) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return $subslice(a, 0, i);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 96) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 256) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, m, name, ok, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = $clone(_tuple[0], Method); ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_ref === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _ref, bitSize, k, trunc, v, x, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _ref, bitSize, k, trunc, v, x, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr();
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; x = _tuple[0]; ok = _tuple[1];
		return [x, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr();
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (64)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; selected = _tuple[0]; ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return [val, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		x = x;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		x = x;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 64) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		return selected;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_ref === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set($fround(x));
		} else if (_ref === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		val = val;
		key = key;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 64) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x);
		} else if (_ref === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _r, _ref, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return "<" + _r + " Value>";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr();
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; x = _tuple[0]; ok = _tuple[1];
		return [x, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		x = x;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 256) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$6.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _ref, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	Indirect = function(v) {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (!((v.Kind() === 22))) {
			return v;
		}
		_r = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Indirect }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Indirect = Indirect;
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return new Value.ptr(_r$1, ptr, fl);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		/* */ if (directlyAssignable(dst, v.typ)) { $s = 4; continue; }
		/* */ if (implements$1(dst, v.typ)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (directlyAssignable(dst, v.typ)) { */ case 4:
			v.typ = dst;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
			return new Value.ptr(dst, v.ptr, fl);
			$s = 6; continue;
		/* } else if (implements$1(dst, v.typ)) { */ case 5:
			if (target === 0) {
				target = unsafe_New(dst);
			}
			_r$1 = valueInterface(v, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			x = _r$1;
			if (dst.NumMethod() === 0) {
				target.$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.ptr(dst, target, 84);
		/* } */ case 6:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		return _r$4;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = src.Kind();
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 1; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 2; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 3; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 4; continue; }
		/* */ if (_ref === 24) { $s = 5; continue; }
		/* */ if (_ref === 23) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 1:
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
			$s = 7; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 2:
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
			$s = 7; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 3:
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
			$s = 7; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 4:
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
			$s = 7; continue;
		/* } else if (_ref === 24) { */ case 5:
			if (!(dst.Kind() === 23)) { _v = false; $s = 10; continue s; }
			_r = dst.Elem().PkgPath(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === ""; case 10:
			/* */ if (_v) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_v) { */ case 8:
				_r$1 = dst.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_ref$5 = _r$1;
				/* */ if (_ref$5 === 8) { $s = 13; continue; }
				/* */ if (_ref$5 === 5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_ref$5 === 8) { */ case 13:
					return cvtStringBytes;
					$s = 15; continue;
				/* } else if (_ref$5 === 5) { */ case 14:
					return cvtStringRunes;
				/* } */ case 15:
			/* } */ case 9:
			$s = 7; continue;
		/* } else if (_ref === 23) { */ case 6:
			if (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }
			_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v$1 = _r$2 === ""; case 18:
			/* */ if (_v$1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v$1) { */ case 16:
				_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_ref$6 = _r$3;
				/* */ if (_ref$6 === 8) { $s = 21; continue; }
				/* */ if (_ref$6 === 5) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_ref$6 === 8) { */ case 21:
					return cvtBytesString;
					$s = 23; continue;
				/* } else if (_ref$6 === 5) { */ case 22:
					return cvtRunesString;
				/* } */ case 23:
			/* } */ case 17:
		/* } */ case 7:
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 4) {
			ptr.$set($fround(v));
		} else if (_ref === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_ref === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 32) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$14($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$15($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		return new Value.ptr(_r$4, target, (((((v.flag & 32) >>> 0) | 64) >>> 0) | 20) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 32) >>> 0))) >>> 0;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$7], [sliceType$7], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$14], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$15], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$3], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$14], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$15], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$21.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", typ: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "i", name: "i", pkg: "reflect", typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", typ: $Uint32, tag: ""}, {prop: "_$2", name: "_", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", typ: ptrType$4, tag: ""}, {prop: "gc", name: "gc", pkg: "reflect", typ: arrayType$1, tag: ""}, {prop: "string", name: "string", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "zero", name: "zero", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", typ: funcType$5, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$3, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "len", name: "len", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", typ: sliceType$4, tag: ""}, {prop: "out", name: "out", pkg: "reflect", typ: sliceType$4, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$5, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", typ: $Uint16, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", typ: sliceType$6, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", typ: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", typ: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$13, tag: ""}, {prop: "index", name: "index", pkg: "reflect", typ: sliceType$11, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", typ: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", typ: ptrType$8, tag: ""}, {prop: "word", name: "word", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = false;
		stringPtrMap = new $Map();
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$2(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, scanError, ss, ssave, sliceType, sliceType$1, arrayType, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$5, arrayType$1, arrayType$2, ptrType$25, funcType, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, _r, _r$1, init, doPrec, newPrinter, Sprintf, Errorf, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.unicode = false;
			this.uniQuote = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.unicode = unicode_;
		this.uniQuote = uniQuote_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intbuf = arrayType$2.zero();
			this.buf = ptrType$1.nil;
			this.wid = 0;
			this.prec = 0;
			this.fmtFlags = new fmtFlags.ptr();
			return;
		}
		this.intbuf = intbuf_;
		this.buf = buf_;
		this.wid = wid_;
		this.prec = prec_;
		this.fmtFlags = fmtFlags_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.n = 0;
			this.panicking = false;
			this.erroring = false;
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr();
			this.reordered = false;
			this.goodArgNum = false;
			this.runeBuf = arrayType$1.zero();
			this.fmt = new fmt.ptr();
			return;
		}
		this.n = n_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.runeBuf = runeBuf_;
		this.fmt = fmt_;
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rr = $ifaceNil;
			this.buf = buffer.nil;
			this.peekRune = 0;
			this.prevRune = 0;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr();
			return;
		}
		this.rr = rr_;
		this.buf = buf_;
		this.peekRune = peekRune_;
		this.prevRune = prevRune_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint16, 2);
	sliceType$2 = $sliceType(arrayType);
	ptrType = $ptrType(pp);
	ptrType$1 = $ptrType(buffer);
	ptrType$2 = $ptrType(reflect.rtype);
	ptrType$5 = $ptrType(ss);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 65);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	init = function() {
		var $ptr, i;
		i = 0;
		while (true) {
			if (!(i < 65)) { break; }
			((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);
			((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		$copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false), fmtFlags);
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth, padding, rightWidth, w, width;
		padding = sliceType.nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var $ptr, f, m, n, padding;
		f = this;
		while (true) {
			if (!(n > 0)) { break; }
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, _tuple, b, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, _tuple, f, left, padding, right, s;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var $ptr, _ref, _ref$1, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		buf = $subslice(new sliceType(f.intbuf), 0);
		if (f.fmtFlags.widPresent) {
			width = f.wid;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (width > 65) {
				buf = $makeSlice(sliceType, width);
			}
		}
		negative = signedness === true && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_ref = base;
		if ((_ref.$high === 0 && _ref.$low === 10)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));
				ua = next;
			}
		} else if ((_ref.$high === 0 && _ref.$low === 16)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 8)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 2)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_ref$1 = base;
			if ((_ref$1.$high === 0 && _ref$1.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if ((_ref$1.$high === 0 && _ref$1.$low === 16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24);
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32);
			j = j + (1) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, n, s, x;
		f = this;
		n = b.$length;
		if (b === sliceType.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, f, quoted, s;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, c, f, quoted;
		f = this;
		quoted = sliceType.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		var $ptr, def, f;
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $ptr, f, n, num, prec, v, verb, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					var $ptr;
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var $ptr, _ref, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));
		_tmp = s.length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var $ptr, _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = $assertType(_r$2, ptrType);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		return p;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid; _tmp$1 = p.fmt.fmtFlags.widPresent; wid = _tmp; ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec; _tmp$1 = p.fmt.fmtFlags.precPresent; prec = _tmp; ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _ref, b, p;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_ref === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_ref === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_ref === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_ref === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var $ptr, c, p;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tuple, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		_tuple = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Sprintf = function(format, a) {
		var $ptr, _r$2, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r$2, _r$3, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = errors.New(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		return _r$3;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	getField = function(v, i) {
		var $ptr, _r$2, _r$3, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r$2 = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		val = _r$2;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$3 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
		/* } */ case 3:
		return val;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			num = (num * 10 >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r$2, _r$3, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		v = v;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r$2 = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 1; continue; }
		/* */ if (p.value.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 1:
			_r$2 = reflect.TypeOf(p.arg).String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(61);
			_r$4 = p.printArg(p.arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else if (p.value.IsValid()) { */ case 2:
			_r$5 = p.value.Type().String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			p.add(61);
			_r$7 = p.printValue(p.value, 118, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			$s = 4; continue;
		/* } else { */ case 3:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
		/* } */ case 4:
		p.add(41);
		p.erroring = false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 116 || _ref === 118) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 116 || _ref === 118) { */ case 1:
			p.fmt.fmt_boolean(v);
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.badVerb(verb); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var $ptr, c, p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 99) { $s = 2; continue; }
		/* */ if (_ref === 100 || _ref === 118) { $s = 3; continue; }
		/* */ if (_ref === 111) { $s = 4; continue; }
		/* */ if (_ref === 113) { $s = 5; continue; }
		/* */ if (_ref === 120) { $s = 6; continue; }
		/* */ if (_ref === 85) { $s = 7; continue; }
		/* */ if (_ref === 88) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 99) { */ case 2:
			p.fmtC(v);
			$s = 10; continue;
		/* } else if (_ref === 100 || _ref === 118) { */ case 3:
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 111) { */ case 4:
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 113) { */ case 5:
			/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 11:
				p.fmt.fmt_qc(v);
				$s = 13; continue;
			/* } else { */ case 12:
				$r = p.badVerb(verb); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$s = 10; continue;
		/* } else if (_ref === 120) { */ case 6:
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 85) { */ case 7:
			p.fmtUnicode(v);
			$s = 10; continue;
		/* } else if (_ref === 88) { */ case 8:
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
			$s = 10; continue;
		/* } else { */ case 9:
			$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInt64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var $ptr, p, prec, precPresent, sharp, v;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 99) { $s = 2; continue; }
		/* */ if (_ref === 100) { $s = 3; continue; }
		/* */ if (_ref === 118) { $s = 4; continue; }
		/* */ if (_ref === 111) { $s = 5; continue; }
		/* */ if (_ref === 113) { $s = 6; continue; }
		/* */ if (_ref === 120) { $s = 7; continue; }
		/* */ if (_ref === 88) { $s = 8; continue; }
		/* */ if (_ref === 85) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 99) { */ case 2:
			p.fmtC(new $Int64(v.$high, v.$low));
			$s = 11; continue;
		/* } else if (_ref === 100) { */ case 3:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 118) { */ case 4:
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
			$s = 11; continue;
		/* } else if (_ref === 111) { */ case 5:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 113) { */ case 6:
			/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 12:
				p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
				$s = 14; continue;
			/* } else { */ case 13:
				$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$s = 11; continue;
		/* } else if (_ref === 120) { */ case 7:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 88) { */ case 8:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
			$s = 11; continue;
		/* } else if (_ref === 85) { */ case 9:
			p.fmtUnicode(new $Int64(v.$high, v.$low));
			$s = 11; continue;
		/* } else { */ case 10:
			$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtUint64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 101) { $s = 2; continue; }
		/* */ if (_ref === 69) { $s = 3; continue; }
		/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }
		/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }
		/* */ if (_ref === 71) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.fmt_fb32(v);
			$s = 8; continue;
		/* } else if (_ref === 101) { */ case 2:
			p.fmt.fmt_e32(v);
			$s = 8; continue;
		/* } else if (_ref === 69) { */ case 3:
			p.fmt.fmt_E32(v);
			$s = 8; continue;
		/* } else if (_ref === 102 || _ref === 70) { */ case 4:
			p.fmt.fmt_f32(v);
			$s = 8; continue;
		/* } else if (_ref === 103 || _ref === 118) { */ case 5:
			p.fmt.fmt_g32(v);
			$s = 8; continue;
		/* } else if (_ref === 71) { */ case 6:
			p.fmt.fmt_G32(v);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat32 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 101) { $s = 2; continue; }
		/* */ if (_ref === 69) { $s = 3; continue; }
		/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }
		/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }
		/* */ if (_ref === 71) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.fmt_fb64(v);
			$s = 8; continue;
		/* } else if (_ref === 101) { */ case 2:
			p.fmt.fmt_e64(v);
			$s = 8; continue;
		/* } else if (_ref === 69) { */ case 3:
			p.fmt.fmt_E64(v);
			$s = 8; continue;
		/* } else if (_ref === 102 || _ref === 70) { */ case 4:
			p.fmt.fmt_f64(v);
			$s = 8; continue;
		/* } else if (_ref === 103 || _ref === 118) { */ case 5:
			p.fmt.fmt_g64(v);
			$s = 8; continue;
		/* } else if (_ref === 71) { */ case 6:
			p.fmt.fmt_G64(v);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }
		/* */ if (_ref === 118) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:
			p.fmt.fmt_c64(v, verb);
			$s = 4; continue;
		/* } else if (_ref === 118) { */ case 2:
			p.fmt.fmt_c64(v, 103);
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }
		/* */ if (_ref === 118) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:
			p.fmt.fmt_c128(v, verb);
			$s = 4; continue;
		/* } else if (_ref === 118) { */ case 2:
			p.fmt.fmt_c128(v, 103);
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex128 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 118) { $s = 1; continue; }
		/* */ if (_ref === 115) { $s = 2; continue; }
		/* */ if (_ref === 120) { $s = 3; continue; }
		/* */ if (_ref === 88) { $s = 4; continue; }
		/* */ if (_ref === 113) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 118) { */ case 1:
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
			$s = 7; continue;
		/* } else if (_ref === 115) { */ case 2:
			p.fmt.fmt_s(v);
			$s = 7; continue;
		/* } else if (_ref === 120) { */ case 3:
			p.fmt.fmt_sx(v, "0123456789abcdef");
			$s = 7; continue;
		/* } else if (_ref === 88) { */ case 4:
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
			$s = 7; continue;
		/* } else if (_ref === 113) { */ case 5:
			p.fmt.fmt_q(v);
			$s = 7; continue;
		/* } else { */ case 6:
			$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var $ptr, _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, c, depth, i, p, typ, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; depth = $f.depth; i = $f.i; p = $f.p; typ = $f.typ; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((verb === 118) || (verb === 100)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((verb === 118) || (verb === 100)) { */ case 1:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 3:
				/* */ if (v === sliceType.nil) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (v === sliceType.nil) { */ case 6:
					/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 8:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("[]byte(nil)");
						$s = 10; continue;
					/* } else { */ case 9:
						_r$2 = typ.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					/* } */ case 10:
					return;
				/* } */ case 7:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 13:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(bytesBytes);
					$s = 15; continue;
				/* } else { */ case 14:
					_r$4 = typ.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				/* } */ case 15:
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 5:
			_ref = v;
			_i = 0;
			/* while (true) { */ case 18:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$6 = p.printArg(new $Uint8(c), 118, depth + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_i++;
			/* } */ $s = 18; continue; case 19:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			return;
		/* } */ case 2:
		_ref$1 = verb;
		/* */ if (_ref$1 === 115) { $s = 21; continue; }
		/* */ if (_ref$1 === 120) { $s = 22; continue; }
		/* */ if (_ref$1 === 88) { $s = 23; continue; }
		/* */ if (_ref$1 === 113) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_ref$1 === 115) { */ case 21:
			p.fmt.fmt_s($bytesToString(v));
			$s = 26; continue;
		/* } else if (_ref$1 === 120) { */ case 22:
			p.fmt.fmt_bx(v, "0123456789abcdef");
			$s = 26; continue;
		/* } else if (_ref$1 === 88) { */ case 23:
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
			$s = 26; continue;
		/* } else if (_ref$1 === 113) { */ case 24:
			p.fmt.fmt_q($bytesToString(v));
			$s = 26; continue;
		/* } else { */ case 25:
			$r = p.badVerb(verb); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 26:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.depth = depth; $f.i = i; $f.p = p; $f.typ = typ; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _r$2, _r$3, _ref, _ref$1, p, u, use0x64, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; p = $f.p; u = $f.u; use0x64 = $f.use0x64; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		value = value;
		use0x64 = true;
		_ref = verb;
		/* */ if (_ref === 112 || _ref === 118) { $s = 1; continue; }
		/* */ if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 112 || _ref === 118) { */ case 1:
			$s = 4; continue;
		/* } else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { */ case 2:
			use0x64 = false;
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 4:
		u = 0;
		_ref$1 = value.Kind();
		/* */ if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { */ case 6:
			u = value.Pointer();
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 8:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 10; continue; }
		/* */ if ((verb === 118) && (u === 0)) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 10:
			p.add(40);
			_r$2 = value.Type().String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(41);
			p.add(40);
			if (u === 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
			$s = 13; continue;
		/* } else if ((verb === 118) && (u === 0)) { */ case 11:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			$s = 13; continue;
		/* } else { */ case 12:
			/* */ if (use0x64) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (use0x64) { */ case 16:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 18; continue;
			/* } else { */ case 17:
				$r = p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.p = p; $f.u = u; $f.use0x64 = use0x64; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r$2, _r$3, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$2 = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			/* */ if ((v.Kind() === 22) && v.IsNil()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((v.Kind() === 22) && v.IsNil()) { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				return;
			/* } */ case 5:
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
			p.add(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(panicBytes);
			p.panicking = true;
			_r$3 = p.printArg(err, 118, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var $ptr, p, plusV, sharpV;
		plusV = false;
		sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var $ptr, p, plusV, sharpV;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, depth, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depth = $f.depth; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true); formatter = _tuple[0]; ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$2 = $assertType(p.arg, GoStringer, true); stringer = _tuple$2[0]; ok$1 = _tuple$2[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r$2 = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
			_ref = verb;
			/* */ if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { */ case 11:
				_ref$1 = p.arg;
				/* */ if ($assertType(_ref$1, $error, true)[1]) { $s = 13; continue; }
				/* */ if ($assertType(_ref$1, Stringer, true)[1]) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if ($assertType(_ref$1, $error, true)[1]) { */ case 13:
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					_r$3 = v.Error(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = p.printArg(new $String(_r$3), verb, depth); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					return handled;
					$s = 15; continue;
				/* } else if ($assertType(_ref$1, Stringer, true)[1]) { */ case 14:
					v$1 = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					_r$5 = v$1.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = p.printArg(new $String(_r$5), verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					return handled;
				/* } */ case 15:
			/* } */ case 12:
		/* } */ case 6:
		handled = false;
		return handled;
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depth = depth; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, arg, depth, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, handled, p, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; depth = $f.depth; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; handled = $f.handled; p = $f.p; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				p.fmt.pad(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
		_ref = verb;
		/* */ if (_ref === 84) { $s = 7; continue; }
		/* */ if (_ref === 112) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 84) { */ case 7:
			_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			wasString = false;
			return wasString;
			$s = 9; continue;
		/* } else if (_ref === 112) { */ case 8:
			_r$4 = reflect.ValueOf(arg); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.fmtPointer(_r$4, verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = false;
			return wasString;
		/* } */ case 9:
		_ref$1 = arg;
		/* */ if ($assertType(_ref$1, $Bool, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref$1, $Float32, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref$1, $Complex64, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref$1, $Complex128, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref$1, $Int, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref$1, $Int8, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref$1, $Int16, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref$1, $Int32, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref$1, $Int64, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref$1, $Uint, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref$1, $Uint8, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref$1, $Uint16, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref$1, $Uint32, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref$1, $Uint64, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref$1, $Uintptr, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref$1, sliceType, true)[1]) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if ($assertType(_ref$1, $Bool, true)[1]) { */ case 14:
			f = _ref$1.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Float32, true)[1]) { */ case 15:
			f$1 = _ref$1.$val;
			$r = p.fmtFloat32(f$1, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Float64, true)[1]) { */ case 16:
			f$2 = _ref$1.$val;
			$r = p.fmtFloat64(f$2, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Complex64, true)[1]) { */ case 17:
			f$3 = _ref$1.$val;
			$r = p.fmtComplex64(f$3, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Complex128, true)[1]) { */ case 18:
			f$4 = _ref$1.$val;
			$r = p.fmtComplex128(f$4, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int, true)[1]) { */ case 19:
			f$5 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$5), verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int8, true)[1]) { */ case 20:
			f$6 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$6), verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int16, true)[1]) { */ case 21:
			f$7 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$7), verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int32, true)[1]) { */ case 22:
			f$8 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$8), verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int64, true)[1]) { */ case 23:
			f$9 = _ref$1.$val;
			$r = p.fmtInt64(f$9, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint, true)[1]) { */ case 24:
			f$10 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$10), verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint8, true)[1]) { */ case 25:
			f$11 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$11), verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint16, true)[1]) { */ case 26:
			f$12 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$12), verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint32, true)[1]) { */ case 27:
			f$13 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$13), verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint64, true)[1]) { */ case 28:
			f$14 = _ref$1.$val;
			$r = p.fmtUint64(f$14, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uintptr, true)[1]) { */ case 29:
			f$15 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 30:
			f$16 = _ref$1.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = (verb === 115) || (verb === 118);
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, sliceType, true)[1]) { */ case 31:
			f$17 = _ref$1.$val;
			$r = p.fmtBytes(f$17, verb, $ifaceNil, depth); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = verb === 115;
			$s = 33; continue;
		/* } else { */ case 32:
			f$18 = _ref$1;
			_r$5 = p.handleMethods(verb, depth); /* */ $s = 52; case 52: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			handled = _r$5;
			/* */ if (handled) { $s = 53; continue; }
			/* */ $s = 54; continue;
			/* if (handled) { */ case 53:
				wasString = false;
				return wasString;
			/* } */ case 54:
			_r$6 = reflect.ValueOf(arg); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = p.printReflectValue(_r$6, verb, depth); /* */ $s = 56; case 56: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			wasString = _r$7;
			return wasString;
		/* } */ case 33:
		p.arg = $ifaceNil;
		return wasString;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.handled = handled; $f.p = p; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, depth, handled, p, value, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; depth = $f.depth; handled = $f.handled; p = $f.p; value = $f.value; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		value = value;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
		_ref = verb;
		/* */ if (_ref === 84) { $s = 7; continue; }
		/* */ if (_ref === 112) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 84) { */ case 7:
			_r$2 = value.Type().String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			wasString = false;
			return wasString;
			$s = 9; continue;
		/* } else if (_ref === 112) { */ case 8:
			$r = p.fmtPointer(value, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = false;
			return wasString;
		/* } */ case 9:
		p.arg = $ifaceNil;
		/* */ if (value.CanInterface()) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (value.CanInterface()) { */ case 13:
			_r$4 = value.Interface(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			p.arg = _r$4;
		/* } */ case 14:
		_r$5 = p.handleMethods(verb, depth); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		handled = _r$5;
		/* */ if (handled) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (handled) { */ case 17:
			wasString = false;
			return wasString;
		/* } */ case 18:
		_r$6 = p.printReflectValue(value, verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		wasString = _r$6;
		return wasString;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.depth = depth; $f.handled = handled; $f.p = p; $f.value = value; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _v, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _v = $f._v; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; key = $f.key; keys = $f.keys; oldValue = $f.oldValue; p = $f.p; t = $f.t; typ = $f.typ; v = $f.v; v$1 = $f.v$1; value = $f.value; value$1 = $f.value$1; verb = $f.verb; wasString = $f.wasString; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		value = value;
		oldValue = p.value;
		p.value = value;
		f = value;
		_ref = f.Kind();
		/* */ if (_ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 2; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 3; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 4; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 5; continue; }
		/* */ if (_ref === 24) { $s = 6; continue; }
		/* */ if (_ref === 21) { $s = 7; continue; }
		/* */ if (_ref === 25) { $s = 8; continue; }
		/* */ if (_ref === 20) { $s = 9; continue; }
		/* */ if (_ref === 17 || _ref === 23) { $s = 10; continue; }
		/* */ if (_ref === 22) { $s = 11; continue; }
		/* */ if (_ref === 18 || _ref === 19 || _ref === 26) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* switch (0) { default: if (_ref === 1) { */ case 1:
			$r = p.fmtBool(f.Bool(), verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 2:
			$r = p.fmtInt64(f.Int(), verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 3:
			$r = p.fmtUint64(f.Uint(), verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 4:
			_r$2 = f.Type().Size(); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 4) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_r$2 === 4) { */ case 18:
				$r = p.fmtFloat32($fround(f.Float()), verb); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 20; continue;
			/* } else { */ case 19:
				$r = p.fmtFloat64(f.Float(), verb); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
			$s = 14; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 5:
			_r$3 = f.Type().Size(); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 8) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (_r$3 === 8) { */ case 24:
				$r = p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 26; continue;
			/* } else { */ case 25:
				$r = p.fmtComplex128(f.Complex(), verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 26:
			$s = 14; continue;
		/* } else if (_ref === 24) { */ case 6:
			_r$4 = f.String(); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.fmtString(_r$4, verb); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 21) { */ case 7:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 32:
				_r$5 = f.Type().String(); /* */ $s = 35; case 35: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 36; case 36: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				if (f.IsNil()) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
					/* break; */ $s = 14; continue;
				}
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				$s = 34; continue;
			/* } else { */ case 33:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(mapBytes);
			/* } */ case 34:
			_r$7 = f.MapKeys(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			keys = _r$7;
			_ref$1 = keys;
			_i = 0;
			/* while (true) { */ case 38:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 39; continue; }
				i = _i;
				key = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$8 = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 40; case 40: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
				_r$9 = f.MapIndex(key); /* */ $s = 41; case 41: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = p.printValue(_r$9, verb, depth + 1 >> 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				_i++;
			/* } */ $s = 38; continue; case 39:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			$s = 14; continue;
		/* } else if (_ref === 25) { */ case 8:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 43:
				_r$11 = value.Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$11); /* */ $s = 46; case 46: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
			/* } */ case 44:
			p.add(123);
			v = f;
			t = v.Type();
			i$1 = 0;
			/* while (true) { */ case 47:
				/* if (!(i$1 < v.NumField())) { break; } */ if(!(i$1 < v.NumField())) { $s = 48; continue; }
				if (i$1 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 49:
					_r$13 = t.Field(i$1); /* */ $s = 51; case 51: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					f$1 = $clone(_r$13, reflect.StructField);
					/* */ if (!(f$1.Name === "")) { $s = 52; continue; }
					/* */ $s = 53; continue;
					/* if (!(f$1.Name === "")) { */ case 52:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(f$1.Name);
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					/* } */ case 53:
				/* } */ case 50:
				_r$14 = getField(v, i$1); /* */ $s = 54; case 54: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$15 = p.printValue(_r$14, verb, depth + 1 >> 0); /* */ $s = 55; case 55: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 47; continue; case 48:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			$s = 14; continue;
		/* } else if (_ref === 20) { */ case 9:
			_r$16 = f.Elem(); /* */ $s = 56; case 56: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value$1 = _r$16;
			/* */ if (!value$1.IsValid()) { $s = 57; continue; }
			/* */ $s = 58; continue;
			/* if (!value$1.IsValid()) { */ case 57:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 60; continue; }
				/* */ $s = 61; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 60:
					_r$17 = f.Type().String(); /* */ $s = 63; case 63: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$18 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$17); /* */ $s = 64; case 64: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					$s = 62; continue;
				/* } else { */ case 61:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				/* } */ case 62:
				$s = 59; continue;
			/* } else { */ case 58:
				_r$19 = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 65; case 65: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				wasString = _r$19;
			/* } */ case 59:
			$s = 14; continue;
		/* } else if (_ref === 17 || _ref === 23) { */ case 10:
			typ = f.Type();
			_r$20 = typ.Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = _r$20.Kind(); /* */ $s = 70; case 70: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			if (!(_r$21 === 8)) { _v = false; $s = 68; continue s; }
			_r$22 = typ.Elem(); /* */ $s = 71; case 71: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_v = $interfaceIsEqual(_r$22, byteType) || (verb === 115) || (verb === 113) || (verb === 120); case 68:
			/* */ if (_v) { $s = 66; continue; }
			/* */ $s = 67; continue;
			/* if (_v) { */ case 66:
				bytes = sliceType.nil;
				/* */ if (f.Kind() === 23) { $s = 72; continue; }
				/* */ if (f.CanAddr()) { $s = 73; continue; }
				/* */ $s = 74; continue;
				/* if (f.Kind() === 23) { */ case 72:
					_r$23 = f.Bytes(); /* */ $s = 76; case 76: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					bytes = _r$23;
					$s = 75; continue;
				/* } else if (f.CanAddr()) { */ case 73:
					_r$24 = f.Slice(0, f.Len()); /* */ $s = 77; case 77: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = _r$24.Bytes(); /* */ $s = 78; case 78: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					bytes = _r$25;
					$s = 75; continue;
				/* } else { */ case 74:
					bytes = $makeSlice(sliceType, f.Len());
					_ref$2 = bytes;
					_i$1 = 0;
					/* while (true) { */ case 79:
						/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 80; continue; }
						i$2 = _i$1;
						_r$26 = f.Index(i$2); /* */ $s = 81; case 81: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						_r$27 = _r$26.Uint(); /* */ $s = 82; case 82: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$27.$low << 24 >>> 24));
						_i$1++;
					/* } */ $s = 79; continue; case 80:
				/* } */ case 75:
				$r = p.fmtBytes(bytes, verb, typ, depth); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = verb === 115;
				/* break; */ $s = 14; continue;
			/* } */ case 67:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 84; continue; }
			/* */ $s = 85; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 84:
				_r$28 = value.Type().String(); /* */ $s = 87; case 87: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$28); /* */ $s = 88; case 88: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$29;
				if ((f.Kind() === 23) && f.IsNil()) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
					/* break; */ $s = 14; continue;
				}
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				$s = 86; continue;
			/* } else { */ case 85:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 86:
			i$3 = 0;
			/* while (true) { */ case 89:
				/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 90; continue; }
				if (i$3 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$30 = f.Index(i$3); /* */ $s = 91; case 91: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$31 = p.printValue(_r$30, verb, depth + 1 >> 0); /* */ $s = 92; case 92: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$31;
				i$3 = i$3 + (1) >> 0;
			/* } */ $s = 89; continue; case 90:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			$s = 14; continue;
		/* } else if (_ref === 22) { */ case 11:
			v$1 = f.Pointer();
			/* */ if (!((v$1 === 0)) && (depth === 0)) { $s = 93; continue; }
			/* */ $s = 94; continue;
			/* if (!((v$1 === 0)) && (depth === 0)) { */ case 93:
				_r$32 = f.Elem(); /* */ $s = 95; case 95: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				a = _r$32;
				_ref$3 = a.Kind();
				/* */ if (_ref$3 === 17 || _ref$3 === 23) { $s = 96; continue; }
				/* */ if (_ref$3 === 25) { $s = 97; continue; }
				/* */ if (_ref$3 === 21) { $s = 98; continue; }
				/* */ $s = 99; continue;
				/* if (_ref$3 === 17 || _ref$3 === 23) { */ case 96:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$33 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 100; case 100: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_r$33;
					/* break BigSwitch; */ $s = 14; continue s;
					$s = 99; continue;
				/* } else if (_ref$3 === 25) { */ case 97:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$34 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					_r$34;
					/* break BigSwitch; */ $s = 14; continue s;
					$s = 99; continue;
				/* } else if (_ref$3 === 21) { */ case 98:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$35 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					_r$35;
					/* break BigSwitch; */ $s = 14; continue s;
				/* } */ case 99:
			/* } */ case 94:
			$r = p.fmtPointer(value, verb); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 18 || _ref === 19 || _ref === 26) { */ case 12:
			$r = p.fmtPointer(value, verb); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else { */ case 13:
			$r = p.unknownType(f); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } } */ case 14:
		p.value = oldValue;
		wasString = wasString;
		return wasString;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printReflectValue }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._v = _v; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.key = key; $f.keys = keys; $f.oldValue = oldValue; $f.p = p; $f.t = t; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.wasString = wasString; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _tuple, a, argNum, isInt, newArgNum, num;
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		if (argNum < a.$length) {
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;
					return [index, wid, ok];
				}
				_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; arg$1 = $f.arg$1; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; lasti = $f.lasti; p = $f.p; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (true) {
				if (!(i < end)) { break; }
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_ref === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_ref === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_ref === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_ref === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + (1) >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.fmtFlags.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.fmtFlags.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + (1) >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.fmtFlags.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.fmtFlags.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			/* */ if (i >= end) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i >= end) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(noVerbBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			/* */ if (c === 37) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (c === 37) { */ case 5:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			/* */ if (!p.goodArgNum) { $s = 7; continue; }
			/* */ if (argNum >= a.$length) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!p.goodArgNum) { */ case 7:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badIndexBytes);
				/* continue; */ $s = 1; continue;
				$s = 9; continue;
			/* } else if (argNum >= a.$length) { */ case 8:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(missingBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			_r$2 = p.printArg(arg, c, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 11:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(extraBytes);
			/* while (true) { */ case 13:
				/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 14; continue; }
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				/* */ if (!($interfaceIsEqual(arg$1, $ifaceNil))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!($interfaceIsEqual(arg$1, $ifaceNil))) { */ case 15:
					_r$3 = reflect.TypeOf(arg$1).String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				/* } */ case 16:
				_r$5 = p.printArg(arg$1, 118, 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				if ((argNum + 1 >> 0) < a.$length) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 12:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.arg$1 = arg$1; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.lasti = lasti; $f.p = p; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0; _tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune"); n = _tmp; err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_r$2 = s.rr.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r$2 = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; r = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r$2, _tuple, ok, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; ok = $f.ok; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true); u = _tuple[0]; ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = u.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			s.peekRune = s.prevRune;
		/* } */ case 3:
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.ok = ok; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r$2, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true); se = $clone(_tuple[0], scanError); ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tok = _r$2;
		return [tok, err[0]];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		s = this;
		old = $clone(old, ssave);
		if (old.validSave) {
			$copy(s.ssave, old, ssave);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r$2, _r$3, _r$4, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r$2 = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$3 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$4 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r$2, _r$3, _r$4, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r$2 = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$3 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$3) { */ case 7:
				_r$4 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		return (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r$2, _r$3, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		return indexRune(ok, r) >= 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", typ: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int, sliceType], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$error], false)}];
	ptrType.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "add", name: "add", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", typ: $funcType([$Int64, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", typ: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", typ: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1, $Bool, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexDigit", name: "hexDigit", pkg: "fmt", typ: $funcType([$Int32], [$Int], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", typ: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", typ: arrayType$2, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: ptrType$1, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", typ: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", typ: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", typ: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", typ: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", typ: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", typ: arrayType$1, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", typ: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", typ: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", typ: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", typ: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		padZeroBytes = $makeSlice(sliceType, 65);
		padSpaceBytes = $makeSlice(sliceType, 65);
		trueBytes = new sliceType($stringToBytes("true"));
		falseBytes = new sliceType($stringToBytes("false"));
		commaSpaceBytes = new sliceType($stringToBytes(", "));
		nilAngleBytes = new sliceType($stringToBytes("<nil>"));
		nilParenBytes = new sliceType($stringToBytes("(nil)"));
		nilBytes = new sliceType($stringToBytes("nil"));
		mapBytes = new sliceType($stringToBytes("map["));
		percentBangBytes = new sliceType($stringToBytes("%!"));
		missingBytes = new sliceType($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType($stringToBytes("(PANIC="));
		extraBytes = new sliceType($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType($stringToBytes("i)"));
		bytesBytes = new sliceType($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new pp.ptr();
		}));
		_r = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		intBits = _r;
		_r$1 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		uintptrBits = _r$1;
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new ss.ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/xml"] = (function() {
	var $pkg = {}, $init, bufio, bytes, encoding, errors, fmt, io, reflect, strconv, strings, sync, unicode, utf8, Marshaler, MarshalerAttr, Encoder, printer, parentStack, UnsupportedTypeError, UnmarshalError, Unmarshaler, UnmarshalerAttr, typeInfo, fieldInfo, fieldFlags, TagPathError, SyntaxError, Name, Attr, Token, StartElement, EndElement, CharData, Comment, ProcInst, Directive, Decoder, stack, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$1, sliceType$2, sliceType$3, ptrType$6, ptrType$7, sliceType$4, ptrType$8, ptrType$9, sliceType$5, ptrType$10, arrayType, sliceType$6, ptrType$11, ptrType$12, ptrType$13, sliceType$7, sliceType$8, ptrType$14, mapType, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, funcType, endComment, endProcInst, endDirective, marshalerType, marshalerAttrType, textMarshalerType, ddBytes, unmarshalerType, unmarshalerAttrType, textUnmarshalerType, tinfoMap, tinfoLock, nameType, errRawToken, entity, first, second, esc_quot, esc_apos, esc_amp, esc_lt, esc_gt, esc_tab, esc_nl, esc_cr, esc_fffd, _r, _r$1, _r$2, _r$3, _r$4, _r$5, x, _map, _key, defaultStart, isEmptyValue, receiverType, copyValue, getTypeInfo, structFieldInfo, lookupXMLName, min, addFieldInfo, makeCopy, NewDecoder, isInCharacterRange, isNameByte, isName, isNameString, EscapeText, Escape, procInstEncoding;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "xml.Marshaler", "Marshaler", "encoding/xml", null);
	MarshalerAttr = $pkg.MarshalerAttr = $newType(8, $kindInterface, "xml.MarshalerAttr", "MarshalerAttr", "encoding/xml", null);
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "xml.Encoder", "Encoder", "encoding/xml", function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = new printer.ptr();
			return;
		}
		this.p = p_;
	});
	printer = $pkg.printer = $newType(0, $kindStruct, "xml.printer", "printer", "encoding/xml", function(Writer_, encoder_, seq_, indent_, prefix_, depth_, indentedIn_, putNewline_, attrNS_, attrPrefix_, prefixes_, tags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Writer = ptrType$6.nil;
			this.encoder = ptrType$7.nil;
			this.seq = 0;
			this.indent = "";
			this.prefix = "";
			this.depth = 0;
			this.indentedIn = false;
			this.putNewline = false;
			this.attrNS = false;
			this.attrPrefix = false;
			this.prefixes = sliceType$3.nil;
			this.tags = sliceType$4.nil;
			return;
		}
		this.Writer = Writer_;
		this.encoder = encoder_;
		this.seq = seq_;
		this.indent = indent_;
		this.prefix = prefix_;
		this.depth = depth_;
		this.indentedIn = indentedIn_;
		this.putNewline = putNewline_;
		this.attrNS = attrNS_;
		this.attrPrefix = attrPrefix_;
		this.prefixes = prefixes_;
		this.tags = tags_;
	});
	parentStack = $pkg.parentStack = $newType(0, $kindStruct, "xml.parentStack", "parentStack", "encoding/xml", function(p_, stack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType$10.nil;
			this.stack = sliceType$3.nil;
			return;
		}
		this.p = p_;
		this.stack = stack_;
	});
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "xml.UnsupportedTypeError", "UnsupportedTypeError", "encoding/xml", function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	UnmarshalError = $pkg.UnmarshalError = $newType(8, $kindString, "xml.UnmarshalError", "UnmarshalError", "encoding/xml", null);
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "xml.Unmarshaler", "Unmarshaler", "encoding/xml", null);
	UnmarshalerAttr = $pkg.UnmarshalerAttr = $newType(8, $kindInterface, "xml.UnmarshalerAttr", "UnmarshalerAttr", "encoding/xml", null);
	typeInfo = $pkg.typeInfo = $newType(0, $kindStruct, "xml.typeInfo", "typeInfo", "encoding/xml", function(xmlname_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xmlname = ptrType$8.nil;
			this.fields = sliceType$7.nil;
			return;
		}
		this.xmlname = xmlname_;
		this.fields = fields_;
	});
	fieldInfo = $pkg.fieldInfo = $newType(0, $kindStruct, "xml.fieldInfo", "fieldInfo", "encoding/xml", function(idx_, name_, xmlns_, flags_, parents_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.idx = sliceType$8.nil;
			this.name = "";
			this.xmlns = "";
			this.flags = 0;
			this.parents = sliceType$3.nil;
			return;
		}
		this.idx = idx_;
		this.name = name_;
		this.xmlns = xmlns_;
		this.flags = flags_;
		this.parents = parents_;
	});
	fieldFlags = $pkg.fieldFlags = $newType(4, $kindInt, "xml.fieldFlags", "fieldFlags", "encoding/xml", null);
	TagPathError = $pkg.TagPathError = $newType(0, $kindStruct, "xml.TagPathError", "TagPathError", "encoding/xml", function(Struct_, Field1_, Tag1_, Field2_, Tag2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = $ifaceNil;
			this.Field1 = "";
			this.Tag1 = "";
			this.Field2 = "";
			this.Tag2 = "";
			return;
		}
		this.Struct = Struct_;
		this.Field1 = Field1_;
		this.Tag1 = Tag1_;
		this.Field2 = Field2_;
		this.Tag2 = Tag2_;
	});
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "xml.SyntaxError", "SyntaxError", "encoding/xml", function(Msg_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Msg = "";
			this.Line = 0;
			return;
		}
		this.Msg = Msg_;
		this.Line = Line_;
	});
	Name = $pkg.Name = $newType(0, $kindStruct, "xml.Name", "Name", "encoding/xml", function(Space_, Local_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Space = "";
			this.Local = "";
			return;
		}
		this.Space = Space_;
		this.Local = Local_;
	});
	Attr = $pkg.Attr = $newType(0, $kindStruct, "xml.Attr", "Attr", "encoding/xml", function(Name_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = new Name.ptr();
			this.Value = "";
			return;
		}
		this.Name = Name_;
		this.Value = Value_;
	});
	Token = $pkg.Token = $newType(8, $kindInterface, "xml.Token", "Token", "encoding/xml", null);
	StartElement = $pkg.StartElement = $newType(0, $kindStruct, "xml.StartElement", "StartElement", "encoding/xml", function(Name_, Attr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = new Name.ptr();
			this.Attr = sliceType$6.nil;
			return;
		}
		this.Name = Name_;
		this.Attr = Attr_;
	});
	EndElement = $pkg.EndElement = $newType(0, $kindStruct, "xml.EndElement", "EndElement", "encoding/xml", function(Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = new Name.ptr();
			return;
		}
		this.Name = Name_;
	});
	CharData = $pkg.CharData = $newType(12, $kindSlice, "xml.CharData", "CharData", "encoding/xml", null);
	Comment = $pkg.Comment = $newType(12, $kindSlice, "xml.Comment", "Comment", "encoding/xml", null);
	ProcInst = $pkg.ProcInst = $newType(0, $kindStruct, "xml.ProcInst", "ProcInst", "encoding/xml", function(Target_, Inst_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Target = "";
			this.Inst = sliceType.nil;
			return;
		}
		this.Target = Target_;
		this.Inst = Inst_;
	});
	Directive = $pkg.Directive = $newType(12, $kindSlice, "xml.Directive", "Directive", "encoding/xml", null);
	Decoder = $pkg.Decoder = $newType(0, $kindStruct, "xml.Decoder", "Decoder", "encoding/xml", function(Strict_, AutoClose_, Entity_, CharsetReader_, DefaultSpace_, r_, buf_, saved_, stk_, free_, needClose_, toClose_, nextToken_, nextByte_, ns_, err_, line_, offset_, unmarshalDepth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Strict = false;
			this.AutoClose = sliceType$3.nil;
			this.Entity = false;
			this.CharsetReader = $throwNilPointerError;
			this.DefaultSpace = "";
			this.r = $ifaceNil;
			this.buf = new bytes.Buffer.ptr();
			this.saved = ptrType$12.nil;
			this.stk = ptrType$14.nil;
			this.free = ptrType$14.nil;
			this.needClose = false;
			this.toClose = new Name.ptr();
			this.nextToken = $ifaceNil;
			this.nextByte = 0;
			this.ns = false;
			this.err = $ifaceNil;
			this.line = 0;
			this.offset = new $Int64(0, 0);
			this.unmarshalDepth = 0;
			return;
		}
		this.Strict = Strict_;
		this.AutoClose = AutoClose_;
		this.Entity = Entity_;
		this.CharsetReader = CharsetReader_;
		this.DefaultSpace = DefaultSpace_;
		this.r = r_;
		this.buf = buf_;
		this.saved = saved_;
		this.stk = stk_;
		this.free = free_;
		this.needClose = needClose_;
		this.toClose = toClose_;
		this.nextToken = nextToken_;
		this.nextByte = nextByte_;
		this.ns = ns_;
		this.err = err_;
		this.line = line_;
		this.offset = offset_;
		this.unmarshalDepth = unmarshalDepth_;
	});
	stack = $pkg.stack = $newType(0, $kindStruct, "xml.stack", "stack", "encoding/xml", function(next_, kind_, name_, ok_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.next = ptrType$14.nil;
			this.kind = 0;
			this.name = new Name.ptr();
			this.ok = false;
			return;
		}
		this.next = next_;
		this.kind = kind_;
		this.name = name_;
		this.ok = ok_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Marshaler);
	ptrType$1 = $ptrType(MarshalerAttr);
	ptrType$2 = $ptrType(encoding.TextMarshaler);
	ptrType$3 = $ptrType(Unmarshaler);
	ptrType$4 = $ptrType(UnmarshalerAttr);
	ptrType$5 = $ptrType(encoding.TextUnmarshaler);
	sliceType$1 = $sliceType(unicode.Range16);
	sliceType$2 = $sliceType(unicode.Range32);
	sliceType$3 = $sliceType($String);
	ptrType$6 = $ptrType(bufio.Writer);
	ptrType$7 = $ptrType(Encoder);
	sliceType$4 = $sliceType(Name);
	ptrType$8 = $ptrType(fieldInfo);
	ptrType$9 = $ptrType(StartElement);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$10 = $ptrType(printer);
	arrayType = $arrayType($Uint8, 64);
	sliceType$6 = $sliceType(Attr);
	ptrType$11 = $ptrType(typeInfo);
	ptrType$12 = $ptrType(bytes.Buffer);
	ptrType$13 = $ptrType(reflect.rtype);
	sliceType$7 = $sliceType(fieldInfo);
	sliceType$8 = $sliceType($Int);
	ptrType$14 = $ptrType(stack);
	mapType = $mapType($String, $String);
	ptrType$15 = $ptrType(parentStack);
	ptrType$16 = $ptrType(UnsupportedTypeError);
	ptrType$17 = $ptrType(Decoder);
	ptrType$18 = $ptrType(TagPathError);
	ptrType$19 = $ptrType(SyntaxError);
	ptrType$20 = $ptrType(Name);
	ptrType$21 = $ptrType(EndElement);
	funcType = $funcType([$String, io.Reader], [io.Reader, $error], false);
	Encoder.ptr.prototype.Indent = function(prefix, indent) {
		var $ptr, enc, indent, prefix;
		enc = this;
		enc.p.prefix = prefix;
		enc.p.indent = indent;
	};
	Encoder.prototype.Indent = function(prefix, indent) { return this.$val.Indent(prefix, indent); };
	Encoder.ptr.prototype.Encode = function(v) {
		var $ptr, _r$6, _r$7, _r$8, enc, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; enc = $f.enc; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r$6 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = enc.p.marshalValue(_r$6, ptrType$8.nil, ptrType$9.nil); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		err = _r$7;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$8 = enc.p.Writer.Flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		return _r$8;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Encode }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.enc = enc; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Encode = function(v) { return this.$val.Encode(v); };
	Encoder.ptr.prototype.EncodeElement = function(v, start) {
		var $ptr, _r$6, _r$7, _r$8, enc, err, start, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; enc = $f.enc; err = $f.err; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = [start];
		enc = this;
		start[0] = $clone(start[0], StartElement);
		_r$6 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = enc.p.marshalValue(_r$6, ptrType$8.nil, start[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		err = _r$7;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$8 = enc.p.Writer.Flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		return _r$8;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.EncodeElement }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.enc = enc; $f.err = err; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.EncodeElement = function(v, start) { return this.$val.EncodeElement(v, start); };
	Encoder.ptr.prototype.EncodeToken = function(t) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$6, _r$7, _r$8, _r$9, _ref, enc, err, err$1, p, t, t$1, t$2, t$3, t$4, t$5, t$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; enc = $f.enc; err = $f.err; err$1 = $f.err$1; p = $f.p; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; t$5 = $f.t$5; t$6 = $f.t$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t$1 = [t$1];
		enc = this;
		p = enc.p;
		_ref = t;
		/* */ if ($assertType(_ref, StartElement, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, EndElement, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, CharData, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, Comment, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ProcInst, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, Directive, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, StartElement, true)[1]) { */ case 1:
			t$1[0] = _ref.$val;
			_r$6 = p.writeStart(t$1[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
				return err;
			/* } */ case 10:
			$s = 7; continue;
		/* } else if ($assertType(_ref, EndElement, true)[1]) { */ case 2:
			t$2 = _ref.$val;
			_r$7 = p.writeEnd(t$2.Name); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err$1 = _r$7;
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 12:
				return err$1;
			/* } */ case 13:
			$s = 7; continue;
		/* } else if ($assertType(_ref, CharData, true)[1]) { */ case 3:
			t$3 = _ref.$val;
			_r$8 = EscapeText(p, $subslice(new sliceType(t$3.$array), t$3.$offset, t$3.$offset + t$3.$length)); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			$s = 7; continue;
		/* } else if ($assertType(_ref, Comment, true)[1]) { */ case 4:
			t$4 = _ref.$val;
			/* */ if (bytes.Contains($subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length), endComment)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (bytes.Contains($subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length), endComment)) { */ case 15:
				_r$9 = fmt.Errorf("xml: EncodeToken of Comment containing --> marker", new sliceType$5([])); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				return _r$9;
			/* } */ case 16:
			_r$10 = p.Writer.WriteString("<!--"); /* */ $s = 18; case 18: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = p.Writer.Write($subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length)); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			_r$12 = p.Writer.WriteString("-->"); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
			_r$13 = p.cachedWriteError(); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			return _r$13;
			$s = 7; continue;
		/* } else if ($assertType(_ref, ProcInst, true)[1]) { */ case 5:
			t$5 = _ref.$val;
			/* */ if (t$5.Target === "xml" && !((p.Writer.Buffered() === 0))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (t$5.Target === "xml" && !((p.Writer.Buffered() === 0))) { */ case 22:
				_r$14 = fmt.Errorf("xml: EncodeToken of ProcInst xml target only valid for xml declaration, first token encoded", new sliceType$5([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				return _r$14;
			/* } */ case 23:
			/* */ if (!isNameString(t$5.Target)) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!isNameString(t$5.Target)) { */ case 25:
				_r$15 = fmt.Errorf("xml: EncodeToken of ProcInst with invalid Target", new sliceType$5([])); /* */ $s = 27; case 27: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				return _r$15;
			/* } */ case 26:
			/* */ if (bytes.Contains(t$5.Inst, endProcInst)) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (bytes.Contains(t$5.Inst, endProcInst)) { */ case 28:
				_r$16 = fmt.Errorf("xml: EncodeToken of ProcInst containing ?> marker", new sliceType$5([])); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				return _r$16;
			/* } */ case 29:
			_r$17 = p.Writer.WriteString("<?"); /* */ $s = 31; case 31: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$17;
			_r$18 = p.Writer.WriteString(t$5.Target); /* */ $s = 32; case 32: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$18;
			/* */ if (t$5.Inst.$length > 0) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (t$5.Inst.$length > 0) { */ case 33:
				_r$19 = p.Writer.WriteByte(32); /* */ $s = 35; case 35: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
				_r$20 = p.Writer.Write(t$5.Inst); /* */ $s = 36; case 36: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$20;
			/* } */ case 34:
			_r$21 = p.Writer.WriteString("?>"); /* */ $s = 37; case 37: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$21;
			$s = 7; continue;
		/* } else if ($assertType(_ref, Directive, true)[1]) { */ case 6:
			t$6 = _ref.$val;
			/* */ if (bytes.Contains($subslice(new sliceType(t$6.$array), t$6.$offset, t$6.$offset + t$6.$length), endDirective)) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (bytes.Contains($subslice(new sliceType(t$6.$array), t$6.$offset, t$6.$offset + t$6.$length), endDirective)) { */ case 38:
				_r$22 = fmt.Errorf("xml: EncodeToken of Directive containing > marker", new sliceType$5([])); /* */ $s = 40; case 40: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				return _r$22;
			/* } */ case 39:
			_r$23 = p.Writer.WriteString("<!"); /* */ $s = 41; case 41: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$23;
			_r$24 = p.Writer.Write($subslice(new sliceType(t$6.$array), t$6.$offset, t$6.$offset + t$6.$length)); /* */ $s = 42; case 42: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$24;
			_r$25 = p.Writer.WriteString(">"); /* */ $s = 43; case 43: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$25;
		/* } */ case 7:
		_r$26 = p.cachedWriteError(); /* */ $s = 44; case 44: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		return _r$26;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.EncodeToken }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.enc = enc; $f.err = err; $f.err$1 = err$1; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.t$5 = t$5; $f.t$6 = t$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.EncodeToken = function(t) { return this.$val.EncodeToken(t); };
	Encoder.ptr.prototype.Flush = function() {
		var $ptr, _r$6, enc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; enc = $f.enc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r$6 = enc.p.Writer.Flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		return _r$6;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.enc = enc; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Flush = function() { return this.$val.Flush(); };
	printer.ptr.prototype.createAttrPrefix = function(url) {
		var $ptr, _entry, _entry$1, _entry$2, _key$2, _key$3, _r$10, _r$11, _r$6, _r$7, _r$8, _r$9, i, id, p, prefix, prefix$1, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key$2 = $f._key$2; _key$3 = $f._key$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; i = $f.i; id = $f.id; p = $f.p; prefix = $f.prefix; prefix$1 = $f.prefix$1; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prefix = (_entry = p.attrPrefix[url], _entry !== undefined ? _entry.v : "");
		if (!(prefix === "")) {
			return prefix;
		}
		if (url === "http://www.w3.org/XML/1998/namespace") {
			return "xml";
		}
		if (p.attrPrefix === false) {
			p.attrPrefix = new $Map();
			p.attrNS = new $Map();
		}
		_r$6 = strings.TrimRight(url, "/"); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		prefix$1 = _r$6;
		i = strings.LastIndex(prefix$1, "/");
		if (i >= 0) {
			prefix$1 = prefix$1.substring((i + 1 >> 0));
		}
		if (prefix$1 === "" || !isName(new sliceType($stringToBytes(prefix$1))) || strings.Contains(prefix$1, ":")) {
			prefix$1 = "_";
		}
		if (strings.HasPrefix(prefix$1, "xml")) {
			prefix$1 = "_" + prefix$1;
		}
		if (!((_entry$1 = p.attrNS[prefix$1], _entry$1 !== undefined ? _entry$1.v : "") === "")) {
			p.seq = p.seq + (1) >> 0;
			while (true) {
				id = prefix$1 + "_" + strconv.Itoa(p.seq);
				if ((_entry$2 = p.attrNS[id], _entry$2 !== undefined ? _entry$2.v : "") === "") {
					prefix$1 = id;
					break;
				}
				p.seq = p.seq + (1) >> 0;
			}
		}
		_key$2 = url; (p.attrPrefix || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: prefix$1 };
		_key$3 = prefix$1; (p.attrNS || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: url };
		_r$7 = p.Writer.WriteString("xmlns:"); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = p.Writer.WriteString(prefix$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = p.Writer.WriteString("=\""); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		_r$10 = EscapeText(p, new sliceType($stringToBytes(url))); /* */ $s = 5; case 5: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = p.Writer.WriteString("\" "); /* */ $s = 6; case 6: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		p.prefixes = $append(p.prefixes, prefix$1);
		return prefix$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.createAttrPrefix }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.i = i; $f.id = id; $f.p = p; $f.prefix = prefix; $f.prefix$1 = prefix$1; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.createAttrPrefix = function(url) { return this.$val.createAttrPrefix(url); };
	printer.ptr.prototype.deleteAttrPrefix = function(prefix) {
		var $ptr, _entry, p, prefix;
		p = this;
		delete p.attrPrefix[(_entry = p.attrNS[prefix], _entry !== undefined ? _entry.v : "")];
		delete p.attrNS[prefix];
	};
	printer.prototype.deleteAttrPrefix = function(prefix) { return this.$val.deleteAttrPrefix(prefix); };
	printer.ptr.prototype.markPrefix = function() {
		var $ptr, p;
		p = this;
		p.prefixes = $append(p.prefixes, "");
	};
	printer.prototype.markPrefix = function() { return this.$val.markPrefix(); };
	printer.ptr.prototype.popPrefix = function() {
		var $ptr, p, prefix, x$1, x$2;
		p = this;
		while (true) {
			if (!(p.prefixes.$length > 0)) { break; }
			prefix = (x$1 = p.prefixes, x$2 = p.prefixes.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2]));
			p.prefixes = $subslice(p.prefixes, 0, (p.prefixes.$length - 1 >> 0));
			if (prefix === "") {
				break;
			}
			p.deleteAttrPrefix(prefix);
		}
	};
	printer.prototype.popPrefix = function() { return this.$val.popPrefix(); };
	printer.ptr.prototype.marshalValue = function(val, finfo, startTemplate) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _v, _v$1, _v$2, _v$3, _v$4, _v$5, _v$6, _v$7, _v$8, attr, attr$1, b, b$1, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err1, finfo, finfo$1, fv, i, i$1, kind, n, name, name$1, ok, p, pv, pv$1, pv$2, pv$3, s, s$1, start, startTemplate, text, text$1, tinfo, typ, v, val, x$1, xmlname, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; _v$7 = $f._v$7; _v$8 = $f._v$8; attr = $f.attr; attr$1 = $f.attr$1; b = $f.b; b$1 = $f.b$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err1 = $f.err1; finfo = $f.finfo; finfo$1 = $f.finfo$1; fv = $f.fv; i = $f.i; i$1 = $f.i$1; kind = $f.kind; n = $f.n; name = $f.name; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pv = $f.pv; pv$1 = $f.pv$1; pv$2 = $f.pv$2; pv$3 = $f.pv$3; s = $f.s; s$1 = $f.s$1; start = $f.start; startTemplate = $f.startTemplate; text = $f.text; text$1 = $f.text$1; tinfo = $f.tinfo; typ = $f.typ; v = $f.v; val = $f.val; x$1 = $f.x$1; xmlname = $f.xmlname; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = [start];
		p = this;
		val = val;
		/* */ if (!(startTemplate === ptrType$9.nil) && startTemplate.Name.Local === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(startTemplate === ptrType$9.nil) && startTemplate.Name.Local === "") { */ case 1:
			_r$6 = fmt.Errorf("xml: EncodeElement of StartElement with missing name", new sliceType$5([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			return _r$6;
		/* } */ case 2:
		if (!val.IsValid()) {
			return $ifaceNil;
		}
		if (!(finfo === ptrType$8.nil) && !(((finfo.flags & 64) === 0)) && isEmptyValue(val)) {
			return $ifaceNil;
		}
		/* while (true) { */ case 4:
			/* if (!((val.Kind() === 20) || (val.Kind() === 22))) { break; } */ if(!((val.Kind() === 20) || (val.Kind() === 22))) { $s = 5; continue; }
			if (val.IsNil()) {
				return $ifaceNil;
			}
			_r$7 = val.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			val = _r$7;
		/* } */ $s = 4; continue; case 5:
		kind = val.Kind();
		typ = val.Type();
		if (!(val.CanInterface())) { _v = false; $s = 9; continue s; }
		_r$8 = typ.Implements(marshalerType); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v = _r$8; case 9:
		/* */ if (_v) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_v) { */ case 7:
			_r$9 = val.Interface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg = $assertType(_r$9, Marshaler);
			_r$10 = defaultStart(typ, finfo, startTemplate); /* */ $s = 12; case 12: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$1 = _r$10;
			_r$11 = p.marshalInterface(_arg, _arg$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			return _r$11;
		/* } */ case 8:
		/* */ if (val.CanAddr()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (val.CanAddr()) { */ case 14:
			pv = val.Addr();
			if (!(pv.CanInterface())) { _v$1 = false; $s = 18; continue s; }
			_r$12 = pv.Type().Implements(marshalerType); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_v$1 = _r$12; case 18:
			/* */ if (_v$1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v$1) { */ case 16:
				_r$13 = pv.Interface(); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$2 = $assertType(_r$13, Marshaler);
				_r$14 = defaultStart(pv.Type(), finfo, startTemplate); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$3 = _r$14;
				_r$15 = p.marshalInterface(_arg$2, _arg$3); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				return _r$15;
			/* } */ case 17:
		/* } */ case 15:
		if (!(val.CanInterface())) { _v$2 = false; $s = 25; continue s; }
		_r$16 = typ.Implements(textMarshalerType); /* */ $s = 26; case 26: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_v$2 = _r$16; case 25:
		/* */ if (_v$2) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (_v$2) { */ case 23:
			_r$17 = val.Interface(); /* */ $s = 27; case 27: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_arg$4 = $assertType(_r$17, encoding.TextMarshaler);
			_r$18 = defaultStart(typ, finfo, startTemplate); /* */ $s = 28; case 28: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_arg$5 = _r$18;
			_r$19 = p.marshalTextInterface(_arg$4, _arg$5); /* */ $s = 29; case 29: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			return _r$19;
		/* } */ case 24:
		/* */ if (val.CanAddr()) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (val.CanAddr()) { */ case 30:
			pv$1 = val.Addr();
			if (!(pv$1.CanInterface())) { _v$3 = false; $s = 34; continue s; }
			_r$20 = pv$1.Type().Implements(textMarshalerType); /* */ $s = 35; case 35: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_v$3 = _r$20; case 34:
			/* */ if (_v$3) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (_v$3) { */ case 32:
				_r$21 = pv$1.Interface(); /* */ $s = 36; case 36: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_arg$6 = $assertType(_r$21, encoding.TextMarshaler);
				_r$22 = defaultStart(pv$1.Type(), finfo, startTemplate); /* */ $s = 37; case 37: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_arg$7 = _r$22;
				_r$23 = p.marshalTextInterface(_arg$6, _arg$7); /* */ $s = 38; case 38: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				return _r$23;
			/* } */ case 33:
		/* } */ case 31:
		if (!((kind === 23) || (kind === 17))) { _v$4 = false; $s = 41; continue s; }
		_r$24 = typ.Elem(); /* */ $s = 42; case 42: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Kind(); /* */ $s = 43; case 43: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_v$4 = !((_r$25 === 8)); case 41:
		/* */ if (_v$4) { $s = 39; continue; }
		/* */ $s = 40; continue;
		/* if (_v$4) { */ case 39:
			_tmp = 0; _tmp$1 = val.Len(); i = _tmp; n = _tmp$1;
			/* while (true) { */ case 44:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 45; continue; }
				_r$26 = val.Index(i); /* */ $s = 46; case 46: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_r$27 = p.marshalValue(_r$26, finfo, startTemplate); /* */ $s = 47; case 47: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				err = _r$27;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 48; continue; }
				/* */ $s = 49; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 48:
					return err;
				/* } */ case 49:
				i = i + (1) >> 0;
			/* } */ $s = 44; continue; case 45:
			return $ifaceNil;
		/* } */ case 40:
		_r$28 = getTypeInfo(typ); /* */ $s = 50; case 50: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_tuple = _r$28; tinfo = _tuple[0]; err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		start[0] = $clone(new StartElement.ptr(), StartElement);
		/* */ if (!(startTemplate === ptrType$9.nil)) { $s = 51; continue; }
		/* */ if (!(tinfo.xmlname === ptrType$8.nil)) { $s = 52; continue; }
		/* */ $s = 53; continue;
		/* if (!(startTemplate === ptrType$9.nil)) { */ case 51:
			$copy(start[0].Name, startTemplate.Name, Name);
			start[0].Attr = $appendSlice(start[0].Attr, startTemplate.Attr);
			$s = 53; continue;
		/* } else if (!(tinfo.xmlname === ptrType$8.nil)) { */ case 52:
			xmlname = tinfo.xmlname;
			/* */ if (!(xmlname.name === "")) { $s = 54; continue; }
			/* */ $s = 55; continue;
			/* if (!(xmlname.name === "")) { */ case 54:
				_tmp$2 = xmlname.xmlns; _tmp$3 = xmlname.name; start[0].Name.Space = _tmp$2; start[0].Name.Local = _tmp$3;
				$s = 56; continue;
			/* } else { */ case 55:
				_r$29 = xmlname.value(val); /* */ $s = 57; case 57: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$30 = _r$29.Interface(); /* */ $s = 58; case 58: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_tuple$1 = $assertType(_r$30, Name, true); v = $clone(_tuple$1[0], Name); ok = _tuple$1[1];
				/* */ if (ok && !(v.Local === "")) { $s = 59; continue; }
				/* */ $s = 60; continue;
				/* if (ok && !(v.Local === "")) { */ case 59:
					$copy(start[0].Name, v, Name);
				/* } */ case 60:
			/* } */ case 56:
		/* } */ case 53:
		if (start[0].Name.Local === "" && !(finfo === ptrType$8.nil)) {
			_tmp$4 = finfo.xmlns; _tmp$5 = finfo.name; start[0].Name.Space = _tmp$4; start[0].Name.Local = _tmp$5;
		}
		/* */ if (start[0].Name.Local === "") { $s = 61; continue; }
		/* */ $s = 62; continue;
		/* if (start[0].Name.Local === "") { */ case 61:
			_r$31 = typ.Name(); /* */ $s = 63; case 63: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			name = _r$31;
			if (name === "") {
				return new UnsupportedTypeError.ptr(typ);
			}
			start[0].Name.Local = name;
		/* } */ case 62:
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 64:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 65; continue; }
			i$1 = _i;
			finfo$1 = (x$1 = tinfo.fields, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1]));
			/* */ if ((finfo$1.flags & 2) === 0) { $s = 66; continue; }
			/* */ $s = 67; continue;
			/* if ((finfo$1.flags & 2) === 0) { */ case 66:
				_i++;
				/* continue; */ $s = 64; continue;
			/* } */ case 67:
			_r$32 = finfo$1.value(val); /* */ $s = 68; case 68: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			fv = _r$32;
			name$1 = new Name.ptr(finfo$1.xmlns, finfo$1.name);
			/* */ if (!(((finfo$1.flags & 64) === 0)) && isEmptyValue(fv)) { $s = 69; continue; }
			/* */ $s = 70; continue;
			/* if (!(((finfo$1.flags & 64) === 0)) && isEmptyValue(fv)) { */ case 69:
				_i++;
				/* continue; */ $s = 64; continue;
			/* } */ case 70:
			/* */ if ((fv.Kind() === 20) && fv.IsNil()) { $s = 71; continue; }
			/* */ $s = 72; continue;
			/* if ((fv.Kind() === 20) && fv.IsNil()) { */ case 71:
				_i++;
				/* continue; */ $s = 64; continue;
			/* } */ case 72:
			if (!(fv.CanInterface())) { _v$5 = false; $s = 75; continue s; }
			_r$33 = fv.Type().Implements(marshalerAttrType); /* */ $s = 76; case 76: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_v$5 = _r$33; case 75:
			/* */ if (_v$5) { $s = 73; continue; }
			/* */ $s = 74; continue;
			/* if (_v$5) { */ case 73:
				_r$34 = fv.Interface(); /* */ $s = 77; case 77: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				_r$35 = $assertType(_r$34, MarshalerAttr).MarshalXMLAttr(name$1); /* */ $s = 78; case 78: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_tuple$2 = _r$35; attr = $clone(_tuple$2[0], Attr); err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return err$2;
				}
				if (!(attr.Name.Local === "")) {
					start[0].Attr = $append(start[0].Attr, attr);
				}
				_i++;
				/* continue; */ $s = 64; continue;
			/* } */ case 74:
			/* */ if (fv.CanAddr()) { $s = 79; continue; }
			/* */ $s = 80; continue;
			/* if (fv.CanAddr()) { */ case 79:
				pv$2 = fv.Addr();
				if (!(pv$2.CanInterface())) { _v$6 = false; $s = 83; continue s; }
				_r$36 = pv$2.Type().Implements(marshalerAttrType); /* */ $s = 84; case 84: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				_v$6 = _r$36; case 83:
				/* */ if (_v$6) { $s = 81; continue; }
				/* */ $s = 82; continue;
				/* if (_v$6) { */ case 81:
					_r$37 = pv$2.Interface(); /* */ $s = 85; case 85: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					_r$38 = $assertType(_r$37, MarshalerAttr).MarshalXMLAttr(name$1); /* */ $s = 86; case 86: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					_tuple$3 = _r$38; attr$1 = $clone(_tuple$3[0], Attr); err$3 = _tuple$3[1];
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						return err$3;
					}
					if (!(attr$1.Name.Local === "")) {
						start[0].Attr = $append(start[0].Attr, attr$1);
					}
					_i++;
					/* continue; */ $s = 64; continue;
				/* } */ case 82:
			/* } */ case 80:
			if (!(fv.CanInterface())) { _v$7 = false; $s = 89; continue s; }
			_r$39 = fv.Type().Implements(textMarshalerType); /* */ $s = 90; case 90: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			_v$7 = _r$39; case 89:
			/* */ if (_v$7) { $s = 87; continue; }
			/* */ $s = 88; continue;
			/* if (_v$7) { */ case 87:
				_r$40 = fv.Interface(); /* */ $s = 91; case 91: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				_r$41 = $assertType(_r$40, encoding.TextMarshaler).MarshalText(); /* */ $s = 92; case 92: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				_tuple$4 = _r$41; text = _tuple$4[0]; err$4 = _tuple$4[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					return err$4;
				}
				start[0].Attr = $append(start[0].Attr, new Attr.ptr($clone(name$1, Name), $bytesToString(text)));
				_i++;
				/* continue; */ $s = 64; continue;
			/* } */ case 88:
			/* */ if (fv.CanAddr()) { $s = 93; continue; }
			/* */ $s = 94; continue;
			/* if (fv.CanAddr()) { */ case 93:
				pv$3 = fv.Addr();
				if (!(pv$3.CanInterface())) { _v$8 = false; $s = 97; continue s; }
				_r$42 = pv$3.Type().Implements(textMarshalerType); /* */ $s = 98; case 98: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				_v$8 = _r$42; case 97:
				/* */ if (_v$8) { $s = 95; continue; }
				/* */ $s = 96; continue;
				/* if (_v$8) { */ case 95:
					_r$43 = pv$3.Interface(); /* */ $s = 99; case 99: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
					_r$44 = $assertType(_r$43, encoding.TextMarshaler).MarshalText(); /* */ $s = 100; case 100: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					_tuple$5 = _r$44; text$1 = _tuple$5[0]; err$5 = _tuple$5[1];
					if (!($interfaceIsEqual(err$5, $ifaceNil))) {
						return err$5;
					}
					start[0].Attr = $append(start[0].Attr, new Attr.ptr($clone(name$1, Name), $bytesToString(text$1)));
					_i++;
					/* continue; */ $s = 64; continue;
				/* } */ case 96:
			/* } */ case 94:
			_ref$1 = fv.Kind();
			/* */ if (_ref$1 === 22 || _ref$1 === 20) { $s = 101; continue; }
			/* */ $s = 102; continue;
			/* if (_ref$1 === 22 || _ref$1 === 20) { */ case 101:
				/* */ if (fv.IsNil()) { $s = 103; continue; }
				/* */ $s = 104; continue;
				/* if (fv.IsNil()) { */ case 103:
					_i++;
					/* continue; */ $s = 64; continue;
				/* } */ case 104:
				_r$45 = fv.Elem(); /* */ $s = 105; case 105: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
				fv = _r$45;
			/* } */ case 102:
			_r$46 = p.marshalSimple(fv.Type(), fv); /* */ $s = 106; case 106: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
			_tuple$6 = _r$46; s = _tuple$6[0]; b = _tuple$6[1]; err$6 = _tuple$6[2];
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				return err$6;
			}
			if (!(b === sliceType.nil)) {
				s = $bytesToString(b);
			}
			start[0].Attr = $append(start[0].Attr, new Attr.ptr($clone(name$1, Name), s));
			_i++;
		/* } */ $s = 64; continue; case 65:
		_r$47 = p.writeStart(start[0]); /* */ $s = 107; case 107: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
		err$7 = _r$47;
		/* */ if (!($interfaceIsEqual(err$7, $ifaceNil))) { $s = 108; continue; }
		/* */ $s = 109; continue;
		/* if (!($interfaceIsEqual(err$7, $ifaceNil))) { */ case 108:
			return err$7;
		/* } */ case 109:
		/* */ if (val.Kind() === 25) { $s = 110; continue; }
		/* */ $s = 111; continue;
		/* if (val.Kind() === 25) { */ case 110:
			_r$48 = p.marshalStruct(tinfo, val); /* */ $s = 113; case 113: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			err$1 = _r$48;
			$s = 112; continue;
		/* } else { */ case 111:
			_r$49 = p.marshalSimple(typ, val); /* */ $s = 114; case 114: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
			_tuple$7 = _r$49; s$1 = _tuple$7[0]; b$1 = _tuple$7[1]; err1 = _tuple$7[2];
			/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 115; continue; }
			/* */ if (!(b$1 === sliceType.nil)) { $s = 116; continue; }
			/* */ $s = 117; continue;
			/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 115:
				err$1 = err1;
				$s = 118; continue;
			/* } else if (!(b$1 === sliceType.nil)) { */ case 116:
				_r$50 = EscapeText(p, b$1); /* */ $s = 119; case 119: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
				_r$50;
				$s = 118; continue;
			/* } else { */ case 117:
				$r = p.EscapeString(s$1); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 118:
		/* } */ case 112:
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		_r$51 = p.writeEnd(start[0].Name); /* */ $s = 121; case 121: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
		err$8 = _r$51;
		/* */ if (!($interfaceIsEqual(err$8, $ifaceNil))) { $s = 122; continue; }
		/* */ $s = 123; continue;
		/* if (!($interfaceIsEqual(err$8, $ifaceNil))) { */ case 122:
			return err$8;
		/* } */ case 123:
		_r$52 = p.cachedWriteError(); /* */ $s = 124; case 124: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
		return _r$52;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalValue }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f._v$7 = _v$7; $f._v$8 = _v$8; $f.attr = attr; $f.attr$1 = attr$1; $f.b = b; $f.b$1 = b$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err1 = err1; $f.finfo = finfo; $f.finfo$1 = finfo$1; $f.fv = fv; $f.i = i; $f.i$1 = i$1; $f.kind = kind; $f.n = n; $f.name = name; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pv = pv; $f.pv$1 = pv$1; $f.pv$2 = pv$2; $f.pv$3 = pv$3; $f.s = s; $f.s$1 = s$1; $f.start = start; $f.startTemplate = startTemplate; $f.text = text; $f.text$1 = text$1; $f.tinfo = tinfo; $f.typ = typ; $f.v = v; $f.val = val; $f.x$1 = x$1; $f.xmlname = xmlname; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalValue = function(val, finfo, startTemplate) { return this.$val.marshalValue(val, finfo, startTemplate); };
	defaultStart = function(typ, finfo, startTemplate) {
		var $ptr, _r$6, _r$7, _r$8, _r$9, finfo, start, startTemplate, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; finfo = $f.finfo; start = $f.start; startTemplate = $f.startTemplate; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = $clone(new StartElement.ptr(), StartElement);
		/* */ if (!(startTemplate === ptrType$9.nil)) { $s = 1; continue; }
		/* */ if (!(finfo === ptrType$8.nil) && !(finfo.name === "")) { $s = 2; continue; }
		_r$6 = typ.Name(); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!(_r$6 === "")) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(startTemplate === ptrType$9.nil)) { */ case 1:
			$copy(start.Name, startTemplate.Name, Name);
			start.Attr = $appendSlice(start.Attr, startTemplate.Attr);
			$s = 5; continue;
		/* } else if (!(finfo === ptrType$8.nil) && !(finfo.name === "")) { */ case 2:
			start.Name.Local = finfo.name;
			start.Name.Space = finfo.xmlns;
			$s = 5; continue;
		/* } else if (!(_r$6 === "")) { */ case 3:
			_r$7 = typ.Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			start.Name.Local = _r$7;
			$s = 5; continue;
		/* } else { */ case 4:
			_r$8 = typ.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = _r$8.Name(); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			start.Name.Local = _r$9;
		/* } */ case 5:
		return start;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: defaultStart }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.finfo = finfo; $f.start = start; $f.startTemplate = startTemplate; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.ptr.prototype.marshalInterface = function(val, start) {
		var $ptr, _arg, _arg$1, _r$6, _r$7, _r$8, err, n, p, start, val, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; err = $f.err; n = $f.n; p = $f.p; start = $f.start; val = $f.val; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		start = $clone(start, StartElement);
		p.tags = $append(p.tags, new Name.ptr("", ""));
		n = p.tags.$length;
		_r$6 = val.MarshalXML(p.encoder, start); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err = _r$6;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		/* */ if (p.tags.$length > n) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (p.tags.$length > n) { */ case 2:
			_r$7 = receiverType(val); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg = new $String(_r$7);
			_arg$1 = new $String((x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local);
			_r$8 = fmt.Errorf("xml: %s.MarshalXML wrote invalid XML: <%s> not closed", new sliceType$5([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			return _r$8;
		/* } */ case 3:
		p.tags = $subslice(p.tags, 0, (n - 1 >> 0));
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalInterface }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.err = err; $f.n = n; $f.p = p; $f.start = start; $f.val = val; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalInterface = function(val, start) { return this.$val.marshalInterface(val, start); };
	printer.ptr.prototype.marshalTextInterface = function(val, start) {
		var $ptr, _r$6, _r$7, _r$8, _r$9, _tuple, err, err$1, p, start, text, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; p = $f.p; start = $f.start; text = $f.text; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = [start];
		p = this;
		start[0] = $clone(start[0], StartElement);
		_r$6 = p.writeStart(start[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err = _r$6;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return err;
		/* } */ case 3:
		_r$7 = val.MarshalText(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple = _r$7; text = _tuple[0]; err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		_r$8 = EscapeText(p, text); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = p.writeEnd(start[0].Name); /* */ $s = 6; case 6: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		return _r$9;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalTextInterface }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.p = p; $f.start = start; $f.text = text; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalTextInterface = function(val, start) { return this.$val.marshalTextInterface(val, start); };
	printer.ptr.prototype.writeStart = function(start) {
		var $ptr, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$6, _r$7, _r$8, _r$9, _ref, attr, name, p, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; attr = $f.attr; name = $f.name; p = $f.p; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (start.Name.Local === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (start.Name.Local === "") { */ case 1:
			_r$6 = fmt.Errorf("xml: start tag with no name", new sliceType$5([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			return _r$6;
		/* } */ case 2:
		p.tags = $append(p.tags, start.Name);
		p.markPrefix();
		$r = p.writeIndent(1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$7 = p.Writer.WriteByte(60); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = p.Writer.WriteString(start.Name.Local); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		/* */ if (!(start.Name.Space === "")) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(start.Name.Space === "")) { */ case 7:
			_r$9 = p.Writer.WriteString(" xmlns=\""); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			$r = p.EscapeString(start.Name.Space); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$10 = p.Writer.WriteByte(34); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
		/* } */ case 8:
		_ref = start.Attr;
		_i = 0;
		/* while (true) { */ case 12:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 13; continue; }
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
			name = $clone(attr.Name, Name);
			/* */ if (name.Local === "") { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (name.Local === "") { */ case 14:
				_i++;
				/* continue; */ $s = 12; continue;
			/* } */ case 15:
			_r$11 = p.Writer.WriteByte(32); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			/* */ if (!(name.Space === "")) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!(name.Space === "")) { */ case 17:
				_r$12 = p.createAttrPrefix(name.Space); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = p.Writer.WriteString(_r$12); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$13;
				_r$14 = p.Writer.WriteByte(58); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
			/* } */ case 18:
			_r$15 = p.Writer.WriteString(name.Local); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$15;
			_r$16 = p.Writer.WriteString("=\""); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			$r = p.EscapeString(attr.Value); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$17 = p.Writer.WriteByte(34); /* */ $s = 25; case 25: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$17;
			_i++;
		/* } */ $s = 12; continue; case 13:
		_r$18 = p.Writer.WriteByte(62); /* */ $s = 26; case 26: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$18;
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeStart }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.attr = attr; $f.name = name; $f.p = p; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeStart = function(start) { return this.$val.writeStart(start); };
	printer.ptr.prototype.writeEnd = function(name) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$6, _r$7, _r$8, _r$9, name, p, top, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; name = $f.name; p = $f.p; top = $f.top; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		name = $clone(name, Name);
		/* */ if (name.Local === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name.Local === "") { */ case 1:
			_r$6 = fmt.Errorf("xml: end tag with no name", new sliceType$5([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			return _r$6;
		/* } */ case 2:
		/* */ if ((p.tags.$length === 0) || (x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local === "") { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((p.tags.$length === 0) || (x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local === "") { */ case 4:
			_r$7 = fmt.Errorf("xml: end tag </%s> without start tag", new sliceType$5([new $String(name.Local)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			return _r$7;
		/* } */ case 5:
		top = $clone((x$3 = p.tags, x$4 = p.tags.$length - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])), Name);
		/* */ if (!($equal(top, name, Name))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($equal(top, name, Name))) { */ case 7:
			/* */ if (!(top.Local === name.Local)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!(top.Local === name.Local)) { */ case 9:
				_r$8 = fmt.Errorf("xml: end tag </%s> does not match start tag <%s>", new sliceType$5([new $String(name.Local), new $String(top.Local)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				return _r$8;
			/* } */ case 10:
			_r$9 = fmt.Errorf("xml: end tag </%s> in namespace %s does not match start tag <%s> in namespace %s", new sliceType$5([new $String(name.Local), new $String(name.Space), new $String(top.Local), new $String(top.Space)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			return _r$9;
		/* } */ case 8:
		p.tags = $subslice(p.tags, 0, (p.tags.$length - 1 >> 0));
		$r = p.writeIndent(-1); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$10 = p.Writer.WriteByte(60); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = p.Writer.WriteByte(47); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		_r$12 = p.Writer.WriteString(name.Local); /* */ $s = 16; case 16: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		_r$13 = p.Writer.WriteByte(62); /* */ $s = 17; case 17: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		p.popPrefix();
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeEnd }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.name = name; $f.p = p; $f.top = top; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeEnd = function(name) { return this.$val.writeEnd(name); };
	printer.ptr.prototype.marshalSimple = function(typ, val) {
		var $ptr, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$6, _r$7, _r$8, _r$9, _ref, bytes$1, p, typ, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; bytes$1 = $f.bytes$1; p = $f.p; typ = $f.typ; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		val = val;
		_ref = val.Kind();
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 1; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 2; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 3; continue; }
		/* */ if (_ref === 24) { $s = 4; continue; }
		/* */ if (_ref === 1) { $s = 5; continue; }
		/* */ if (_ref === 17) { $s = 6; continue; }
		/* */ if (_ref === 23) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* switch (0) { default: if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 1:
			return [strconv.FormatInt(val.Int(), 10), sliceType.nil, $ifaceNil];
			$s = 8; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 2:
			return [strconv.FormatUint(val.Uint(), 10), sliceType.nil, $ifaceNil];
			$s = 8; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 3:
			_arg = val.Float();
			_r$6 = val.Type().Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$1 = _r$6;
			_r$7 = strconv.FormatFloat(_arg, 103, -1, _arg$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			return [_r$7, sliceType.nil, $ifaceNil];
			$s = 8; continue;
		/* } else if (_ref === 24) { */ case 4:
			_r$8 = val.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			return [_r$8, sliceType.nil, $ifaceNil];
			$s = 8; continue;
		/* } else if (_ref === 1) { */ case 5:
			return [strconv.FormatBool(val.Bool()), sliceType.nil, $ifaceNil];
			$s = 8; continue;
		/* } else if (_ref === 17) { */ case 6:
			_r$9 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = _r$9.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ if (!((_r$10 === 8))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((_r$10 === 8))) { */ case 12:
				/* break; */ $s = 8; continue;
			/* } */ case 13:
			bytes$1 = sliceType.nil;
			/* */ if (val.CanAddr()) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (val.CanAddr()) { */ case 16:
				_r$11 = val.Slice(0, val.Len()); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = _r$11.Bytes(); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				bytes$1 = _r$12;
				$s = 18; continue;
			/* } else { */ case 17:
				bytes$1 = $makeSlice(sliceType, val.Len());
				_r$13 = reflect.ValueOf(bytes$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = reflect.Copy(_r$13, val); /* */ $s = 22; case 22: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
			/* } */ case 18:
			return ["", bytes$1, $ifaceNil];
			$s = 8; continue;
		/* } else if (_ref === 23) { */ case 7:
			_r$15 = typ.Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (!((_r$16 === 8))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!((_r$16 === 8))) { */ case 23:
				/* break; */ $s = 8; continue;
			/* } */ case 24:
			_r$17 = val.Bytes(); /* */ $s = 27; case 27: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			return ["", _r$17, $ifaceNil];
		/* } } */ case 8:
		return ["", sliceType.nil, new UnsupportedTypeError.ptr(typ)];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalSimple }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.bytes$1 = bytes$1; $f.p = p; $f.typ = typ; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalSimple = function(typ, val) { return this.$val.marshalSimple(typ, val); };
	printer.ptr.prototype.marshalStruct = function(tinfo, val) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, _tuple$1, _tuple$2, _v, _v$1, _v$2, _v$3, b, dashDash, dashLast, data, data$1, elem, err, err$1, err$2, err$3, err$4, err$5, err$6, finfo, i, iface, k, ok, p, pv, raw, raw$1, s, s$1, scratch, tinfo, val, vf, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; b = $f.b; dashDash = $f.dashDash; dashLast = $f.dashLast; data = $f.data; data$1 = $f.data$1; elem = $f.elem; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; finfo = $f.finfo; i = $f.i; iface = $f.iface; k = $f.k; ok = $f.ok; p = $f.p; pv = $f.pv; raw = $f.raw; raw$1 = $f.raw$1; s = $f.s; s$1 = $f.s$1; scratch = $f.scratch; tinfo = $f.tinfo; val = $f.val; vf = $f.vf; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		val = val;
		s = new parentStack.ptr(p, sliceType$3.nil);
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			finfo = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			/* */ if (!(((finfo.flags & 2) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((finfo.flags & 2) === 0))) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$6 = finfo.value(val); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			vf = _r$6;
			_ref$1 = vf.Kind();
			/* */ if (_ref$1 === 22 || _ref$1 === 20) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_ref$1 === 22 || _ref$1 === 20) { */ case 6:
				/* */ if (!vf.IsNil()) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!vf.IsNil()) { */ case 8:
					_r$7 = vf.Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					vf = _r$7;
				/* } */ case 9:
			/* } */ case 7:
			_ref$2 = finfo.flags & 63;
			/* */ if (_ref$2 === 4) { $s = 11; continue; }
			/* */ if (_ref$2 === 16) { $s = 12; continue; }
			/* */ if (_ref$2 === 8) { $s = 13; continue; }
			/* */ if (_ref$2 === 1 || _ref$2 === 33) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_ref$2 === 4) { */ case 11:
				if (!(vf.CanInterface())) { _v = false; $s = 18; continue s; }
				_r$8 = vf.Type().Implements(textMarshalerType); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_v = _r$8; case 18:
				/* */ if (_v) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_v) { */ case 16:
					_r$9 = vf.Interface(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = $assertType(_r$9, encoding.TextMarshaler).MarshalText(); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple = _r$10; data = _tuple[0]; err = _tuple[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return err;
					}
					$r = Escape(p, data); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 17:
				/* */ if (vf.CanAddr()) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (vf.CanAddr()) { */ case 23:
					pv = vf.Addr();
					if (!(pv.CanInterface())) { _v$1 = false; $s = 27; continue s; }
					_r$11 = pv.Type().Implements(textMarshalerType); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_v$1 = _r$11; case 27:
					/* */ if (_v$1) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_v$1) { */ case 25:
						_r$12 = pv.Interface(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_r$13 = $assertType(_r$12, encoding.TextMarshaler).MarshalText(); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_tuple$1 = _r$13; data$1 = _tuple$1[0]; err$1 = _tuple$1[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							return err$1;
						}
						$r = Escape(p, data$1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 26:
				/* } */ case 24:
				scratch = $clone(arrayType.zero(), arrayType);
				_ref$3 = vf.Kind();
				/* */ if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) { $s = 32; continue; }
				/* */ if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) { $s = 33; continue; }
				/* */ if (_ref$3 === 13 || _ref$3 === 14) { $s = 34; continue; }
				/* */ if (_ref$3 === 1) { $s = 35; continue; }
				/* */ if (_ref$3 === 24) { $s = 36; continue; }
				/* */ if (_ref$3 === 23) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) { */ case 32:
					$r = Escape(p, strconv.AppendInt($subslice(new sliceType(scratch), 0, 0), vf.Int(), 10)); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 38; continue;
				/* } else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) { */ case 33:
					$r = Escape(p, strconv.AppendUint($subslice(new sliceType(scratch), 0, 0), vf.Uint(), 10)); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 38; continue;
				/* } else if (_ref$3 === 13 || _ref$3 === 14) { */ case 34:
					_arg = p;
					_arg$1 = $subslice(new sliceType(scratch), 0, 0);
					_arg$2 = vf.Float();
					_r$14 = vf.Type().Bits(); /* */ $s = 41; case 41: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_arg$3 = _r$14;
					_r$15 = strconv.AppendFloat(_arg$1, _arg$2, 103, -1, _arg$3); /* */ $s = 42; case 42: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_arg$4 = _r$15;
					$r = Escape(_arg, _arg$4); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 38; continue;
				/* } else if (_ref$3 === 1) { */ case 35:
					$r = Escape(p, strconv.AppendBool($subslice(new sliceType(scratch), 0, 0), vf.Bool())); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 38; continue;
				/* } else if (_ref$3 === 24) { */ case 36:
					_arg$5 = p;
					_r$16 = vf.String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_arg$6 = new sliceType($stringToBytes(_r$16));
					_r$17 = EscapeText(_arg$5, _arg$6); /* */ $s = 46; case 46: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					err$2 = _r$17;
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 47; continue; }
					/* */ $s = 48; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 47:
						return err$2;
					/* } */ case 48:
					$s = 38; continue;
				/* } else if (_ref$3 === 23) { */ case 37:
					_r$18 = vf.Interface(); /* */ $s = 49; case 49: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_tuple$2 = $assertType(_r$18, sliceType, true); elem = _tuple$2[0]; ok = _tuple$2[1];
					/* */ if (ok) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (ok) { */ case 50:
						_r$19 = EscapeText(p, elem); /* */ $s = 52; case 52: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						err$3 = _r$19;
						/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 53; continue; }
						/* */ $s = 54; continue;
						/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 53:
							return err$3;
						/* } */ case 54:
					/* } */ case 51:
				/* } */ case 38:
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 15; continue;
			/* } else if (_ref$2 === 16) { */ case 12:
				k = vf.Kind();
				if (k === 24) { _v$2 = true; $s = 57; continue s; }
				if (!(k === 23)) { _v$3 = false; $s = 58; continue s; }
				_r$20 = vf.Type().Elem(); /* */ $s = 59; case 59: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$21 = _r$20.Kind(); /* */ $s = 60; case 60: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_v$3 = _r$21 === 8; case 58:
				_v$2 = _v$3; case 57:
				/* */ if (!(_v$2)) { $s = 55; continue; }
				/* */ $s = 56; continue;
				/* if (!(_v$2)) { */ case 55:
					_r$22 = fmt.Errorf("xml: bad type for comment field of %s", new sliceType$5([val.Type()])); /* */ $s = 61; case 61: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					return _r$22;
				/* } */ case 56:
				/* */ if (vf.Len() === 0) { $s = 62; continue; }
				/* */ $s = 63; continue;
				/* if (vf.Len() === 0) { */ case 62:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 63:
				$r = p.writeIndent(0); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$23 = p.Writer.WriteString("<!--"); /* */ $s = 65; case 65: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$23;
				dashDash = false;
				dashLast = false;
				_ref$4 = k;
				/* */ if (_ref$4 === 24) { $s = 66; continue; }
				/* */ if (_ref$4 === 23) { $s = 67; continue; }
				/* */ $s = 68; continue;
				/* if (_ref$4 === 24) { */ case 66:
					_r$24 = vf.String(); /* */ $s = 70; case 70: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					s$1 = _r$24;
					dashDash = strings.Index(s$1, "--") >= 0;
					dashLast = s$1.charCodeAt((s$1.length - 1 >> 0)) === 45;
					/* */ if (!dashDash) { $s = 71; continue; }
					/* */ $s = 72; continue;
					/* if (!dashDash) { */ case 71:
						_r$25 = p.Writer.WriteString(s$1); /* */ $s = 73; case 73: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						_r$25;
					/* } */ case 72:
					$s = 69; continue;
				/* } else if (_ref$4 === 23) { */ case 67:
					_r$26 = vf.Bytes(); /* */ $s = 74; case 74: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					b = _r$26;
					dashDash = bytes.Index(b, ddBytes) >= 0;
					dashLast = (x$2 = b.$length - 1 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$2])) === 45;
					/* */ if (!dashDash) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if (!dashDash) { */ case 75:
						_r$27 = p.Writer.Write(b); /* */ $s = 77; case 77: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						_r$27;
					/* } */ case 76:
					$s = 69; continue;
				/* } else { */ case 68:
					$panic(new $String("can't happen"));
				/* } */ case 69:
				/* */ if (dashDash) { $s = 78; continue; }
				/* */ $s = 79; continue;
				/* if (dashDash) { */ case 78:
					_r$28 = fmt.Errorf("xml: comments must not contain \"--\"", new sliceType$5([])); /* */ $s = 80; case 80: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					return _r$28;
				/* } */ case 79:
				/* */ if (dashLast) { $s = 81; continue; }
				/* */ $s = 82; continue;
				/* if (dashLast) { */ case 81:
					_r$29 = p.Writer.WriteByte(32); /* */ $s = 83; case 83: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_r$29;
				/* } */ case 82:
				_r$30 = p.Writer.WriteString("-->"); /* */ $s = 84; case 84: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$30;
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 15; continue;
			/* } else if (_ref$2 === 8) { */ case 13:
				_r$31 = vf.Interface(); /* */ $s = 85; case 85: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				iface = _r$31;
				_ref$5 = iface;
				/* */ if ($assertType(_ref$5, sliceType, true)[1]) { $s = 86; continue; }
				/* */ if ($assertType(_ref$5, $String, true)[1]) { $s = 87; continue; }
				/* */ $s = 88; continue;
				/* if ($assertType(_ref$5, sliceType, true)[1]) { */ case 86:
					raw = _ref$5.$val;
					_r$32 = p.Writer.Write(raw); /* */ $s = 89; case 89: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					_r$32;
					_i++;
					/* continue; */ $s = 1; continue;
					$s = 88; continue;
				/* } else if ($assertType(_ref$5, $String, true)[1]) { */ case 87:
					raw$1 = _ref$5.$val;
					_r$33 = p.Writer.WriteString(raw$1); /* */ $s = 90; case 90: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_r$33;
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 88:
				$s = 15; continue;
			/* } else if (_ref$2 === 1 || _ref$2 === 33) { */ case 14:
				_r$34 = s.trim(finfo.parents); /* */ $s = 91; case 91: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				err$4 = _r$34;
				/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 92; continue; }
				/* */ $s = 93; continue;
				/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 92:
					return err$4;
				/* } */ case 93:
				/* */ if (finfo.parents.$length > s.stack.$length) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (finfo.parents.$length > s.stack.$length) { */ case 94:
					/* */ if (!((vf.Kind() === 22)) && !((vf.Kind() === 20)) || !vf.IsNil()) { $s = 96; continue; }
					/* */ $s = 97; continue;
					/* if (!((vf.Kind() === 22)) && !((vf.Kind() === 20)) || !vf.IsNil()) { */ case 96:
						_r$35 = s.push($subslice(finfo.parents, s.stack.$length)); /* */ $s = 98; case 98: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
						err$5 = _r$35;
						/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 99; continue; }
						/* */ $s = 100; continue;
						/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 99:
							return err$5;
						/* } */ case 100:
					/* } */ case 97:
				/* } */ case 95:
			/* } */ case 15:
			_r$36 = p.marshalValue(vf, finfo, ptrType$9.nil); /* */ $s = 101; case 101: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			err$6 = _r$36;
			/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 102; continue; }
			/* */ $s = 103; continue;
			/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 102:
				return err$6;
			/* } */ case 103:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$37 = s.trim(sliceType$3.nil); /* */ $s = 104; case 104: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		_r$37;
		_r$38 = p.cachedWriteError(); /* */ $s = 105; case 105: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
		return _r$38;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalStruct }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.b = b; $f.dashDash = dashDash; $f.dashLast = dashLast; $f.data = data; $f.data$1 = data$1; $f.elem = elem; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.finfo = finfo; $f.i = i; $f.iface = iface; $f.k = k; $f.ok = ok; $f.p = p; $f.pv = pv; $f.raw = raw; $f.raw$1 = raw$1; $f.s = s; $f.s$1 = s$1; $f.scratch = scratch; $f.tinfo = tinfo; $f.val = val; $f.vf = vf; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalStruct = function(tinfo, val) { return this.$val.marshalStruct(tinfo, val); };
	printer.ptr.prototype.cachedWriteError = function() {
		var $ptr, _r$6, _tuple, err, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$6 = p.Writer.Write(sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; err = _tuple[1];
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.cachedWriteError }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.cachedWriteError = function() { return this.$val.cachedWriteError(); };
	printer.ptr.prototype.writeIndent = function(depthDelta) {
		var $ptr, _r$6, _r$7, _r$8, depthDelta, i, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; depthDelta = $f.depthDelta; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if ((p.prefix.length === 0) && (p.indent.length === 0)) {
			return;
		}
		if (depthDelta < 0) {
			p.depth = p.depth - (1) >> 0;
			if (p.indentedIn) {
				p.indentedIn = false;
				return;
			}
			p.indentedIn = false;
		}
		/* */ if (p.putNewline) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.putNewline) { */ case 1:
			_r$6 = p.Writer.WriteByte(10); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = 3; continue;
		/* } else { */ case 2:
			p.putNewline = true;
		/* } */ case 3:
		/* */ if (p.prefix.length > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.prefix.length > 0) { */ case 5:
			_r$7 = p.Writer.WriteString(p.prefix); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 6:
		/* */ if (p.indent.length > 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (p.indent.length > 0) { */ case 8:
			i = 0;
			/* while (true) { */ case 10:
				/* if (!(i < p.depth)) { break; } */ if(!(i < p.depth)) { $s = 11; continue; }
				_r$8 = p.Writer.WriteString(p.indent); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				i = i + (1) >> 0;
			/* } */ $s = 10; continue; case 11:
		/* } */ case 9:
		if (depthDelta > 0) {
			p.depth = p.depth + (1) >> 0;
			p.indentedIn = true;
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeIndent }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.depthDelta = depthDelta; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeIndent = function(depthDelta) { return this.$val.writeIndent(depthDelta); };
	parentStack.ptr.prototype.trim = function(parents) {
		var $ptr, _r$6, err, i, parents, s, split, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; err = $f.err; i = $f.i; parents = $f.parents; s = $f.s; split = $f.split; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		split = 0;
		while (true) {
			if (!(split < parents.$length && split < s.stack.$length)) { break; }
			if (!(((split < 0 || split >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + split]) === (x$1 = s.stack, ((split < 0 || split >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + split])))) {
				break;
			}
			split = split + (1) >> 0;
		}
		i = s.stack.$length - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i >= split)) { break; } */ if(!(i >= split)) { $s = 2; continue; }
			_r$6 = s.p.writeEnd(new Name.ptr("", (x$2 = s.stack, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])))); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				return err;
			/* } */ case 5:
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		s.stack = $subslice(parents, 0, split);
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parentStack.ptr.prototype.trim }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.err = err; $f.i = i; $f.parents = parents; $f.s = s; $f.split = split; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parentStack.prototype.trim = function(parents) { return this.$val.trim(parents); };
	parentStack.ptr.prototype.push = function(parents) {
		var $ptr, _r$6, err, i, parents, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; err = $f.err; i = $f.i; parents = $f.parents; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < parents.$length)) { break; } */ if(!(i < parents.$length)) { $s = 2; continue; }
			_r$6 = s.p.writeStart(new StartElement.ptr(new Name.ptr("", ((i < 0 || i >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + i])), sliceType$6.nil)); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				return err;
			/* } */ case 5:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		s.stack = $appendSlice(s.stack, parents);
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parentStack.ptr.prototype.push }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.err = err; $f.i = i; $f.parents = parents; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parentStack.prototype.push = function(parents) { return this.$val.push(parents); };
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$6, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$6 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		return "xml: unsupported type: " + _r$6;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnsupportedTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	isEmptyValue = function(v) {
		var $ptr, _ref, v, x$1, x$2;
		v = v;
		_ref = v.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			return v.Len() === 0;
		} else if (_ref === 1) {
			return !v.Bool();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return (x$1 = v.Int(), (x$1.$high === 0 && x$1.$low === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return (x$2 = v.Uint(), (x$2.$high === 0 && x$2.$low === 0));
		} else if (_ref === 13 || _ref === 14) {
			return v.Float() === 0;
		} else if (_ref === 20 || _ref === 22) {
			return v.IsNil();
		}
		return false;
	};
	Decoder.ptr.prototype.Decode = function(v) {
		var $ptr, _r$6, d, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; d = $f.d; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$6 = d.DecodeElement(v, ptrType$9.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		return _r$6;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.d = d; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Decode = function(v) { return this.$val.Decode(v); };
	Decoder.ptr.prototype.DecodeElement = function(v, start) {
		var $ptr, _r$6, _r$7, _r$8, d, start, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; d = $f.d; start = $f.start; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$6 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		val = _r$6;
		if (!((val.Kind() === 22))) {
			return errors.New("non-pointer passed to Unmarshal");
		}
		_r$7 = val.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = d.unmarshal(_r$7, start); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		return _r$8;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.DecodeElement }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.d = d; $f.start = start; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.DecodeElement = function(v, start) { return this.$val.DecodeElement(v, start); };
	UnmarshalError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return e;
	};
	$ptrType(UnmarshalError).prototype.Error = function() { return new UnmarshalError(this.$get()).Error(); };
	receiverType = function(val) {
		var $ptr, _r$6, _r$7, _r$8, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = reflect.TypeOf(val);
		_r$6 = t.Name(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!(_r$6 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r$6 === "")) { */ case 1:
			_r$7 = t.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			return _r$7;
		/* } */ case 2:
		_r$8 = t.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		return "(" + _r$8 + ")";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: receiverType }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.ptr.prototype.unmarshalInterface = function(val, start) {
		var $ptr, _arg, _arg$1, _r$6, _r$7, _r$8, err, p, start, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; err = $f.err; p = $f.p; start = $f.start; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.pushEOF();
		p.unmarshalDepth = p.unmarshalDepth + (1) >> 0;
		_r$6 = val.UnmarshalXML(p, start); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err = _r$6;
		p.unmarshalDepth = p.unmarshalDepth - (1) >> 0;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			p.popEOF();
			return err;
		}
		/* */ if (!p.popEOF()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!p.popEOF()) { */ case 2:
			_r$7 = receiverType(val); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg = new $String(_r$7);
			_arg$1 = new $String(start.Name.Local);
			_r$8 = fmt.Errorf("xml: %s.UnmarshalXML did not consume entire <%s> element", new sliceType$5([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			return _r$8;
		/* } */ case 3:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalInterface }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.err = err; $f.p = p; $f.start = start; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalInterface = function(val, start) { return this.$val.unmarshalInterface(val, start); };
	Decoder.ptr.prototype.unmarshalTextInterface = function(val, start) {
		var $ptr, _r$6, _r$7, _ref, _tuple, buf, depth, err, p, start, t, t$1, t$2, t$3, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; buf = $f.buf; depth = $f.depth; err = $f.err; p = $f.p; start = $f.start; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		buf = sliceType.nil;
		depth = 1;
		/* while (true) { */ case 1:
			/* if (!(depth > 0)) { break; } */ if(!(depth > 0)) { $s = 2; continue; }
			_r$6 = p.Token(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6; t = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_ref = t;
			if ($assertType(_ref, CharData, true)[1]) {
				t$1 = _ref.$val;
				if (depth === 1) {
					buf = $appendSlice(buf, t$1);
				}
			} else if ($assertType(_ref, StartElement, true)[1]) {
				t$2 = _ref.$val;
				depth = depth + (1) >> 0;
			} else if ($assertType(_ref, EndElement, true)[1]) {
				t$3 = _ref.$val;
				depth = depth - (1) >> 0;
			}
		/* } */ $s = 1; continue; case 2:
		_r$7 = val.UnmarshalText(buf); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		return _r$7;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalTextInterface }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.buf = buf; $f.depth = depth; $f.err = err; $f.p = p; $f.start = start; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalTextInterface = function(val, start) { return this.$val.unmarshalTextInterface(val, start); };
	Decoder.ptr.prototype.unmarshalAttr = function(val, attr) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, attr, p, pv, pv$1, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; attr = $f.attr; p = $f.p; pv = $f.pv; pv$1 = $f.pv$1; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		attr = $clone(attr, Attr);
		val = val;
		/* */ if (val.Kind() === 22) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (val.Kind() === 22) { */ case 1:
			/* */ if (val.IsNil()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (val.IsNil()) { */ case 3:
				_r$6 = val.Type().Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = reflect.New(_r$6); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = val.Set(_r$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_r$8 = val.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			val = _r$8;
		/* } */ case 2:
		if (!(val.CanInterface())) { _v = false; $s = 11; continue s; }
		_r$9 = val.Type().Implements(unmarshalerAttrType); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_v = _r$9; case 11:
		/* */ if (_v) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v) { */ case 9:
			_r$10 = val.Interface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $assertType(_r$10, UnmarshalerAttr).UnmarshalXMLAttr(attr); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			return _r$11;
		/* } */ case 10:
		/* */ if (val.CanAddr()) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (val.CanAddr()) { */ case 15:
			pv = val.Addr();
			if (!(pv.CanInterface())) { _v$1 = false; $s = 19; continue s; }
			_r$12 = pv.Type().Implements(unmarshalerAttrType); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_v$1 = _r$12; case 19:
			/* */ if (_v$1) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (_v$1) { */ case 17:
				_r$13 = pv.Interface(); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = $assertType(_r$13, UnmarshalerAttr).UnmarshalXMLAttr(attr); /* */ $s = 22; case 22: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				return _r$14;
			/* } */ case 18:
		/* } */ case 16:
		if (!(val.CanInterface())) { _v$2 = false; $s = 25; continue s; }
		_r$15 = val.Type().Implements(textUnmarshalerType); /* */ $s = 26; case 26: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_v$2 = _r$15; case 25:
		/* */ if (_v$2) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (_v$2) { */ case 23:
			_r$16 = val.Interface(); /* */ $s = 27; case 27: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = $assertType(_r$16, encoding.TextUnmarshaler).UnmarshalText(new sliceType($stringToBytes(attr.Value))); /* */ $s = 28; case 28: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			return _r$17;
		/* } */ case 24:
		/* */ if (val.CanAddr()) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (val.CanAddr()) { */ case 29:
			pv$1 = val.Addr();
			if (!(pv$1.CanInterface())) { _v$3 = false; $s = 33; continue s; }
			_r$18 = pv$1.Type().Implements(textUnmarshalerType); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_v$3 = _r$18; case 33:
			/* */ if (_v$3) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_v$3) { */ case 31:
				_r$19 = pv$1.Interface(); /* */ $s = 35; case 35: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$20 = $assertType(_r$19, encoding.TextUnmarshaler).UnmarshalText(new sliceType($stringToBytes(attr.Value))); /* */ $s = 36; case 36: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				return _r$20;
			/* } */ case 32:
		/* } */ case 30:
		_r$21 = copyValue(val, new sliceType($stringToBytes(attr.Value))); /* */ $s = 37; case 37: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$21;
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalAttr }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.attr = attr; $f.p = p; $f.pv = pv; $f.pv$1 = pv$1; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalAttr = function(val, attr) { return this.$val.unmarshalAttr(val, attr); };
	Decoder.ptr.prototype.unmarshal = function(val, start) {
		var $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, _v$1, _v$2, _v$3, _v$4, _v$5, a, comment, consumed, data, e, e$1, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, finfo, finfo$1, fv, i, n, ncap, new$1, ok, ok$1, p, pv, pv$1, pv$2, saveAny, saveComment, saveData, saveXML, saveXMLData, saveXMLIndex, savedOffset, start, strv, sv, t, t$1, t$2, t$3, t$4, t$5, t$6, tinfo, tok, tok$1, typ, typ$1, v, val, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$55 = $f._r$55; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; a = $f.a; comment = $f.comment; consumed = $f.consumed; data = $f.data; e = $f.e; e$1 = $f.e$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; finfo = $f.finfo; finfo$1 = $f.finfo$1; fv = $f.fv; i = $f.i; n = $f.n; ncap = $f.ncap; new$1 = $f.new$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pv = $f.pv; pv$1 = $f.pv$1; pv$2 = $f.pv$2; saveAny = $f.saveAny; saveComment = $f.saveComment; saveData = $f.saveData; saveXML = $f.saveXML; saveXMLData = $f.saveXMLData; saveXMLIndex = $f.saveXMLIndex; savedOffset = $f.savedOffset; start = $f.start; strv = $f.strv; sv = $f.sv; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; t$5 = $f.t$5; t$6 = $f.t$6; tinfo = $f.tinfo; tok = $f.tok; tok$1 = $f.tok$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; val = $f.val; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		val = val;
		/* */ if (start === ptrType$9.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (start === ptrType$9.nil) { */ case 1:
			/* while (true) { */ case 3:
				t = [t];
				_r$6 = p.Token(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple = _r$6; tok = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				_tuple$1 = $assertType(tok, StartElement, true); t[0] = $clone(_tuple$1[0], StartElement); ok = _tuple$1[1];
				if (ok) {
					start = t[0];
					/* break; */ $s = 4; continue;
				}
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 6:
			_r$7 = val.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			e = _r$7;
			if ((e.Kind() === 22) && !e.IsNil()) {
				val = e;
			}
		/* } */ case 7:
		/* */ if (val.Kind() === 22) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (val.Kind() === 22) { */ case 9:
			/* */ if (val.IsNil()) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (val.IsNil()) { */ case 11:
				_r$8 = val.Type().Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = reflect.New(_r$8); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = val.Set(_r$9); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			_r$10 = val.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			val = _r$10;
		/* } */ case 10:
		if (!(val.CanInterface())) { _v = false; $s = 19; continue s; }
		_r$11 = val.Type().Implements(unmarshalerType); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_v = _r$11; case 19:
		/* */ if (_v) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (_v) { */ case 17:
			_r$12 = val.Interface(); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = p.unmarshalInterface($assertType(_r$12, Unmarshaler), start); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			return _r$13;
		/* } */ case 18:
		/* */ if (val.CanAddr()) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (val.CanAddr()) { */ case 23:
			pv = val.Addr();
			if (!(pv.CanInterface())) { _v$1 = false; $s = 27; continue s; }
			_r$14 = pv.Type().Implements(unmarshalerType); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_v$1 = _r$14; case 27:
			/* */ if (_v$1) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_v$1) { */ case 25:
				_r$15 = pv.Interface(); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = p.unmarshalInterface($assertType(_r$15, Unmarshaler), start); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				return _r$16;
			/* } */ case 26:
		/* } */ case 24:
		if (!(val.CanInterface())) { _v$2 = false; $s = 33; continue s; }
		_r$17 = val.Type().Implements(textUnmarshalerType); /* */ $s = 34; case 34: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_v$2 = _r$17; case 33:
		/* */ if (_v$2) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (_v$2) { */ case 31:
			_r$18 = val.Interface(); /* */ $s = 35; case 35: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$19 = p.unmarshalTextInterface($assertType(_r$18, encoding.TextUnmarshaler), start); /* */ $s = 36; case 36: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			return _r$19;
		/* } */ case 32:
		/* */ if (val.CanAddr()) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (val.CanAddr()) { */ case 37:
			pv$1 = val.Addr();
			if (!(pv$1.CanInterface())) { _v$3 = false; $s = 41; continue s; }
			_r$20 = pv$1.Type().Implements(textUnmarshalerType); /* */ $s = 42; case 42: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_v$3 = _r$20; case 41:
			/* */ if (_v$3) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (_v$3) { */ case 39:
				_r$21 = pv$1.Interface(); /* */ $s = 43; case 43: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$22 = p.unmarshalTextInterface($assertType(_r$21, encoding.TextUnmarshaler), start); /* */ $s = 44; case 44: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				return _r$22;
			/* } */ case 40:
		/* } */ case 38:
		data = sliceType.nil;
		saveData = new reflect.Value.ptr();
		comment = sliceType.nil;
		saveComment = new reflect.Value.ptr();
		saveXML = new reflect.Value.ptr();
		saveXMLIndex = 0;
		saveXMLData = sliceType.nil;
		saveAny = new reflect.Value.ptr();
		sv = new reflect.Value.ptr();
		tinfo = ptrType$11.nil;
		err$1 = $ifaceNil;
		v = val;
		_ref = v.Kind();
		/* */ if (_ref === 20) { $s = 45; continue; }
		/* */ if (_ref === 23) { $s = 46; continue; }
		/* */ if (_ref === 1 || _ref === 13 || _ref === 14 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 24) { $s = 47; continue; }
		/* */ if (_ref === 25) { $s = 48; continue; }
		/* */ $s = 49; continue;
		/* switch (0) { default: if (_ref === 20) { */ case 45:
			_r$23 = p.Skip(); /* */ $s = 51; case 51: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			return _r$23;
			$s = 50; continue;
		/* } else if (_ref === 23) { */ case 46:
			typ = v.Type();
			_r$24 = typ.Elem(); /* */ $s = 54; case 54: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$25 = _r$24.Kind(); /* */ $s = 55; case 55: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			/* */ if (_r$25 === 8) { $s = 52; continue; }
			/* */ $s = 53; continue;
			/* if (_r$25 === 8) { */ case 52:
				saveData = v;
				/* break; */ $s = 50; continue;
			/* } */ case 53:
			n = v.Len();
			/* */ if (n >= v.Cap()) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (n >= v.Cap()) { */ case 56:
				ncap = 2 * n >> 0;
				if (ncap < 4) {
					ncap = 4;
				}
				_r$26 = reflect.MakeSlice(typ, n, ncap); /* */ $s = 58; case 58: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				new$1 = _r$26;
				_r$27 = reflect.Copy(new$1, v); /* */ $s = 59; case 59: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_r$27;
				$r = v.Set(new$1); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 57:
			v.SetLen(n + 1 >> 0);
			_r$28 = v.Index(n); /* */ $s = 61; case 61: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_r$29 = p.unmarshal(_r$28, start); /* */ $s = 62; case 62: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			err$2 = _r$29;
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 63; continue; }
			/* */ $s = 64; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 63:
				v.SetLen(n);
				return err$2;
			/* } */ case 64:
			return $ifaceNil;
			$s = 50; continue;
		/* } else if (_ref === 1 || _ref === 13 || _ref === 14 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 24) { */ case 47:
			saveData = v;
			$s = 50; continue;
		/* } else if (_ref === 25) { */ case 48:
			typ$1 = v.Type();
			/* */ if ($interfaceIsEqual(typ$1, nameType)) { $s = 65; continue; }
			/* */ $s = 66; continue;
			/* if ($interfaceIsEqual(typ$1, nameType)) { */ case 65:
				_r$30 = reflect.ValueOf((x$1 = start.Name, new x$1.constructor.elem(x$1))); /* */ $s = 67; case 67: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				$r = v.Set(_r$30); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 50; continue;
			/* } */ case 66:
			sv = v;
			_r$31 = getTypeInfo(typ$1); /* */ $s = 69; case 69: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_tuple$2 = _r$31; tinfo = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			/* */ if (!(tinfo.xmlname === ptrType$8.nil)) { $s = 70; continue; }
			/* */ $s = 71; continue;
			/* if (!(tinfo.xmlname === ptrType$8.nil)) { */ case 70:
				finfo = tinfo.xmlname;
				if (!(finfo.name === "") && !(finfo.name === start.Name.Local)) {
					return new UnmarshalError("expected element type <" + finfo.name + "> but have <" + start.Name.Local + ">");
				}
				if (!(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) {
					e$1 = "expected element <" + finfo.name + "> in name space " + finfo.xmlns + " but have ";
					if (start.Name.Space === "") {
						e$1 = e$1 + ("no name space");
					} else {
						e$1 = e$1 + (start.Name.Space);
					}
					return new UnmarshalError(e$1);
				}
				_r$32 = finfo.value(sv); /* */ $s = 72; case 72: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				fv = _r$32;
				_r$33 = fv.Interface(); /* */ $s = 73; case 73: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				_tuple$3 = $assertType(_r$33, Name, true); ok$1 = _tuple$3[1];
				/* */ if (ok$1) { $s = 74; continue; }
				/* */ $s = 75; continue;
				/* if (ok$1) { */ case 74:
					_r$34 = reflect.ValueOf((x$2 = start.Name, new x$2.constructor.elem(x$2))); /* */ $s = 76; case 76: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					$r = fv.Set(_r$34); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 75:
			/* } */ case 71:
			_ref$1 = tinfo.fields;
			_i = 0;
			/* while (true) { */ case 78:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 79; continue; }
				i = _i;
				finfo$1 = (x$3 = tinfo.fields, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i]));
				_ref$2 = finfo$1.flags & 63;
				/* */ if (_ref$2 === 2) { $s = 80; continue; }
				/* */ if (_ref$2 === 4) { $s = 81; continue; }
				/* */ if (_ref$2 === 16) { $s = 82; continue; }
				/* */ if (_ref$2 === 32 || _ref$2 === 33) { $s = 83; continue; }
				/* */ if (_ref$2 === 8) { $s = 84; continue; }
				/* */ $s = 85; continue;
				/* if (_ref$2 === 2) { */ case 80:
					_r$35 = finfo$1.value(sv); /* */ $s = 86; case 86: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					strv = _r$35;
					_ref$3 = start.Attr;
					_i$1 = 0;
					/* while (true) { */ case 87:
						/* if (!(_i$1 < _ref$3.$length)) { break; } */ if(!(_i$1 < _ref$3.$length)) { $s = 88; continue; }
						a = $clone(((_i$1 < 0 || _i$1 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$1]), Attr);
						/* */ if (a.Name.Local === finfo$1.name && (finfo$1.xmlns === "" || finfo$1.xmlns === a.Name.Space)) { $s = 89; continue; }
						/* */ $s = 90; continue;
						/* if (a.Name.Local === finfo$1.name && (finfo$1.xmlns === "" || finfo$1.xmlns === a.Name.Space)) { */ case 89:
							_r$36 = p.unmarshalAttr(strv, a); /* */ $s = 91; case 91: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
							err$3 = _r$36;
							/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 92; continue; }
							/* */ $s = 93; continue;
							/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 92:
								return err$3;
							/* } */ case 93:
							/* break; */ $s = 88; continue;
						/* } */ case 90:
						_i$1++;
					/* } */ $s = 87; continue; case 88:
					$s = 85; continue;
				/* } else if (_ref$2 === 4) { */ case 81:
					/* */ if (!saveData.IsValid()) { $s = 94; continue; }
					/* */ $s = 95; continue;
					/* if (!saveData.IsValid()) { */ case 94:
						_r$37 = finfo$1.value(sv); /* */ $s = 96; case 96: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						saveData = _r$37;
					/* } */ case 95:
					$s = 85; continue;
				/* } else if (_ref$2 === 16) { */ case 82:
					/* */ if (!saveComment.IsValid()) { $s = 97; continue; }
					/* */ $s = 98; continue;
					/* if (!saveComment.IsValid()) { */ case 97:
						_r$38 = finfo$1.value(sv); /* */ $s = 99; case 99: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						saveComment = _r$38;
					/* } */ case 98:
					$s = 85; continue;
				/* } else if (_ref$2 === 32 || _ref$2 === 33) { */ case 83:
					/* */ if (!saveAny.IsValid()) { $s = 100; continue; }
					/* */ $s = 101; continue;
					/* if (!saveAny.IsValid()) { */ case 100:
						_r$39 = finfo$1.value(sv); /* */ $s = 102; case 102: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						saveAny = _r$39;
					/* } */ case 101:
					$s = 85; continue;
				/* } else if (_ref$2 === 8) { */ case 84:
					/* */ if (!saveXML.IsValid()) { $s = 103; continue; }
					/* */ $s = 104; continue;
					/* if (!saveXML.IsValid()) { */ case 103:
						_r$40 = finfo$1.value(sv); /* */ $s = 105; case 105: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						saveXML = _r$40;
						if (p.saved === ptrType$12.nil) {
							saveXMLIndex = 0;
							p.saved = new bytes.Buffer.ptr();
						} else {
							saveXMLIndex = p.savedOffset();
						}
					/* } */ case 104:
				/* } */ case 85:
				_i++;
			/* } */ $s = 78; continue; case 79:
			$s = 50; continue;
		/* } else { */ case 49:
			_r$41 = v.Type().String(); /* */ $s = 106; case 106: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			_r$42 = errors.New("unknown type " + _r$41); /* */ $s = 107; case 107: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
			return _r$42;
		/* } } */ case 50:
		/* while (true) { */ case 108:
			t$1 = [t$1];
			savedOffset = 0;
			if (saveXML.IsValid()) {
				savedOffset = p.savedOffset();
			}
			_r$43 = p.Token(); /* */ $s = 110; case 110: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
			_tuple$4 = _r$43; tok$1 = _tuple$4[0]; err$4 = _tuple$4[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				return err$4;
			}
			_ref$4 = tok$1;
			/* */ if ($assertType(_ref$4, StartElement, true)[1]) { $s = 111; continue; }
			/* */ if ($assertType(_ref$4, EndElement, true)[1]) { $s = 112; continue; }
			/* */ if ($assertType(_ref$4, CharData, true)[1]) { $s = 113; continue; }
			/* */ if ($assertType(_ref$4, Comment, true)[1]) { $s = 114; continue; }
			/* */ $s = 115; continue;
			/* if ($assertType(_ref$4, StartElement, true)[1]) { */ case 111:
				t$1[0] = _ref$4.$val;
				consumed = false;
				/* */ if (sv.IsValid()) { $s = 116; continue; }
				/* */ $s = 117; continue;
				/* if (sv.IsValid()) { */ case 116:
					_r$44 = p.unmarshalPath(tinfo, sv, sliceType$3.nil, t$1[0]); /* */ $s = 118; case 118: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					_tuple$5 = _r$44; consumed = _tuple$5[0]; err$4 = _tuple$5[1];
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						return err$4;
					}
					/* */ if (!consumed && saveAny.IsValid()) { $s = 119; continue; }
					/* */ $s = 120; continue;
					/* if (!consumed && saveAny.IsValid()) { */ case 119:
						consumed = true;
						_r$45 = p.unmarshal(saveAny, t$1[0]); /* */ $s = 121; case 121: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
						err$5 = _r$45;
						/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 122; continue; }
						/* */ $s = 123; continue;
						/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 122:
							return err$5;
						/* } */ case 123:
					/* } */ case 120:
				/* } */ case 117:
				/* */ if (!consumed) { $s = 124; continue; }
				/* */ $s = 125; continue;
				/* if (!consumed) { */ case 124:
					_r$46 = p.Skip(); /* */ $s = 126; case 126: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
					err$6 = _r$46;
					/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 127; continue; }
					/* */ $s = 128; continue;
					/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 127:
						return err$6;
					/* } */ case 128:
				/* } */ case 125:
				$s = 115; continue;
			/* } else if ($assertType(_ref$4, EndElement, true)[1]) { */ case 112:
				t$2 = _ref$4.$val;
				if (saveXML.IsValid()) {
					saveXMLData = $subslice(p.saved.Bytes(), saveXMLIndex, savedOffset);
					if (saveXMLIndex === 0) {
						p.saved = ptrType$12.nil;
					}
				}
				/* break Loop; */ $s = 109; continue s;
				$s = 115; continue;
			/* } else if ($assertType(_ref$4, CharData, true)[1]) { */ case 113:
				t$3 = _ref$4.$val;
				if (saveData.IsValid()) {
					data = $appendSlice(data, t$3);
				}
				$s = 115; continue;
			/* } else if ($assertType(_ref$4, Comment, true)[1]) { */ case 114:
				t$4 = _ref$4.$val;
				if (saveComment.IsValid()) {
					comment = $appendSlice(comment, t$4);
				}
			/* } */ case 115:
		/* } */ $s = 108; continue; case 109:
		if (!(saveData.IsValid() && saveData.CanInterface())) { _v$4 = false; $s = 131; continue s; }
		_r$47 = saveData.Type().Implements(textUnmarshalerType); /* */ $s = 132; case 132: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
		_v$4 = _r$47; case 131:
		/* */ if (_v$4) { $s = 129; continue; }
		/* */ $s = 130; continue;
		/* if (_v$4) { */ case 129:
			_r$48 = saveData.Interface(); /* */ $s = 133; case 133: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			_r$49 = $assertType(_r$48, encoding.TextUnmarshaler).UnmarshalText(data); /* */ $s = 134; case 134: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
			err$7 = _r$49;
			/* */ if (!($interfaceIsEqual(err$7, $ifaceNil))) { $s = 135; continue; }
			/* */ $s = 136; continue;
			/* if (!($interfaceIsEqual(err$7, $ifaceNil))) { */ case 135:
				return err$7;
			/* } */ case 136:
			saveData = new reflect.Value.ptr(ptrType$13.nil, 0, 0);
		/* } */ case 130:
		/* */ if (saveData.IsValid() && saveData.CanAddr()) { $s = 137; continue; }
		/* */ $s = 138; continue;
		/* if (saveData.IsValid() && saveData.CanAddr()) { */ case 137:
			pv$2 = saveData.Addr();
			if (!(pv$2.CanInterface())) { _v$5 = false; $s = 141; continue s; }
			_r$50 = pv$2.Type().Implements(textUnmarshalerType); /* */ $s = 142; case 142: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
			_v$5 = _r$50; case 141:
			/* */ if (_v$5) { $s = 139; continue; }
			/* */ $s = 140; continue;
			/* if (_v$5) { */ case 139:
				_r$51 = pv$2.Interface(); /* */ $s = 143; case 143: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
				_r$52 = $assertType(_r$51, encoding.TextUnmarshaler).UnmarshalText(data); /* */ $s = 144; case 144: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
				err$8 = _r$52;
				/* */ if (!($interfaceIsEqual(err$8, $ifaceNil))) { $s = 145; continue; }
				/* */ $s = 146; continue;
				/* if (!($interfaceIsEqual(err$8, $ifaceNil))) { */ case 145:
					return err$8;
				/* } */ case 146:
				saveData = new reflect.Value.ptr(ptrType$13.nil, 0, 0);
			/* } */ case 140:
		/* } */ case 138:
		_r$53 = copyValue(saveData, data); /* */ $s = 147; case 147: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
		err$9 = _r$53;
		/* */ if (!($interfaceIsEqual(err$9, $ifaceNil))) { $s = 148; continue; }
		/* */ $s = 149; continue;
		/* if (!($interfaceIsEqual(err$9, $ifaceNil))) { */ case 148:
			return err$9;
		/* } */ case 149:
		t$5 = saveComment;
		_ref$5 = t$5.Kind();
		/* */ if (_ref$5 === 24) { $s = 150; continue; }
		/* */ if (_ref$5 === 23) { $s = 151; continue; }
		/* */ $s = 152; continue;
		/* if (_ref$5 === 24) { */ case 150:
			t$5.SetString($bytesToString(comment));
			$s = 152; continue;
		/* } else if (_ref$5 === 23) { */ case 151:
			_r$54 = reflect.ValueOf(comment); /* */ $s = 153; case 153: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
			$r = t$5.Set(_r$54); /* */ $s = 154; case 154: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 152:
		t$6 = saveXML;
		_ref$6 = t$6.Kind();
		/* */ if (_ref$6 === 24) { $s = 155; continue; }
		/* */ if (_ref$6 === 23) { $s = 156; continue; }
		/* */ $s = 157; continue;
		/* if (_ref$6 === 24) { */ case 155:
			t$6.SetString($bytesToString(saveXMLData));
			$s = 157; continue;
		/* } else if (_ref$6 === 23) { */ case 156:
			_r$55 = reflect.ValueOf(saveXMLData); /* */ $s = 158; case 158: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
			$r = t$6.Set(_r$55); /* */ $s = 159; case 159: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 157:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshal }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$55 = _r$55; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f.a = a; $f.comment = comment; $f.consumed = consumed; $f.data = data; $f.e = e; $f.e$1 = e$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.finfo = finfo; $f.finfo$1 = finfo$1; $f.fv = fv; $f.i = i; $f.n = n; $f.ncap = ncap; $f.new$1 = new$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pv = pv; $f.pv$1 = pv$1; $f.pv$2 = pv$2; $f.saveAny = saveAny; $f.saveComment = saveComment; $f.saveData = saveData; $f.saveXML = saveXML; $f.saveXMLData = saveXMLData; $f.saveXMLIndex = saveXMLIndex; $f.savedOffset = savedOffset; $f.start = start; $f.strv = strv; $f.sv = sv; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.t$5 = t$5; $f.t$6 = t$6; $f.tinfo = tinfo; $f.tok = tok; $f.tok$1 = tok$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.val = val; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshal = function(val, start) { return this.$val.unmarshal(val, start); };
	copyValue = function(dst, src) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, dst, dst0, err, err$1, err$2, err$3, err$4, ftmp, itmp, src, utmp, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; dst = $f.dst; dst0 = $f.dst0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; ftmp = $f.ftmp; itmp = $f.itmp; src = $f.src; utmp = $f.utmp; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		dst = dst;
		dst0 = dst;
		/* */ if (dst.Kind() === 22) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dst.Kind() === 22) { */ case 1:
			/* */ if (dst.IsNil()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (dst.IsNil()) { */ case 3:
				_r$6 = dst.Type().Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = reflect.New(_r$6); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = dst.Set(_r$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_r$8 = dst.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			dst = _r$8;
		/* } */ case 2:
		_ref = dst.Kind();
		/* */ if (_ref === 0) { $s = 9; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 10; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 11; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 12; continue; }
		/* */ if (_ref === 1) { $s = 13; continue; }
		/* */ if (_ref === 24) { $s = 14; continue; }
		/* */ if (_ref === 23) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (_ref === 0) { */ case 9:
			$s = 17; continue;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 10:
			_arg = $bytesToString(src);
			_r$9 = dst.Type().Bits(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_r$10 = strconv.ParseInt(_arg, 10, _arg$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple = _r$10; itmp = _tuple[0]; err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			}
			dst.SetInt(itmp);
			$s = 17; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 11:
			_arg$2 = $bytesToString(src);
			_r$11 = dst.Type().Bits(); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = strconv.ParseUint(_arg$2, 10, _arg$3); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_tuple$1 = _r$12; utmp = _tuple$1[0]; err$2 = _tuple$1[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				err = err$2;
				return err;
			}
			dst.SetUint(utmp);
			$s = 17; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 12:
			_arg$4 = $bytesToString(src);
			_r$13 = dst.Type().Bits(); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_arg$5 = _r$13;
			_r$14 = strconv.ParseFloat(_arg$4, _arg$5); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_tuple$2 = _r$14; ftmp = _tuple$2[0]; err$3 = _tuple$2[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				err = err$3;
				return err;
			}
			dst.SetFloat(ftmp);
			$s = 17; continue;
		/* } else if (_ref === 1) { */ case 13:
			_r$15 = strings.TrimSpace($bytesToString(src)); /* */ $s = 24; case 24: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = strconv.ParseBool(_r$15); /* */ $s = 25; case 25: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_tuple$3 = _r$16; value = _tuple$3[0]; err$4 = _tuple$3[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				err = err$4;
				return err;
			}
			dst.SetBool(value);
			$s = 17; continue;
		/* } else if (_ref === 24) { */ case 14:
			dst.SetString($bytesToString(src));
			$s = 17; continue;
		/* } else if (_ref === 23) { */ case 15:
			if (src.$length === 0) {
				src = new sliceType([]);
			}
			$r = dst.SetBytes(src); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 17; continue;
		/* } else { */ case 16:
			_r$17 = dst0.Type().String(); /* */ $s = 27; case 27: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$18 = errors.New("cannot unmarshal into " + _r$17); /* */ $s = 28; case 28: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			err = _r$18;
			return err;
		/* } */ case 17:
		err = $ifaceNil;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: copyValue }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.dst = dst; $f.dst0 = dst0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.ftmp = ftmp; $f.itmp = itmp; $f.src = src; $f.utmp = utmp; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.ptr.prototype.unmarshalPath = function(tinfo, sv, parents, start) {
		var $ptr, _i, _i$1, _r$10, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, consumed, consumed2, err, err$1, err$2, finfo, i, j, p, parents, recurse, start, sv, t, t$1, tinfo, tok, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; consumed = $f.consumed; consumed2 = $f.consumed2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; finfo = $f.finfo; i = $f.i; j = $f.j; p = $f.p; parents = $f.parents; recurse = $f.recurse; start = $f.start; sv = $f.sv; t = $f.t; t$1 = $f.t$1; tinfo = $f.tinfo; tok = $f.tok; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		consumed = false;
		err = $ifaceNil;
		p = this;
		sv = sv;
		recurse = false;
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			finfo = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			/* */ if (((finfo.flags & 1) === 0) || finfo.parents.$length < parents.$length || !(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((finfo.flags & 1) === 0) || finfo.parents.$length < parents.$length || !(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_ref$1 = parents;
			_i$1 = 0;
			/* while (true) { */ case 5:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
				j = _i$1;
				if (!(((j < 0 || j >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + j]) === (x$2 = finfo.parents, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])))) {
					_i++;
					/* continue Loop; */ $s = 1; continue s;
				}
				_i$1++;
			/* } */ $s = 5; continue; case 6:
			/* */ if ((finfo.parents.$length === parents.$length) && finfo.name === start.Name.Local) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((finfo.parents.$length === parents.$length) && finfo.name === start.Name.Local) { */ case 7:
				_r$6 = finfo.value(sv); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = p.unmarshal(_r$6, start); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tmp = true; _tmp$1 = _r$7; consumed = _tmp; err = _tmp$1;
				return [consumed, err];
			/* } */ case 8:
			if (finfo.parents.$length > parents.$length && (x$3 = finfo.parents, x$4 = parents.$length, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])) === start.Name.Local) {
				recurse = true;
				parents = $subslice(finfo.parents, 0, (parents.$length + 1 >> 0));
				/* break; */ $s = 2; continue;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (!recurse) {
			_tmp$2 = false; _tmp$3 = $ifaceNil; consumed = _tmp$2; err = _tmp$3;
			return [consumed, err];
		}
		/* while (true) { */ case 11:
			t = [t];
			tok = $ifaceNil;
			_r$8 = p.Token(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple = _r$8; tok = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = true; _tmp$5 = err; consumed = _tmp$4; err = _tmp$5;
				return [consumed, err];
			}
			_ref$2 = tok;
			/* */ if ($assertType(_ref$2, StartElement, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref$2, EndElement, true)[1]) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ($assertType(_ref$2, StartElement, true)[1]) { */ case 14:
				t[0] = _ref$2.$val;
				_r$9 = p.unmarshalPath(tinfo, sv, parents, t[0]); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$1 = _r$9; consumed2 = _tuple$1[0]; err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$6 = true; _tmp$7 = err$1; consumed = _tmp$6; err = _tmp$7;
					return [consumed, err];
				}
				/* */ if (!consumed2) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!consumed2) { */ case 18:
					_r$10 = p.Skip(); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$2 = _r$10;
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
						_tmp$8 = true; _tmp$9 = err$2; consumed = _tmp$8; err = _tmp$9;
						return [consumed, err];
					/* } */ case 22:
				/* } */ case 19:
				$s = 16; continue;
			/* } else if ($assertType(_ref$2, EndElement, true)[1]) { */ case 15:
				t$1 = _ref$2.$val;
				_tmp$10 = true; _tmp$11 = $ifaceNil; consumed = _tmp$10; err = _tmp$11;
				return [consumed, err];
			/* } */ case 16:
		/* } */ $s = 11; continue; case 12:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalPath }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.consumed = consumed; $f.consumed2 = consumed2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.finfo = finfo; $f.i = i; $f.j = j; $f.p = p; $f.parents = parents; $f.recurse = recurse; $f.start = start; $f.sv = sv; $f.t = t; $f.t$1 = t$1; $f.tinfo = tinfo; $f.tok = tok; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalPath = function(tinfo, sv, parents, start) { return this.$val.unmarshalPath(tinfo, sv, parents, start); };
	Decoder.ptr.prototype.Skip = function() {
		var $ptr, _r$6, _r$7, _ref, _tuple, d, err, err$1, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; err = $f.err; err$1 = $f.err$1; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r$6 = d.Token(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6; tok = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_ref = tok;
			/* */ if ($assertType(_ref, StartElement, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, EndElement, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref, StartElement, true)[1]) { */ case 4:
				_r$7 = d.Skip(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err$1 = _r$7;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 8:
					return err$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if ($assertType(_ref, EndElement, true)[1]) { */ case 5:
				return $ifaceNil;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Skip }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Skip = function() { return this.$val.Skip(); };
	getTypeInfo = function(typ) {
		var $ptr, _entry, _i, _key$2, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, err, err$1, err$2, err$3, f, finfo, finfo$1, i, inner, n, ok, t, tinfo, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key$2 = $f._key$2; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; finfo = $f.finfo; finfo$1 = $f.finfo$1; i = $f.i; inner = $f.inner; n = $f.n; ok = $f.ok; t = $f.t; tinfo = $f.tinfo; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = tinfoLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = tinfoMap[typ.$key()], _entry !== undefined ? [_entry.v, true] : [ptrType$11.nil, false]); tinfo = _tuple[0]; ok = _tuple[1];
		$r = tinfoLock.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (ok) {
			return [tinfo, $ifaceNil];
		}
		tinfo = new typeInfo.ptr(ptrType$8.nil, sliceType$7.nil);
		_r$6 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if ((_r$6 === 25) && !($interfaceIsEqual(typ, nameType))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((_r$6 === 25) && !($interfaceIsEqual(typ, nameType))) { */ case 3:
			_r$7 = typ.NumField(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			n = _r$7;
			i = 0;
			/* while (true) { */ case 7:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 8; continue; }
				f = [f];
				_r$8 = typ.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				f[0] = $clone(_r$8, reflect.StructField);
				/* */ if (!(f[0].PkgPath === "") || new reflect.StructTag(f[0].Tag).Get("xml") === "-") { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!(f[0].PkgPath === "") || new reflect.StructTag(f[0].Tag).Get("xml") === "-") { */ case 10:
					i = i + (1) >> 0;
					/* continue; */ $s = 7; continue;
				/* } */ case 11:
				/* */ if (f[0].Anonymous) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (f[0].Anonymous) { */ case 12:
					t = f[0].Type;
					_r$9 = t.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					/* */ if (_r$9 === 22) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$9 === 22) { */ case 14:
						_r$10 = t.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						t = _r$10;
					/* } */ case 15:
					_r$11 = t.Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (_r$11 === 25) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (_r$11 === 25) { */ case 18:
						_r$12 = getTypeInfo(t); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_tuple$1 = _r$12; inner = _tuple$1[0]; err = _tuple$1[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							return [ptrType$11.nil, err];
						}
						if (tinfo.xmlname === ptrType$8.nil) {
							tinfo.xmlname = inner.xmlname;
						}
						_ref = inner.fields;
						_i = 0;
						/* while (true) { */ case 22:
							/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 23; continue; }
							finfo = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldInfo);
							finfo.idx = $appendSlice(new sliceType$8([i]), finfo.idx);
							_r$13 = addFieldInfo(typ, tinfo, finfo); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							err$1 = _r$13;
							/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 25; continue; }
							/* */ $s = 26; continue;
							/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 25:
								return [ptrType$11.nil, err$1];
							/* } */ case 26:
							_i++;
						/* } */ $s = 22; continue; case 23:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 19:
				/* } */ case 13:
				_r$14 = structFieldInfo(typ, f[0]); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_tuple$2 = _r$14; finfo$1 = _tuple$2[0]; err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return [ptrType$11.nil, err$2];
				}
				/* */ if (f[0].Name === "XMLName") { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (f[0].Name === "XMLName") { */ case 28:
					tinfo.xmlname = finfo$1;
					i = i + (1) >> 0;
					/* continue; */ $s = 7; continue;
				/* } */ case 29:
				_r$15 = addFieldInfo(typ, tinfo, finfo$1); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				err$3 = _r$15;
				/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 31:
					return [ptrType$11.nil, err$3];
				/* } */ case 32:
				i = i + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 4:
		$r = tinfoLock.Lock(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key$2 = typ; (tinfoMap || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: tinfo };
		$r = tinfoLock.Unlock(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return [tinfo, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getTypeInfo }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key$2 = _key$2; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.finfo = finfo; $f.finfo$1 = finfo$1; $f.i = i; $f.inner = inner; $f.n = n; $f.ok = ok; $f.t = t; $f.tinfo = tinfo; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	structFieldInfo = function(typ, f) {
		var $ptr, _i, _r$10, _r$11, _r$12, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, f, finfo, flag, ftyp, i, mode, parents, tag, tokens, typ, valid, x$1, x$2, xmlname, xmlname$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; f = $f.f; finfo = $f.finfo; flag = $f.flag; ftyp = $f.ftyp; i = $f.i; mode = $f.mode; parents = $f.parents; tag = $f.tag; tokens = $f.tokens; typ = $f.typ; valid = $f.valid; x$1 = $f.x$1; x$2 = $f.x$2; xmlname = $f.xmlname; xmlname$1 = $f.xmlname$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		finfo = new fieldInfo.ptr(f.Index, "", "", 0, sliceType$3.nil);
		tag = new reflect.StructTag(f.Tag).Get("xml");
		i = strings.Index(tag, " ");
		if (i >= 0) {
			_tmp = tag.substring(0, i); _tmp$1 = tag.substring((i + 1 >> 0)); finfo.xmlns = _tmp; tag = _tmp$1;
		}
		tokens = strings.Split(tag, ",");
		/* */ if (tokens.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (tokens.$length === 1) { */ case 1:
			finfo.flags = 1;
			$s = 3; continue;
		/* } else { */ case 2:
			tag = (0 >= tokens.$length ? $throwRuntimeError("index out of range") : tokens.$array[tokens.$offset + 0]);
			_ref = $subslice(tokens, 1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_ref$1 = flag;
				if (_ref$1 === "attr") {
					finfo.flags = finfo.flags | (2);
				} else if (_ref$1 === "chardata") {
					finfo.flags = finfo.flags | (4);
				} else if (_ref$1 === "innerxml") {
					finfo.flags = finfo.flags | (8);
				} else if (_ref$1 === "comment") {
					finfo.flags = finfo.flags | (16);
				} else if (_ref$1 === "any") {
					finfo.flags = finfo.flags | (32);
				} else if (_ref$1 === "omitempty") {
					finfo.flags = finfo.flags | (64);
				}
				_i++;
			}
			valid = true;
			mode = finfo.flags & 63;
			_ref$2 = mode;
			if (_ref$2 === 0) {
				finfo.flags = finfo.flags | (1);
			} else if (_ref$2 === 2 || _ref$2 === 4 || _ref$2 === 8 || _ref$2 === 16 || _ref$2 === 32) {
				if (f.Name === "XMLName" || !(tag === "") && !((mode === 2))) {
					valid = false;
				}
			} else {
				valid = false;
			}
			if ((finfo.flags & 63) === 32) {
				finfo.flags = finfo.flags | (1);
			}
			if (!(((finfo.flags & 64) === 0)) && ((finfo.flags & 3) === 0)) {
				valid = false;
			}
			/* */ if (!valid) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!valid) { */ case 4:
				_r$6 = fmt.Errorf("xml: invalid tag in field %s of type %s: %q", new sliceType$5([new $String(f.Name), typ, new $String(new reflect.StructTag(f.Tag).Get("xml"))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				return [ptrType$8.nil, _r$6];
			/* } */ case 5:
		/* } */ case 3:
		/* */ if (!(finfo.xmlns === "") && tag === "") { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(finfo.xmlns === "") && tag === "") { */ case 7:
			_r$7 = fmt.Errorf("xml: namespace without name in field %s of type %s: %q", new sliceType$5([new $String(f.Name), typ, new $String(new reflect.StructTag(f.Tag).Get("xml"))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			return [ptrType$8.nil, _r$7];
		/* } */ case 8:
		if (f.Name === "XMLName") {
			finfo.name = tag;
			return [finfo, $ifaceNil];
		}
		/* */ if (tag === "") { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (tag === "") { */ case 10:
			_r$8 = lookupXMLName(f.Type); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			xmlname = _r$8;
			/* */ if (!(xmlname === ptrType$8.nil)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!(xmlname === ptrType$8.nil)) { */ case 13:
				_tmp$2 = xmlname.xmlns; _tmp$3 = xmlname.name; finfo.xmlns = _tmp$2; finfo.name = _tmp$3;
				$s = 15; continue;
			/* } else { */ case 14:
				finfo.name = f.Name;
			/* } */ case 15:
			return [finfo, $ifaceNil];
		/* } */ case 11:
		parents = strings.Split(tag, ">");
		if ((0 >= parents.$length ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + 0]) === "") {
			(0 >= parents.$length ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + 0] = f.Name);
		}
		/* */ if ((x$1 = parents.$length - 1 >> 0, ((x$1 < 0 || x$1 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$1])) === "") { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((x$1 = parents.$length - 1 >> 0, ((x$1 < 0 || x$1 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$1])) === "") { */ case 16:
			_r$9 = fmt.Errorf("xml: trailing '>' in field %s of type %s", new sliceType$5([new $String(f.Name), typ])); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			return [ptrType$8.nil, _r$9];
		/* } */ case 17:
		finfo.name = (x$2 = parents.$length - 1 >> 0, ((x$2 < 0 || x$2 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$2]));
		/* */ if (parents.$length > 1) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (parents.$length > 1) { */ case 19:
			/* */ if (((finfo.flags & 1)) === 0) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (((finfo.flags & 1)) === 0) { */ case 21:
				_r$10 = fmt.Errorf("xml: %s chain not valid with %s flag", new sliceType$5([new $String(tag), new $String(strings.Join($subslice(tokens, 1), ","))])); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				return [ptrType$8.nil, _r$10];
			/* } */ case 22:
			finfo.parents = $subslice(parents, 0, (parents.$length - 1 >> 0));
		/* } */ case 20:
		/* */ if (!(((finfo.flags & 1) === 0))) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!(((finfo.flags & 1) === 0))) { */ case 24:
			ftyp = f.Type;
			_r$11 = lookupXMLName(ftyp); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			xmlname$1 = _r$11;
			/* */ if (!(xmlname$1 === ptrType$8.nil) && !(xmlname$1.name === finfo.name)) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (!(xmlname$1 === ptrType$8.nil) && !(xmlname$1.name === finfo.name)) { */ case 27:
				_r$12 = fmt.Errorf("xml: name %q in tag of %s.%s conflicts with name %q in %s.XMLName", new sliceType$5([new $String(finfo.name), typ, new $String(f.Name), new $String(xmlname$1.name), ftyp])); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				return [ptrType$8.nil, _r$12];
			/* } */ case 28:
		/* } */ case 25:
		return [finfo, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structFieldInfo }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.f = f; $f.finfo = finfo; $f.flag = flag; $f.ftyp = ftyp; $f.i = i; $f.mode = mode; $f.parents = parents; $f.tag = tag; $f.tokens = tokens; $f.typ = typ; $f.valid = valid; $f.x$1 = x$1; $f.x$2 = x$2; $f.xmlname = xmlname; $f.xmlname$1 = xmlname$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	lookupXMLName = function(typ) {
		var $ptr, _r$10, _r$11, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, err, f, finfo, i, n, typ, xmlname, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; finfo = $f.finfo; i = $f.i; n = $f.n; typ = $f.typ; xmlname = $f.xmlname; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		xmlname = ptrType$8.nil;
		/* while (true) { */ case 1:
			_r$6 = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* if (!(_r$6 === 22)) { break; } */ if(!(_r$6 === 22)) { $s = 2; continue; }
			_r$7 = typ.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			typ = _r$7;
		/* } */ $s = 1; continue; case 2:
		_r$8 = typ.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (!((_r$8 === 25))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((_r$8 === 25))) { */ case 5:
			xmlname = ptrType$8.nil;
			return xmlname;
		/* } */ case 6:
		_r$9 = typ.NumField(); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tmp = 0; _tmp$1 = _r$9; i = _tmp; n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 10; continue; }
			f = [f];
			_r$10 = typ.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			f[0] = $clone(_r$10, reflect.StructField);
			/* */ if (!(f[0].Name === "XMLName")) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!(f[0].Name === "XMLName")) { */ case 12:
				i = i + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			_r$11 = structFieldInfo(typ, f[0]); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple = _r$11; finfo = _tuple[0]; err = _tuple[1];
			if (!(finfo.name === "") && $interfaceIsEqual(err, $ifaceNil)) {
				xmlname = finfo;
				return xmlname;
			}
			/* break; */ $s = 10; continue;
		/* } */ $s = 9; continue; case 10:
		xmlname = ptrType$8.nil;
		return xmlname;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lookupXMLName }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.finfo = finfo; $f.i = i; $f.n = n; $f.typ = typ; $f.xmlname = xmlname; $f.$s = $s; $f.$r = $r; return $f;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a <= b) {
			return a;
		}
		return b;
	};
	addFieldInfo = function(typ, tinfo, newf) {
		var $ptr, _i, _i$1, _i$2, _r$6, _r$7, _ref, _ref$1, _ref$2, c, conflicts, f1, f2, i, i$1, i$2, i$3, minl, newf, oldf, oldf$1, p, tinfo, typ, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; c = $f.c; conflicts = $f.conflicts; f1 = $f.f1; f2 = $f.f2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; minl = $f.minl; newf = $f.newf; oldf = $f.oldf; oldf$1 = $f.oldf$1; p = $f.p; tinfo = $f.tinfo; typ = $f.typ; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conflicts = sliceType$8.nil;
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			oldf = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(((oldf.flags & 63) === (newf.flags & 63)))) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!(oldf.xmlns === "") && !(newf.xmlns === "") && !(oldf.xmlns === newf.xmlns)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			minl = min(newf.parents.$length, oldf.parents.$length);
			p = 0;
			while (true) {
				if (!(p < minl)) { break; }
				if (!((x$2 = oldf.parents, ((p < 0 || p >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + p])) === (x$3 = newf.parents, ((p < 0 || p >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + p])))) {
					_i++;
					/* continue Loop; */ $s = 1; continue s;
				}
				p = p + (1) >> 0;
			}
			if (oldf.parents.$length > newf.parents.$length) {
				if ((x$4 = oldf.parents, x$5 = newf.parents.$length, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === newf.name) {
					conflicts = $append(conflicts, i);
				}
			} else if (oldf.parents.$length < newf.parents.$length) {
				if ((x$6 = newf.parents, x$7 = oldf.parents.$length, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7])) === oldf.name) {
					conflicts = $append(conflicts, i);
				}
			} else {
				if (newf.name === oldf.name) {
					conflicts = $append(conflicts, i);
				}
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (conflicts === sliceType$8.nil) {
			tinfo.fields = $append(tinfo.fields, newf);
			return $ifaceNil;
		}
		_ref$1 = conflicts;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if ((x$8 = tinfo.fields, ((i$1 < 0 || i$1 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i$1])).idx.$length < newf.idx.$length) {
				return $ifaceNil;
			}
			_i$1++;
		}
		_ref$2 = conflicts;
		_i$2 = 0;
		/* while (true) { */ case 3:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 4; continue; }
			i$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			oldf$1 = (x$9 = tinfo.fields, ((i$2 < 0 || i$2 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i$2]));
			/* */ if (oldf$1.idx.$length === newf.idx.$length) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (oldf$1.idx.$length === newf.idx.$length) { */ case 5:
				_r$6 = typ.FieldByIndex(oldf$1.idx); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				f1 = $clone(_r$6, reflect.StructField);
				_r$7 = typ.FieldByIndex(newf.idx); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				f2 = $clone(_r$7, reflect.StructField);
				return new TagPathError.ptr(typ, f1.Name, new reflect.StructTag(f1.Tag).Get("xml"), f2.Name, new reflect.StructTag(f2.Tag).Get("xml"));
			/* } */ case 6:
			_i$2++;
		/* } */ $s = 3; continue; case 4:
		c = conflicts.$length - 1 >> 0;
		while (true) {
			if (!(c >= 0)) { break; }
			i$3 = ((c < 0 || c >= conflicts.$length) ? $throwRuntimeError("index out of range") : conflicts.$array[conflicts.$offset + c]);
			$copySlice($subslice(tinfo.fields, i$3), $subslice(tinfo.fields, (i$3 + 1 >> 0)));
			tinfo.fields = $subslice(tinfo.fields, 0, (tinfo.fields.$length - 1 >> 0));
			c = c - (1) >> 0;
		}
		tinfo.fields = $append(tinfo.fields, newf);
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: addFieldInfo }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.c = c; $f.conflicts = conflicts; $f.f1 = f1; $f.f2 = f2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.minl = minl; $f.newf = newf; $f.oldf = oldf; $f.oldf$1 = oldf$1; $f.p = p; $f.tinfo = tinfo; $f.typ = typ; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	TagPathError.ptr.prototype.Error = function() {
		var $ptr, _r$6, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$6 = fmt.Sprintf("%s field %q with tag %q conflicts with field %q with tag %q", new sliceType$5([e.Struct, new $String(e.Field1), new $String(e.Tag1), new $String(e.Field2), new $String(e.Tag2)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		return _r$6;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TagPathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	TagPathError.prototype.Error = function() { return this.$val.Error(); };
	fieldInfo.ptr.prototype.value = function(v) {
		var $ptr, _i, _r$10, _r$11, _r$12, _r$6, _r$7, _r$8, _r$9, _ref, _v, finfo, i, t, v, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _v = $f._v; finfo = $f.finfo; i = $f.i; t = $f.t; v = $f.v; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		finfo = this;
		v = v;
		_ref = finfo.idx;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				t = v.Type();
				_r$6 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				if (!(_r$6 === 22)) { _v = false; $s = 7; continue s; }
				_r$7 = t.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = _r$7.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_v = _r$8 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					/* */ if (v.IsNil()) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (v.IsNil()) { */ case 11:
						_r$9 = v.Type().Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = reflect.New(_r$9); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = v.Set(_r$10); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 12:
					_r$11 = v.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					v = _r$11;
				/* } */ case 6:
			/* } */ case 4:
			_r$12 = v.Field(x$1); /* */ $s = 17; case 17: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			v = _r$12;
			_i++;
		/* } */ $s = 1; continue; case 2:
		return v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: fieldInfo.ptr.prototype.value }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._v = _v; $f.finfo = finfo; $f.i = i; $f.t = t; $f.v = v; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	fieldInfo.prototype.value = function(v) { return this.$val.value(v); };
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "XML syntax error on line " + strconv.Itoa(e.Line) + ": " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	StartElement.ptr.prototype.Copy = function() {
		var $ptr, attrs, e;
		e = $clone(this, StartElement);
		attrs = $makeSlice(sliceType$6, e.Attr.$length);
		$copySlice(attrs, e.Attr);
		e.Attr = attrs;
		return e;
	};
	StartElement.prototype.Copy = function() { return this.$val.Copy(); };
	StartElement.ptr.prototype.End = function() {
		var $ptr, e;
		e = $clone(this, StartElement);
		return new EndElement.ptr($clone(e.Name, Name));
	};
	StartElement.prototype.End = function() { return this.$val.End(); };
	makeCopy = function(b) {
		var $ptr, b, b1;
		b1 = $makeSlice(sliceType, b.$length);
		$copySlice(b1, b);
		return b1;
	};
	CharData.prototype.Copy = function() {
		var $ptr, c, x$1;
		c = this;
		return (x$1 = makeCopy($subslice(new sliceType(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new CharData(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(CharData).prototype.Copy = function() { return this.$get().Copy(); };
	Comment.prototype.Copy = function() {
		var $ptr, c, x$1;
		c = this;
		return (x$1 = makeCopy($subslice(new sliceType(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new Comment(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(Comment).prototype.Copy = function() { return this.$get().Copy(); };
	ProcInst.ptr.prototype.Copy = function() {
		var $ptr, p;
		p = $clone(this, ProcInst);
		p.Inst = makeCopy(p.Inst);
		return p;
	};
	ProcInst.prototype.Copy = function() { return this.$val.Copy(); };
	Directive.prototype.Copy = function() {
		var $ptr, d, x$1;
		d = this;
		return (x$1 = makeCopy($subslice(new sliceType(d.$array), d.$offset, d.$offset + d.$length)), $subslice(new Directive(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(Directive).prototype.Copy = function() { return this.$get().Copy(); };
	NewDecoder = function(r) {
		var $ptr, d, r;
		d = new Decoder.ptr(true, sliceType$3.nil, false, $throwNilPointerError, "", $ifaceNil, new bytes.Buffer.ptr(), ptrType$12.nil, ptrType$14.nil, ptrType$14.nil, false, new Name.ptr(), $ifaceNil, -1, new $Map(), $ifaceNil, 1, new $Int64(0, 0), 0);
		d.switchToReader(r);
		return d;
	};
	$pkg.NewDecoder = NewDecoder;
	Decoder.ptr.prototype.Token = function() {
		var $ptr, _entry, _entry$1, _i, _i$1, _key$2, _key$3, _r$6, _r$7, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, a, d, err, i, ok, ok$1, ok$2, t, t1, t1$1, t1$2, v, v$1, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; d = $f.d; err = $f.err; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; t = $f.t; t1 = $f.t1; t1$1 = $f.t1$1; t1$2 = $f.t1$2; v = $f.v; v$1 = $f.v$1; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t1 = [t1];
		t = $ifaceNil;
		err = $ifaceNil;
		d = this;
		if (!(d.stk === ptrType$14.nil) && (d.stk.kind === 2)) {
			err = io.EOF;
			return [t, err];
		}
		/* */ if (!($interfaceIsEqual(d.nextToken, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(d.nextToken, $ifaceNil))) { */ case 1:
			t = d.nextToken;
			d.nextToken = $ifaceNil;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$6 = d.rawToken(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6; t = _tuple[0]; err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
				return [t, err];
			/* } */ case 6:
		/* } */ case 3:
		/* */ if (!d.Strict) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!d.Strict) { */ case 7:
			_r$7 = d.autoClose(t); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$1 = _r$7; t1$1 = _tuple$1[0]; ok = _tuple$1[1];
			/* */ if (ok) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (ok) { */ case 10:
				d.nextToken = t;
				t = t1$1;
			/* } */ case 11:
		/* } */ case 8:
		_ref = t;
		if ($assertType(_ref, StartElement, true)[1]) {
			t1$2 = _ref.$val;
			_ref$1 = t1$2.Attr;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				a = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), Attr);
				if (a.Name.Space === "xmlns") {
					_tuple$2 = (_entry = d.ns[a.Name.Local], _entry !== undefined ? [_entry.v, true] : ["", false]); v = _tuple$2[0]; ok$1 = _tuple$2[1];
					d.pushNs(a.Name.Local, v, ok$1);
					_key$2 = a.Name.Local; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: a.Value };
				}
				if (a.Name.Space === "" && a.Name.Local === "xmlns") {
					_tuple$3 = (_entry$1 = d.ns[""], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]); v$1 = _tuple$3[0]; ok$2 = _tuple$3[1];
					d.pushNs("", v$1, ok$2);
					_key$3 = ""; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: a.Value };
				}
				_i++;
			}
			d.translate(t1$2.Name, true);
			_ref$2 = t1$2.Attr;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i = _i$1;
				d.translate((x$1 = t1$2.Attr, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Name, false);
				_i$1++;
			}
			d.pushElement(t1$2.Name);
			t = new t1$2.constructor.elem(t1$2);
		} else if ($assertType(_ref, EndElement, true)[1]) {
			t1[0] = _ref.$val;
			d.translate(t1[0].Name, true);
			if (!d.popElement(t1[0])) {
				_tmp = $ifaceNil; _tmp$1 = d.err; t = _tmp; err = _tmp$1;
				return [t, err];
			}
			t = new t1[0].constructor.elem(t1[0]);
		}
		return [t, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.d = d; $f.err = err; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.t = t; $f.t1 = t1; $f.t1$1 = t1$1; $f.t1$2 = t1$2; $f.v = v; $f.v$1 = v$1; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Token = function() { return this.$val.Token(); };
	Decoder.ptr.prototype.translate = function(n, isElementName) {
		var $ptr, _entry, _tuple, d, isElementName, n, ok, v;
		d = this;
		if (n.Space === "xmlns") {
			return;
		} else if (n.Space === "" && !isElementName) {
			return;
		} else if (n.Space === "xml") {
			n.Space = "http://www.w3.org/XML/1998/namespace";
		} else if (n.Space === "" && n.Local === "xmlns") {
			return;
		}
		_tuple = (_entry = d.ns[n.Space], _entry !== undefined ? [_entry.v, true] : ["", false]); v = _tuple[0]; ok = _tuple[1];
		if (ok) {
			n.Space = v;
		} else if (n.Space === "") {
			n.Space = d.DefaultSpace;
		}
	};
	Decoder.prototype.translate = function(n, isElementName) { return this.$val.translate(n, isElementName); };
	Decoder.ptr.prototype.switchToReader = function(r) {
		var $ptr, _tuple, d, ok, r, rb;
		d = this;
		_tuple = $assertType(r, io.ByteReader, true); rb = _tuple[0]; ok = _tuple[1];
		if (ok) {
			d.r = rb;
		} else {
			d.r = bufio.NewReader(r);
		}
	};
	Decoder.prototype.switchToReader = function(r) { return this.$val.switchToReader(r); };
	Decoder.ptr.prototype.push = function(kind) {
		var $ptr, d, kind, s;
		d = this;
		s = d.free;
		if (!(s === ptrType$14.nil)) {
			d.free = s.next;
		} else {
			s = new stack.ptr();
		}
		s.next = d.stk;
		s.kind = kind;
		d.stk = s;
		return s;
	};
	Decoder.prototype.push = function(kind) { return this.$val.push(kind); };
	Decoder.ptr.prototype.pop = function() {
		var $ptr, d, s;
		d = this;
		s = d.stk;
		if (!(s === ptrType$14.nil)) {
			d.stk = s.next;
			s.next = d.free;
			d.free = s;
		}
		return s;
	};
	Decoder.prototype.pop = function() { return this.$val.pop(); };
	Decoder.ptr.prototype.pushEOF = function() {
		var $ptr, d, s, start;
		d = this;
		start = d.stk;
		while (true) {
			if (!(!((start.kind === 0)))) { break; }
			start = start.next;
		}
		while (true) {
			if (!(!(start.next === ptrType$14.nil) && (start.next.kind === 1))) { break; }
			start = start.next;
		}
		s = d.free;
		if (!(s === ptrType$14.nil)) {
			d.free = s.next;
		} else {
			s = new stack.ptr();
		}
		s.kind = 2;
		s.next = start.next;
		start.next = s;
	};
	Decoder.prototype.pushEOF = function() { return this.$val.pushEOF(); };
	Decoder.ptr.prototype.popEOF = function() {
		var $ptr, d;
		d = this;
		if (d.stk === ptrType$14.nil || !((d.stk.kind === 2))) {
			return false;
		}
		d.pop();
		return true;
	};
	Decoder.prototype.popEOF = function() { return this.$val.popEOF(); };
	Decoder.ptr.prototype.pushElement = function(name) {
		var $ptr, d, name, s;
		d = this;
		name = $clone(name, Name);
		s = d.push(0);
		$copy(s.name, name, Name);
	};
	Decoder.prototype.pushElement = function(name) { return this.$val.pushElement(name); };
	Decoder.ptr.prototype.pushNs = function(local, url, ok) {
		var $ptr, d, local, ok, s, url;
		d = this;
		s = d.push(1);
		s.name.Local = local;
		s.name.Space = url;
		s.ok = ok;
	};
	Decoder.prototype.pushNs = function(local, url, ok) { return this.$val.pushNs(local, url, ok); };
	Decoder.ptr.prototype.syntaxError = function(msg) {
		var $ptr, d, msg;
		d = this;
		return new SyntaxError.ptr(msg, d.line);
	};
	Decoder.prototype.syntaxError = function(msg) { return this.$val.syntaxError(msg); };
	Decoder.ptr.prototype.popElement = function(t) {
		var $ptr, _key$2, d, name, s, s$1, t;
		d = this;
		s = d.pop();
		name = $clone(t.Name, Name);
		if (s === ptrType$14.nil || !((s.kind === 0))) {
			d.err = d.syntaxError("unexpected end element </" + name.Local + ">");
			return false;
		} else if (!(s.name.Local === name.Local)) {
			if (!d.Strict) {
				d.needClose = true;
				$copy(d.toClose, t.Name, Name);
				$copy(t.Name, s.name, Name);
				return true;
			}
			d.err = d.syntaxError("element <" + s.name.Local + "> closed by </" + name.Local + ">");
			return false;
		} else if (!(s.name.Space === name.Space)) {
			d.err = d.syntaxError("element <" + s.name.Local + "> in space " + s.name.Space + "closed by </" + name.Local + "> in space " + name.Space);
			return false;
		}
		while (true) {
			if (!(!(d.stk === ptrType$14.nil) && !((d.stk.kind === 0)) && !((d.stk.kind === 2)))) { break; }
			s$1 = d.pop();
			if (s$1.ok) {
				_key$2 = s$1.name.Local; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: s$1.name.Space };
			} else {
				delete d.ns[s$1.name.Local];
			}
		}
		return true;
	};
	Decoder.prototype.popElement = function(t) { return this.$val.popElement(t); };
	Decoder.ptr.prototype.autoClose = function(t) {
		var $ptr, _i, _r$6, _r$7, _ref, _tuple, d, et, name, ok, s, t, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; et = $f.et; name = $f.name; ok = $f.ok; s = $f.s; t = $f.t; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.stk === ptrType$14.nil || !((d.stk.kind === 0))) {
			return [$ifaceNil, false];
		}
		_r$6 = strings.ToLower(d.stk.name.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		name = _r$6;
		_ref = d.AutoClose;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$7 = strings.ToLower(s); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7 === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$7 === name) { */ case 4:
				_tuple = $assertType(t, EndElement, true); et = $clone(_tuple[0], EndElement); ok = _tuple[1];
				if (!ok || !(et.Name.Local === name)) {
					return [(x$1 = new EndElement.ptr($clone(d.stk.name, Name)), new x$1.constructor.elem(x$1)), true];
				}
				/* break; */ $s = 3; continue;
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		return [$ifaceNil, false];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.autoClose }; } $f.$ptr = $ptr; $f._i = _i; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.et = et; $f.name = name; $f.ok = ok; $f.s = s; $f.t = t; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.autoClose = function(t) { return this.$val.autoClose(t); };
	Decoder.ptr.prototype.RawToken = function() {
		var $ptr, _r$6, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.unmarshalDepth > 0) {
			return [$ifaceNil, errRawToken];
		}
		_r$6 = d.rawToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		return _r$6;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.RawToken }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.RawToken = function() { return this.$val.RawToken(); };
	Decoder.ptr.prototype.rawToken = function() {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, attr, b, b0, b0$1, b0$2, b1, b1$1, d, data, data$1, data$2, data$3, data$4, depth, empty, enc, err, i, i$1, inquote, j, n, name, name$1, nattr, newr, ok, s, target, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; a = $f.a; attr = $f.attr; b = $f.b; b0 = $f.b0; b0$1 = $f.b0$1; b0$2 = $f.b0$2; b1 = $f.b1; b1$1 = $f.b1$1; d = $f.d; data = $f.data; data$1 = $f.data$1; data$2 = $f.data$2; data$3 = $f.data$3; data$4 = $f.data$4; depth = $f.depth; empty = $f.empty; enc = $f.enc; err = $f.err; i = $f.i; i$1 = $f.i$1; inquote = $f.inquote; j = $f.j; n = $f.n; name = $f.name; name$1 = $f.name$1; nattr = $f.nattr; newr = $f.newr; ok = $f.ok; s = $f.s; target = $f.target; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			return [$ifaceNil, d.err];
		}
		if (d.needClose) {
			d.needClose = false;
			return [(x$1 = new EndElement.ptr($clone(d.toClose, Name)), new x$1.constructor.elem(x$1)), $ifaceNil];
		}
		_r$6 = d.getc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; b = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, d.err];
		}
		/* */ if (!((b === 60))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((b === 60))) { */ case 2:
			d.ungetc(b);
			_r$7 = d.text(-1, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			data = _r$7;
			if (data === sliceType.nil) {
				return [$ifaceNil, d.err];
			}
			return [$subslice(new CharData(data.$array), data.$offset, data.$offset + data.$length), $ifaceNil];
		/* } */ case 3:
		_r$8 = d.mustgetc(); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$1 = _r$8; b = _tuple$1[0]; ok = _tuple$1[1];
		/* */ if (!ok) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!ok) { */ case 6:
			return [$ifaceNil, d.err];
		/* } */ case 7:
		_ref = b;
		/* */ if (_ref === 47) { $s = 8; continue; }
		/* */ if (_ref === 63) { $s = 9; continue; }
		/* */ if (_ref === 33) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_ref === 47) { */ case 8:
			name = $clone(new Name.ptr(), Name);
			_r$9 = d.nsname(); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$2 = _r$9; $copy(name, _tuple$2[0], Name); ok = _tuple$2[1];
			/* */ if (!ok) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!ok) { */ case 13:
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected element name after </");
				}
				return [$ifaceNil, d.err];
			/* } */ case 14:
			$r = d.space(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$10 = d.mustgetc(); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$3 = _r$10; b = _tuple$3[0]; ok = _tuple$3[1];
			/* */ if (!ok) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!ok) { */ case 17:
				return [$ifaceNil, d.err];
			/* } */ case 18:
			if (!((b === 62))) {
				d.err = d.syntaxError("invalid characters between </" + name.Local + " and >");
				return [$ifaceNil, d.err];
			}
			return [(x$2 = new EndElement.ptr($clone(name, Name)), new x$2.constructor.elem(x$2)), $ifaceNil];
			$s = 11; continue;
		/* } else if (_ref === 63) { */ case 9:
			target = "";
			_r$11 = d.name(); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple$4 = _r$11; target = _tuple$4[0]; ok = _tuple$4[1];
			/* */ if (!ok) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!ok) { */ case 20:
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected target name after <?");
				}
				return [$ifaceNil, d.err];
			/* } */ case 21:
			$r = d.space(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.buf.Reset();
			b0 = 0;
			/* while (true) { */ case 23:
				_r$12 = d.mustgetc(); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$5 = _r$12; b = _tuple$5[0]; ok = _tuple$5[1];
				/* */ if (!ok) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!ok) { */ case 26:
					return [$ifaceNil, d.err];
				/* } */ case 27:
				d.buf.WriteByte(b);
				if ((b0 === 63) && (b === 62)) {
					/* break; */ $s = 24; continue;
				}
				b0 = b;
			/* } */ $s = 23; continue; case 24:
			data$1 = d.buf.Bytes();
			data$1 = $subslice(data$1, 0, (data$1.$length - 2 >> 0));
			/* */ if (target === "xml") { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (target === "xml") { */ case 28:
				enc = procInstEncoding($bytesToString(data$1));
				/* */ if (!(enc === "") && !(enc === "utf-8") && !(enc === "UTF-8")) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (!(enc === "") && !(enc === "utf-8") && !(enc === "UTF-8")) { */ case 30:
					/* */ if (d.CharsetReader === $throwNilPointerError) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (d.CharsetReader === $throwNilPointerError) { */ case 32:
						_r$13 = fmt.Errorf("xml: encoding %q declared but Decoder.CharsetReader is nil", new sliceType$5([new $String(enc)])); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						d.err = _r$13;
						return [$ifaceNil, d.err];
					/* } */ case 33:
					_r$14 = d.CharsetReader(enc, $assertType(d.r, io.Reader)); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_tuple$6 = _r$14; newr = _tuple$6[0]; err = _tuple$6[1];
					/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 36:
						_r$15 = fmt.Errorf("xml: opening charset %q: %v", new sliceType$5([new $String(enc), err])); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						d.err = _r$15;
						return [$ifaceNil, d.err];
					/* } */ case 37:
					if ($interfaceIsEqual(newr, $ifaceNil)) {
						$panic(new $String("CharsetReader returned a nil Reader for charset " + enc));
					}
					d.switchToReader(newr);
				/* } */ case 31:
			/* } */ case 29:
			return [(x$3 = new ProcInst.ptr(target, data$1), new x$3.constructor.elem(x$3)), $ifaceNil];
			$s = 11; continue;
		/* } else if (_ref === 33) { */ case 10:
			_r$16 = d.mustgetc(); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_tuple$7 = _r$16; b = _tuple$7[0]; ok = _tuple$7[1];
			/* */ if (!ok) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (!ok) { */ case 40:
				return [$ifaceNil, d.err];
			/* } */ case 41:
			_ref$1 = b;
			/* */ if (_ref$1 === 45) { $s = 42; continue; }
			/* */ if (_ref$1 === 91) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if (_ref$1 === 45) { */ case 42:
				_r$17 = d.mustgetc(); /* */ $s = 45; case 45: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_tuple$8 = _r$17; b = _tuple$8[0]; ok = _tuple$8[1];
				/* */ if (!ok) { $s = 46; continue; }
				/* */ $s = 47; continue;
				/* if (!ok) { */ case 46:
					return [$ifaceNil, d.err];
				/* } */ case 47:
				if (!((b === 45))) {
					d.err = d.syntaxError("invalid sequence <!- not part of <!--");
					return [$ifaceNil, d.err];
				}
				d.buf.Reset();
				_tmp = 0; _tmp$1 = 0; b0$1 = _tmp; b1 = _tmp$1;
				/* while (true) { */ case 48:
					_r$18 = d.mustgetc(); /* */ $s = 50; case 50: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_tuple$9 = _r$18; b = _tuple$9[0]; ok = _tuple$9[1];
					/* */ if (!ok) { $s = 51; continue; }
					/* */ $s = 52; continue;
					/* if (!ok) { */ case 51:
						return [$ifaceNil, d.err];
					/* } */ case 52:
					d.buf.WriteByte(b);
					if ((b0$1 === 45) && (b1 === 45) && (b === 62)) {
						/* break; */ $s = 49; continue;
					}
					_tmp$2 = b1; _tmp$3 = b; b0$1 = _tmp$2; b1 = _tmp$3;
				/* } */ $s = 48; continue; case 49:
				data$2 = d.buf.Bytes();
				data$2 = $subslice(data$2, 0, (data$2.$length - 3 >> 0));
				return [$subslice(new Comment(data$2.$array), data$2.$offset, data$2.$offset + data$2.$length), $ifaceNil];
				$s = 44; continue;
			/* } else if (_ref$1 === 91) { */ case 43:
				i = 0;
				/* while (true) { */ case 53:
					/* if (!(i < 6)) { break; } */ if(!(i < 6)) { $s = 54; continue; }
					_r$19 = d.mustgetc(); /* */ $s = 55; case 55: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					_tuple$10 = _r$19; b = _tuple$10[0]; ok = _tuple$10[1];
					/* */ if (!ok) { $s = 56; continue; }
					/* */ $s = 57; continue;
					/* if (!ok) { */ case 56:
						return [$ifaceNil, d.err];
					/* } */ case 57:
					if (!((b === "CDATA[".charCodeAt(i)))) {
						d.err = d.syntaxError("invalid <![ sequence");
						return [$ifaceNil, d.err];
					}
					i = i + (1) >> 0;
				/* } */ $s = 53; continue; case 54:
				_r$20 = d.text(-1, true); /* */ $s = 58; case 58: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				data$3 = _r$20;
				if (data$3 === sliceType.nil) {
					return [$ifaceNil, d.err];
				}
				return [$subslice(new CharData(data$3.$array), data$3.$offset, data$3.$offset + data$3.$length), $ifaceNil];
			/* } */ case 44:
			d.buf.Reset();
			d.buf.WriteByte(b);
			inquote = 0;
			depth = 0;
			/* while (true) { */ case 59:
				_r$21 = d.mustgetc(); /* */ $s = 61; case 61: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_tuple$11 = _r$21; b = _tuple$11[0]; ok = _tuple$11[1];
				/* */ if (!ok) { $s = 62; continue; }
				/* */ $s = 63; continue;
				/* if (!ok) { */ case 62:
					return [$ifaceNil, d.err];
				/* } */ case 63:
				if ((inquote === 0) && (b === 62) && (depth === 0)) {
					/* break; */ $s = 60; continue;
				}
				/* HandleB: */ case 64:
				d.buf.WriteByte(b);
				/* */ if (b === inquote) { $s = 65; continue; }
				/* */ if (!((inquote === 0))) { $s = 66; continue; }
				/* */ if ((b === 39) || (b === 34)) { $s = 67; continue; }
				/* */ if ((b === 62) && (inquote === 0)) { $s = 68; continue; }
				/* */ if ((b === 60) && (inquote === 0)) { $s = 69; continue; }
				/* */ $s = 70; continue;
				/* if (b === inquote) { */ case 65:
					inquote = 0;
					$s = 70; continue;
				/* } else if (!((inquote === 0))) { */ case 66:
					$s = 70; continue;
				/* } else if ((b === 39) || (b === 34)) { */ case 67:
					inquote = b;
					$s = 70; continue;
				/* } else if ((b === 62) && (inquote === 0)) { */ case 68:
					depth = depth - (1) >> 0;
					$s = 70; continue;
				/* } else if ((b === 60) && (inquote === 0)) { */ case 69:
					s = "!--";
					i$1 = 0;
					/* while (true) { */ case 71:
						/* if (!(i$1 < s.length)) { break; } */ if(!(i$1 < s.length)) { $s = 72; continue; }
						_r$22 = d.mustgetc(); /* */ $s = 73; case 73: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						_tuple$12 = _r$22; b = _tuple$12[0]; ok = _tuple$12[1];
						/* */ if (!ok) { $s = 74; continue; }
						/* */ $s = 75; continue;
						/* if (!ok) { */ case 74:
							return [$ifaceNil, d.err];
						/* } */ case 75:
						/* */ if (!((b === s.charCodeAt(i$1)))) { $s = 76; continue; }
						/* */ $s = 77; continue;
						/* if (!((b === s.charCodeAt(i$1)))) { */ case 76:
							j = 0;
							while (true) {
								if (!(j < i$1)) { break; }
								d.buf.WriteByte(s.charCodeAt(j));
								j = j + (1) >> 0;
							}
							depth = depth + (1) >> 0;
							/* goto HandleB */ $s = 64; continue;
						/* } */ case 77:
						i$1 = i$1 + (1) >> 0;
					/* } */ $s = 71; continue; case 72:
					d.buf.Truncate(d.buf.Len() - 1 >> 0);
					_tmp$4 = 0; _tmp$5 = 0; b0$2 = _tmp$4; b1$1 = _tmp$5;
					/* while (true) { */ case 78:
						_r$23 = d.mustgetc(); /* */ $s = 80; case 80: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						_tuple$13 = _r$23; b = _tuple$13[0]; ok = _tuple$13[1];
						/* */ if (!ok) { $s = 81; continue; }
						/* */ $s = 82; continue;
						/* if (!ok) { */ case 81:
							return [$ifaceNil, d.err];
						/* } */ case 82:
						if ((b0$2 === 45) && (b1$1 === 45) && (b === 62)) {
							/* break; */ $s = 79; continue;
						}
						_tmp$6 = b1$1; _tmp$7 = b; b0$2 = _tmp$6; b1$1 = _tmp$7;
					/* } */ $s = 78; continue; case 79:
				/* } */ case 70:
			/* } */ $s = 59; continue; case 60:
			return [(x$4 = d.buf.Bytes(), $subslice(new Directive(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $ifaceNil];
		/* } */ case 11:
		d.ungetc(b);
		name$1 = $clone(new Name.ptr(), Name);
		empty = false;
		attr = sliceType$6.nil;
		_r$24 = d.nsname(); /* */ $s = 83; case 83: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_tuple$14 = _r$24; $copy(name$1, _tuple$14[0], Name); ok = _tuple$14[1];
		/* */ if (!ok) { $s = 84; continue; }
		/* */ $s = 85; continue;
		/* if (!ok) { */ case 84:
			if ($interfaceIsEqual(d.err, $ifaceNil)) {
				d.err = d.syntaxError("expected element name after <");
			}
			return [$ifaceNil, d.err];
		/* } */ case 85:
		attr = $makeSlice(sliceType$6, 0, 4);
		/* while (true) { */ case 86:
			$r = d.space(); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$25 = d.mustgetc(); /* */ $s = 89; case 89: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_tuple$15 = _r$25; b = _tuple$15[0]; ok = _tuple$15[1];
			/* */ if (!ok) { $s = 90; continue; }
			/* */ $s = 91; continue;
			/* if (!ok) { */ case 90:
				return [$ifaceNil, d.err];
			/* } */ case 91:
			/* */ if (b === 47) { $s = 92; continue; }
			/* */ $s = 93; continue;
			/* if (b === 47) { */ case 92:
				empty = true;
				_r$26 = d.mustgetc(); /* */ $s = 94; case 94: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_tuple$16 = _r$26; b = _tuple$16[0]; ok = _tuple$16[1];
				/* */ if (!ok) { $s = 95; continue; }
				/* */ $s = 96; continue;
				/* if (!ok) { */ case 95:
					return [$ifaceNil, d.err];
				/* } */ case 96:
				if (!((b === 62))) {
					d.err = d.syntaxError("expected /> in element");
					return [$ifaceNil, d.err];
				}
				/* break; */ $s = 87; continue;
			/* } */ case 93:
			if (b === 62) {
				/* break; */ $s = 87; continue;
			}
			d.ungetc(b);
			n = attr.$length;
			if (n >= attr.$capacity) {
				nattr = $makeSlice(sliceType$6, n, (2 * attr.$capacity >> 0));
				$copySlice(nattr, attr);
				attr = nattr;
			}
			attr = $subslice(attr, 0, (n + 1 >> 0));
			a = ((n < 0 || n >= attr.$length) ? $throwRuntimeError("index out of range") : attr.$array[attr.$offset + n]);
			_r$27 = d.nsname(); /* */ $s = 97; case 97: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_tuple$17 = _r$27; $copy(a.Name, _tuple$17[0], Name); ok = _tuple$17[1];
			/* */ if (!ok) { $s = 98; continue; }
			/* */ $s = 99; continue;
			/* if (!ok) { */ case 98:
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected attribute name in element");
				}
				return [$ifaceNil, d.err];
			/* } */ case 99:
			$r = d.space(); /* */ $s = 100; case 100: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$28 = d.mustgetc(); /* */ $s = 101; case 101: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_tuple$18 = _r$28; b = _tuple$18[0]; ok = _tuple$18[1];
			/* */ if (!ok) { $s = 102; continue; }
			/* */ $s = 103; continue;
			/* if (!ok) { */ case 102:
				return [$ifaceNil, d.err];
			/* } */ case 103:
			/* */ if (!((b === 61))) { $s = 104; continue; }
			/* */ $s = 105; continue;
			/* if (!((b === 61))) { */ case 104:
				if (d.Strict) {
					d.err = d.syntaxError("attribute name without = in element");
					return [$ifaceNil, d.err];
				} else {
					d.ungetc(b);
					a.Value = a.Name.Local;
				}
				$s = 106; continue;
			/* } else { */ case 105:
				$r = d.space(); /* */ $s = 107; case 107: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$29 = d.attrval(); /* */ $s = 108; case 108: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				data$4 = _r$29;
				if (data$4 === sliceType.nil) {
					return [$ifaceNil, d.err];
				}
				a.Value = $bytesToString(data$4);
			/* } */ case 106:
		/* } */ $s = 86; continue; case 87:
		if (empty) {
			d.needClose = true;
			$copy(d.toClose, name$1, Name);
		}
		return [(x$5 = new StartElement.ptr($clone(name$1, Name), attr), new x$5.constructor.elem(x$5)), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.rawToken }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.a = a; $f.attr = attr; $f.b = b; $f.b0 = b0; $f.b0$1 = b0$1; $f.b0$2 = b0$2; $f.b1 = b1; $f.b1$1 = b1$1; $f.d = d; $f.data = data; $f.data$1 = data$1; $f.data$2 = data$2; $f.data$3 = data$3; $f.data$4 = data$4; $f.depth = depth; $f.empty = empty; $f.enc = enc; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.inquote = inquote; $f.j = j; $f.n = n; $f.name = name; $f.name$1 = name$1; $f.nattr = nattr; $f.newr = newr; $f.ok = ok; $f.s = s; $f.target = target; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.rawToken = function() { return this.$val.rawToken(); };
	Decoder.ptr.prototype.attrval = function() {
		var $ptr, _r$6, _r$7, _r$8, _tuple, _tuple$1, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$6 = d.mustgetc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; b = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return sliceType.nil;
		}
		/* */ if ((b === 34) || (b === 39)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((b === 34) || (b === 39)) { */ case 2:
			_r$7 = d.text((b >> 0), false); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			return _r$7;
		/* } */ case 3:
		if (d.Strict) {
			d.err = d.syntaxError("unquoted or missing attribute value in element");
			return sliceType.nil;
		}
		d.ungetc(b);
		d.buf.Reset();
		/* while (true) { */ case 5:
			_r$8 = d.mustgetc(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$1 = _r$8; b = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				return sliceType.nil;
			}
			if (97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || (b === 95) || (b === 58) || (b === 45)) {
				d.buf.WriteByte(b);
			} else {
				d.ungetc(b);
				/* break; */ $s = 6; continue;
			}
		/* } */ $s = 5; continue; case 6:
		return d.buf.Bytes();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.attrval }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.attrval = function() { return this.$val.attrval(); };
	Decoder.ptr.prototype.space = function() {
		var $ptr, _r$6, _ref, _tuple, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r$6 = d.getc(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6; b = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				return;
			}
			_ref = b;
			if (_ref === 32 || _ref === 13 || _ref === 10 || _ref === 9) {
			} else {
				d.ungetc(b);
				return;
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.space }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.space = function() { return this.$val.space(); };
	Decoder.ptr.prototype.getc = function() {
		var $ptr, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, d, ok, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; d = $f.d; ok = $f.ok; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		ok = false;
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = false; b = _tmp; ok = _tmp$1;
			return [b, ok];
		}
		/* */ if (d.nextByte >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nextByte >= 0) { */ case 1:
			b = (d.nextByte << 24 >>> 24);
			d.nextByte = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$6 = d.r.ReadByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6; b = _tuple[0]; d.err = _tuple[1];
			if (!($interfaceIsEqual(d.err, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = false; b = _tmp$2; ok = _tmp$3;
				return [b, ok];
			}
			if (!(d.saved === ptrType$12.nil)) {
				d.saved.WriteByte(b);
			}
		/* } */ case 3:
		if (b === 10) {
			d.line = d.line + (1) >> 0;
		}
		d.offset = (x$1 = d.offset, x$2 = new $Int64(0, 1), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		_tmp$4 = b; _tmp$5 = true; b = _tmp$4; ok = _tmp$5;
		return [b, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.getc }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.ok = ok; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.getc = function() { return this.$val.getc(); };
	Decoder.ptr.prototype.InputOffset = function() {
		var $ptr, d;
		d = this;
		return d.offset;
	};
	Decoder.prototype.InputOffset = function() { return this.$val.InputOffset(); };
	Decoder.ptr.prototype.savedOffset = function() {
		var $ptr, d, n;
		d = this;
		n = d.saved.Len();
		if (d.nextByte >= 0) {
			n = n - (1) >> 0;
		}
		return n;
	};
	Decoder.prototype.savedOffset = function() { return this.$val.savedOffset(); };
	Decoder.ptr.prototype.mustgetc = function() {
		var $ptr, _r$6, _tuple, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tuple = $f._tuple; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		ok = false;
		d = this;
		_r$6 = d.getc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; b = _tuple[0]; ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			if ($interfaceIsEqual(d.err, io.EOF)) {
				d.err = d.syntaxError("unexpected EOF");
			}
		/* } */ case 3:
		return [b, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.mustgetc }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.mustgetc = function() { return this.$val.mustgetc(); };
	Decoder.ptr.prototype.ungetc = function(b) {
		var $ptr, b, d, x$1, x$2;
		d = this;
		if (b === 10) {
			d.line = d.line - (1) >> 0;
		}
		d.nextByte = (b >> 0);
		d.offset = (x$1 = d.offset, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
	};
	Decoder.prototype.ungetc = function(b) { return this.$val.ungetc(b); };
	Decoder.ptr.prototype.text = function(quote, cdata) {
		var $ptr, _entry, _entry$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, b0, b1, base, before, buf, cdata, d, data, ent, err, haveText, n, name, ok, ok$1, ok$2, quote, r, r$1, s, s$1, size, start, text, trunc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; b = $f.b; b0 = $f.b0; b1 = $f.b1; base = $f.base; before = $f.before; buf = $f.buf; cdata = $f.cdata; d = $f.d; data = $f.data; ent = $f.ent; err = $f.err; haveText = $f.haveText; n = $f.n; name = $f.name; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; quote = $f.quote; r = $f.r; r$1 = $f.r$1; s = $f.s; s$1 = $f.s$1; size = $f.size; start = $f.start; text = $f.text; trunc = $f.trunc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_tmp = 0; _tmp$1 = 0; b0 = _tmp; b1 = _tmp$1;
		trunc = 0;
		d.buf.Reset();
		/* while (true) { */ case 1:
			_r$6 = d.getc(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6; b = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				if (cdata) {
					if ($interfaceIsEqual(d.err, io.EOF)) {
						d.err = d.syntaxError("unexpected EOF in CDATA section");
					}
					return sliceType.nil;
				}
				/* break Input; */ $s = 2; continue s;
			}
			if ((b0 === 93) && (b1 === 93) && (b === 62)) {
				if (cdata) {
					trunc = 2;
					/* break Input; */ $s = 2; continue s;
				}
				d.err = d.syntaxError("unescaped ]]> not in CDATA section");
				return sliceType.nil;
			}
			if ((b === 60) && !cdata) {
				if (quote >= 0) {
					d.err = d.syntaxError("unescaped < inside quoted string");
					return sliceType.nil;
				}
				d.ungetc(60);
				/* break Input; */ $s = 2; continue s;
			}
			if (quote >= 0 && (b === (quote << 24 >>> 24))) {
				/* break Input; */ $s = 2; continue s;
			}
			/* */ if ((b === 38) && !cdata) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((b === 38) && !cdata) { */ case 4:
				before = d.buf.Len();
				d.buf.WriteByte(38);
				ok$1 = false;
				text = "";
				haveText = false;
				_r$7 = d.mustgetc(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$1 = _r$7; b = _tuple$1[0]; ok$1 = _tuple$1[1];
				/* */ if (!ok$1) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!ok$1) { */ case 7:
					return sliceType.nil;
				/* } */ case 8:
				/* */ if (b === 35) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (b === 35) { */ case 9:
					d.buf.WriteByte(b);
					_r$8 = d.mustgetc(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$2 = _r$8; b = _tuple$2[0]; ok$1 = _tuple$2[1];
					/* */ if (!ok$1) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (!ok$1) { */ case 13:
						return sliceType.nil;
					/* } */ case 14:
					base = 10;
					/* */ if (b === 120) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (b === 120) { */ case 15:
						base = 16;
						d.buf.WriteByte(b);
						_r$9 = d.mustgetc(); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_tuple$3 = _r$9; b = _tuple$3[0]; ok$1 = _tuple$3[1];
						/* */ if (!ok$1) { $s = 18; continue; }
						/* */ $s = 19; continue;
						/* if (!ok$1) { */ case 18:
							return sliceType.nil;
						/* } */ case 19:
					/* } */ case 16:
					start = d.buf.Len();
					/* while (true) { */ case 20:
						/* if (!(48 <= b && b <= 57 || (base === 16) && 97 <= b && b <= 102 || (base === 16) && 65 <= b && b <= 70)) { break; } */ if(!(48 <= b && b <= 57 || (base === 16) && 97 <= b && b <= 102 || (base === 16) && 65 <= b && b <= 70)) { $s = 21; continue; }
						d.buf.WriteByte(b);
						_r$10 = d.mustgetc(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_tuple$4 = _r$10; b = _tuple$4[0]; ok$1 = _tuple$4[1];
						/* */ if (!ok$1) { $s = 23; continue; }
						/* */ $s = 24; continue;
						/* if (!ok$1) { */ case 23:
							return sliceType.nil;
						/* } */ case 24:
					/* } */ $s = 20; continue; case 21:
					if (!((b === 59))) {
						d.ungetc(b);
					} else {
						s = $bytesToString($subslice(d.buf.Bytes(), start));
						d.buf.WriteByte(59);
						_tuple$5 = strconv.ParseUint(s, base, 64); n = _tuple$5[0]; err = _tuple$5[1];
						if ($interfaceIsEqual(err, $ifaceNil) && (n.$high < 0 || (n.$high === 0 && n.$low <= 1114111))) {
							text = $encodeRune(n.$low);
							haveText = true;
						}
					}
					$s = 11; continue;
				/* } else { */ case 10:
					d.ungetc(b);
					_r$11 = d.readName(); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (!_r$11) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$11) { */ case 25:
						if (!($interfaceIsEqual(d.err, $ifaceNil))) {
							return sliceType.nil;
						}
						ok$1 = false;
					/* } */ case 26:
					_r$12 = d.mustgetc(); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$6 = _r$12; b = _tuple$6[0]; ok$1 = _tuple$6[1];
					/* */ if (!ok$1) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (!ok$1) { */ case 29:
						return sliceType.nil;
					/* } */ case 30:
					if (!((b === 59))) {
						d.ungetc(b);
					} else {
						name = $subslice(d.buf.Bytes(), (before + 1 >> 0));
						d.buf.WriteByte(59);
						if (isName(name)) {
							s$1 = $bytesToString(name);
							_tuple$7 = (_entry = entity[s$1], _entry !== undefined ? [_entry.v, true] : [0, false]); r = _tuple$7[0]; ok$2 = _tuple$7[1];
							if (ok$2) {
								text = $encodeRune(r);
								haveText = true;
							} else if (!(d.Entity === false)) {
								_tuple$8 = (_entry$1 = d.Entity[s$1], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]); text = _tuple$8[0]; haveText = _tuple$8[1];
							}
						}
					}
				/* } */ case 11:
				if (haveText) {
					d.buf.Truncate(before);
					d.buf.Write(new sliceType($stringToBytes(text)));
					_tmp$2 = 0; _tmp$3 = 0; b0 = _tmp$2; b1 = _tmp$3;
					/* continue Input; */ $s = 1; continue s;
				}
				if (!d.Strict) {
					_tmp$4 = 0; _tmp$5 = 0; b0 = _tmp$4; b1 = _tmp$5;
					/* continue Input; */ $s = 1; continue s;
				}
				ent = $bytesToString($subslice(d.buf.Bytes(), before));
				if (!((ent.charCodeAt((ent.length - 1 >> 0)) === 59))) {
					ent = ent + (" (no semicolon)");
				}
				d.err = d.syntaxError("invalid character entity " + ent);
				return sliceType.nil;
			/* } */ case 5:
			if (b === 13) {
				d.buf.WriteByte(10);
			} else if ((b1 === 13) && (b === 10)) {
			} else {
				d.buf.WriteByte(b);
			}
			_tmp$6 = b1; _tmp$7 = b; b0 = _tmp$6; b1 = _tmp$7;
		/* } */ $s = 1; continue; case 2:
		data = d.buf.Bytes();
		data = $subslice(data, 0, (data.$length - trunc >> 0));
		buf = data;
		/* while (true) { */ case 31:
			/* if (!(buf.$length > 0)) { break; } */ if(!(buf.$length > 0)) { $s = 32; continue; }
			_tuple$9 = utf8.DecodeRune(buf); r$1 = _tuple$9[0]; size = _tuple$9[1];
			if ((r$1 === 65533) && (size === 1)) {
				d.err = d.syntaxError("invalid UTF-8");
				return sliceType.nil;
			}
			buf = $subslice(buf, size);
			/* */ if (!isInCharacterRange(r$1)) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (!isInCharacterRange(r$1)) { */ case 33:
				_r$13 = fmt.Sprintf("illegal character code %U", new sliceType$5([new $Int32(r$1)])); /* */ $s = 35; case 35: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = d.syntaxError(_r$13); /* */ $s = 36; case 36: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				d.err = _r$14;
				return sliceType.nil;
			/* } */ case 34:
		/* } */ $s = 31; continue; case 32:
		return data;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.text }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.b = b; $f.b0 = b0; $f.b1 = b1; $f.base = base; $f.before = before; $f.buf = buf; $f.cdata = cdata; $f.d = d; $f.data = data; $f.ent = ent; $f.err = err; $f.haveText = haveText; $f.n = n; $f.name = name; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.quote = quote; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.s$1 = s$1; $f.size = size; $f.start = start; $f.text = text; $f.trunc = trunc; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.text = function(quote, cdata) { return this.$val.text(quote, cdata); };
	isInCharacterRange = function(r) {
		var $ptr, inrange, r;
		inrange = false;
		inrange = (r === 9) || (r === 10) || (r === 13) || r >= 32 && r <= 57207 || r >= 57344 && r <= 65533 || r >= 65536 && r <= 1114111;
		return inrange;
	};
	Decoder.ptr.prototype.nsname = function() {
		var $ptr, _r$6, _tmp, _tmp$1, _tuple, d, i, name, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; i = $f.i; name = $f.name; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = new Name.ptr();
		ok = false;
		d = this;
		_r$6 = d.name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; s = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return [name, ok];
		}
		i = strings.Index(s, ":");
		if (i < 0) {
			name.Local = s;
		} else {
			name.Space = s.substring(0, i);
			name.Local = s.substring((i + 1 >> 0));
		}
		_tmp = $clone(name, Name); _tmp$1 = true; $copy(name, _tmp, Name); ok = _tmp$1;
		return [name, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.nsname }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.i = i; $f.name = name; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.nsname = function() { return this.$val.nsname(); };
	Decoder.ptr.prototype.name = function() {
		var $ptr, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; d = $f.d; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = "";
		ok = false;
		d = this;
		d.buf.Reset();
		_r$6 = d.readName(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!_r$6) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$6) { */ case 1:
			_tmp = ""; _tmp$1 = false; s = _tmp; ok = _tmp$1;
			return [s, ok];
		/* } */ case 2:
		s = d.buf.String();
		if (!isName(new sliceType($stringToBytes(s)))) {
			d.err = d.syntaxError("invalid XML name: " + s);
			_tmp$2 = ""; _tmp$3 = false; s = _tmp$2; ok = _tmp$3;
			return [s, ok];
		}
		_tmp$4 = s; _tmp$5 = true; s = _tmp$4; ok = _tmp$5;
		return [s, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.name }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.d = d; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.name = function() { return this.$val.name(); };
	Decoder.ptr.prototype.readName = function() {
		var $ptr, _r$6, _r$7, _tuple, _tuple$1, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ok = false;
		d = this;
		b = 0;
		_r$6 = d.mustgetc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; b = _tuple[0]; ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			return ok;
		/* } */ case 3:
		if (b < 128 && !isNameByte(b)) {
			d.ungetc(b);
			ok = false;
			return ok;
		}
		d.buf.WriteByte(b);
		/* while (true) { */ case 4:
			_r$7 = d.mustgetc(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$1 = _r$7; b = _tuple$1[0]; ok = _tuple$1[1];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				return ok;
			/* } */ case 8:
			if (b < 128 && !isNameByte(b)) {
				d.ungetc(b);
				/* break; */ $s = 5; continue;
			}
			d.buf.WriteByte(b);
		/* } */ $s = 4; continue; case 5:
		ok = true;
		return ok;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.readName }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.readName = function() { return this.$val.readName(); };
	isNameByte = function(c) {
		var $ptr, c;
		return 65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57 || (c === 95) || (c === 58) || (c === 46) || (c === 45);
	};
	isName = function(s) {
		var $ptr, _tuple, _tuple$1, c, n, s;
		if (s.$length === 0) {
			return false;
		}
		_tuple = utf8.DecodeRune(s); c = _tuple[0]; n = _tuple[1];
		if ((c === 65533) && (n === 1)) {
			return false;
		}
		if (!unicode.Is(first, c)) {
			return false;
		}
		while (true) {
			if (!(n < s.$length)) { break; }
			s = $subslice(s, n);
			_tuple$1 = utf8.DecodeRune(s); c = _tuple$1[0]; n = _tuple$1[1];
			if ((c === 65533) && (n === 1)) {
				return false;
			}
			if (!unicode.Is(first, c) && !unicode.Is(second, c)) {
				return false;
			}
		}
		return true;
	};
	isNameString = function(s) {
		var $ptr, _tuple, _tuple$1, c, n, s;
		if (s.length === 0) {
			return false;
		}
		_tuple = utf8.DecodeRuneInString(s); c = _tuple[0]; n = _tuple[1];
		if ((c === 65533) && (n === 1)) {
			return false;
		}
		if (!unicode.Is(first, c)) {
			return false;
		}
		while (true) {
			if (!(n < s.length)) { break; }
			s = s.substring(n);
			_tuple$1 = utf8.DecodeRuneInString(s); c = _tuple$1[0]; n = _tuple$1[1];
			if ((c === 65533) && (n === 1)) {
				return false;
			}
			if (!unicode.Is(first, c) && !unicode.Is(second, c)) {
				return false;
			}
		}
		return true;
	};
	EscapeText = function(w, s) {
		var $ptr, _r$6, _r$7, _r$8, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err$1, err$2, esc, i, last, r, s, w, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; esc = $f.esc; i = $f.i; last = $f.last; r = $f.r; s = $f.s; w = $f.w; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		esc = sliceType.nil;
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.$length)) { break; } */ if(!(i < s.$length)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; width = _tuple[1];
			i = i + (width) >> 0;
			_ref = r;
			/* */ if (_ref === 34) { $s = 3; continue; }
			/* */ if (_ref === 39) { $s = 4; continue; }
			/* */ if (_ref === 38) { $s = 5; continue; }
			/* */ if (_ref === 60) { $s = 6; continue; }
			/* */ if (_ref === 62) { $s = 7; continue; }
			/* */ if (_ref === 9) { $s = 8; continue; }
			/* */ if (_ref === 10) { $s = 9; continue; }
			/* */ if (_ref === 13) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* switch (0) { default: if (_ref === 34) { */ case 3:
				esc = esc_quot;
				$s = 12; continue;
			/* } else if (_ref === 39) { */ case 4:
				esc = esc_apos;
				$s = 12; continue;
			/* } else if (_ref === 38) { */ case 5:
				esc = esc_amp;
				$s = 12; continue;
			/* } else if (_ref === 60) { */ case 6:
				esc = esc_lt;
				$s = 12; continue;
			/* } else if (_ref === 62) { */ case 7:
				esc = esc_gt;
				$s = 12; continue;
			/* } else if (_ref === 9) { */ case 8:
				esc = esc_tab;
				$s = 12; continue;
			/* } else if (_ref === 10) { */ case 9:
				esc = esc_nl;
				$s = 12; continue;
			/* } else if (_ref === 13) { */ case 10:
				esc = esc_cr;
				$s = 12; continue;
			/* } else { */ case 11:
				if (!isInCharacterRange(r) || ((r === 65533) && (width === 1))) {
					esc = esc_fffd;
					/* break; */ $s = 12; continue;
				}
				/* continue; */ $s = 1; continue;
			/* } } */ case 12:
			_r$6 = w.Write($subslice(s, last, (i - width >> 0))); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$1 = _r$6; err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 14:
				return err;
			/* } */ case 15:
			_r$7 = w.Write(esc); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$2 = _r$7; err$1 = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 17:
				return err$1;
			/* } */ case 18:
			last = i;
		/* } */ $s = 1; continue; case 2:
		_r$8 = w.Write($subslice(s, last)); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$3 = _r$8; err$2 = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 20:
			return err$2;
		/* } */ case 21:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EscapeText }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.esc = esc; $f.i = i; $f.last = last; $f.r = r; $f.s = s; $f.w = w; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.EscapeText = EscapeText;
	printer.ptr.prototype.EscapeString = function(s) {
		var $ptr, _r$6, _r$7, _r$8, _ref, _tuple, esc, i, last, p, r, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; esc = $f.esc; i = $f.i; last = $f.last; p = $f.p; r = $f.r; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		esc = sliceType.nil;
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			_tuple = utf8.DecodeRuneInString(s.substring(i)); r = _tuple[0]; width = _tuple[1];
			i = i + (width) >> 0;
			_ref = r;
			/* */ if (_ref === 34) { $s = 3; continue; }
			/* */ if (_ref === 39) { $s = 4; continue; }
			/* */ if (_ref === 38) { $s = 5; continue; }
			/* */ if (_ref === 60) { $s = 6; continue; }
			/* */ if (_ref === 62) { $s = 7; continue; }
			/* */ if (_ref === 9) { $s = 8; continue; }
			/* */ if (_ref === 10) { $s = 9; continue; }
			/* */ if (_ref === 13) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* switch (0) { default: if (_ref === 34) { */ case 3:
				esc = esc_quot;
				$s = 12; continue;
			/* } else if (_ref === 39) { */ case 4:
				esc = esc_apos;
				$s = 12; continue;
			/* } else if (_ref === 38) { */ case 5:
				esc = esc_amp;
				$s = 12; continue;
			/* } else if (_ref === 60) { */ case 6:
				esc = esc_lt;
				$s = 12; continue;
			/* } else if (_ref === 62) { */ case 7:
				esc = esc_gt;
				$s = 12; continue;
			/* } else if (_ref === 9) { */ case 8:
				esc = esc_tab;
				$s = 12; continue;
			/* } else if (_ref === 10) { */ case 9:
				esc = esc_nl;
				$s = 12; continue;
			/* } else if (_ref === 13) { */ case 10:
				esc = esc_cr;
				$s = 12; continue;
			/* } else { */ case 11:
				if (!isInCharacterRange(r) || ((r === 65533) && (width === 1))) {
					esc = esc_fffd;
					/* break; */ $s = 12; continue;
				}
				/* continue; */ $s = 1; continue;
			/* } } */ case 12:
			_r$6 = p.Writer.WriteString(s.substring(last, (i - width >> 0))); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_r$7 = p.Writer.Write(esc); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			last = i;
		/* } */ $s = 1; continue; case 2:
		_r$8 = p.Writer.WriteString(s.substring(last)); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.EscapeString }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f.esc = esc; $f.i = i; $f.last = last; $f.p = p; $f.r = r; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.EscapeString = function(s) { return this.$val.EscapeString(s); };
	Escape = function(w, s) {
		var $ptr, _r$6, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$6 = EscapeText(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Escape }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Escape = Escape;
	procInstEncoding = function(s) {
		var $ptr, idx, s, v;
		idx = strings.Index(s, "encoding=");
		if (idx === -1) {
			return "";
		}
		v = s.substring((idx + 9 >> 0));
		if (v === "") {
			return "";
		}
		if (!((v.charCodeAt(0) === 39)) && !((v.charCodeAt(0) === 34))) {
			return "";
		}
		idx = strings.IndexRune(v.substring(1), (v.charCodeAt(0) >> 0));
		if (idx === -1) {
			return "";
		}
		return v.substring(1, (idx + 1 >> 0));
	};
	ptrType$7.methods = [{prop: "Indent", name: "Indent", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "EncodeElement", name: "EncodeElement", pkg: "", typ: $funcType([$emptyInterface, StartElement], [$error], false)}, {prop: "EncodeToken", name: "EncodeToken", pkg: "", typ: $funcType([Token], [$error], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$10.methods = [{prop: "createAttrPrefix", name: "createAttrPrefix", pkg: "encoding/xml", typ: $funcType([$String], [$String], false)}, {prop: "deleteAttrPrefix", name: "deleteAttrPrefix", pkg: "encoding/xml", typ: $funcType([$String], [], false)}, {prop: "markPrefix", name: "markPrefix", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "popPrefix", name: "popPrefix", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "marshalValue", name: "marshalValue", pkg: "encoding/xml", typ: $funcType([reflect.Value, ptrType$8, ptrType$9], [$error], false)}, {prop: "marshalInterface", name: "marshalInterface", pkg: "encoding/xml", typ: $funcType([Marshaler, StartElement], [$error], false)}, {prop: "marshalTextInterface", name: "marshalTextInterface", pkg: "encoding/xml", typ: $funcType([encoding.TextMarshaler, StartElement], [$error], false)}, {prop: "writeStart", name: "writeStart", pkg: "encoding/xml", typ: $funcType([ptrType$9], [$error], false)}, {prop: "writeEnd", name: "writeEnd", pkg: "encoding/xml", typ: $funcType([Name], [$error], false)}, {prop: "marshalSimple", name: "marshalSimple", pkg: "encoding/xml", typ: $funcType([reflect.Type, reflect.Value], [$String, sliceType, $error], false)}, {prop: "marshalStruct", name: "marshalStruct", pkg: "encoding/xml", typ: $funcType([ptrType$11, reflect.Value], [$error], false)}, {prop: "cachedWriteError", name: "cachedWriteError", pkg: "encoding/xml", typ: $funcType([], [$error], false)}, {prop: "writeIndent", name: "writeIndent", pkg: "encoding/xml", typ: $funcType([$Int], [], false)}, {prop: "EscapeString", name: "EscapeString", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$15.methods = [{prop: "trim", name: "trim", pkg: "encoding/xml", typ: $funcType([sliceType$3], [$error], false)}, {prop: "push", name: "push", pkg: "encoding/xml", typ: $funcType([sliceType$3], [$error], false)}];
	ptrType$16.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnmarshalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "value", name: "value", pkg: "encoding/xml", typ: $funcType([reflect.Value], [reflect.Value], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$19.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	StartElement.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [StartElement], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [EndElement], false)}];
	CharData.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [CharData], false)}];
	Comment.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Comment], false)}];
	ProcInst.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ProcInst], false)}];
	Directive.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Directive], false)}];
	ptrType$17.methods = [{prop: "Decode", name: "Decode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "DecodeElement", name: "DecodeElement", pkg: "", typ: $funcType([$emptyInterface, ptrType$9], [$error], false)}, {prop: "unmarshalInterface", name: "unmarshalInterface", pkg: "encoding/xml", typ: $funcType([Unmarshaler, ptrType$9], [$error], false)}, {prop: "unmarshalTextInterface", name: "unmarshalTextInterface", pkg: "encoding/xml", typ: $funcType([encoding.TextUnmarshaler, ptrType$9], [$error], false)}, {prop: "unmarshalAttr", name: "unmarshalAttr", pkg: "encoding/xml", typ: $funcType([reflect.Value, Attr], [$error], false)}, {prop: "unmarshal", name: "unmarshal", pkg: "encoding/xml", typ: $funcType([reflect.Value, ptrType$9], [$error], false)}, {prop: "unmarshalPath", name: "unmarshalPath", pkg: "encoding/xml", typ: $funcType([ptrType$11, reflect.Value, sliceType$3, ptrType$9], [$Bool, $error], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "translate", name: "translate", pkg: "encoding/xml", typ: $funcType([ptrType$20, $Bool], [], false)}, {prop: "switchToReader", name: "switchToReader", pkg: "encoding/xml", typ: $funcType([io.Reader], [], false)}, {prop: "push", name: "push", pkg: "encoding/xml", typ: $funcType([$Int], [ptrType$14], false)}, {prop: "pop", name: "pop", pkg: "encoding/xml", typ: $funcType([], [ptrType$14], false)}, {prop: "pushEOF", name: "pushEOF", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "popEOF", name: "popEOF", pkg: "encoding/xml", typ: $funcType([], [$Bool], false)}, {prop: "pushElement", name: "pushElement", pkg: "encoding/xml", typ: $funcType([Name], [], false)}, {prop: "pushNs", name: "pushNs", pkg: "encoding/xml", typ: $funcType([$String, $String, $Bool], [], false)}, {prop: "syntaxError", name: "syntaxError", pkg: "encoding/xml", typ: $funcType([$String], [$error], false)}, {prop: "popElement", name: "popElement", pkg: "encoding/xml", typ: $funcType([ptrType$21], [$Bool], false)}, {prop: "autoClose", name: "autoClose", pkg: "encoding/xml", typ: $funcType([Token], [Token, $Bool], false)}, {prop: "RawToken", name: "RawToken", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "rawToken", name: "rawToken", pkg: "encoding/xml", typ: $funcType([], [Token, $error], false)}, {prop: "attrval", name: "attrval", pkg: "encoding/xml", typ: $funcType([], [sliceType], false)}, {prop: "space", name: "space", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "getc", name: "getc", pkg: "encoding/xml", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "InputOffset", name: "InputOffset", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "savedOffset", name: "savedOffset", pkg: "encoding/xml", typ: $funcType([], [$Int], false)}, {prop: "mustgetc", name: "mustgetc", pkg: "encoding/xml", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "ungetc", name: "ungetc", pkg: "encoding/xml", typ: $funcType([$Uint8], [], false)}, {prop: "text", name: "text", pkg: "encoding/xml", typ: $funcType([$Int, $Bool], [sliceType], false)}, {prop: "nsname", name: "nsname", pkg: "encoding/xml", typ: $funcType([], [Name, $Bool], false)}, {prop: "name", name: "name", pkg: "encoding/xml", typ: $funcType([], [$String, $Bool], false)}, {prop: "readName", name: "readName", pkg: "encoding/xml", typ: $funcType([], [$Bool], false)}];
	Marshaler.init([{prop: "MarshalXML", name: "MarshalXML", pkg: "", typ: $funcType([ptrType$7, StartElement], [$error], false)}]);
	MarshalerAttr.init([{prop: "MarshalXMLAttr", name: "MarshalXMLAttr", pkg: "", typ: $funcType([Name], [Attr, $error], false)}]);
	Encoder.init([{prop: "p", name: "p", pkg: "encoding/xml", typ: printer, tag: ""}]);
	printer.init([{prop: "Writer", name: "", pkg: "", typ: ptrType$6, tag: ""}, {prop: "encoder", name: "encoder", pkg: "encoding/xml", typ: ptrType$7, tag: ""}, {prop: "seq", name: "seq", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "indent", name: "indent", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "prefix", name: "prefix", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "depth", name: "depth", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "indentedIn", name: "indentedIn", pkg: "encoding/xml", typ: $Bool, tag: ""}, {prop: "putNewline", name: "putNewline", pkg: "encoding/xml", typ: $Bool, tag: ""}, {prop: "attrNS", name: "attrNS", pkg: "encoding/xml", typ: mapType, tag: ""}, {prop: "attrPrefix", name: "attrPrefix", pkg: "encoding/xml", typ: mapType, tag: ""}, {prop: "prefixes", name: "prefixes", pkg: "encoding/xml", typ: sliceType$3, tag: ""}, {prop: "tags", name: "tags", pkg: "encoding/xml", typ: sliceType$4, tag: ""}]);
	parentStack.init([{prop: "p", name: "p", pkg: "encoding/xml", typ: ptrType$10, tag: ""}, {prop: "stack", name: "stack", pkg: "encoding/xml", typ: sliceType$3, tag: ""}]);
	UnsupportedTypeError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}]);
	Unmarshaler.init([{prop: "UnmarshalXML", name: "UnmarshalXML", pkg: "", typ: $funcType([ptrType$17, StartElement], [$error], false)}]);
	UnmarshalerAttr.init([{prop: "UnmarshalXMLAttr", name: "UnmarshalXMLAttr", pkg: "", typ: $funcType([Attr], [$error], false)}]);
	typeInfo.init([{prop: "xmlname", name: "xmlname", pkg: "encoding/xml", typ: ptrType$8, tag: ""}, {prop: "fields", name: "fields", pkg: "encoding/xml", typ: sliceType$7, tag: ""}]);
	fieldInfo.init([{prop: "idx", name: "idx", pkg: "encoding/xml", typ: sliceType$8, tag: ""}, {prop: "name", name: "name", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "xmlns", name: "xmlns", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "flags", name: "flags", pkg: "encoding/xml", typ: fieldFlags, tag: ""}, {prop: "parents", name: "parents", pkg: "encoding/xml", typ: sliceType$3, tag: ""}]);
	TagPathError.init([{prop: "Struct", name: "Struct", pkg: "", typ: reflect.Type, tag: ""}, {prop: "Field1", name: "Field1", pkg: "", typ: $String, tag: ""}, {prop: "Tag1", name: "Tag1", pkg: "", typ: $String, tag: ""}, {prop: "Field2", name: "Field2", pkg: "", typ: $String, tag: ""}, {prop: "Tag2", name: "Tag2", pkg: "", typ: $String, tag: ""}]);
	SyntaxError.init([{prop: "Msg", name: "Msg", pkg: "", typ: $String, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}]);
	Name.init([{prop: "Space", name: "Space", pkg: "", typ: $String, tag: ""}, {prop: "Local", name: "Local", pkg: "", typ: $String, tag: ""}]);
	Attr.init([{prop: "Name", name: "Name", pkg: "", typ: Name, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}]);
	Token.init([]);
	StartElement.init([{prop: "Name", name: "Name", pkg: "", typ: Name, tag: ""}, {prop: "Attr", name: "Attr", pkg: "", typ: sliceType$6, tag: ""}]);
	EndElement.init([{prop: "Name", name: "Name", pkg: "", typ: Name, tag: ""}]);
	CharData.init($Uint8);
	Comment.init($Uint8);
	ProcInst.init([{prop: "Target", name: "Target", pkg: "", typ: $String, tag: ""}, {prop: "Inst", name: "Inst", pkg: "", typ: sliceType, tag: ""}]);
	Directive.init($Uint8);
	Decoder.init([{prop: "Strict", name: "Strict", pkg: "", typ: $Bool, tag: ""}, {prop: "AutoClose", name: "AutoClose", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Entity", name: "Entity", pkg: "", typ: mapType, tag: ""}, {prop: "CharsetReader", name: "CharsetReader", pkg: "", typ: funcType, tag: ""}, {prop: "DefaultSpace", name: "DefaultSpace", pkg: "", typ: $String, tag: ""}, {prop: "r", name: "r", pkg: "encoding/xml", typ: io.ByteReader, tag: ""}, {prop: "buf", name: "buf", pkg: "encoding/xml", typ: bytes.Buffer, tag: ""}, {prop: "saved", name: "saved", pkg: "encoding/xml", typ: ptrType$12, tag: ""}, {prop: "stk", name: "stk", pkg: "encoding/xml", typ: ptrType$14, tag: ""}, {prop: "free", name: "free", pkg: "encoding/xml", typ: ptrType$14, tag: ""}, {prop: "needClose", name: "needClose", pkg: "encoding/xml", typ: $Bool, tag: ""}, {prop: "toClose", name: "toClose", pkg: "encoding/xml", typ: Name, tag: ""}, {prop: "nextToken", name: "nextToken", pkg: "encoding/xml", typ: Token, tag: ""}, {prop: "nextByte", name: "nextByte", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "ns", name: "ns", pkg: "encoding/xml", typ: mapType, tag: ""}, {prop: "err", name: "err", pkg: "encoding/xml", typ: $error, tag: ""}, {prop: "line", name: "line", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "offset", name: "offset", pkg: "encoding/xml", typ: $Int64, tag: ""}, {prop: "unmarshalDepth", name: "unmarshalDepth", pkg: "encoding/xml", typ: $Int, tag: ""}]);
	stack.init([{prop: "next", name: "next", pkg: "encoding/xml", typ: ptrType$14, tag: ""}, {prop: "kind", name: "kind", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "encoding/xml", typ: Name, tag: ""}, {prop: "ok", name: "ok", pkg: "encoding/xml", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		tinfoLock = new sync.RWMutex.ptr();
		endComment = new sliceType($stringToBytes("-->"));
		endProcInst = new sliceType($stringToBytes("?>"));
		endDirective = new sliceType($stringToBytes(">"));
		_r = reflect.TypeOf(ptrType.nil).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		marshalerType = _r;
		_r$1 = reflect.TypeOf(ptrType$1.nil).Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		marshalerAttrType = _r$1;
		_r$2 = reflect.TypeOf(ptrType$2.nil).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		textMarshalerType = _r$2;
		ddBytes = new sliceType($stringToBytes("--"));
		_r$3 = reflect.TypeOf(ptrType$3.nil).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		unmarshalerType = _r$3;
		_r$4 = reflect.TypeOf(ptrType$4.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		unmarshalerAttrType = _r$4;
		_r$5 = reflect.TypeOf(ptrType$5.nil).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		textUnmarshalerType = _r$5;
		tinfoMap = new $Map();
		nameType = reflect.TypeOf((x = new Name.ptr("", ""), new x.constructor.elem(x)));
		errRawToken = errors.New("xml: cannot use RawToken from UnmarshalXML method");
		entity = (_map = new $Map(), _key = "lt", _map[_key] = { k: _key, v: 60 }, _key = "gt", _map[_key] = { k: _key, v: 62 }, _key = "amp", _map[_key] = { k: _key, v: 38 }, _key = "apos", _map[_key] = { k: _key, v: 39 }, _key = "quot", _map[_key] = { k: _key, v: 34 }, _map);
		first = new unicode.RangeTable.ptr(new sliceType$1([new unicode.Range16.ptr(58, 58, 1), new unicode.Range16.ptr(65, 90, 1), new unicode.Range16.ptr(95, 95, 1), new unicode.Range16.ptr(97, 122, 1), new unicode.Range16.ptr(192, 214, 1), new unicode.Range16.ptr(216, 246, 1), new unicode.Range16.ptr(248, 255, 1), new unicode.Range16.ptr(256, 305, 1), new unicode.Range16.ptr(308, 318, 1), new unicode.Range16.ptr(321, 328, 1), new unicode.Range16.ptr(330, 382, 1), new unicode.Range16.ptr(384, 451, 1), new unicode.Range16.ptr(461, 496, 1), new unicode.Range16.ptr(500, 501, 1), new unicode.Range16.ptr(506, 535, 1), new unicode.Range16.ptr(592, 680, 1), new unicode.Range16.ptr(699, 705, 1), new unicode.Range16.ptr(902, 902, 1), new unicode.Range16.ptr(904, 906, 1), new unicode.Range16.ptr(908, 908, 1), new unicode.Range16.ptr(910, 929, 1), new unicode.Range16.ptr(931, 974, 1), new unicode.Range16.ptr(976, 982, 1), new unicode.Range16.ptr(986, 992, 2), new unicode.Range16.ptr(994, 1011, 1), new unicode.Range16.ptr(1025, 1036, 1), new unicode.Range16.ptr(1038, 1103, 1), new unicode.Range16.ptr(1105, 1116, 1), new unicode.Range16.ptr(1118, 1153, 1), new unicode.Range16.ptr(1168, 1220, 1), new unicode.Range16.ptr(1223, 1224, 1), new unicode.Range16.ptr(1227, 1228, 1), new unicode.Range16.ptr(1232, 1259, 1), new unicode.Range16.ptr(1262, 1269, 1), new unicode.Range16.ptr(1272, 1273, 1), new unicode.Range16.ptr(1329, 1366, 1), new unicode.Range16.ptr(1369, 1369, 1), new unicode.Range16.ptr(1377, 1414, 1), new unicode.Range16.ptr(1488, 1514, 1), new unicode.Range16.ptr(1520, 1522, 1), new unicode.Range16.ptr(1569, 1594, 1), new unicode.Range16.ptr(1601, 1610, 1), new unicode.Range16.ptr(1649, 1719, 1), new unicode.Range16.ptr(1722, 1726, 1), new unicode.Range16.ptr(1728, 1742, 1), new unicode.Range16.ptr(1744, 1747, 1), new unicode.Range16.ptr(1749, 1749, 1), new unicode.Range16.ptr(1765, 1766, 1), new unicode.Range16.ptr(2309, 2361, 1), new unicode.Range16.ptr(2365, 2365, 1), new unicode.Range16.ptr(2392, 2401, 1), new unicode.Range16.ptr(2437, 2444, 1), new unicode.Range16.ptr(2447, 2448, 1), new unicode.Range16.ptr(2451, 2472, 1), new unicode.Range16.ptr(2474, 2480, 1), new unicode.Range16.ptr(2482, 2482, 1), new unicode.Range16.ptr(2486, 2489, 1), new unicode.Range16.ptr(2524, 2525, 1), new unicode.Range16.ptr(2527, 2529, 1), new unicode.Range16.ptr(2544, 2545, 1), new unicode.Range16.ptr(2565, 2570, 1), new unicode.Range16.ptr(2575, 2576, 1), new unicode.Range16.ptr(2579, 2600, 1), new unicode.Range16.ptr(2602, 2608, 1), new unicode.Range16.ptr(2610, 2611, 1), new unicode.Range16.ptr(2613, 2614, 1), new unicode.Range16.ptr(2616, 2617, 1), new unicode.Range16.ptr(2649, 2652, 1), new unicode.Range16.ptr(2654, 2654, 1), new unicode.Range16.ptr(2674, 2676, 1), new unicode.Range16.ptr(2693, 2699, 1), new unicode.Range16.ptr(2701, 2701, 1), new unicode.Range16.ptr(2703, 2705, 1), new unicode.Range16.ptr(2707, 2728, 1), new unicode.Range16.ptr(2730, 2736, 1), new unicode.Range16.ptr(2738, 2739, 1), new unicode.Range16.ptr(2741, 2745, 1), new unicode.Range16.ptr(2749, 2784, 35), new unicode.Range16.ptr(2821, 2828, 1), new unicode.Range16.ptr(2831, 2832, 1), new unicode.Range16.ptr(2835, 2856, 1), new unicode.Range16.ptr(2858, 2864, 1), new unicode.Range16.ptr(2866, 2867, 1), new unicode.Range16.ptr(2870, 2873, 1), new unicode.Range16.ptr(2877, 2877, 1), new unicode.Range16.ptr(2908, 2909, 1), new unicode.Range16.ptr(2911, 2913, 1), new unicode.Range16.ptr(2949, 2954, 1), new unicode.Range16.ptr(2958, 2960, 1), new unicode.Range16.ptr(2962, 2965, 1), new unicode.Range16.ptr(2969, 2970, 1), new unicode.Range16.ptr(2972, 2972, 1), new unicode.Range16.ptr(2974, 2975, 1), new unicode.Range16.ptr(2979, 2980, 1), new unicode.Range16.ptr(2984, 2986, 1), new unicode.Range16.ptr(2990, 2997, 1), new unicode.Range16.ptr(2999, 3001, 1), new unicode.Range16.ptr(3077, 3084, 1), new unicode.Range16.ptr(3086, 3088, 1), new unicode.Range16.ptr(3090, 3112, 1), new unicode.Range16.ptr(3114, 3123, 1), new unicode.Range16.ptr(3125, 3129, 1), new unicode.Range16.ptr(3168, 3169, 1), new unicode.Range16.ptr(3205, 3212, 1), new unicode.Range16.ptr(3214, 3216, 1), new unicode.Range16.ptr(3218, 3240, 1), new unicode.Range16.ptr(3242, 3251, 1), new unicode.Range16.ptr(3253, 3257, 1), new unicode.Range16.ptr(3294, 3294, 1), new unicode.Range16.ptr(3296, 3297, 1), new unicode.Range16.ptr(3333, 3340, 1), new unicode.Range16.ptr(3342, 3344, 1), new unicode.Range16.ptr(3346, 3368, 1), new unicode.Range16.ptr(3370, 3385, 1), new unicode.Range16.ptr(3424, 3425, 1), new unicode.Range16.ptr(3585, 3630, 1), new unicode.Range16.ptr(3632, 3632, 1), new unicode.Range16.ptr(3634, 3635, 1), new unicode.Range16.ptr(3648, 3653, 1), new unicode.Range16.ptr(3713, 3714, 1), new unicode.Range16.ptr(3716, 3716, 1), new unicode.Range16.ptr(3719, 3720, 1), new unicode.Range16.ptr(3722, 3725, 3), new unicode.Range16.ptr(3732, 3735, 1), new unicode.Range16.ptr(3737, 3743, 1), new unicode.Range16.ptr(3745, 3747, 1), new unicode.Range16.ptr(3749, 3751, 2), new unicode.Range16.ptr(3754, 3755, 1), new unicode.Range16.ptr(3757, 3758, 1), new unicode.Range16.ptr(3760, 3760, 1), new unicode.Range16.ptr(3762, 3763, 1), new unicode.Range16.ptr(3773, 3773, 1), new unicode.Range16.ptr(3776, 3780, 1), new unicode.Range16.ptr(3904, 3911, 1), new unicode.Range16.ptr(3913, 3945, 1), new unicode.Range16.ptr(4256, 4293, 1), new unicode.Range16.ptr(4304, 4342, 1), new unicode.Range16.ptr(4352, 4352, 1), new unicode.Range16.ptr(4354, 4355, 1), new unicode.Range16.ptr(4357, 4359, 1), new unicode.Range16.ptr(4361, 4361, 1), new unicode.Range16.ptr(4363, 4364, 1), new unicode.Range16.ptr(4366, 4370, 1), new unicode.Range16.ptr(4412, 4416, 2), new unicode.Range16.ptr(4428, 4432, 2), new unicode.Range16.ptr(4436, 4437, 1), new unicode.Range16.ptr(4441, 4441, 1), new unicode.Range16.ptr(4447, 4449, 1), new unicode.Range16.ptr(4451, 4457, 2), new unicode.Range16.ptr(4461, 4462, 1), new unicode.Range16.ptr(4466, 4467, 1), new unicode.Range16.ptr(4469, 4510, 41), new unicode.Range16.ptr(4520, 4523, 3), new unicode.Range16.ptr(4526, 4527, 1), new unicode.Range16.ptr(4535, 4536, 1), new unicode.Range16.ptr(4538, 4538, 1), new unicode.Range16.ptr(4540, 4546, 1), new unicode.Range16.ptr(4587, 4592, 5), new unicode.Range16.ptr(4601, 4601, 1), new unicode.Range16.ptr(7680, 7835, 1), new unicode.Range16.ptr(7840, 7929, 1), new unicode.Range16.ptr(7936, 7957, 1), new unicode.Range16.ptr(7960, 7965, 1), new unicode.Range16.ptr(7968, 8005, 1), new unicode.Range16.ptr(8008, 8013, 1), new unicode.Range16.ptr(8016, 8023, 1), new unicode.Range16.ptr(8025, 8027, 2), new unicode.Range16.ptr(8029, 8029, 1), new unicode.Range16.ptr(8031, 8061, 1), new unicode.Range16.ptr(8064, 8116, 1), new unicode.Range16.ptr(8118, 8124, 1), new unicode.Range16.ptr(8126, 8126, 1), new unicode.Range16.ptr(8130, 8132, 1), new unicode.Range16.ptr(8134, 8140, 1), new unicode.Range16.ptr(8144, 8147, 1), new unicode.Range16.ptr(8150, 8155, 1), new unicode.Range16.ptr(8160, 8172, 1), new unicode.Range16.ptr(8178, 8180, 1), new unicode.Range16.ptr(8182, 8188, 1), new unicode.Range16.ptr(8486, 8486, 1), new unicode.Range16.ptr(8490, 8491, 1), new unicode.Range16.ptr(8494, 8494, 1), new unicode.Range16.ptr(8576, 8578, 1), new unicode.Range16.ptr(12295, 12295, 1), new unicode.Range16.ptr(12321, 12329, 1), new unicode.Range16.ptr(12353, 12436, 1), new unicode.Range16.ptr(12449, 12538, 1), new unicode.Range16.ptr(12549, 12588, 1), new unicode.Range16.ptr(19968, 40869, 1), new unicode.Range16.ptr(44032, 55203, 1)]), sliceType$2.nil, 0);
		second = new unicode.RangeTable.ptr(new sliceType$1([new unicode.Range16.ptr(45, 46, 1), new unicode.Range16.ptr(48, 57, 1), new unicode.Range16.ptr(183, 183, 1), new unicode.Range16.ptr(720, 721, 1), new unicode.Range16.ptr(768, 837, 1), new unicode.Range16.ptr(864, 865, 1), new unicode.Range16.ptr(903, 903, 1), new unicode.Range16.ptr(1155, 1158, 1), new unicode.Range16.ptr(1425, 1441, 1), new unicode.Range16.ptr(1443, 1465, 1), new unicode.Range16.ptr(1467, 1469, 1), new unicode.Range16.ptr(1471, 1471, 1), new unicode.Range16.ptr(1473, 1474, 1), new unicode.Range16.ptr(1476, 1600, 124), new unicode.Range16.ptr(1611, 1618, 1), new unicode.Range16.ptr(1632, 1641, 1), new unicode.Range16.ptr(1648, 1648, 1), new unicode.Range16.ptr(1750, 1756, 1), new unicode.Range16.ptr(1757, 1759, 1), new unicode.Range16.ptr(1760, 1764, 1), new unicode.Range16.ptr(1767, 1768, 1), new unicode.Range16.ptr(1770, 1773, 1), new unicode.Range16.ptr(1776, 1785, 1), new unicode.Range16.ptr(2305, 2307, 1), new unicode.Range16.ptr(2364, 2364, 1), new unicode.Range16.ptr(2366, 2380, 1), new unicode.Range16.ptr(2381, 2381, 1), new unicode.Range16.ptr(2385, 2388, 1), new unicode.Range16.ptr(2402, 2403, 1), new unicode.Range16.ptr(2406, 2415, 1), new unicode.Range16.ptr(2433, 2435, 1), new unicode.Range16.ptr(2492, 2492, 1), new unicode.Range16.ptr(2494, 2495, 1), new unicode.Range16.ptr(2496, 2500, 1), new unicode.Range16.ptr(2503, 2504, 1), new unicode.Range16.ptr(2507, 2509, 1), new unicode.Range16.ptr(2519, 2519, 1), new unicode.Range16.ptr(2530, 2531, 1), new unicode.Range16.ptr(2534, 2543, 1), new unicode.Range16.ptr(2562, 2620, 58), new unicode.Range16.ptr(2622, 2623, 1), new unicode.Range16.ptr(2624, 2626, 1), new unicode.Range16.ptr(2631, 2632, 1), new unicode.Range16.ptr(2635, 2637, 1), new unicode.Range16.ptr(2662, 2671, 1), new unicode.Range16.ptr(2672, 2673, 1), new unicode.Range16.ptr(2689, 2691, 1), new unicode.Range16.ptr(2748, 2748, 1), new unicode.Range16.ptr(2750, 2757, 1), new unicode.Range16.ptr(2759, 2761, 1), new unicode.Range16.ptr(2763, 2765, 1), new unicode.Range16.ptr(2790, 2799, 1), new unicode.Range16.ptr(2817, 2819, 1), new unicode.Range16.ptr(2876, 2876, 1), new unicode.Range16.ptr(2878, 2883, 1), new unicode.Range16.ptr(2887, 2888, 1), new unicode.Range16.ptr(2891, 2893, 1), new unicode.Range16.ptr(2902, 2903, 1), new unicode.Range16.ptr(2918, 2927, 1), new unicode.Range16.ptr(2946, 2947, 1), new unicode.Range16.ptr(3006, 3010, 1), new unicode.Range16.ptr(3014, 3016, 1), new unicode.Range16.ptr(3018, 3021, 1), new unicode.Range16.ptr(3031, 3031, 1), new unicode.Range16.ptr(3047, 3055, 1), new unicode.Range16.ptr(3073, 3075, 1), new unicode.Range16.ptr(3134, 3140, 1), new unicode.Range16.ptr(3142, 3144, 1), new unicode.Range16.ptr(3146, 3149, 1), new unicode.Range16.ptr(3157, 3158, 1), new unicode.Range16.ptr(3174, 3183, 1), new unicode.Range16.ptr(3202, 3203, 1), new unicode.Range16.ptr(3262, 3268, 1), new unicode.Range16.ptr(3270, 3272, 1), new unicode.Range16.ptr(3274, 3277, 1), new unicode.Range16.ptr(3285, 3286, 1), new unicode.Range16.ptr(3302, 3311, 1), new unicode.Range16.ptr(3330, 3331, 1), new unicode.Range16.ptr(3390, 3395, 1), new unicode.Range16.ptr(3398, 3400, 1), new unicode.Range16.ptr(3402, 3405, 1), new unicode.Range16.ptr(3415, 3415, 1), new unicode.Range16.ptr(3430, 3439, 1), new unicode.Range16.ptr(3633, 3633, 1), new unicode.Range16.ptr(3636, 3642, 1), new unicode.Range16.ptr(3654, 3654, 1), new unicode.Range16.ptr(3655, 3662, 1), new unicode.Range16.ptr(3664, 3673, 1), new unicode.Range16.ptr(3761, 3761, 1), new unicode.Range16.ptr(3764, 3769, 1), new unicode.Range16.ptr(3771, 3772, 1), new unicode.Range16.ptr(3782, 3782, 1), new unicode.Range16.ptr(3784, 3789, 1), new unicode.Range16.ptr(3792, 3801, 1), new unicode.Range16.ptr(3864, 3865, 1), new unicode.Range16.ptr(3872, 3881, 1), new unicode.Range16.ptr(3893, 3897, 2), new unicode.Range16.ptr(3902, 3903, 1), new unicode.Range16.ptr(3953, 3972, 1), new unicode.Range16.ptr(3974, 3979, 1), new unicode.Range16.ptr(3984, 3989, 1), new unicode.Range16.ptr(3991, 3991, 1), new unicode.Range16.ptr(3993, 4013, 1), new unicode.Range16.ptr(4017, 4023, 1), new unicode.Range16.ptr(4025, 4025, 1), new unicode.Range16.ptr(8400, 8412, 1), new unicode.Range16.ptr(8417, 12293, 3876), new unicode.Range16.ptr(12330, 12335, 1), new unicode.Range16.ptr(12337, 12341, 1), new unicode.Range16.ptr(12441, 12442, 1), new unicode.Range16.ptr(12445, 12446, 1), new unicode.Range16.ptr(12540, 12542, 1)]), sliceType$2.nil, 0);
		esc_quot = new sliceType($stringToBytes("&#34;"));
		esc_apos = new sliceType($stringToBytes("&#39;"));
		esc_amp = new sliceType($stringToBytes("&amp;"));
		esc_lt = new sliceType($stringToBytes("&lt;"));
		esc_gt = new sliceType($stringToBytes("&gt;"));
		esc_tab = new sliceType($stringToBytes("&#x9;"));
		esc_nl = new sliceType($stringToBytes("&#xA;"));
		esc_cr = new sliceType($stringToBytes("&#xD;"));
		esc_fffd = new sliceType($stringToBytes("\xEF\xBF\xBD"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, ByteOrder, bigEndian, encoder, arrayType, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$9, overflow, Write, dataSize, sizeof, intDataSize;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	ByteOrder = $pkg.ByteOrder = $newType(8, $kindInterface, "binary.ByteOrder", "ByteOrder", "encoding/binary", null);
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", "bigEndian", "encoding/binary", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "binary.encoder", "encoder", "encoding/binary", function(order_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.order = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.order = order_;
		this.buf = buf_;
	});
	arrayType = $arrayType($Uint8, 8);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType($Int8);
	ptrType$1 = $ptrType($Uint8);
	ptrType$2 = $ptrType($Int16);
	ptrType$3 = $ptrType($Uint16);
	ptrType$4 = $ptrType($Int32);
	ptrType$5 = $ptrType($Uint32);
	ptrType$6 = $ptrType($Int64);
	ptrType$7 = $ptrType($Uint64);
	sliceType$1 = $sliceType($Int8);
	sliceType$2 = $sliceType($Int16);
	sliceType$3 = $sliceType($Uint16);
	sliceType$4 = $sliceType($Int32);
	sliceType$5 = $sliceType($Uint32);
	sliceType$6 = $sliceType($Int64);
	sliceType$7 = $sliceType($Uint64);
	ptrType$9 = $ptrType(encoder);
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var $ptr, b;
		return (((1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1]) << 16 >>> 16) | (((0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var $ptr, b, v;
		(0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24));
		(1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = (v << 24 >>> 24));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var $ptr, b;
		return (((((((3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3]) >>> 0) | (((2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | (((0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) >>> 0) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var $ptr, b, v;
		(0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ((v >>> 24 >>> 0) << 24 >>> 24));
		(1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = ((v >>> 16 >>> 0) << 24 >>> 24));
		(2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = ((v >>> 8 >>> 0) << 24 >>> 24));
		(3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = (v << 24 >>> 24));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Uint64(0, (7 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 7])), x$7 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 6])), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 5])), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 4])), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3])), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2])), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1])), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0])), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var $ptr, b, v;
		(0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ($shiftRightUint64(v, 56).$low << 24 >>> 24));
		(1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = ($shiftRightUint64(v, 48).$low << 24 >>> 24));
		(2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = ($shiftRightUint64(v, 40).$low << 24 >>> 24));
		(3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = ($shiftRightUint64(v, 32).$low << 24 >>> 24));
		(4 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 4] = ($shiftRightUint64(v, 24).$low << 24 >>> 24));
		(5 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 5] = ($shiftRightUint64(v, 16).$low << 24 >>> 24));
		(6 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 6] = ($shiftRightUint64(v, 8).$low << 24 >>> 24));
		(7 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 7] = (v.$low << 24 >>> 24));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		var $ptr;
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		var $ptr;
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	Write = function(w, order, data) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _tuple, _tuple$1, b, bs, buf, data, e, err, err$1, i, i$1, i$2, i$3, i$4, i$5, i$6, n, order, size, v, v$1, v$10, v$11, v$12, v$13, v$14, v$15, v$16, v$17, v$18, v$19, v$2, v$20, v$21, v$22, v$23, v$24, v$3, v$4, v$5, v$6, v$7, v$8, v$9, w, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; bs = $f.bs; buf = $f.buf; data = $f.data; e = $f.e; err = $f.err; err$1 = $f.err$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; n = $f.n; order = $f.order; size = $f.size; v = $f.v; v$1 = $f.v$1; v$10 = $f.v$10; v$11 = $f.v$11; v$12 = $f.v$12; v$13 = $f.v$13; v$14 = $f.v$14; v$15 = $f.v$15; v$16 = $f.v$16; v$17 = $f.v$17; v$18 = $f.v$18; v$19 = $f.v$19; v$2 = $f.v$2; v$20 = $f.v$20; v$21 = $f.v$21; v$22 = $f.v$22; v$23 = $f.v$23; v$24 = $f.v$24; v$3 = $f.v$3; v$4 = $f.v$4; v$5 = $f.v$5; v$6 = $f.v$6; v$7 = $f.v$7; v$8 = $f.v$8; v$9 = $f.v$9; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = intDataSize(data);
		/* */ if (!((n === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((n === 0))) { */ case 1:
			b = $clone(arrayType.zero(), arrayType);
			bs = sliceType.nil;
			if (n > 8) {
				bs = $makeSlice(sliceType, n);
			} else {
				bs = $subslice(new sliceType(b), 0, n);
			}
			_ref = data;
			/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, sliceType$1, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 11; continue; }
			/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 12; continue; }
			/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref, sliceType$3, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 15; continue; }
			/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 16; continue; }
			/* */ if ($assertType(_ref, sliceType$4, true)[1]) { $s = 17; continue; }
			/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 18; continue; }
			/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 19; continue; }
			/* */ if ($assertType(_ref, sliceType$5, true)[1]) { $s = 20; continue; }
			/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 21; continue; }
			/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 22; continue; }
			/* */ if ($assertType(_ref, sliceType$6, true)[1]) { $s = 23; continue; }
			/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 24; continue; }
			/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 25; continue; }
			/* */ if ($assertType(_ref, sliceType$7, true)[1]) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if ($assertType(_ref, ptrType, true)[1]) { */ case 3:
				v = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 1);
				b[0] = (v.$get() << 24 >>> 24);
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 4:
				v$1 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 1);
				b[0] = (v$1 << 24 >>> 24);
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$1, true)[1]) { */ case 5:
				v$2 = _ref.$val;
				_ref$1 = v$2;
				_i = 0;
				while (true) {
					if (!(_i < _ref$1.$length)) { break; }
					i = _i;
					x = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
					((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i] = (x << 24 >>> 24));
					_i++;
				}
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 6:
				v$3 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 1);
				b[0] = v$3.$get();
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 7:
				v$4 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 1);
				b[0] = v$4;
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 8:
				v$5 = _ref.$val;
				bs = v$5;
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 9:
				v$6 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 2);
				$r = order.PutUint16(bs, (v$6.$get() << 16 >>> 16)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 10:
				v$7 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 2);
				$r = order.PutUint16(bs, (v$7 << 16 >>> 16)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 11:
				v$8 = _ref.$val;
				_ref$2 = v$8;
				_i$1 = 0;
				/* while (true) { */ case 30:
					/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 31; continue; }
					i$1 = _i$1;
					x$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
					$r = order.PutUint16($subslice(bs, (2 * i$1 >> 0)), (x$1 << 16 >>> 16)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$1++;
				/* } */ $s = 30; continue; case 31:
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 12:
				v$9 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 2);
				$r = order.PutUint16(bs, v$9.$get()); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 13:
				v$10 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 2);
				$r = order.PutUint16(bs, v$10); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$3, true)[1]) { */ case 14:
				v$11 = _ref.$val;
				_ref$3 = v$11;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 36; continue; }
					i$2 = _i$2;
					x$2 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
					$r = order.PutUint16($subslice(bs, (2 * i$2 >> 0)), x$2); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				/* } */ $s = 35; continue; case 36:
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 15:
				v$12 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 4);
				$r = order.PutUint32(bs, (v$12.$get() >>> 0)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 16:
				v$13 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 4);
				$r = order.PutUint32(bs, (v$13 >>> 0)); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$4, true)[1]) { */ case 17:
				v$14 = _ref.$val;
				_ref$4 = v$14;
				_i$3 = 0;
				/* while (true) { */ case 40:
					/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 41; continue; }
					i$3 = _i$3;
					x$3 = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$3]);
					$r = order.PutUint32($subslice(bs, (4 * i$3 >> 0)), (x$3 >>> 0)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$3++;
				/* } */ $s = 40; continue; case 41:
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 18:
				v$15 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 4);
				$r = order.PutUint32(bs, v$15.$get()); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 19:
				v$16 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 4);
				$r = order.PutUint32(bs, v$16); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$5, true)[1]) { */ case 20:
				v$17 = _ref.$val;
				_ref$5 = v$17;
				_i$4 = 0;
				/* while (true) { */ case 45:
					/* if (!(_i$4 < _ref$5.$length)) { break; } */ if(!(_i$4 < _ref$5.$length)) { $s = 46; continue; }
					i$4 = _i$4;
					x$4 = ((_i$4 < 0 || _i$4 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$4]);
					$r = order.PutUint32($subslice(bs, (4 * i$4 >> 0)), x$4); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$4++;
				/* } */ $s = 45; continue; case 46:
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 21:
				v$18 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 8);
				$r = order.PutUint64(bs, (x$5 = v$18.$get(), new $Uint64(x$5.$high, x$5.$low))); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 22:
				v$19 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 8);
				$r = order.PutUint64(bs, new $Uint64(v$19.$high, v$19.$low)); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$6, true)[1]) { */ case 23:
				v$20 = _ref.$val;
				_ref$6 = v$20;
				_i$5 = 0;
				/* while (true) { */ case 50:
					/* if (!(_i$5 < _ref$6.$length)) { break; } */ if(!(_i$5 < _ref$6.$length)) { $s = 51; continue; }
					i$5 = _i$5;
					x$6 = ((_i$5 < 0 || _i$5 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$5]);
					$r = order.PutUint64($subslice(bs, (8 * i$5 >> 0)), new $Uint64(x$6.$high, x$6.$low)); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$5++;
				/* } */ $s = 50; continue; case 51:
				$s = 27; continue;
			/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 24:
				v$21 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 8);
				$r = order.PutUint64(bs, v$21.$get()); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 25:
				v$22 = _ref.$val;
				bs = $subslice(new sliceType(b), 0, 8);
				$r = order.PutUint64(bs, v$22); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 27; continue;
			/* } else if ($assertType(_ref, sliceType$7, true)[1]) { */ case 26:
				v$23 = _ref.$val;
				_ref$7 = v$23;
				_i$6 = 0;
				/* while (true) { */ case 55:
					/* if (!(_i$6 < _ref$7.$length)) { break; } */ if(!(_i$6 < _ref$7.$length)) { $s = 56; continue; }
					i$6 = _i$6;
					x$7 = ((_i$6 < 0 || _i$6 >= _ref$7.$length) ? $throwRuntimeError("index out of range") : _ref$7.$array[_ref$7.$offset + _i$6]);
					$r = order.PutUint64($subslice(bs, (8 * i$6 >> 0)), x$7); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$6++;
				/* } */ $s = 55; continue; case 56:
			/* } */ case 27:
			_r = w.Write(bs); /* */ $s = 58; case 58: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; err = _tuple[1];
			return err;
		/* } */ case 2:
		_r$1 = reflect.ValueOf(data); /* */ $s = 59; case 59: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = reflect.Indirect(_r$1); /* */ $s = 60; case 60: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v$24 = _r$2;
		_r$3 = dataSize(v$24); /* */ $s = 61; case 61: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		size = _r$3;
		/* */ if (size < 0) { $s = 62; continue; }
		/* */ $s = 63; continue;
		/* if (size < 0) { */ case 62:
			_r$4 = reflect.TypeOf(data).String(); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = errors.New("binary.Write: invalid type " + _r$4); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			return _r$5;
		/* } */ case 63:
		buf = $makeSlice(sliceType, size);
		e = new encoder.ptr(order, buf);
		$r = e.value(v$24); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$6 = w.Write(buf); /* */ $s = 67; case 67: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6; err$1 = _tuple$1[1];
		return err$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Write }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.bs = bs; $f.buf = buf; $f.data = data; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.n = n; $f.order = order; $f.size = size; $f.v = v; $f.v$1 = v$1; $f.v$10 = v$10; $f.v$11 = v$11; $f.v$12 = v$12; $f.v$13 = v$13; $f.v$14 = v$14; $f.v$15 = v$15; $f.v$16 = v$16; $f.v$17 = v$17; $f.v$18 = v$18; $f.v$19 = v$19; $f.v$2 = v$2; $f.v$20 = v$20; $f.v$21 = v$21; $f.v$22 = v$22; $f.v$23 = v$23; $f.v$24 = v$24; $f.v$3 = v$3; $f.v$4 = v$4; $f.v$5 = v$5; $f.v$6 = v$6; $f.v$7 = v$7; $f.v$8 = v$8; $f.v$9 = v$9; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Write = Write;
	dataSize = function(v) {
		var $ptr, _r, _r$1, _r$2, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.Kind() === 23) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.Kind() === 23) { */ case 1:
			_r = v.Type().Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = sizeof(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			s = _r$1;
			/* */ if (s >= 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (s >= 0) { */ case 5:
				return s * v.Len() >> 0;
			/* } */ case 6:
			return -1;
		/* } */ case 2:
		_r$2 = sizeof(v.Type()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dataSize }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sizeof = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, i, n, s, s$1, sum, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; i = $f.i; n = $f.n; s = $f.s; s$1 = $f.s$1; sum = $f.sum; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if (_ref === 17) { $s = 2; continue; }
		/* */ if (_ref === 25) { $s = 3; continue; }
		/* */ if (_ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 13 || _ref === 14 || _ref === 15 || _ref === 16) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 17) { */ case 2:
			_r$1 = t.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = sizeof(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = _r$2;
			/* */ if (s >= 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (s >= 0) { */ case 8:
				_r$3 = t.Len(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				return s * _r$3 >> 0;
			/* } */ case 9:
			$s = 5; continue;
		/* } else if (_ref === 25) { */ case 3:
			sum = 0;
			_r$4 = t.NumField(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tmp = 0; _tmp$1 = _r$4; i = _tmp; n = _tmp$1;
			/* while (true) { */ case 12:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 13; continue; }
				_r$5 = t.Field(i); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = sizeof(_r$5.Type); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				s$1 = _r$6;
				if (s$1 < 0) {
					return -1;
				}
				sum = sum + (s$1) >> 0;
				i = i + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			return sum;
			$s = 5; continue;
		/* } else if (_ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 13 || _ref === 14 || _ref === 15 || _ref === 16) { */ case 4:
			_r$7 = t.Size(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			return (_r$7 >> 0);
		/* } */ case 5:
		return -1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sizeof }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.i = i; $f.n = n; $f.s = s; $f.s$1 = s$1; $f.sum = sum; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.ptr.prototype.uint8 = function(x) {
		var $ptr, e, x, x$1;
		e = this;
		(x$1 = e.buf, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = x));
		e.buf = $subslice(e.buf, 1);
	};
	encoder.prototype.uint8 = function(x) { return this.$val.uint8(x); };
	encoder.ptr.prototype.uint16 = function(x) {
		var $ptr, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.order.PutUint16($subslice(e.buf, 0, 2), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		e.buf = $subslice(e.buf, 2);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.uint16 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.uint16 = function(x) { return this.$val.uint16(x); };
	encoder.ptr.prototype.uint32 = function(x) {
		var $ptr, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.order.PutUint32($subslice(e.buf, 0, 4), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		e.buf = $subslice(e.buf, 4);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.uint32 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.uint32 = function(x) { return this.$val.uint32(x); };
	encoder.ptr.prototype.uint64 = function(x) {
		var $ptr, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.order.PutUint64($subslice(e.buf, 0, 8), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		e.buf = $subslice(e.buf, 8);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.uint64 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.uint64 = function(x) { return this.$val.uint64(x); };
	encoder.ptr.prototype.int8 = function(x) {
		var $ptr, e, x;
		e = this;
		e.uint8((x << 24 >>> 24));
	};
	encoder.prototype.int8 = function(x) { return this.$val.int8(x); };
	encoder.ptr.prototype.int16 = function(x) {
		var $ptr, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.uint16((x << 16 >>> 16)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.int16 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.int16 = function(x) { return this.$val.int16(x); };
	encoder.ptr.prototype.int32 = function(x) {
		var $ptr, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.uint32((x >>> 0)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.int32 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.int32 = function(x) { return this.$val.int32(x); };
	encoder.ptr.prototype.int64 = function(x) {
		var $ptr, e, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.uint64(new $Uint64(x.$high, x.$low)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.int64 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.int64 = function(x) { return this.$val.int64(x); };
	encoder.ptr.prototype.value = function(v) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _v, e, i, i$1, i$2, l, l$1, l$2, t, v, v$1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _v = $f._v; e = $f.e; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; t = $f.t; v = $f.v; v$1 = $f.v$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		v = v;
		_ref = v.Kind();
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 25) { $s = 2; continue; }
		/* */ if (_ref === 23) { $s = 3; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 4; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 5; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 6; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_ref === 17) { */ case 1:
			l = v.Len();
			i = 0;
			/* while (true) { */ case 9:
				/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 10; continue; }
				_r = v.Index(i); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = e.value(_r); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			/* } */ $s = 9; continue; case 10:
			$s = 8; continue;
		/* } else if (_ref === 25) { */ case 2:
			t = v.Type();
			l$1 = v.NumField();
			i$1 = 0;
			/* while (true) { */ case 13:
				/* if (!(i$1 < l$1)) { break; } */ if(!(i$1 < l$1)) { $s = 14; continue; }
				_r$1 = v.Field(i$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				v$1 = _r$1;
				if (v$1.CanSet()) { _v = true; $s = 19; continue s; }
				_r$2 = t.Field(i$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = !(_r$2.Name === "_"); case 19:
				/* */ if (_v) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_v) { */ case 16:
					$r = e.value(v$1); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 18; continue;
				/* } else { */ case 17:
					$r = e.skip(v$1); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 18:
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			$s = 8; continue;
		/* } else if (_ref === 23) { */ case 3:
			l$2 = v.Len();
			i$2 = 0;
			/* while (true) { */ case 23:
				/* if (!(i$2 < l$2)) { break; } */ if(!(i$2 < l$2)) { $s = 24; continue; }
				_r$3 = v.Index(i$2); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = e.value(_r$3); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$2 = i$2 + (1) >> 0;
			/* } */ $s = 23; continue; case 24:
			$s = 8; continue;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 4:
			_r$4 = v.Type().Kind(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_ref$1 = _r$4;
			/* */ if (_ref$1 === 3) { $s = 28; continue; }
			/* */ if (_ref$1 === 4) { $s = 29; continue; }
			/* */ if (_ref$1 === 5) { $s = 30; continue; }
			/* */ if (_ref$1 === 6) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_ref$1 === 3) { */ case 28:
				e.int8(((x = v.Int(), x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
				$s = 32; continue;
			/* } else if (_ref$1 === 4) { */ case 29:
				$r = e.int16(((x$1 = v.Int(), x$1.$low + ((x$1.$high >> 31) * 4294967296)) << 16 >> 16)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 32; continue;
			/* } else if (_ref$1 === 5) { */ case 30:
				$r = e.int32(((x$2 = v.Int(), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 32; continue;
			/* } else if (_ref$1 === 6) { */ case 31:
				$r = e.int64(v.Int()); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 32:
			$s = 8; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 5:
			_r$5 = v.Type().Kind(); /* */ $s = 36; case 36: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_ref$2 = _r$5;
			/* */ if (_ref$2 === 8) { $s = 37; continue; }
			/* */ if (_ref$2 === 9) { $s = 38; continue; }
			/* */ if (_ref$2 === 10) { $s = 39; continue; }
			/* */ if (_ref$2 === 11) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (_ref$2 === 8) { */ case 37:
				e.uint8((v.Uint().$low << 24 >>> 24));
				$s = 41; continue;
			/* } else if (_ref$2 === 9) { */ case 38:
				$r = e.uint16((v.Uint().$low << 16 >>> 16)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 41; continue;
			/* } else if (_ref$2 === 10) { */ case 39:
				$r = e.uint32((v.Uint().$low >>> 0)); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 41; continue;
			/* } else if (_ref$2 === 11) { */ case 40:
				$r = e.uint64(v.Uint()); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 41:
			$s = 8; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 6:
			_r$6 = v.Type().Kind(); /* */ $s = 45; case 45: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_ref$3 = _r$6;
			/* */ if (_ref$3 === 13) { $s = 46; continue; }
			/* */ if (_ref$3 === 14) { $s = 47; continue; }
			/* */ $s = 48; continue;
			/* if (_ref$3 === 13) { */ case 46:
				$r = e.uint32(math.Float32bits($fround(v.Float()))); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 48; continue;
			/* } else if (_ref$3 === 14) { */ case 47:
				$r = e.uint64(math.Float64bits(v.Float())); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 48:
			$s = 8; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 7:
			_r$7 = v.Type().Kind(); /* */ $s = 51; case 51: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_ref$4 = _r$7;
			/* */ if (_ref$4 === 15) { $s = 52; continue; }
			/* */ if (_ref$4 === 16) { $s = 53; continue; }
			/* */ $s = 54; continue;
			/* if (_ref$4 === 15) { */ case 52:
				x$3 = v.Complex();
				$r = e.uint32(math.Float32bits($fround(x$3.$real))); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = e.uint32(math.Float32bits($fround(x$3.$imag))); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 54; continue;
			/* } else if (_ref$4 === 16) { */ case 53:
				x$4 = v.Complex();
				$r = e.uint64(math.Float64bits(x$4.$real)); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = e.uint64(math.Float64bits(x$4.$imag)); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 54:
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.value }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._v = _v; $f.e = e; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.t = t; $f.v = v; $f.v$1 = v$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.value = function(v) { return this.$val.value(v); };
	encoder.ptr.prototype.skip = function(v) {
		var $ptr, _i, _r, _ref, e, i, n, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; e = $f.e; i = $f.i; n = $f.n; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		v = v;
		_r = dataSize(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		_ref = $subslice(e.buf, 0, n);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = e.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = 0));
			_i++;
		}
		e.buf = $subslice(e.buf, n);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.skip }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.e = e; $f.i = i; $f.n = n; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.skip = function(v) { return this.$val.skip(v); };
	intDataSize = function(data) {
		var $ptr, _ref, data, data$1, data$10, data$11, data$12, data$2, data$3, data$4, data$5, data$6, data$7, data$8, data$9;
		_ref = data;
		if ($assertType(_ref, $Int8, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, ptrType$1, true)[1]) {
			data$1 = _ref;
			return 1;
		} else if ($assertType(_ref, sliceType$1, true)[1]) {
			data$2 = _ref.$val;
			return data$2.$length;
		} else if ($assertType(_ref, sliceType, true)[1]) {
			data$3 = _ref.$val;
			return data$3.$length;
		} else if ($assertType(_ref, $Int16, true)[1] || $assertType(_ref, ptrType$2, true)[1] || $assertType(_ref, ptrType$3, true)[1]) {
			data$4 = _ref;
			return 2;
		} else if ($assertType(_ref, sliceType$2, true)[1]) {
			data$5 = _ref.$val;
			return 2 * data$5.$length >> 0;
		} else if ($assertType(_ref, sliceType$3, true)[1]) {
			data$6 = _ref.$val;
			return 2 * data$6.$length >> 0;
		} else if ($assertType(_ref, $Int32, true)[1] || $assertType(_ref, ptrType$4, true)[1] || $assertType(_ref, ptrType$5, true)[1]) {
			data$7 = _ref;
			return 4;
		} else if ($assertType(_ref, sliceType$4, true)[1]) {
			data$8 = _ref.$val;
			return 4 * data$8.$length >> 0;
		} else if ($assertType(_ref, sliceType$5, true)[1]) {
			data$9 = _ref.$val;
			return 4 * data$9.$length >> 0;
		} else if ($assertType(_ref, $Int64, true)[1] || $assertType(_ref, ptrType$6, true)[1] || $assertType(_ref, ptrType$7, true)[1]) {
			data$10 = _ref;
			return 8;
		} else if ($assertType(_ref, sliceType$6, true)[1]) {
			data$11 = _ref.$val;
			return 8 * data$11.$length >> 0;
		} else if ($assertType(_ref, sliceType$7, true)[1]) {
			data$12 = _ref.$val;
			return 8 * data$12.$length >> 0;
		}
		return 0;
	};
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "uint8", name: "uint8", pkg: "encoding/binary", typ: $funcType([$Uint8], [], false)}, {prop: "uint16", name: "uint16", pkg: "encoding/binary", typ: $funcType([$Uint16], [], false)}, {prop: "uint32", name: "uint32", pkg: "encoding/binary", typ: $funcType([$Uint32], [], false)}, {prop: "uint64", name: "uint64", pkg: "encoding/binary", typ: $funcType([$Uint64], [], false)}, {prop: "int8", name: "int8", pkg: "encoding/binary", typ: $funcType([$Int8], [], false)}, {prop: "int16", name: "int16", pkg: "encoding/binary", typ: $funcType([$Int16], [], false)}, {prop: "int32", name: "int32", pkg: "encoding/binary", typ: $funcType([$Int32], [], false)}, {prop: "int64", name: "int64", pkg: "encoding/binary", typ: $funcType([$Int64], [], false)}, {prop: "value", name: "value", pkg: "encoding/binary", typ: $funcType([reflect.Value], [], false)}, {prop: "skip", name: "skip", pkg: "encoding/binary", typ: $funcType([reflect.Value], [], false)}];
	ByteOrder.init([{prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}]);
	bigEndian.init([]);
	encoder.init([{prop: "order", name: "order", pkg: "encoding/binary", typ: ByteOrder, tag: ""}, {prop: "buf", name: "buf", pkg: "encoding/binary", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/transform"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Transformer, NopResetter, Reader, nop, sliceType, ptrType, errInconsistentByteCount, errShortInternal, x$1, NewReader, grow, Bytes;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Transformer = $pkg.Transformer = $newType(8, $kindInterface, "transform.Transformer", "Transformer", "golang.org/x/text/transform", null);
	NopResetter = $pkg.NopResetter = $newType(0, $kindStruct, "transform.NopResetter", "NopResetter", "golang.org/x/text/transform", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Reader = $pkg.Reader = $newType(0, $kindStruct, "transform.Reader", "Reader", "golang.org/x/text/transform", function(r_, t_, err_, dst_, dst0_, dst1_, src_, src0_, src1_, transformComplete_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.t = $ifaceNil;
			this.err = $ifaceNil;
			this.dst = sliceType.nil;
			this.dst0 = 0;
			this.dst1 = 0;
			this.src = sliceType.nil;
			this.src0 = 0;
			this.src1 = 0;
			this.transformComplete = false;
			return;
		}
		this.r = r_;
		this.t = t_;
		this.err = err_;
		this.dst = dst_;
		this.dst0 = dst0_;
		this.dst1 = dst1_;
		this.src = src_;
		this.src0 = src0_;
		this.src1 = src1_;
		this.transformComplete = transformComplete_;
	});
	nop = $pkg.nop = $newType(0, $kindStruct, "transform.nop", "nop", "golang.org/x/text/transform", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	NopResetter.ptr.prototype.Reset = function() {
		var $ptr;
	};
	NopResetter.prototype.Reset = function() { return this.$val.Reset(); };
	NewReader = function(r, t) {
		var $ptr, r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = t.Reset(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new Reader.ptr(r, t, $ifaceNil, $makeSlice(sliceType, 4096), 0, 0, $makeSlice(sliceType, 4096), 0, 0, false);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f.r = r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, err, n, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; n = $f.n; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		/* while (true) { */ case 1:
			if (!((r.dst0 === r.dst1))) {
				n = $copySlice(p, $subslice(r.dst, r.dst0, r.dst1));
				r.dst0 = r.dst0 + (n) >> 0;
				if ((r.dst0 === r.dst1) && r.transformComplete) {
					return [n, r.err];
				}
				return [n, $ifaceNil];
			} else if (r.transformComplete) {
				return [0, r.err];
			}
			/* */ if (!((r.src0 === r.src1)) || !($interfaceIsEqual(r.err, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((r.src0 === r.src1)) || !($interfaceIsEqual(r.err, $ifaceNil))) { */ case 3:
				r.dst0 = 0;
				_r = r.t.Transform(r.dst, $subslice(r.src, r.src0, r.src1), $interfaceIsEqual(r.err, io.EOF)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; r.dst1 = _tuple[0]; n = _tuple[1]; err = _tuple[2];
				r.src0 = r.src0 + (n) >> 0;
				/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 6; continue; }
				/* */ if ($interfaceIsEqual(err, $pkg.ErrShortDst) && (!((r.dst1 === 0)) || !((n === 0)))) { $s = 7; continue; }
				/* */ if ($interfaceIsEqual(err, $pkg.ErrShortSrc) && !(((r.src1 - r.src0 >> 0) === r.src.$length)) && $interfaceIsEqual(r.err, $ifaceNil)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 6:
					if (!((r.src0 === r.src1))) {
						r.err = errInconsistentByteCount;
					}
					r.transformComplete = !($interfaceIsEqual(r.err, $ifaceNil));
					/* continue; */ $s = 1; continue;
					$s = 10; continue;
				/* } else if ($interfaceIsEqual(err, $pkg.ErrShortDst) && (!((r.dst1 === 0)) || !((n === 0)))) { */ case 7:
					/* continue; */ $s = 1; continue;
					$s = 10; continue;
				/* } else if ($interfaceIsEqual(err, $pkg.ErrShortSrc) && !(((r.src1 - r.src0 >> 0) === r.src.$length)) && $interfaceIsEqual(r.err, $ifaceNil)) { */ case 8:
					$s = 10; continue;
				/* } else { */ case 9:
					r.transformComplete = true;
					if ($interfaceIsEqual(r.err, $ifaceNil) || $interfaceIsEqual(r.err, io.EOF)) {
						r.err = err;
					}
					/* continue; */ $s = 1; continue;
				/* } */ case 10:
			/* } */ case 4:
			if (!((r.src0 === 0))) {
				_tmp$2 = 0; _tmp$3 = $copySlice(r.src, $subslice(r.src, r.src0, r.src1)); r.src0 = _tmp$2; r.src1 = _tmp$3;
			}
			_r$1 = r.r.Read($subslice(r.src, r.src1)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; n = _tuple$1[0]; r.err = _tuple$1[1];
			r.src1 = r.src1 + (n) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	nop.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, atEOF, dst, err, n, nDst, nSrc, src;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		n = $copySlice(dst, src);
		if (n < src.$length) {
			err = $pkg.ErrShortDst;
		}
		_tmp = n; _tmp$1 = n; _tmp$2 = err; nDst = _tmp; nSrc = _tmp$1; err = _tmp$2;
		return [nDst, nSrc, err];
	};
	nop.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	grow = function(b, n) {
		var $ptr, b, buf, m, n;
		m = b.$length;
		if (m <= 256) {
			m = m * (2) >> 0;
		} else {
			m = m + ((m >> 1 >> 0)) >> 0;
		}
		buf = $makeSlice(sliceType, m);
		$copySlice(buf, $subslice(b, 0, n));
		return buf;
	};
	Bytes = function(t, b) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, b, dst, err, err$1, n, nDst, nSrc, pDst, pSrc, result, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tuple = $f._tuple; b = $f.b; dst = $f.dst; err = $f.err; err$1 = $f.err$1; n = $f.n; nDst = $f.nDst; nSrc = $f.nSrc; pDst = $f.pDst; pSrc = $f.pSrc; result = $f.result; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		n = 0;
		err = $ifaceNil;
		$r = t.Reset(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dst = $makeSlice(sliceType, b.$length);
		_tmp = 0; _tmp$1 = 0; pDst = _tmp; pSrc = _tmp$1;
		/* while (true) { */ case 2:
			_r = t.Transform($subslice(dst, pDst), $subslice(b, pSrc), true); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; nDst = _tuple[0]; nSrc = _tuple[1]; err$1 = _tuple[2];
			pDst = pDst + (nDst) >> 0;
			pSrc = pSrc + (nSrc) >> 0;
			if (!($interfaceIsEqual(err$1, $pkg.ErrShortDst))) {
				_tmp$2 = $subslice(dst, 0, pDst); _tmp$3 = pSrc; _tmp$4 = err$1; result = _tmp$2; n = _tmp$3; err = _tmp$4;
				return [result, n, err];
			}
			if (nDst === 0) {
				dst = grow(dst, pDst);
			}
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tuple = _tuple; $f.b = b; $f.dst = dst; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.nDst = nDst; $f.nSrc = nSrc; $f.pDst = pDst; $f.pSrc = pSrc; $f.result = result; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Bytes = Bytes;
	NopResetter.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}];
	ptrType.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	nop.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$Int, $Int, $error], false)}];
	Transformer.init([{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$Int, $Int, $error], false)}]);
	NopResetter.init([]);
	Reader.init([{prop: "r", name: "r", pkg: "golang.org/x/text/transform", typ: io.Reader, tag: ""}, {prop: "t", name: "t", pkg: "golang.org/x/text/transform", typ: Transformer, tag: ""}, {prop: "err", name: "err", pkg: "golang.org/x/text/transform", typ: $error, tag: ""}, {prop: "dst", name: "dst", pkg: "golang.org/x/text/transform", typ: sliceType, tag: ""}, {prop: "dst0", name: "dst0", pkg: "golang.org/x/text/transform", typ: $Int, tag: ""}, {prop: "dst1", name: "dst1", pkg: "golang.org/x/text/transform", typ: $Int, tag: ""}, {prop: "src", name: "src", pkg: "golang.org/x/text/transform", typ: sliceType, tag: ""}, {prop: "src0", name: "src0", pkg: "golang.org/x/text/transform", typ: $Int, tag: ""}, {prop: "src1", name: "src1", pkg: "golang.org/x/text/transform", typ: $Int, tag: ""}, {prop: "transformComplete", name: "transformComplete", pkg: "golang.org/x/text/transform", typ: $Bool, tag: ""}]);
	nop.init([{prop: "NopResetter", name: "", pkg: "", typ: NopResetter, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortDst = errors.New("transform: short destination buffer");
		$pkg.ErrShortSrc = errors.New("transform: short source buffer");
		errInconsistentByteCount = errors.New("transform: inconsistent byte count returned");
		errShortInternal = errors.New("transform: short internal buffer");
		$pkg.Nop = (x$1 = new nop.ptr(new NopResetter.ptr()), new x$1.constructor.elem(x$1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oov/mxl2mid/midi"] = (function() {
	var $pkg = {}, $init, binary, errors, transform, io, Header, TrackHeader, DeltaTime, NoteOnEvent, NoteOffEvent, TempoEvent, TimeSignatureEvent, TextEvent, TextEventType, EndOfTrackEvent, Event, DeltaTimeEvent, Track, TrackBuilder, MIDI, arrayType, sliceType, sliceType$1, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$2, ptrType$8, sliceType$3, ptrType$9, writeBE, writeUvarintBE;
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	transform = $packages["golang.org/x/text/transform"];
	io = $packages["io"];
	Header = $pkg.Header = $newType(0, $kindStruct, "midi.Header", "Header", "github.com/oov/mxl2mid/midi", function(Format_, NumTracks_, Division_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Format = 0;
			this.NumTracks = 0;
			this.Division = 0;
			return;
		}
		this.Format = Format_;
		this.NumTracks = NumTracks_;
		this.Division = Division_;
	});
	TrackHeader = $pkg.TrackHeader = $newType(0, $kindStruct, "midi.TrackHeader", "TrackHeader", "github.com/oov/mxl2mid/midi", function(Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			return;
		}
		this.Len = Len_;
	});
	DeltaTime = $pkg.DeltaTime = $newType(4, $kindUint32, "midi.DeltaTime", "DeltaTime", "github.com/oov/mxl2mid/midi", null);
	NoteOnEvent = $pkg.NoteOnEvent = $newType(0, $kindStruct, "midi.NoteOnEvent", "NoteOnEvent", "github.com/oov/mxl2mid/midi", function(Channel_, Key_, Velocity_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Channel = 0;
			this.Key = 0;
			this.Velocity = 0;
			return;
		}
		this.Channel = Channel_;
		this.Key = Key_;
		this.Velocity = Velocity_;
	});
	NoteOffEvent = $pkg.NoteOffEvent = $newType(0, $kindStruct, "midi.NoteOffEvent", "NoteOffEvent", "github.com/oov/mxl2mid/midi", function(Channel_, Key_, Velocity_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Channel = 0;
			this.Key = 0;
			this.Velocity = 0;
			return;
		}
		this.Channel = Channel_;
		this.Key = Key_;
		this.Velocity = Velocity_;
	});
	TempoEvent = $pkg.TempoEvent = $newType(0, $kindStruct, "midi.TempoEvent", "TempoEvent", "github.com/oov/mxl2mid/midi", function(BPM_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BPM = 0;
			return;
		}
		this.BPM = BPM_;
	});
	TimeSignatureEvent = $pkg.TimeSignatureEvent = $newType(0, $kindStruct, "midi.TimeSignatureEvent", "TimeSignatureEvent", "github.com/oov/mxl2mid/midi", function(Numerator_, Denominator_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Numerator = 0;
			this.Denominator = 0;
			return;
		}
		this.Numerator = Numerator_;
		this.Denominator = Denominator_;
	});
	TextEvent = $pkg.TextEvent = $newType(0, $kindStruct, "midi.TextEvent", "TextEvent", "github.com/oov/mxl2mid/midi", function(Type_, Text_, Transformer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = 0;
			this.Text = "";
			this.Transformer = $ifaceNil;
			return;
		}
		this.Type = Type_;
		this.Text = Text_;
		this.Transformer = Transformer_;
	});
	TextEventType = $pkg.TextEventType = $newType(1, $kindUint8, "midi.TextEventType", "TextEventType", "github.com/oov/mxl2mid/midi", null);
	EndOfTrackEvent = $pkg.EndOfTrackEvent = $newType(0, $kindStruct, "midi.EndOfTrackEvent", "EndOfTrackEvent", "github.com/oov/mxl2mid/midi", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Event = $pkg.Event = $newType(8, $kindInterface, "midi.Event", "Event", "github.com/oov/mxl2mid/midi", null);
	DeltaTimeEvent = $pkg.DeltaTimeEvent = $newType(0, $kindStruct, "midi.DeltaTimeEvent", "DeltaTimeEvent", "github.com/oov/mxl2mid/midi", function(DeltaTime_, Event_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DeltaTime = 0;
			this.Event = $ifaceNil;
			return;
		}
		this.DeltaTime = DeltaTime_;
		this.Event = Event_;
	});
	Track = $pkg.Track = $newType(12, $kindSlice, "midi.Track", "Track", "github.com/oov/mxl2mid/midi", null);
	TrackBuilder = $pkg.TrackBuilder = $newType(0, $kindStruct, "midi.TrackBuilder", "TrackBuilder", "github.com/oov/mxl2mid/midi", function(d_, Track_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = 0;
			this.Track = sliceType$2.nil;
			return;
		}
		this.d = d_;
		this.Track = Track_;
	});
	MIDI = $pkg.MIDI = $newType(0, $kindStruct, "midi.MIDI", "MIDI", "github.com/oov/mxl2mid/midi", function(Format_, Division_, Tracks_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Format = 0;
			this.Division = 0;
			this.Tracks = sliceType$3.nil;
			return;
		}
		this.Format = Format_;
		this.Division = Division_;
		this.Tracks = Tracks_;
	});
	arrayType = $arrayType($Uint8, 4);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($Uint16);
	ptrType = $ptrType(Header);
	ptrType$1 = $ptrType(TrackHeader);
	ptrType$2 = $ptrType(NoteOnEvent);
	ptrType$3 = $ptrType(NoteOffEvent);
	ptrType$4 = $ptrType(TempoEvent);
	ptrType$5 = $ptrType(TimeSignatureEvent);
	ptrType$6 = $ptrType(TextEvent);
	ptrType$7 = $ptrType(EndOfTrackEvent);
	sliceType$2 = $sliceType(DeltaTimeEvent);
	ptrType$8 = $ptrType(TrackBuilder);
	sliceType$3 = $sliceType(Track);
	ptrType$9 = $ptrType(MIDI);
	writeBE = function(w, data) {
		var $ptr, _r, data, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = binary.Write(w, (x = binary.BigEndian, new x.constructor.elem(x)), data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeBE }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	writeUvarintBE = function(w, x) {
		var $ptr, _r, buf, i, n, w, x, x$1, x$2, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; i = $f.i; n = $f.n; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = $clone(arrayType.zero(), arrayType);
		n = 1;
		while (true) {
			if (!(x >= 128)) { break; }
			(x$1 = 4 - n >> 0, ((x$1 < 0 || x$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$1] = (((x & 127) >>> 0) << 24 >>> 24)));
			x = (y = (7), y < 32 ? (x >>> y) : 0) >>> 0;
			n = n + (1) >> 0;
		}
		(x$2 = 4 - n >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2] = (x << 24 >>> 24)));
		i = 4 - n >> 0;
		while (true) {
			if (!(i < 3)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i]) | (128)) >>> 0);
			i = i + (1) >> 0;
		}
		_r = w.Write($subslice(new sliceType(buf), (4 - n >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeUvarintBE }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.i = i; $f.n = n; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Header.ptr.prototype.Size = function() {
		var $ptr, h;
		h = this;
		return 14;
	};
	Header.prototype.Size = function() { return this.$val.Size(); };
	Header.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, err, h, n, w, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; h = $f.h; n = $f.n; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		h = this;
		_r = writeBE(w, new sliceType($stringToBytes("MThd"))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [n, err];
		/* } */ case 3:
		n = (x = new $Int64(0, 4), new $Int64(n.$high + x.$high, n.$low + x.$low));
		_r$1 = writeBE(w, new $Uint32(6)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
			return [n, err];
		/* } */ case 6:
		n = (x$1 = new $Int64(0, 4), new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
		_r$2 = writeBE(w, new sliceType$1([h.Format, h.NumTracks, h.Division])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
			return [n, err];
		/* } */ case 9:
		n = (x$2 = new $Int64(0, 6), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Header.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.h = h; $f.n = n; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Header.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	TrackHeader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, err, n, th, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; err = $f.err; n = $f.n; th = $f.th; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		th = this;
		_r = writeBE(w, new sliceType($stringToBytes("MTrk"))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [n, err];
		/* } */ case 3:
		n = (x = new $Int64(0, 4), new $Int64(n.$high + x.$high, n.$low + x.$low));
		_r$1 = writeBE(w, new $Uint32(th.Len)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
			return [n, err];
		/* } */ case 6:
		n = (x$1 = new $Int64(0, 4), new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrackHeader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.n = n; $f.th = th; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	TrackHeader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	TrackHeader.ptr.prototype.Size = function() {
		var $ptr, th;
		th = this;
		return 8;
	};
	TrackHeader.prototype.Size = function() { return this.$val.Size(); };
	DeltaTime.prototype.Size = function() {
		var $ptr, _tmp, _tmp$1, d, n, x, y;
		d = this.$val;
		_tmp = (d >>> 0); _tmp$1 = 1; x = _tmp; n = _tmp$1;
		while (true) {
			if (!(x >= 128)) { break; }
			x = (y = (7), y < 32 ? (x >>> y) : 0) >>> 0;
			n = n + (1) >> 0;
		}
		return n;
	};
	$ptrType(DeltaTime).prototype.Size = function() { return new DeltaTime(this.$get()).Size(); };
	DeltaTime.prototype.WriteTo = function(w) {
		var $ptr, _r, _tuple, d, err, l, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; d = $f.d; err = $f.err; l = $f.l; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this.$val;
		_r = writeUvarintBE(w, (d >>> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; l = _tuple[0]; err = _tuple[1];
		return [new $Int64(0, l), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DeltaTime.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.l = l; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(DeltaTime).prototype.WriteTo = function(w) { return new DeltaTime(this.$get()).WriteTo(w); };
	NoteOnEvent.ptr.prototype.Size = function() {
		var $ptr, no;
		no = this;
		return 3;
	};
	NoteOnEvent.prototype.Size = function() { return this.$val.Size(); };
	NoteOnEvent.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, err, no, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; no = $f.no; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		no = this;
		_r = writeBE(w, new sliceType([(144 | (((no.Channel & 15) >>> 0))) >>> 0, (no.Key & 127) >>> 0, (no.Velocity & 127) >>> 0])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [new $Int64(0, 0), err];
		/* } */ case 3:
		return [new $Int64(0, 3), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NoteOnEvent.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.no = no; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	NoteOnEvent.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	NoteOffEvent.ptr.prototype.Size = function() {
		var $ptr, no;
		no = this;
		return 3;
	};
	NoteOffEvent.prototype.Size = function() { return this.$val.Size(); };
	NoteOffEvent.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, err, no, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; no = $f.no; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		no = this;
		_r = writeBE(w, new sliceType([(128 | (((no.Channel & 15) >>> 0))) >>> 0, (no.Key & 127) >>> 0, (no.Velocity & 127) >>> 0])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [new $Int64(0, 0), err];
		/* } */ case 3:
		return [new $Int64(0, 3), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NoteOffEvent.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.no = no; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	NoteOffEvent.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	TempoEvent.ptr.prototype.Size = function() {
		var $ptr, te;
		te = this;
		return 6;
	};
	TempoEvent.prototype.Size = function() { return this.$val.Size(); };
	TempoEvent.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, bpm, err, te, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; bpm = $f.bpm; err = $f.err; te = $f.te; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		te = this;
		bpm = (6e+07 / te.BPM >> 0);
		_r = writeBE(w, new sliceType([255, 81, 3, (((((bpm >>> 16 >>> 0)) & 255) >>> 0) << 24 >>> 24), (((((bpm >>> 8 >>> 0)) & 255) >>> 0) << 24 >>> 24), (((bpm & 255) >>> 0) << 24 >>> 24)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [new $Int64(0, 0), err];
		/* } */ case 3:
		return [new $Int64(0, 6), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TempoEvent.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f.bpm = bpm; $f.err = err; $f.te = te; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	TempoEvent.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	TimeSignatureEvent.ptr.prototype.Size = function() {
		var $ptr, te;
		te = this;
		return 7;
	};
	TimeSignatureEvent.prototype.Size = function() { return this.$val.Size(); };
	TimeSignatureEvent.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _ref, d, err, te, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; d = $f.d; err = $f.err; te = $f.te; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		te = this;
		d = 0;
		_ref = te.Denominator;
		if (_ref === 1) {
			d = 0;
		} else if (_ref === 2) {
			d = 1;
		} else if (_ref === 4) {
			d = 2;
		} else if (_ref === 8) {
			d = 3;
		} else if (_ref === 16) {
			d = 4;
		} else if (_ref === 32) {
			d = 5;
		} else if (_ref === 64) {
			d = 6;
		} else if (_ref === 128) {
			d = 7;
		} else {
			return [new $Int64(0, 0), errors.New("unsupported denominator of the time signature")];
		}
		_r = writeBE(w, new sliceType([255, 88, 4, te.Numerator, d, 24, 8])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [new $Int64(0, 0), err];
		/* } */ case 3:
		return [new $Int64(0, 7), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TimeSignatureEvent.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.d = d; $f.err = err; $f.te = te; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	TimeSignatureEvent.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	TextEvent.ptr.prototype.Size = function() {
		var $ptr, _r, _tuple, buf, te, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; te = $f.te; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		te = this;
		/* */ if (!($interfaceIsEqual(te.Transformer, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(te.Transformer, $ifaceNil))) { */ case 1:
			_r = transform.Bytes(te.Transformer, new sliceType($stringToBytes(te.Text))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; buf = _tuple[0];
			return 3 + buf.$length >> 0;
		/* } */ case 2:
		return 3 + te.Text.length >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TextEvent.ptr.prototype.Size }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.te = te; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextEvent.prototype.Size = function() { return this.$val.Size(); };
	TextEvent.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _tuple, buf, err, n, te, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; te = $f.te; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		te = this;
		buf = sliceType.nil;
		/* */ if (!($interfaceIsEqual(te.Transformer, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(te.Transformer, $ifaceNil))) { */ case 1:
			_r = transform.Bytes(te.Transformer, new sliceType($stringToBytes(te.Text))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; buf = _tuple[0]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
			$s = 3; continue;
		/* } else { */ case 2:
			buf = new sliceType($stringToBytes(te.Text));
		/* } */ case 3:
		_r$1 = writeBE(w, new sliceType([255, (te.Type << 24 >>> 24), (buf.$length << 24 >>> 24)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
			return [n, err];
		/* } */ case 7:
		n = (x = new $Int64(0, 3), new $Int64(n.$high + x.$high, n.$low + x.$low));
		_r$2 = writeBE(w, buf); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
			return [n, err];
		/* } */ case 10:
		n = (x$1 = new $Int64(0, buf.$length), new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TextEvent.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.te = te; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextEvent.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	EndOfTrackEvent.ptr.prototype.Size = function() {
		var $ptr, eote;
		eote = this;
		return 3;
	};
	EndOfTrackEvent.prototype.Size = function() { return this.$val.Size(); };
	EndOfTrackEvent.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, eote, err, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; eote = $f.eote; err = $f.err; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		eote = this;
		_r = writeBE(w, new sliceType([255, 47, 0])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [new $Int64(0, 0), err];
		/* } */ case 3:
		return [new $Int64(0, 3), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EndOfTrackEvent.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f.eote = eote; $f.err = err; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	EndOfTrackEvent.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Track.prototype.WriteTo = function(w) {
		var $ptr, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, de, de$1, err, l, ln, t, w, written, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; de = $f.de; de$1 = $f.de$1; err = $f.err; l = $f.l; ln = $f.ln; t = $f.t; w = $f.w; written = $f.written; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		ln = 0;
		_ref = t;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			de = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), DeltaTimeEvent);
			_r = de.Event.Size(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ln = ln + ((new DeltaTime(de.DeltaTime).Size() + _r >> 0)) >> 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$1 = (new TrackHeader.ptr((ln >>> 0))).WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; written = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [new $Int64(0, 0), err];
		}
		l = new $Int64(0, 0);
		_ref$1 = t;
		_i$1 = 0;
		/* while (true) { */ case 5:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
			de$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), DeltaTimeEvent);
			_r$2 = new DeltaTime(de$1.DeltaTime).WriteTo(w); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2; l = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [written, err];
			}
			written = (x = l, new $Int64(written.$high + x.$high, written.$low + x.$low));
			_r$3 = de$1.Event.WriteTo(w); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3; l = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [written, err];
			}
			written = (x$1 = l, new $Int64(written.$high + x$1.$high, written.$low + x$1.$low));
			_i$1++;
		/* } */ $s = 5; continue; case 6:
		return [written, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Track.prototype.WriteTo }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.de = de; $f.de$1 = de$1; $f.err = err; $f.l = l; $f.ln = ln; $f.t = t; $f.w = w; $f.written = written; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Track).prototype.WriteTo = function(w) { return this.$get().WriteTo(w); };
	TrackBuilder.ptr.prototype.AddEvent = function(event) {
		var $ptr, event, tb;
		tb = this;
		tb.Track = $append(tb.Track, new DeltaTimeEvent.ptr((tb.d >>> 0), event));
		tb.d = 0;
	};
	TrackBuilder.prototype.AddEvent = function(event) { return this.$val.AddEvent(event); };
	TrackBuilder.ptr.prototype.AddDeltaTime = function(d) {
		var $ptr, d, tb;
		tb = this;
		tb.d = tb.d + (d) >> 0;
	};
	TrackBuilder.prototype.AddDeltaTime = function(d) { return this.$val.AddDeltaTime(d); };
	MIDI.ptr.prototype.WriteTo = function(w) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, _tuple$1, err, l, m, t, w, written, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; l = $f.l; m = $f.m; t = $f.t; w = $f.w; written = $f.written; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = (new Header.ptr(m.Format, (m.Tracks.$length << 16 >>> 16), m.Division)).WriteTo(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; written = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [new $Int64(0, 0), err];
		}
		l = new $Int64(0, 0);
		_ref = m.Tracks;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$1 = t.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; l = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [written, err];
			}
			written = (x = l, new $Int64(written.$high + x.$high, written.$low + x.$low));
			_i++;
		/* } */ $s = 2; continue; case 3:
		return [written, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MIDI.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.l = l; $f.m = m; $f.t = t; $f.w = w; $f.written = written; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MIDI.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	ptrType.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$1.methods = [{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}];
	DeltaTime.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$2.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$3.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$4.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$5.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$6.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$7.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Track.methods = [{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$8.methods = [{prop: "AddEvent", name: "AddEvent", pkg: "", typ: $funcType([Event], [], false)}, {prop: "AddDeltaTime", name: "AddDeltaTime", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$9.methods = [{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Header.init([{prop: "Format", name: "Format", pkg: "", typ: $Uint16, tag: ""}, {prop: "NumTracks", name: "NumTracks", pkg: "", typ: $Uint16, tag: ""}, {prop: "Division", name: "Division", pkg: "", typ: $Uint16, tag: ""}]);
	TrackHeader.init([{prop: "Len", name: "Len", pkg: "", typ: $Uint32, tag: ""}]);
	NoteOnEvent.init([{prop: "Channel", name: "Channel", pkg: "", typ: $Uint8, tag: ""}, {prop: "Key", name: "Key", pkg: "", typ: $Uint8, tag: ""}, {prop: "Velocity", name: "Velocity", pkg: "", typ: $Uint8, tag: ""}]);
	NoteOffEvent.init([{prop: "Channel", name: "Channel", pkg: "", typ: $Uint8, tag: ""}, {prop: "Key", name: "Key", pkg: "", typ: $Uint8, tag: ""}, {prop: "Velocity", name: "Velocity", pkg: "", typ: $Uint8, tag: ""}]);
	TempoEvent.init([{prop: "BPM", name: "BPM", pkg: "", typ: $Float64, tag: ""}]);
	TimeSignatureEvent.init([{prop: "Numerator", name: "Numerator", pkg: "", typ: $Uint8, tag: ""}, {prop: "Denominator", name: "Denominator", pkg: "", typ: $Uint8, tag: ""}]);
	TextEvent.init([{prop: "Type", name: "Type", pkg: "", typ: TextEventType, tag: ""}, {prop: "Text", name: "Text", pkg: "", typ: $String, tag: ""}, {prop: "Transformer", name: "Transformer", pkg: "", typ: transform.Transformer, tag: ""}]);
	EndOfTrackEvent.init([]);
	Event.init([{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}]);
	DeltaTimeEvent.init([{prop: "DeltaTime", name: "", pkg: "", typ: DeltaTime, tag: ""}, {prop: "Event", name: "Event", pkg: "", typ: Event, tag: ""}]);
	Track.init(DeltaTimeEvent);
	TrackBuilder.init([{prop: "d", name: "d", pkg: "github.com/oov/mxl2mid/midi", typ: $Int, tag: ""}, {prop: "Track", name: "Track", pkg: "", typ: sliceType$2, tag: ""}]);
	MIDI.init([{prop: "Format", name: "Format", pkg: "", typ: $Uint16, tag: ""}, {prop: "Division", name: "Division", pkg: "", typ: $Uint16, tag: ""}, {prop: "Tracks", name: "Tracks", pkg: "", typ: sliceType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = binary.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/net/html/atom"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/net/html"] = (function() {
	var $pkg = {}, $init, bufio, bytes, errors, fmt, atom, io, strconv, strings, utf8, plaintextAbort;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	atom = $packages["golang.org/x/net/html/atom"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atom.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		plaintextAbort = errors.New("html: internal error (plaintext abort)");
		$pkg.ErrBufferExceeded = errors.New("max buffer exceeded");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding"] = (function() {
	var $pkg = {}, $init, errors, transform, utf8, Encoding, nop, replacement, replacementDecoder, replacementEncoder, sliceType, x, x$1;
	errors = $packages["errors"];
	transform = $packages["golang.org/x/text/transform"];
	utf8 = $packages["unicode/utf8"];
	Encoding = $pkg.Encoding = $newType(8, $kindInterface, "encoding.Encoding", "Encoding", "golang.org/x/text/encoding", null);
	nop = $pkg.nop = $newType(0, $kindStruct, "encoding.nop", "nop", "golang.org/x/text/encoding", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	replacement = $pkg.replacement = $newType(0, $kindStruct, "encoding.replacement", "replacement", "golang.org/x/text/encoding", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	replacementDecoder = $pkg.replacementDecoder = $newType(0, $kindStruct, "encoding.replacementDecoder", "replacementDecoder", "golang.org/x/text/encoding", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	replacementEncoder = $pkg.replacementEncoder = $newType(0, $kindStruct, "encoding.replacementEncoder", "replacementEncoder", "golang.org/x/text/encoding", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	sliceType = $sliceType($Uint8);
	nop.ptr.prototype.NewDecoder = function() {
		var $ptr;
		return transform.Nop;
	};
	nop.prototype.NewDecoder = function() { return this.$val.NewDecoder(); };
	nop.ptr.prototype.NewEncoder = function() {
		var $ptr;
		return transform.Nop;
	};
	nop.prototype.NewEncoder = function() { return this.$val.NewEncoder(); };
	replacement.ptr.prototype.NewDecoder = function() {
		var $ptr, x$3;
		return (x$3 = new replacementDecoder.ptr(new transform.NopResetter.ptr()), new x$3.constructor.elem(x$3));
	};
	replacement.prototype.NewDecoder = function() { return this.$val.NewDecoder(); };
	replacement.ptr.prototype.NewEncoder = function() {
		var $ptr, x$3;
		return (x$3 = new replacementEncoder.ptr(new transform.NopResetter.ptr()), new x$3.constructor.elem(x$3));
	};
	replacement.prototype.NewEncoder = function() { return this.$val.NewEncoder(); };
	replacementDecoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, atEOF, dst, err, nDst, nSrc, src;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		if (dst.$length < 3) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = transform.ErrShortDst; nDst = _tmp; nSrc = _tmp$1; err = _tmp$2;
			return [nDst, nSrc, err];
		}
		if (atEOF) {
			(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = "\xEF\xBF\xBD".charCodeAt(0));
			(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = "\xEF\xBF\xBD".charCodeAt(1));
			(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = "\xEF\xBF\xBD".charCodeAt(2));
			nDst = 3;
		}
		_tmp$3 = nDst; _tmp$4 = src.$length; _tmp$5 = $ifaceNil; nDst = _tmp$3; nSrc = _tmp$4; err = _tmp$5;
		return [nDst, nSrc, err];
	};
	replacementDecoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	replacementEncoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, dst, err, nDst, nSrc, r, size, src;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			if (r < 128) {
				size = 1;
			} else {
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						break;
					}
					r = 65533;
				}
			}
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		}
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
	};
	replacementEncoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	nop.methods = [{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}];
	replacement.methods = [{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}];
	replacementDecoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$Int, $Int, $error], false)}];
	replacementEncoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$Int, $Int, $error], false)}];
	Encoding.init([{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}]);
	nop.init([]);
	replacement.init([]);
	replacementDecoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	replacementEncoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Nop = (x = new nop.ptr(), new x.constructor.elem(x));
		$pkg.Replacement = (x$1 = new replacement.ptr(), new x$1.constructor.elem(x$1));
		$pkg.ErrInvalidUTF8 = errors.New("encoding: invalid UTF-8");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/internal/identifier"] = (function() {
	var $pkg = {}, $init, MIB;
	MIB = $pkg.MIB = $newType(2, $kindUint16, "identifier.MIB", "MIB", "golang.org/x/text/encoding/internal/identifier", null);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/internal"] = (function() {
	var $pkg = {}, $init, encoding, identifier, transform, Encoding, SimpleEncoding, FuncEncoding, ptrType, ptrType$1, funcType;
	encoding = $packages["golang.org/x/text/encoding"];
	identifier = $packages["golang.org/x/text/encoding/internal/identifier"];
	transform = $packages["golang.org/x/text/transform"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "internal.Encoding", "Encoding", "golang.org/x/text/encoding/internal", function(Encoding_, Name_, MIB_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Encoding = $ifaceNil;
			this.Name = "";
			this.MIB = 0;
			return;
		}
		this.Encoding = Encoding_;
		this.Name = Name_;
		this.MIB = MIB_;
	});
	SimpleEncoding = $pkg.SimpleEncoding = $newType(0, $kindStruct, "internal.SimpleEncoding", "SimpleEncoding", "golang.org/x/text/encoding/internal", function(Decoder_, Encoder_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Decoder = $ifaceNil;
			this.Encoder = $ifaceNil;
			return;
		}
		this.Decoder = Decoder_;
		this.Encoder = Encoder_;
	});
	FuncEncoding = $pkg.FuncEncoding = $newType(0, $kindStruct, "internal.FuncEncoding", "FuncEncoding", "golang.org/x/text/encoding/internal", function(Decoder_, Encoder_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Decoder = $throwNilPointerError;
			this.Encoder = $throwNilPointerError;
			return;
		}
		this.Decoder = Decoder_;
		this.Encoder = Encoder_;
	});
	ptrType = $ptrType(Encoding);
	ptrType$1 = $ptrType(SimpleEncoding);
	funcType = $funcType([], [transform.Transformer], false);
	Encoding.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return e.Name;
	};
	Encoding.prototype.String = function() { return this.$val.String(); };
	Encoding.ptr.prototype.ID = function() {
		var $ptr, _tmp, _tmp$1, e, mib, other;
		mib = 0;
		other = "";
		e = this;
		_tmp = e.MIB; _tmp$1 = ""; mib = _tmp; other = _tmp$1;
		return [mib, other];
	};
	Encoding.prototype.ID = function() { return this.$val.ID(); };
	SimpleEncoding.ptr.prototype.NewDecoder = function() {
		var $ptr, e;
		e = this;
		return e.Decoder;
	};
	SimpleEncoding.prototype.NewDecoder = function() { return this.$val.NewDecoder(); };
	SimpleEncoding.ptr.prototype.NewEncoder = function() {
		var $ptr, e;
		e = this;
		return e.Encoder;
	};
	SimpleEncoding.prototype.NewEncoder = function() { return this.$val.NewEncoder(); };
	FuncEncoding.ptr.prototype.NewDecoder = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(this, FuncEncoding);
		_r = e.Decoder(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FuncEncoding.ptr.prototype.NewDecoder }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncEncoding.prototype.NewDecoder = function() { return this.$val.NewDecoder(); };
	FuncEncoding.ptr.prototype.NewEncoder = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(this, FuncEncoding);
		_r = e.Encoder(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FuncEncoding.ptr.prototype.NewEncoder }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncEncoding.prototype.NewEncoder = function() { return this.$val.NewEncoder(); };
	ptrType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [identifier.MIB, $String], false)}];
	ptrType$1.methods = [{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}];
	FuncEncoding.methods = [{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}];
	Encoding.init([{prop: "Encoding", name: "", pkg: "", typ: encoding.Encoding, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "MIB", name: "MIB", pkg: "", typ: identifier.MIB, tag: ""}]);
	SimpleEncoding.init([{prop: "Decoder", name: "Decoder", pkg: "", typ: transform.Transformer, tag: ""}, {prop: "Encoder", name: "Encoder", pkg: "", typ: transform.Transformer, tag: ""}]);
	FuncEncoding.init([{prop: "Decoder", name: "Decoder", pkg: "", typ: funcType, tag: ""}, {prop: "Encoder", name: "Encoder", pkg: "", typ: funcType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = encoding.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = identifier.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/charmap"] = (function() {
	var $pkg = {}, $init, encoding, internal, identifier, transform, utf8, utf8Enc, charmap, charmapDecoder, charmapEncoder, arrayType, arrayType$1, ptrType, arrayType$2, sliceType$1, codePage866, codePage866_ptr, iso8859_2, iso8859_2_ptr, iso8859_3, iso8859_3_ptr, iso8859_4, iso8859_4_ptr, iso8859_5, iso8859_5_ptr, iso8859_6, iso8859_6_ptr, iso8859_7, iso8859_7_ptr, iso8859_8, iso8859_8_ptr, iso8859_10, iso8859_10_ptr, iso8859_13, iso8859_13_ptr, iso8859_14, iso8859_14_ptr, iso8859_15, iso8859_15_ptr, iso8859_16, iso8859_16_ptr, koi8R, koi8R_ptr, koi8U, koi8U_ptr, macintosh, macintosh_ptr, macintoshCyrillic, macintoshCyrillic_ptr, windows874, windows874_ptr, windows1250, windows1250_ptr, windows1251, windows1251_ptr, windows1252, windows1252_ptr, windows1253, windows1253_ptr, windows1254, windows1254_ptr, windows1255, windows1255_ptr, windows1256, windows1256_ptr, windows1257, windows1257_ptr, windows1258, windows1258_ptr, xUserDefined, xUserDefined_ptr;
	encoding = $packages["golang.org/x/text/encoding"];
	internal = $packages["golang.org/x/text/encoding/internal"];
	identifier = $packages["golang.org/x/text/encoding/internal/identifier"];
	transform = $packages["golang.org/x/text/transform"];
	utf8 = $packages["unicode/utf8"];
	utf8Enc = $pkg.utf8Enc = $newType(0, $kindStruct, "charmap.utf8Enc", "utf8Enc", "golang.org/x/text/encoding/charmap", function(len_, data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.len = 0;
			this.data = arrayType$2.zero();
			return;
		}
		this.len = len_;
		this.data = data_;
	});
	charmap = $pkg.charmap = $newType(0, $kindStruct, "charmap.charmap", "charmap", "golang.org/x/text/encoding/charmap", function(name_, mib_, asciiSuperset_, low_, replacement_, decode_, encode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.mib = 0;
			this.asciiSuperset = false;
			this.low = 0;
			this.replacement = 0;
			this.decode = arrayType.zero();
			this.encode = arrayType$1.zero();
			return;
		}
		this.name = name_;
		this.mib = mib_;
		this.asciiSuperset = asciiSuperset_;
		this.low = low_;
		this.replacement = replacement_;
		this.decode = decode_;
		this.encode = encode_;
	});
	charmapDecoder = $pkg.charmapDecoder = $newType(0, $kindStruct, "charmap.charmapDecoder", "charmapDecoder", "golang.org/x/text/encoding/charmap", function(NopResetter_, charmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			this.charmap = ptrType.nil;
			return;
		}
		this.NopResetter = NopResetter_;
		this.charmap = charmap_;
	});
	charmapEncoder = $pkg.charmapEncoder = $newType(0, $kindStruct, "charmap.charmapEncoder", "charmapEncoder", "golang.org/x/text/encoding/charmap", function(NopResetter_, charmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			this.charmap = ptrType.nil;
			return;
		}
		this.NopResetter = NopResetter_;
		this.charmap = charmap_;
	});
	arrayType = $arrayType(utf8Enc, 256);
	arrayType$1 = $arrayType($Uint32, 256);
	ptrType = $ptrType(charmap);
	arrayType$2 = $arrayType($Uint8, 3);
	sliceType$1 = $sliceType($Uint8);
	charmap.ptr.prototype.NewDecoder = function() {
		var $ptr, m, x;
		m = this;
		return (x = new charmapDecoder.ptr(new transform.NopResetter.ptr(), m), new x.constructor.elem(x));
	};
	charmap.prototype.NewDecoder = function() { return this.$val.NewDecoder(); };
	charmap.ptr.prototype.NewEncoder = function() {
		var $ptr, m, x;
		m = this;
		return (x = new charmapEncoder.ptr(new transform.NopResetter.ptr(), m), new x.constructor.elem(x));
	};
	charmap.prototype.NewEncoder = function() { return this.$val.NewEncoder(); };
	charmap.ptr.prototype.String = function() {
		var $ptr, m;
		m = this;
		return m.name;
	};
	charmap.prototype.String = function() { return this.$val.String(); };
	charmap.ptr.prototype.ID = function() {
		var $ptr, _tmp, _tmp$1, m, mib, other;
		mib = 0;
		other = "";
		m = this;
		_tmp = m.mib; _tmp$1 = ""; mib = _tmp; other = _tmp$1;
		return [mib, other];
	};
	charmap.prototype.ID = function() { return this.$val.ID(); };
	charmapDecoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tmp$2, atEOF, c, decode, dst, err, i, j, m, n, nDst, nSrc, src, x, x$1;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		m = $clone(this, charmapDecoder);
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (m.charmap.asciiSuperset && c < 128) {
				if (nDst >= dst.$length) {
					err = transform.ErrShortDst;
					break;
				}
				((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = c);
				nDst = nDst + (1) >> 0;
				nSrc = i + 1 >> 0;
				_i++;
				continue;
			}
			decode = (x = m.charmap.decode, ((c < 0 || c >= x.length) ? $throwRuntimeError("index out of range") : x[c]));
			n = (decode.len >> 0);
			if ((nDst + n >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break;
			}
			j = 0;
			while (true) {
				if (!(j < n)) { break; }
				((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (x$1 = decode.data, ((j < 0 || j >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[j])));
				nDst = nDst + (1) >> 0;
				j = j + (1) >> 0;
			}
			nSrc = i + 1 >> 0;
			_i++;
		}
		_tmp = nDst; _tmp$1 = nSrc; _tmp$2 = err; nDst = _tmp; nSrc = _tmp$1; err = _tmp$2;
		return [nDst, nSrc, err];
	};
	charmapDecoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	charmapEncoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, atEOF, dst, err, got, gotRune, high, low, m, mid, nDst, nSrc, r, size, src, x;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		m = $clone(this, charmapEncoder);
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				break;
			}
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			if (r < 128) {
				nSrc = nSrc + (1) >> 0;
				if (m.charmap.asciiSuperset) {
					((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
					nDst = nDst + (1) >> 0;
					continue;
				}
			} else {
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						break;
					}
				}
				nSrc = nSrc + (size) >> 0;
				if (r === 65533) {
					((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = m.charmap.replacement);
					nDst = nDst + (1) >> 0;
					continue;
				}
			}
			_tmp$2 = (m.charmap.low >> 0); _tmp$3 = 256; low = _tmp$2; high = _tmp$3;
			while (true) {
				if (low >= high) {
					((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = m.charmap.replacement);
					nDst = nDst + (1) >> 0;
					break;
				}
				mid = (_q = ((low + high >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				got = (x = m.charmap.encode, ((mid < 0 || mid >= x.length) ? $throwRuntimeError("index out of range") : x[mid]));
				gotRune = (((got & 16777215) >>> 0) >> 0);
				if (gotRune < r) {
					low = mid + 1 >> 0;
				} else if (gotRune > r) {
					high = mid;
				} else {
					((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = ((got >>> 24 >>> 0) << 24 >>> 24));
					nDst = nDst + (1) >> 0;
					break;
				}
			}
		}
		_tmp$4 = nDst; _tmp$5 = nSrc; _tmp$6 = err; nDst = _tmp$4; nSrc = _tmp$5; err = _tmp$6;
		return [nDst, nSrc, err];
	};
	charmapEncoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	ptrType.methods = [{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [identifier.MIB, $String], false)}];
	charmapDecoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	charmapEncoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	utf8Enc.init([{prop: "len", name: "len", pkg: "golang.org/x/text/encoding/charmap", typ: $Uint8, tag: ""}, {prop: "data", name: "data", pkg: "golang.org/x/text/encoding/charmap", typ: arrayType$2, tag: ""}]);
	charmap.init([{prop: "name", name: "name", pkg: "golang.org/x/text/encoding/charmap", typ: $String, tag: ""}, {prop: "mib", name: "mib", pkg: "golang.org/x/text/encoding/charmap", typ: identifier.MIB, tag: ""}, {prop: "asciiSuperset", name: "asciiSuperset", pkg: "golang.org/x/text/encoding/charmap", typ: $Bool, tag: ""}, {prop: "low", name: "low", pkg: "golang.org/x/text/encoding/charmap", typ: $Uint8, tag: ""}, {prop: "replacement", name: "replacement", pkg: "golang.org/x/text/encoding/charmap", typ: $Uint8, tag: ""}, {prop: "decode", name: "decode", pkg: "golang.org/x/text/encoding/charmap", typ: arrayType, tag: ""}, {prop: "encode", name: "encode", pkg: "golang.org/x/text/encoding/charmap", typ: arrayType$1, tag: ""}]);
	charmapDecoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}, {prop: "charmap", name: "charmap", pkg: "golang.org/x/text/encoding/charmap", typ: ptrType, tag: ""}]);
	charmapEncoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}, {prop: "charmap", name: "charmap", pkg: "golang.org/x/text/encoding/charmap", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = encoding.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = internal.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = identifier.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		codePage866 = new charmap.ptr("IBM Code Page 866", 2086, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 191, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 149])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 163])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 155])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 180])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 188])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 159])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 169])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 167])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 168])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 165])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 171])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 170])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 128])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 153])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 150])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 160])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 4278190240, 4244635812, 4160749744, 4194304183, 4026532865, 4060087300, 4093641735, 4127196174, 2147484688, 2164261905, 2181039122, 2197816339, 2214593556, 2231370773, 2248147990, 2264925207, 2281702424, 2298479641, 2315256858, 2332034075, 2348811292, 2365588509, 2382365726, 2399142943, 2415920160, 2432697377, 2449474594, 2466251811, 2483029028, 2499806245, 2516583462, 2533360679, 2550137896, 2566915113, 2583692330, 2600469547, 2617246764, 2634023981, 2650801198, 2667578415, 2684355632, 2701132849, 2717910066, 2734687283, 2751464500, 2768241717, 2785018934, 2801796151, 2818573368, 2835350585, 2852127802, 2868905019, 2885682236, 2902459453, 2919236670, 2936013887, 3758097472, 3774874689, 3791651906, 3808429123, 3825206340, 3841983557, 3858760774, 3875537991, 3892315208, 3909092425, 3925869642, 3942646859, 3959424076, 3976201293, 3992978510, 4009755727, 4043310161, 4076864596, 4110419031, 4143973470, 4227866902, 4177535513, 4211089946, 3288343808, 3003131138, 3657442572, 3204457744, 3221234964, 3640665368, 3271566620, 3019908388, 3254789420, 3238012212, 3305121084, 3439338832, 3120571729, 3573556562, 3590333779, 3372229972, 3087017301, 3070240086, 3137348951, 3556779352, 3540002137, 3355452762, 3187680603, 3170903388, 3154126173, 3321898334, 3338675551, 3422561632, 3036685665, 3053462882, 3103794531, 3506447716, 3523224933, 3405784422, 3472893287, 3489670504, 3389007209, 3623888234, 3607111019, 3456116076, 3741328768, 3690997124, 3674219912, 3707774348, 3724551568, 2952799633, 2969576850, 2986354067, 4261422496]));
		$pkg.CodePage866 = codePage866;
		iso8859_2 = new charmap.ptr("ISO 8859-2", 5, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 153, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2751463588, 2801795239, 2818572456, 2902458541, 2952790192, 3019899060, 3087007928, 3238002881, 3254780098, 3288334532, 3338666183, 3372220617, 3405775051, 3439329485, 3456106702, 3539992787, 3556770004, 3590324438, 3607101655, 3657433306, 3690987740, 3707764957, 3741319391, 3774873825, 3791651042, 3825205476, 3875537127, 3909091561, 3942645995, 3976200429, 3992977646, 4076863731, 4093640948, 4127195382, 4143972599, 4194304250, 4227858684, 4244635901, 3271557378, 3808428291, 2701132036, 2969567493, 3321889030, 3858759943, 3355443468, 3892314381, 3472883982, 4009754895, 3489661200, 4026532113, 3388997912, 3925868825, 3422552346, 3959423259, 3305111865, 3841982778, 2768240957, 3036676414, 2734686529, 3003121986, 3506438467, 4043309380, 3523215687, 4060086600, 3573547344, 4110418257, 3221225812, 3758096725, 3623879000, 4160749913, 2785018202, 3053453659, 2852127070, 3120562527, 2835349856, 3103785313, 3724542306, 4261413219, 2868904292, 3137339749, 3640656238, 4177527151, 3674210672, 4211081585, 2885681529, 3154116986, 2936013179, 3204448636, 2919235965, 3187671422, 3070231239, 2717909720, 4278190809, 2986345179, 3170894557, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_2 = iso8859_2;
		iso8859_3 = new charmap.ptr("ISO 8859-3", 6, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 153, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2734686371, 2751463588, 2801795239, 2818572456, 2902458541, 2952790192, 2986344626, 3003121843, 3019899060, 3036676277, 3070230711, 3087007928, 3170894013, 3221225664, 3238002881, 3254780098, 3288334532, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3422552268, 3439329485, 3456106702, 3472883919, 3506438353, 3523215570, 3539992787, 3556770004, 3590324438, 3607101655, 3640656089, 3657433306, 3674210523, 3690987740, 3741319391, 3758096608, 3774873825, 3791651042, 3825205476, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3959423212, 3976200429, 3992977646, 4009754863, 4043309297, 4060086514, 4076863731, 4093640948, 4127195382, 4143972599, 4177527033, 4194304250, 4211081467, 4227858684, 3321889032, 3858759945, 3305111818, 3841982731, 3623878940, 4160749853, 2868904222, 3137339679, 3573547296, 4110418209, 2785018148, 3053453605, 2701132070, 2969567527, 2835349808, 3103785265, 2885681460, 3154116917, 3724542300, 4261413213, 2852127070, 3120562527, 3707765100, 4244636013, 2936013179, 3204448636, 2717909720, 4278190809, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_3 = iso8859_3;
		iso8859_4 = new charmap.ptr("ISO 8859-4", 7, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 153, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2751463588, 2801795239, 2818572456, 2902458541, 2936012975, 2952790192, 3019899060, 3087007928, 3238002881, 3254780098, 3271557315, 3288334532, 3305111749, 3321888966, 3372220617, 3405775051, 3439329485, 3456106702, 3556770004, 3573547221, 3590324438, 3607101655, 3623878872, 3657433306, 3674210523, 3690987740, 3741319391, 3774873825, 3791651042, 3808428259, 3825205476, 3841982693, 3858759910, 3909091561, 3942645995, 3976200429, 3992977646, 4093640948, 4110418165, 4127195382, 4143972599, 4160749816, 4194304250, 4211081467, 4227858684, 3221225728, 3758096641, 2701132036, 2969567493, 3355443468, 3892314381, 3489661200, 4026532113, 2852126994, 3120562451, 3422552342, 3959423255, 3388997912, 3925868825, 2868904226, 3137339683, 2768240936, 3036676393, 3472884010, 4009754923, 3338666286, 3875537199, 3539992886, 4076863799, 2717909304, 2785018171, 3053453628, 3506438469, 4043309382, 3170894154, 3204448587, 3523215692, 4060086605, 2734686550, 3003122007, 2835349856, 3103785313, 2885681510, 3154116967, 3707765096, 4244636009, 3724542314, 4261413227, 3640656242, 4177527155, 2919235965, 3187671422, 3070231239, 4278190809, 2986345179, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_4 = iso8859_4;
		iso8859_5 = new charmap.ptr("ISO 8859-5", 8, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 143, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 150])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 159, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 4244635815, 2902458541, 2701132801, 2717910018, 2734687235, 2751464452, 2768241669, 2785018886, 2801796103, 2818573320, 2835350537, 2852127754, 2868904971, 2885682188, 2919236622, 2936013839, 2952791056, 2969568273, 2986345490, 3003122707, 3019899924, 3036677141, 3053454358, 3070231575, 3087008792, 3103786009, 3120563226, 3137340443, 3154117660, 3170894877, 3187672094, 3204449311, 3221226528, 3238003745, 3254780962, 3271558179, 3288335396, 3305112613, 3321889830, 3338667047, 3355444264, 3372221481, 3388998698, 3405775915, 3422553132, 3439330349, 3456107566, 3472884783, 3489662000, 3506439217, 3523216434, 3539993651, 3556770868, 3573548085, 3590325302, 3607102519, 3623879736, 3640656953, 3657434170, 3674211387, 3690988604, 3707765821, 3724543038, 3741320255, 3758097472, 3774874689, 3791651906, 3808429123, 3825206340, 3841983557, 3858760774, 3875537991, 3892315208, 3909092425, 3925869642, 3942646859, 3959424076, 3976201293, 3992978510, 4009755727, 4043310161, 4060087378, 4076864595, 4093641812, 4110419029, 4127196246, 4143973463, 4160750680, 4177527897, 4194305114, 4211082331, 4227859548, 4261413982, 4278191199, 4026540310, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_5 = iso8859_5;
		iso8859_6 = new charmap.ptr("ISO 8859-6", 9, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 155, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 159, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 186, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2751463588, 2902458541, 2885682700, 3137340955, 3204449823, 3238004257, 3254781474, 3271558691, 3288335908, 3305113125, 3321890342, 3338667559, 3355444776, 3372221993, 3388999210, 3405776427, 3422553644, 3439330861, 3456108078, 3472885295, 3489662512, 3506439729, 3523216946, 3539994163, 3556771380, 3573548597, 3590325814, 3607103031, 3623880248, 3640657465, 3657434682, 3758097984, 3774875201, 3791652418, 3808429635, 3825206852, 3841984069, 3858761286, 3875538503, 3892315720, 3909092937, 3925870154, 3942647371, 3959424588, 3976201805, 3992979022, 4009756239, 4026533456, 4043310673, 4060087890, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_6 = iso8859_6;
		iso8859_7 = new charmap.ptr("ISO 8859-7", 10, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 175])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [205, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 149])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 161, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 142, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2734686371, 2785018022, 2801795239, 2818572456, 2835349673, 2868904107, 2885681324, 2902458541, 2952790192, 2969567409, 2986344626, 3003121843, 3070230711, 3137339579, 3170894013, 2852127610, 3019899780, 3036676997, 3053454214, 3087008648, 3103785865, 3120563082, 3154117516, 3187671950, 3204449167, 3221226384, 3238003601, 3254780818, 3271558035, 3288335252, 3305112469, 3321889686, 3338666903, 3355444120, 3372221337, 3388998554, 3405775771, 3422552988, 3439330205, 3456107422, 3472884639, 3489661856, 3506439073, 3539993507, 3556770724, 3573547941, 3590325158, 3607102375, 3623879592, 3640656809, 3657434026, 3674211243, 3690988460, 3707765677, 3724542894, 3741320111, 3758097328, 3774874545, 3791651762, 3808428979, 3825206196, 3841983413, 3858760630, 3875537847, 3892315064, 3909092281, 3925869498, 3942646715, 3959423932, 3976201149, 3992978366, 4009755583, 4026532800, 4043310017, 4060087234, 4076864451, 4093641668, 4110418885, 4127196102, 4143973319, 4160750536, 4177527753, 4194304970, 4211082187, 4227859404, 4244636621, 4261413838, 2936021013, 2701139992, 2717917209, 2751471788, 2768249007, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_7 = iso8859_7;
		iso8859_8 = new charmap.ptr("ISO 8859-8", 11, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 151])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 170, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 143])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2717909154, 2734686371, 2751463588, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3103785145, 3137339579, 3154116796, 3170894013, 3187671230, 2852126935, 3120562423, 3758097872, 3774875089, 3791652306, 3808429523, 3825206740, 3841983957, 3858761174, 3875538391, 3892315608, 3909092825, 3925870042, 3942647259, 3959424476, 3976201693, 3992978910, 4009756127, 4026533344, 4043310561, 4060087778, 4076864995, 4093642212, 4110419429, 4127196646, 4143973863, 4160751080, 4177528297, 4194305514, 4244643854, 4261421071, 3741327383, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_8 = iso8859_8;
		iso8859_10 = new charmap.ptr("ISO 8859-10", 13, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 149])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 184, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2801795239, 2902458541, 2952790192, 3070230711, 3238002881, 3254780098, 3271557315, 3288334532, 3305111749, 3321888966, 3372220617, 3405775051, 3439329485, 3456106702, 3472883919, 3489661136, 3539992787, 3556770004, 3573547221, 3590324438, 3623878872, 3657433306, 3674210523, 3690987740, 3707764957, 3724542174, 3741319391, 3774873825, 3791651042, 3808428259, 3825205476, 3841982693, 3858759910, 3909091561, 3942645995, 3976200429, 3992977646, 4009754863, 4026532080, 4076863731, 4093640948, 4110418165, 4127195382, 4160749816, 4194304250, 4211081467, 4227858684, 4244635901, 4261413118, 3221225728, 3758096641, 2701132036, 2969567493, 3355443468, 3892314381, 2835349776, 3103785233, 2717909266, 2986344723, 3422552342, 3959423255, 3388997912, 3925868825, 2734686498, 3003121955, 2768240936, 3036676393, 2751463722, 3019899179, 3338666286, 3875537199, 2785018166, 3053453623, 4278190392, 2818572603, 3087008060, 3506438469, 4043309382, 2936013130, 3204448587, 3523215692, 4060086605, 2852127072, 3120562529, 2868904294, 3137339751, 3607101800, 4143972713, 2919235946, 3187671403, 3640656242, 4177527155, 2885681533, 3154116990, 3170902037, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_10 = iso8859_10;
		iso8859_13 = new charmap.ptr("ISO 8859-13", 109, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2717909154, 2734686371, 2751463588, 2785018022, 2801795239, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2952790192, 2969567409, 2986344626, 3003121843, 3036676277, 3053453494, 3070230711, 3103785145, 3137339579, 3154116796, 3170894013, 3187671230, 3288334532, 3305111749, 2936012998, 3372220617, 3539992787, 3573547221, 3590324438, 3607101655, 2818572504, 3690987740, 3741319391, 3825205476, 3841982693, 3204448486, 3909091561, 4076863731, 4110418165, 4127195382, 4143972599, 3087007992, 4227858684, 3254780160, 3791651073, 3221225732, 3758096645, 3271557382, 3808428295, 3355443468, 3892314381, 3338666258, 3875537171, 3405775126, 3942646039, 3321889048, 3858759961, 3422552354, 3959423267, 3456106794, 3992977707, 3238002990, 3774873903, 3439329590, 3976200503, 3472884027, 4009754940, 3640656193, 4177527106, 3506438467, 4043309380, 3523215685, 4060086598, 3556770124, 4093641037, 2852127062, 3120562519, 3657433434, 4194304347, 3489661280, 4026532193, 3674210666, 4211081579, 3623879026, 4160749939, 3388998009, 3925868922, 3707765115, 4244636028, 3724542333, 4261413246, 4278198297, 3019907100, 2701139997, 2768248862, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_13 = iso8859_13;
		iso8859_14 = new charmap.ptr("ISO 8859-14", 110, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 184, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 184, 131])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 139, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 184, 138])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 186, 128])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 186, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 184, 139])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 187, 178])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 184, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 184, 159])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 161, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 129])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 186, 129])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 186, 131])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 187, 179])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 186, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 186, 133])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 170])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [225, 185, 171])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2734686371, 2801795239, 2835349673, 2902458541, 2919235758, 3053453494, 3221225664, 3238002881, 3254780098, 3271557315, 3288334532, 3305111749, 3321888966, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3422552268, 3439329485, 3456106702, 3472883919, 3506438353, 3523215570, 3539992787, 3556770004, 3573547221, 3590324438, 3623878872, 3640656089, 3657433306, 3674210523, 3690987740, 3707764957, 3741319391, 3758096608, 3774873825, 3791651042, 3808428259, 3825205476, 3841982693, 3858759910, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3959423212, 3976200429, 3992977646, 4009754863, 4043309297, 4060086514, 4076863731, 4093640948, 4110418165, 4127195382, 4160749816, 4177527033, 4194304250, 4211081467, 4227858684, 4244635901, 4278190335, 2751463690, 2768240907, 2986344736, 3003121953, 3489661300, 4026532213, 3724542326, 4261413239, 2936013176, 2701139458, 2717916675, 2785025546, 2868911627, 2952797726, 2969574943, 3019906624, 3036683841, 3070238294, 3103792727, 3137347168, 3204456033, 3607109226, 4143980139, 2818580096, 3087015553, 2852134530, 3120569987, 3170901636, 3187678853, 2885689074, 3154124531, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_14 = iso8859_14;
		iso8859_15 = new charmap.ptr("ISO 8859-15", 111, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2701131937, 2717909154, 2734686371, 2768240805, 2801795239, 2835349673, 2852126890, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3036676277, 3053453494, 3070230711, 3103785145, 3120562362, 3137339579, 3204448447, 3221225664, 3238002881, 3254780098, 3271557315, 3288334532, 3305111749, 3321888966, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3422552268, 3439329485, 3456106702, 3472883919, 3489661136, 3506438353, 3523215570, 3539992787, 3556770004, 3573547221, 3590324438, 3607101655, 3623878872, 3640656089, 3657433306, 3674210523, 3690987740, 3707764957, 3724542174, 3741319391, 3758096608, 3774873825, 3791651042, 3808428259, 3825205476, 3841982693, 3858759910, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3959423212, 3976200429, 3992977646, 4009754863, 4026532080, 4043309297, 4060086514, 4076863731, 4093640948, 4110418165, 4127195382, 4143972599, 4160749816, 4177527033, 4194304250, 4211081467, 4227858684, 4244635901, 4261413118, 4278190335, 3154116946, 3170894163, 2785018208, 2818572641, 3187671416, 3019899261, 3087008126, 2751471788, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_15 = iso8859_15;
		iso8859_16 = new charmap.ptr("ISO 8859-16", 112, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 129, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [200, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [200, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [200, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [200, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2801795239, 2835349673, 2868904107, 2902458541, 2952790192, 2969567409, 3053453494, 3070230711, 3137339579, 3221225664, 3238002881, 3254780098, 3288334532, 3321888966, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3422552268, 3439329485, 3456106702, 3472883919, 3523215570, 3539992787, 3556770004, 3590324438, 3640656089, 3657433306, 3674210523, 3690987740, 3741319391, 3758096608, 3774873825, 3791651042, 3825205476, 3858759910, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3959423212, 3976200429, 3992977646, 4009754863, 4060086514, 4076863731, 4093640948, 4127195382, 4177527033, 4194304250, 4211081467, 4227858684, 4278190335, 3271557378, 3808428291, 2701132036, 2717909253, 3305111814, 3841982727, 2986344716, 3103785229, 3489661200, 4026532113, 3707765016, 4244635929, 2734686529, 3003121986, 3506438467, 4043309380, 3573547344, 4110418257, 3154116946, 3170894163, 3607101786, 4143972699, 2785018208, 2818572641, 3623879024, 4160749937, 3187671416, 2885681529, 2919235962, 2936013179, 3204448636, 3019899261, 3087008126, 2852127256, 3120562713, 3724542490, 4261413403, 3036684317, 2768248862, 2751471788, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181, 2147549181]));
		$pkg.ISO8859_16 = iso8859_16;
		koi8R = new charmap.ptr("KOI8-R", 2084, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 180])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 188])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 140, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 165])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 140, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 146])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 145, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 149])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 155])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 159])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 129, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 163])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 165])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 167])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 168])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 169])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 170])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 171])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 172])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 170, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2583691424, 3204448425, 2617245872, 2634023090, 2650800311, 2667577591, 3003122689, 3774874640, 3791651857, 4143973394, 3875537939, 3825206292, 3841983509, 4127196182, 4194305047, 3909092376, 3925869593, 3942646810, 3959424027, 3976201244, 3992978461, 4009755678, 4026532895, 4060087328, 4076864545, 4093641762, 4110418979, 3858760740, 3892315173, 3808429094, 4261413927, 4211082280, 4244636713, 4278191146, 4177527851, 4160750636, 4227859501, 3758097454, 4043310127, 3238003760, 3254780977, 3607102514, 3338667059, 3288335412, 3305112629, 3590325302, 3657434167, 3372221496, 3388998713, 3405775930, 3422553147, 3439330364, 3456107581, 3472884798, 3489662015, 3523216448, 3539993665, 3556770882, 3573548099, 3321889860, 3355444293, 3271558214, 3724543047, 3674211400, 3707765833, 3741320266, 3640656971, 3623879756, 3690988621, 3221226574, 3506439247, 2734687313, 2499813913, 2516591130, 2533368392, 2550145636, 2566922853, 2466259744, 2600477473, 2147493120, 2164270338, 2181047564, 2197824784, 2214602004, 2231379224, 2248156444, 2264933668, 2281710892, 2298488116, 2315265340, 2684364112, 2701141329, 2717918546, 2751472979, 2768250196, 2785027413, 2801804630, 2818581847, 2835359064, 2852136281, 2868913498, 2885690715, 2902467932, 2919245149, 2936022366, 2952799583, 2969576800, 2986354017, 3019908450, 3036685667, 3053462884, 3070240101, 3087017318, 3103794535, 3120571752, 3137348969, 3154126186, 3170903403, 3187680620, 2332042624, 2348819844, 2365597064, 2382374284, 2399151504, 2415928721, 2432705938, 2449483155, 2483037600]));
		$pkg.KOI8R = koi8R;
		koi8U = new charmap.ptr("KOI8-U", 2088, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 180])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 148, 188])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 140, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 150, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 165])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 140, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 146])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 148, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 148])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 151, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 155])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [210, 145, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 159])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 132, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 163])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 135, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 167])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 168])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 169])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 170])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [210, 144, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 149, 172])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 170, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2583691424, 3204448425, 2617245872, 2634023090, 2650800311, 2667577591, 3003122689, 3019899908, 3053454342, 3070231559, 3774874640, 3791651857, 4143973394, 3875537939, 3825206292, 3841983509, 4127196182, 4194305047, 3909092376, 3925869593, 3942646810, 3959424027, 3976201244, 3992978461, 4009755678, 4026532895, 4060087328, 4076864545, 4093641762, 4110418979, 3858760740, 3892315173, 3808429094, 4261413927, 4211082280, 4244636713, 4278191146, 4177527851, 4160750636, 4227859501, 3758097454, 4043310127, 3238003760, 3254780977, 3607102514, 3338667059, 3288335412, 3305112629, 3590325302, 3657434167, 3372221496, 3388998713, 3405775930, 3422553147, 3439330364, 3456107581, 3472884798, 3489662015, 3523216448, 3539993665, 3556770882, 3573548099, 3321889860, 3355444293, 3271558214, 3724543047, 3674211400, 3707765833, 3741320266, 3640656971, 3623879756, 3690988621, 3221226574, 3506439247, 2734687313, 2751464532, 2785018966, 2801796183, 3170894992, 2902459537, 2499813913, 2516591130, 2533368392, 2550145636, 2566922853, 2466259744, 2600477473, 2147493120, 2164270338, 2181047564, 2197824784, 2214602004, 2231379224, 2248156444, 2264933668, 2281710892, 2298488116, 2315265340, 2684364112, 2701141329, 2717918546, 2768250196, 2818581847, 2835359064, 2852136281, 2868913498, 2885690715, 2919245149, 2936022366, 2952799583, 2969576800, 2986354017, 3036685667, 3087017318, 3103794535, 3120571752, 3137348969, 3154126186, 3187680620, 2332042624, 2348819844, 2365597064, 2382374284, 2399151504, 2415928721, 2432705938, 2449483155, 2483037600]));
		$pkg.KOI8U = koi8U;
		macintosh = new charmap.ptr("Macintosh", 2027, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 160])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 158])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 165])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 143])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 128, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 171])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 134])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 151, 138])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 129, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 172, 129])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 172, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 163, 191])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 135, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 3388997792, 3238002849, 2717909154, 2734686371, 3019899045, 2751463591, 2885681320, 2835349673, 3137339562, 3338666155, 3254780076, 2818572462, 4160749743, 2701131952, 2969567409, 2868904116, 3036676277, 2785018038, 3774873783, 4227858616, 3154116794, 3355443387, 3221225663, 3405775040, 3875537089, 3841982658, 3422552259, 2147483844, 2164261061, 2919235782, 2181038279, 3909091528, 2197815497, 3858759882, 3892314315, 3976200396, 3925868749, 3942645966, 3959423183, 2214592721, 4043309266, 3992977619, 4009754836, 3439329493, 2231369942, 2936013016, 4093640921, 4060086490, 4076863707, 2248147164, 2801795295, 2281701600, 2264924385, 2298478818, 2332033251, 2315256036, 2348810469, 3187671270, 2365587687, 2399142120, 2382364905, 2415919338, 2432696555, 2466250988, 2449473773, 2483028206, 2499805423, 2516582641, 2550137074, 2533359859, 2566914292, 2600468725, 2583691510, 3590324471, 3204448504, 2634023161, 2617245946, 2650800379, 2667577596, 3623878911, 4110418225, 3456106834, 3472884051, 3640656248, 3288334738, 4127195846, 4278190791, 4177527512, 4194304729, 4211081946, 4261413595, 4143973084, 4244636381, 3170894761, 3103785920, 3489669139, 3506446356, 3556778008, 3573555225, 3791659034, 3523223580, 3540000797, 3808436254, 2684362784, 3758104609, 2768248866, 3372228646, 3825213488, 3690995769, 3707772986, 3657441348, 3674218668, 2852135202, 3053462018, 3321897478, 3087016463, 3070239249, 3271565850, 2952798750, 3120570923, 3305120328, 2902467168, 2986353252, 3003130469, 3607111114, 4026595583, 3724606209, 3741383426]));
		$pkg.Macintosh = macintosh;
		macintoshCyrillic = new charmap.ptr("Macintosh Cyrillic", 10002, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 175, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [210, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 160])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 158])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 165])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [210, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 137, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 136, 134])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 149, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 159, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 150])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 142, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 3388997792, 2734686371, 2751463591, 2835349673, 3338666155, 3254780076, 2818572462, 2701131952, 2969567409, 3036676277, 2785018038, 3355443387, 3590324471, 3288334738, 3707765761, 2868904962, 2919236611, 3087008772, 3238003717, 2801796102, 3120563207, 3070231560, 3154117641, 3187672074, 3405775883, 3439330316, 3623879694, 3657434127, 2147484688, 2164261905, 2181039122, 2197816339, 2214593556, 2231370773, 2248147990, 2264925207, 2281702424, 2298479641, 2315256858, 2332034075, 2348811292, 2365588509, 2382365726, 2399142943, 2415920160, 2432697377, 2449474594, 2466251811, 2483029028, 2499806245, 2516583462, 2533360679, 2550137896, 2566915113, 2583692330, 2600469547, 2617246764, 2634023981, 2650801198, 2667578415, 3758097456, 3774874673, 3791651890, 3808429107, 3825206324, 3841983541, 3858760758, 3875537975, 3892315192, 3909092409, 3925869626, 3942646843, 3959424060, 3976201277, 3992978494, 4009755711, 4026532928, 4043310145, 4060087362, 4076864579, 4093641796, 4110419013, 4127196230, 4143973447, 4160750664, 4177527881, 4194305098, 4211082315, 4227859532, 4244636749, 4261413966, 3741320271, 3724543057, 2885682258, 2936013907, 3103786068, 3472884821, 3019899990, 3137340503, 3221226584, 3170894937, 3204449370, 3422553179, 3456107612, 3640656990, 3674211423, 2717910160, 3053454481, 3489669139, 3506446356, 3556778008, 3573555225, 3523223580, 3540000797, 3607109662, 2684362784, 2768248866, 3372228646, 4278198444, 3690995990, 2852135202, 3321897478, 3271565850, 2952798750, 3305120328, 2902467168, 2986353252, 3003130469]));
		$pkg.MacintoshCyrillic = macintoshCyrillic;
		windows874 = new charmap.ptr("Windows 874", 2109, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 129])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 131])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 133])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 134])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 135])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 137])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 138])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 139])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 141])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 143])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 149])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 155])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 159])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 163])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 165])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 167])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 168])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 169])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 170])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 171])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 173])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 174])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 175])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 177])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 178])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 179])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 180])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 181])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 182])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 183])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 184])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 184, 191])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 129])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 131])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 133])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 134])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 135])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 137])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 138])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 139])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 141])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 143])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 149])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [224, 185, 155])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2701135361, 2717912578, 2734689795, 2751467012, 2768244229, 2785021446, 2801798663, 2818575880, 2835353097, 2852130314, 2868907531, 2885684748, 2902461965, 2919239182, 2936016399, 2952793616, 2969570833, 2986348050, 3003125267, 3019902484, 3036679701, 3053456918, 3070234135, 3087011352, 3103788569, 3120565786, 3137343003, 3154120220, 3170897437, 3187674654, 3204451871, 3221229088, 3238006305, 3254783522, 3271560739, 3288337956, 3305115173, 3321892390, 3338669607, 3355446824, 3372224041, 3389001258, 3405778475, 3422555692, 3439332909, 3456110126, 3472887343, 3489664560, 3506441777, 3523218994, 3539996211, 3556773428, 3573550645, 3590327862, 3607105079, 3623882296, 3640659513, 3657436730, 3741322815, 3758100032, 3774877249, 3791654466, 3808431683, 3825208900, 3841986117, 3858763334, 3875540551, 3892317768, 3909094985, 3925872202, 3942649419, 3959426636, 3976203853, 3992981070, 4009758287, 4026535504, 4043312721, 4060089938, 4076867155, 4093644372, 4110421589, 4127198806, 4143976023, 4160753240, 4177530457, 4194307674, 4211084891, 2516590611, 2533367828, 2432704536, 2449481753, 2466258972, 2483036189, 2499813410, 2231377958, 2147492012, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows874 = windows874;
		windows1250 = new charmap.ptr("Windows 1250", 2250, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 185, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 153, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2751463588, 2785018022, 2801795239, 2818572456, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2952790192, 2969567409, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3137339579, 3238002881, 3254780098, 3288334532, 3338666183, 3372220617, 3405775051, 3439329485, 3456106702, 3539992787, 3556770004, 3590324438, 3607101655, 3657433306, 3690987740, 3707764957, 3741319391, 3774873825, 3791651042, 3825205476, 3875537127, 3909091561, 3942645995, 3976200429, 3992977646, 4076863731, 4093640948, 4127195382, 4143972599, 4194304250, 4227858684, 4244635901, 3271557378, 3808428291, 2768240900, 3103785221, 3321889030, 3858759943, 3355443468, 3892314381, 3472883982, 4009754895, 3489661200, 4026532113, 3388997912, 3925868825, 3422552346, 3959423259, 3305111865, 3841982778, 3154116925, 3187671358, 2734686529, 3003121986, 3506438467, 4043309380, 3523215687, 4060086600, 3573547344, 4110418257, 3221225812, 3758096725, 3623879000, 4160749913, 2348810586, 2617246043, 2852127070, 3120562527, 2315256160, 2583691617, 3724542306, 4261413219, 2365587812, 2634023269, 3640656238, 4177527151, 3674210672, 4211081585, 2399142265, 2667577722, 2936013179, 3204448636, 2382365053, 2650800510, 2701132487, 2717909720, 4278190809, 2986345179, 3170894557, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1250 = windows1250;
		windows1251 = new charmap.ptr("Windows 1251", 2251, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 131, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 137, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 153, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [210, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [210, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 145, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 150])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [208, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [209, 143, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2751463588, 2785018022, 2801795239, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2952790192, 2969567409, 3036676277, 3053453494, 3070230711, 3137339579, 2818573313, 2147484674, 2164261891, 2852127748, 3170894853, 2986345478, 2936013831, 2734687240, 2315256841, 2348811274, 2382365707, 2365588492, 2701132814, 2399142927, 3221226512, 3238003729, 3254780946, 3271558163, 3288335380, 3305112597, 3321889814, 3338667031, 3355444248, 3372221465, 3388998682, 3405775899, 3422553116, 3439330333, 3456107550, 3472884767, 3489661984, 3506439201, 3523216418, 3539993635, 3556770852, 3573548069, 3590325286, 3607102503, 3623879720, 3640656937, 3657434154, 3674211371, 3690988588, 3707765805, 3724543022, 3741320239, 3758097456, 3774874673, 3791651890, 3808429107, 3825206324, 3841983541, 3858760758, 3875537975, 3892315192, 3909092409, 3925869626, 3942646843, 3959424060, 3976201277, 3992978494, 4009755711, 4026532928, 4043310145, 4060087362, 4076864579, 4093641796, 4110419013, 4127196230, 4143973447, 4160750664, 4177527881, 4194305098, 4211082315, 4227859532, 4244636749, 4261413966, 4278191183, 3087008849, 2415920210, 2197816403, 3120563284, 3187672149, 3003122774, 3204449367, 3154117720, 2583692377, 2617246810, 2650801243, 2634024028, 2717910110, 2667578463, 2768241808, 3019900049, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2281709740, 3103793430, 2566922530, 2550202365]));
		$pkg.Windows1251 = windows1251;
		windows1252 = new charmap.ptr("Windows 1252", 2252, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 134, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 156, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2701131937, 2717909154, 2734686371, 2751463588, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2852126890, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3103785145, 3120562362, 3137339579, 3154116796, 3170894013, 3187671230, 3204448447, 3221225664, 3238002881, 3254780098, 3271557315, 3288334532, 3305111749, 3321888966, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3422552268, 3439329485, 3456106702, 3472883919, 3489661136, 3506438353, 3523215570, 3539992787, 3556770004, 3573547221, 3590324438, 3607101655, 3623878872, 3640656089, 3657433306, 3674210523, 3690987740, 3707764957, 3724542174, 3741319391, 3758096608, 3774873825, 3791651042, 3808428259, 3825205476, 3841982693, 3858759910, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3959423212, 3976200429, 3992977646, 4009754863, 4026532080, 4043309297, 4060086514, 4076863731, 4093640948, 4110418165, 4127195382, 4143972599, 4160749816, 4177527033, 4194304250, 4211081467, 4227858684, 4244635901, 4261413118, 4278190335, 2348810578, 2617246035, 2315256160, 2583691617, 2667577720, 2382365053, 2650800510, 2197815698, 2281702086, 2550137564, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1252 = windows1252;
		windows1253 = new charmap.ptr("Windows 1253", 2253, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 149])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 161, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [206, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [207, 142, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2734686371, 2751463588, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2952790192, 2969567409, 2986344626, 3003121843, 3036676277, 3053453494, 3070230711, 3137339579, 3170894013, 2197815698, 3019899780, 2701132677, 2717909894, 3087008648, 3103785865, 3120563082, 3154117516, 3187671950, 3204449167, 3221226384, 3238003601, 3254780818, 3271558035, 3288335252, 3305112469, 3321889686, 3338666903, 3355444120, 3372221337, 3388998554, 3405775771, 3422552988, 3439330205, 3456107422, 3472884639, 3489661856, 3506439073, 3539993507, 3556770724, 3573547941, 3590325158, 3607102375, 3623879592, 3640656809, 3657434026, 3674211243, 3690988460, 3707765677, 3724542894, 3741320111, 3758097328, 3774874545, 3791651762, 3808428979, 3825206196, 3841983413, 3858760630, 3875537847, 3892315064, 3909092281, 3925869498, 3942646715, 3959423932, 3976201149, 3992978366, 4009755583, 4026532800, 4043310017, 4060087234, 4076864451, 4093641668, 4110418885, 4127196102, 4143973319, 4160750536, 4177527753, 4194304970, 4211082187, 4227859404, 4244636621, 4261413838, 2516590611, 2533367828, 2936021013, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1253 = windows1253;
		windows1254 = new charmap.ptr("Windows 1254", 2254, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 134, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 156, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2701131937, 2717909154, 2734686371, 2751463588, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2852126890, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3103785145, 3120562362, 3137339579, 3154116796, 3170894013, 3187671230, 3204448447, 3221225664, 3238002881, 3254780098, 3271557315, 3288334532, 3305111749, 3321888966, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3422552268, 3439329485, 3456106702, 3472883919, 3506438353, 3523215570, 3539992787, 3556770004, 3573547221, 3590324438, 3607101655, 3623878872, 3640656089, 3657433306, 3674210523, 3690987740, 3741319391, 3758096608, 3774873825, 3791651042, 3808428259, 3825205476, 3841982693, 3858759910, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3959423212, 3976200429, 3992977646, 4009754863, 4043309297, 4060086514, 4076863731, 4093640948, 4110418165, 4127195382, 4143972599, 4160749816, 4177527033, 4194304250, 4211081467, 4227858684, 4278190335, 3489661214, 4026532127, 3707765040, 4244635953, 2348810578, 2617246035, 3724542302, 4261413215, 2315256160, 2583691617, 2667577720, 2197815698, 2281702086, 2550137564, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1254 = windows1254;
		windows1255 = new charmap.ptr("Windows 1255", 2255, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 134, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 156, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 170])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 185, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [214, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 180, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 157, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 158, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [215, 170, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 143])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2701131937, 2717909154, 2734686371, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3103785145, 3137339579, 3154116796, 3170894013, 3187671230, 3204448447, 2852126935, 3120562423, 2197815698, 2281702086, 2550137564, 3221226928, 3238004145, 3254781362, 3271558579, 3288335796, 3305113013, 3321890230, 3338667447, 3355444664, 3372221881, 3405776315, 3422553532, 3439330749, 3456107966, 3472885183, 3489662400, 3506439617, 3523216834, 3539994051, 3758097872, 3774875089, 3791652306, 3808429523, 3825206740, 3841983957, 3858761174, 3875538391, 3892315608, 3909092825, 3925870042, 3942647259, 3959424476, 3976201693, 3992978910, 4009756127, 4026533344, 4043310561, 4060087778, 4076864995, 4093642212, 4110419429, 4127196646, 4143973863, 4160751080, 4177528297, 4194305514, 3556771312, 3573548529, 3590325746, 3607102963, 3623880180, 4244643854, 4261421071, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2751471786, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1255 = windows1255;
		windows1256 = new charmap.ptr("Windows 1256", 2256, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 190, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 134, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 185, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 175, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 169, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 145, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 141])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [218, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [219, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [216, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [217, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 143])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [219, 146, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2717909154, 2734686371, 2751463588, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3103785145, 3137339579, 3154116796, 3170894013, 3187671230, 3607101655, 3758096608, 3791651042, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3992977646, 4009754863, 4093640948, 4143972599, 4177527033, 4211081467, 4227858684, 2348810578, 2617246035, 2197815698, 2281702086, 2701133324, 3120563739, 3204449823, 3238004257, 3254781474, 3271558691, 3288335908, 3305113125, 3321890342, 3338667559, 3355444776, 3372221993, 3388999210, 3405776427, 3422553644, 3439330861, 3456108078, 3472885295, 3489662512, 3506439729, 3523216946, 3539994163, 3556771380, 3573548597, 3590325814, 3623880247, 3640657464, 3657434681, 3674211898, 3690989120, 3707766337, 3724543554, 3741320771, 3774875204, 3808429637, 3825206854, 3841984071, 3858761288, 3959424585, 3976201802, 4026533451, 4043310668, 4060087885, 4076865102, 4110419535, 4127196752, 4160751185, 4194305618, 2315257465, 2164262526, 2365589126, 2399143560, 2583692945, 2382366360, 2550138537, 2415920815, 2667579066, 2852128446, 3221227201, 4278191826, 2634031116, 2650808333, 4244643854, 4261421071, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2147492012, 2566922530]));
		$pkg.Windows1256 = windows1256;
		windows1257 = new charmap.ptr("Windows 1257", 2257, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 155, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 146, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 140, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 149, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 153, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2717909154, 2734686371, 2751463588, 2785018022, 2801795239, 2365587624, 2835349673, 2868904107, 2885681324, 2902458541, 2919235758, 2634023087, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 2399142072, 3103785145, 3137339579, 3154116796, 3170894013, 3187671230, 3288334532, 3305111749, 2936012998, 3372220617, 3539992787, 3573547221, 3590324438, 3607101655, 2818572504, 3690987740, 3741319391, 3825205476, 3841982693, 3204448486, 3909091561, 4076863731, 4110418165, 4127195382, 4143972599, 3087007992, 4227858684, 3254780160, 3791651073, 3221225732, 3758096645, 3271557382, 3808428295, 3355443468, 3892314381, 3338666258, 3875537171, 3405775126, 3942646039, 3321889048, 3858759961, 3422552354, 3959423267, 3456106794, 3992977707, 3238002990, 3774873903, 3439329590, 3976200503, 3472884027, 4009754940, 3640656193, 4177527106, 3506438467, 4043309380, 3523215685, 4060086598, 3556770124, 4093641037, 2852127062, 3120562519, 3657433434, 4194304347, 3489661280, 4026532193, 3674210666, 4211081579, 3623879026, 4160749939, 3388998009, 3925868922, 3707765115, 4244636028, 3724542333, 4261413246, 2382365383, 4278190809, 2650800859, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1257 = windows1257;
		windows1258 = new charmap.ptr("Windows 1258", 2258, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 154])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 161])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 134, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 185])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 146, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 148])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [203, 156, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 132, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 128, 186])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 147, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 191, 189])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [197, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 172, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 176, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 178, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 181, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 189, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 190, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [194, 191, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 130, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 132, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 133, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 134, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 135, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 136, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 138, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 139, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [204, 128, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 141, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 142, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 143, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 144, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [204, 137, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 147, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 148, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 150, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 151, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 152, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 153, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 154, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 155, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 156, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [204, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 159, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 160, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 162, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 131, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 164, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 165, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 166, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 167, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 168, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 169, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 170, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 171, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [204, 129, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 173, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 174, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 175, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [196, 145, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 177, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [204, 163, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 179, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 180, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 161, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 182, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 183, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 184, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 185, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 186, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 187, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 188, 0])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [198, 176, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [226, 130, 171])), new utf8Enc.ptr(2, $toNativeArray($kindUint8, [195, 191, 0]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2684354720, 2701131937, 2717909154, 2734686371, 2751463588, 2768240805, 2785018022, 2801795239, 2818572456, 2835349673, 2852126890, 2868904107, 2885681324, 2902458541, 2919235758, 2936012975, 2952790192, 2969567409, 2986344626, 3003121843, 3019899060, 3036676277, 3053453494, 3070230711, 3087007928, 3103785145, 3120562362, 3137339579, 3154116796, 3170894013, 3187671230, 3204448447, 3221225664, 3238002881, 3254780098, 3288334532, 3305111749, 3321888966, 3338666183, 3355443400, 3372220617, 3388997834, 3405775051, 3439329485, 3456106702, 3472883919, 3506438353, 3539992787, 3556770004, 3590324438, 3607101655, 3623878872, 3640656089, 3657433306, 3674210523, 3690987740, 3741319391, 3758096608, 3774873825, 3791651042, 3825205476, 3841982693, 3858759910, 3875537127, 3892314344, 3909091561, 3925868778, 3942645995, 3976200429, 3992977646, 4009754863, 4043309297, 4076863731, 4093640948, 4127195382, 4143972599, 4160749816, 4177527033, 4194304250, 4211081467, 4227858684, 4278190335, 3271557378, 3808428291, 3489661200, 4026532113, 2348810578, 2617246035, 2667577720, 2197815698, 3573547424, 4110418337, 3707765167, 4244636080, 2281702086, 2550137564, 3422552832, 3959423745, 3724542723, 3523216137, 4060087075, 2516590611, 2533367828, 2432704536, 2449481753, 2181046298, 2466258972, 2483036189, 2214600734, 2248155168, 2264932385, 2499813410, 2231377958, 2298486832, 2332041273, 2600476730, 4261421227, 2147492012, 2566922530, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397, 2164326397]));
		$pkg.Windows1258 = windows1258;
		xUserDefined = new charmap.ptr("X-User-Defined", 10001, true, 128, 26, $toNativeArray($kindStruct, [new utf8Enc.ptr(1, $toNativeArray($kindUint8, [0, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [1, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [2, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [3, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [4, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [5, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [6, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [7, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [8, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [9, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [10, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [11, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [12, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [13, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [14, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [15, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [16, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [17, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [18, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [19, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [20, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [21, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [22, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [23, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [24, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [25, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [26, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [27, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [28, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [29, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [30, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [31, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [32, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [33, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [34, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [35, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [36, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [37, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [38, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [39, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [40, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [41, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [42, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [43, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [44, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [45, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [46, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [47, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [48, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [49, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [50, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [51, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [52, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [53, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [54, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [55, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [56, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [57, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [58, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [59, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [60, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [61, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [62, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [63, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [64, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [65, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [66, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [67, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [68, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [69, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [70, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [71, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [72, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [73, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [74, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [75, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [76, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [77, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [78, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [79, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [80, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [81, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [82, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [83, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [84, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [85, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [86, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [87, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [88, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [89, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [90, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [91, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [92, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [93, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [94, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [95, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [96, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [97, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [98, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [99, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [100, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [101, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [102, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [103, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [104, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [105, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [106, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [107, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [108, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [109, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [110, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [111, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [112, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [113, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [114, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [115, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [116, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [117, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [118, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [119, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [120, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [121, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [122, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [123, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [124, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [125, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [126, 0, 0])), new utf8Enc.ptr(1, $toNativeArray($kindUint8, [127, 0, 0])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 129])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 131])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 133])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 134])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 135])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 137])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 138])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 139])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 141])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 143])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 149])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 155])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 159])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 163])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 165])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 167])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 168])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 169])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 170])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 171])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 173])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 174])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 175])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 177])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 178])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 179])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 180])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 181])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 182])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 183])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 184])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 187])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 188])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 190])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 158, 191])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 128])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 129])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 130])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 131])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 132])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 133])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 134])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 135])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 136])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 137])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 138])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 139])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 140])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 141])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 142])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 143])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 144])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 145])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 146])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 147])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 148])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 149])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 150])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 151])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 152])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 153])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 154])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 155])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 156])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 157])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 158])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 159])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 160])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 161])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 162])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 163])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 164])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 165])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 166])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 167])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 168])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 169])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 170])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 171])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 172])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 173])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 174])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 175])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 176])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 177])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 178])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 179])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 180])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 181])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 182])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 183])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 184])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 185])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 186])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 187])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 188])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 189])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 190])), new utf8Enc.ptr(3, $toNativeArray($kindUint8, [239, 159, 191]))]), $toNativeArray($kindUint32, [0, 16777217, 33554434, 50331651, 67108868, 83886085, 100663302, 117440519, 134217736, 150994953, 167772170, 184549387, 201326604, 218103821, 234881038, 251658255, 268435472, 285212689, 301989906, 318767123, 335544340, 352321557, 369098774, 385875991, 402653208, 419430425, 436207642, 452984859, 469762076, 486539293, 503316510, 520093727, 536870944, 553648161, 570425378, 587202595, 603979812, 620757029, 637534246, 654311463, 671088680, 687865897, 704643114, 721420331, 738197548, 754974765, 771751982, 788529199, 805306416, 822083633, 838860850, 855638067, 872415284, 889192501, 905969718, 922746935, 939524152, 956301369, 973078586, 989855803, 1006633020, 1023410237, 1040187454, 1056964671, 1073741888, 1090519105, 1107296322, 1124073539, 1140850756, 1157627973, 1174405190, 1191182407, 1207959624, 1224736841, 1241514058, 1258291275, 1275068492, 1291845709, 1308622926, 1325400143, 1342177360, 1358954577, 1375731794, 1392509011, 1409286228, 1426063445, 1442840662, 1459617879, 1476395096, 1493172313, 1509949530, 1526726747, 1543503964, 1560281181, 1577058398, 1593835615, 1610612832, 1627390049, 1644167266, 1660944483, 1677721700, 1694498917, 1711276134, 1728053351, 1744830568, 1761607785, 1778385002, 1795162219, 1811939436, 1828716653, 1845493870, 1862271087, 1879048304, 1895825521, 1912602738, 1929379955, 1946157172, 1962934389, 1979711606, 1996488823, 2013266040, 2030043257, 2046820474, 2063597691, 2080374908, 2097152125, 2113929342, 2130706559, 2147547008, 2164324225, 2181101442, 2197878659, 2214655876, 2231433093, 2248210310, 2264987527, 2281764744, 2298541961, 2315319178, 2332096395, 2348873612, 2365650829, 2382428046, 2399205263, 2415982480, 2432759697, 2449536914, 2466314131, 2483091348, 2499868565, 2516645782, 2533422999, 2550200216, 2566977433, 2583754650, 2600531867, 2617309084, 2634086301, 2650863518, 2667640735, 2684417952, 2701195169, 2717972386, 2734749603, 2751526820, 2768304037, 2785081254, 2801858471, 2818635688, 2835412905, 2852190122, 2868967339, 2885744556, 2902521773, 2919298990, 2936076207, 2952853424, 2969630641, 2986407858, 3003185075, 3019962292, 3036739509, 3053516726, 3070293943, 3087071160, 3103848377, 3120625594, 3137402811, 3154180028, 3170957245, 3187734462, 3204511679, 3221288896, 3238066113, 3254843330, 3271620547, 3288397764, 3305174981, 3321952198, 3338729415, 3355506632, 3372283849, 3389061066, 3405838283, 3422615500, 3439392717, 3456169934, 3472947151, 3489724368, 3506501585, 3523278802, 3540056019, 3556833236, 3573610453, 3590387670, 3607164887, 3623942104, 3640719321, 3657496538, 3674273755, 3691050972, 3707828189, 3724605406, 3741382623, 3758159840, 3774937057, 3791714274, 3808491491, 3825268708, 3842045925, 3858823142, 3875600359, 3892377576, 3909154793, 3925932010, 3942709227, 3959486444, 3976263661, 3993040878, 4009818095, 4026595312, 4043372529, 4060149746, 4076926963, 4093704180, 4110481397, 4127258614, 4144035831, 4160813048, 4177590265, 4194367482, 4211144699, 4227921916, 4244699133, 4261476350, 4278253567]));
		$pkg.XUserDefined = xUserDefined;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/japanese"] = (function() {
	var $pkg = {}, $init, errors, encoding, internal, identifier, transform, utf8, eucJPDecoder, eucJPEncoder, iso2022JPDecoder, iso2022JPEncoder, shiftJISDecoder, shiftJISEncoder, ptrType, ptrType$1, sliceType$1, eucJP, eucJP_ptr, errInvalidEUCJP, iso2022JP, iso2022JP_ptr, errInvalidISO2022JP, shiftJIS, shiftJIS_ptr, errInvalidShiftJIS, jis0208Decode, jis0212Decode, encode0, encode1, encode2, encode3, encode4, encode5, x, x$1, x$2, x$3, x$4, init, iso2022JPNewDecoder, iso2022JPNewEncoder;
	errors = $packages["errors"];
	encoding = $packages["golang.org/x/text/encoding"];
	internal = $packages["golang.org/x/text/encoding/internal"];
	identifier = $packages["golang.org/x/text/encoding/internal/identifier"];
	transform = $packages["golang.org/x/text/transform"];
	utf8 = $packages["unicode/utf8"];
	eucJPDecoder = $pkg.eucJPDecoder = $newType(0, $kindStruct, "japanese.eucJPDecoder", "eucJPDecoder", "golang.org/x/text/encoding/japanese", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	eucJPEncoder = $pkg.eucJPEncoder = $newType(0, $kindStruct, "japanese.eucJPEncoder", "eucJPEncoder", "golang.org/x/text/encoding/japanese", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	iso2022JPDecoder = $pkg.iso2022JPDecoder = $newType(4, $kindInt, "japanese.iso2022JPDecoder", "iso2022JPDecoder", "golang.org/x/text/encoding/japanese", null);
	iso2022JPEncoder = $pkg.iso2022JPEncoder = $newType(4, $kindInt, "japanese.iso2022JPEncoder", "iso2022JPEncoder", "golang.org/x/text/encoding/japanese", null);
	shiftJISDecoder = $pkg.shiftJISDecoder = $newType(0, $kindStruct, "japanese.shiftJISDecoder", "shiftJISDecoder", "golang.org/x/text/encoding/japanese", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	shiftJISEncoder = $pkg.shiftJISEncoder = $newType(0, $kindStruct, "japanese.shiftJISEncoder", "shiftJISEncoder", "golang.org/x/text/encoding/japanese", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	ptrType = $ptrType(iso2022JPDecoder);
	ptrType$1 = $ptrType(iso2022JPEncoder);
	sliceType$1 = $sliceType($Uint8);
	eucJPDecoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, atEOF, c0, c1, c1$1, c1$2, c2, dst, err, i, i$1, nDst, nSrc, r, size, src, x$5, x$6, x$7, x$8;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		loop:
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			if (c0 < 128) {
				_tmp$2 = (c0 >> 0); _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			} else if (c0 === 142) {
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				c1 = (x$5 = nSrc + 1 >> 0, ((x$5 < 0 || x$5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$5]));
				if (c1 < 161 || 223 < c1) {
					err = errInvalidEUCJP;
					break loop;
				}
				_tmp$4 = (c1 >> 0) + 65216 >> 0; _tmp$5 = 2; r = _tmp$4; size = _tmp$5;
			} else if (c0 === 143) {
				if ((nSrc + 2 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				c1$1 = (x$6 = nSrc + 1 >> 0, ((x$6 < 0 || x$6 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$6]));
				if (c1$1 < 161 || 254 < c1$1) {
					err = errInvalidEUCJP;
					break loop;
				}
				c2 = (x$7 = nSrc + 2 >> 0, ((x$7 < 0 || x$7 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$7]));
				if (c2 < 161 || 254 < c2) {
					err = errInvalidEUCJP;
					break loop;
				}
				_tmp$6 = 65533; _tmp$7 = 3; r = _tmp$6; size = _tmp$7;
				i = (((c1$1 - 161 << 24 >>> 24) >> 0) * 94 >> 0) + ((c2 - 161 << 24 >>> 24) >> 0) >> 0;
				if (i < 7211) {
					r = (((i < 0 || i >= jis0212Decode.length) ? $throwRuntimeError("index out of range") : jis0212Decode[i]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				}
			} else if (161 <= c0 && c0 <= 254) {
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				c1$2 = (x$8 = nSrc + 1 >> 0, ((x$8 < 0 || x$8 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$8]));
				if (c1$2 < 161 || 254 < c1$2) {
					err = errInvalidEUCJP;
					break loop;
				}
				_tmp$8 = 65533; _tmp$9 = 2; r = _tmp$8; size = _tmp$9;
				i$1 = (((c0 - 161 << 24 >>> 24) >> 0) * 94 >> 0) + ((c1$2 - 161 << 24 >>> 24) >> 0) >> 0;
				if (i$1 < 11104) {
					r = (((i$1 < 0 || i$1 >= jis0208Decode.length) ? $throwRuntimeError("index out of range") : jis0208Decode[i$1]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				}
			} else {
				err = errInvalidEUCJP;
				break loop;
			}
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break loop;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		}
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			err = errInvalidEUCJP;
		}
		_tmp$10 = nDst; _tmp$11 = nSrc; _tmp$12 = err; nDst = _tmp$10; nSrc = _tmp$11; err = _tmp$12;
		return [nDst, nSrc, err];
	};
	eucJPDecoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	eucJPEncoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, dst, err, nDst, nSrc, r, size, src, x$10, x$11, x$12, x$13, x$14, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			/* */ if (r < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r < 128) { */ case 3:
				size = 1;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break; */ $s = 2; continue;
					}
				}
				/* */ if (19968 <= r && r < 40870) { $s = 6; continue; }
				/* */ if (8208 <= r && r < 9840) { $s = 7; continue; }
				/* */ if (12288 <= r && r < 13262) { $s = 8; continue; }
				/* */ if (161 <= r && r < 1120) { $s = 9; continue; }
				/* */ if (63785 <= r && r < 64046) { $s = 10; continue; }
				/* */ if (65281 <= r && r < 65510) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (19968 <= r && r < 40870) { */ case 6:
					r = ((x$5 = r - 19968 >> 0, ((x$5 < 0 || x$5 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$5])) >> 0);
					/* */ if (!((r === 0))) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (!((r === 0))) { */ case 13:
						/* goto write2or3 */ $s = 15; continue;
					/* } */ case 14:
					$s = 12; continue;
				/* } else if (8208 <= r && r < 9840) { */ case 7:
					r = ((x$6 = r - 8208 >> 0, ((x$6 < 0 || x$6 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$6])) >> 0);
					/* */ if (!((r === 0))) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!((r === 0))) { */ case 16:
						/* goto write2or3 */ $s = 15; continue;
					/* } */ case 17:
					$s = 12; continue;
				/* } else if (12288 <= r && r < 13262) { */ case 8:
					r = ((x$7 = r - 12288 >> 0, ((x$7 < 0 || x$7 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$7])) >> 0);
					/* */ if (!((r === 0))) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!((r === 0))) { */ case 18:
						/* goto write2or3 */ $s = 15; continue;
					/* } */ case 19:
					$s = 12; continue;
				/* } else if (161 <= r && r < 1120) { */ case 9:
					r = ((x$8 = r - 161 >> 0, ((x$8 < 0 || x$8 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$8])) >> 0);
					/* */ if (!((r === 0))) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!((r === 0))) { */ case 20:
						/* goto write2or3 */ $s = 15; continue;
					/* } */ case 21:
					$s = 12; continue;
				/* } else if (63785 <= r && r < 64046) { */ case 10:
					r = ((x$9 = r - 63785 >> 0, ((x$9 < 0 || x$9 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$9])) >> 0);
					/* */ if (!((r === 0))) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!((r === 0))) { */ case 22:
						/* goto write2or3 */ $s = 15; continue;
					/* } */ case 23:
					$s = 12; continue;
				/* } else if (65281 <= r && r < 65510) { */ case 11:
					/* */ if (65377 <= r && r < 65440) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (65377 <= r && r < 65440) { */ case 24:
						/* goto write2 */ $s = 26; continue;
					/* } */ case 25:
					r = ((x$10 = r - 65281 >> 0, ((x$10 < 0 || x$10 >= encode5.length) ? $throwRuntimeError("index out of range") : encode5[x$10])) >> 0);
					/* */ if (!((r === 0))) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!((r === 0))) { */ case 27:
						/* goto write2or3 */ $s = 15; continue;
					/* } */ case 28:
				/* } */ case 12:
				r = 26;
			/* } */ case 5:
			if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write2or3: */ case 15:
			if ((r >> 14 >> 0) === 1) {
				if ((nDst + 2 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
			} else {
				if ((nDst + 3 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
				((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = 143);
				nDst = nDst + (1) >> 0;
			}
			(x$11 = nDst + 0 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = 161 + ((((r >> 7 >> 0) << 24 >>> 24) & 127) >>> 0) << 24 >>> 24));
			(x$12 = nDst + 1 >> 0, ((x$12 < 0 || x$12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$12] = 161 + (((r << 24 >>> 24) & 127) >>> 0) << 24 >>> 24));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write2: */ case 26:
			if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$13 = nDst + 0 >> 0, ((x$13 < 0 || x$13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$13] = 142));
			(x$14 = nDst + 1 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = ((r - 65216 >> 0) << 24 >>> 24)));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	eucJPEncoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	init = function() {
		var $ptr;
	};
	iso2022JPNewDecoder = function() {
		var $ptr;
		return $newDataPointer(0, ptrType);
	};
	iso2022JPNewEncoder = function() {
		var $ptr;
		return $newDataPointer(0, ptrType$1);
	};
	$ptrType(iso2022JPDecoder).prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.$set(0);
	};
	$ptrType(iso2022JPDecoder).prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, atEOF, c0, c1, c1$1, c2, d, dst, err, i, nDst, nSrc, r, size, src, x$5, x$6, x$7;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		d = this;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		loop:
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			if (c0 >= 128) {
				err = errInvalidISO2022JP;
				break loop;
			}
			if (c0 === 27) {
				if ((nSrc + 2 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				size = 3;
				c1 = (x$5 = nSrc + 1 >> 0, ((x$5 < 0 || x$5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$5]));
				c2 = (x$6 = nSrc + 2 >> 0, ((x$6 < 0 || x$6 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$6]));
				if ((c1 === 36) && ((c2 === 64) || (c2 === 66))) {
					d.$set(2);
					nSrc = nSrc + (size) >> 0;
					continue;
				} else if ((c1 === 36) && (c2 === 40)) {
					if ((nSrc + 3 >> 0) >= src.$length) {
						err = transform.ErrShortSrc;
						break loop;
					}
					size = 4;
					if ((((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) + 3 << 24 >>> 24) === 68) {
						d.$set(3);
						nSrc = nSrc + (size) >> 0;
						continue;
					}
				} else if ((c1 === 40) && ((c2 === 66) || (c2 === 74))) {
					d.$set(0);
					nSrc = nSrc + (size) >> 0;
					continue;
				} else if ((c1 === 40) && (c2 === 73)) {
					d.$set(1);
					nSrc = nSrc + (size) >> 0;
					continue;
				}
				err = errInvalidISO2022JP;
				break loop;
			}
			_ref = d.$get();
			switch (0) { default: if (_ref === 0) {
				_tmp$2 = (c0 >> 0); _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			} else if (_ref === 1) {
				if (c0 < 33 || 96 <= c0) {
					err = errInvalidISO2022JP;
					break loop;
				}
				_tmp$4 = (c0 >> 0) + 65344 >> 0; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			} else {
				if (c0 === 10) {
					d.$set(0);
					_tmp$6 = (c0 >> 0); _tmp$7 = 1; r = _tmp$6; size = _tmp$7;
					break;
				}
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				size = 2;
				c1$1 = (x$7 = nSrc + 1 >> 0, ((x$7 < 0 || x$7 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$7]));
				i = (((c0 - 33 << 24 >>> 24) >> 0) * 94 >> 0) + ((c1$1 - 33 << 24 >>> 24) >> 0) >> 0;
				if ((d.$get() === 2) && i < 11104) {
					r = (((i < 0 || i >= jis0208Decode.length) ? $throwRuntimeError("index out of range") : jis0208Decode[i]) >> 0);
				} else if ((d.$get() === 3) && i < 7211) {
					r = (((i < 0 || i >= jis0212Decode.length) ? $throwRuntimeError("index out of range") : jis0212Decode[i]) >> 0);
				} else {
					r = 65533;
					break;
				}
				if (r === 0) {
					r = 65533;
				}
			} }
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break loop;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		}
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			err = errInvalidISO2022JP;
		}
		_tmp$8 = nDst; _tmp$9 = nSrc; _tmp$10 = err; nDst = _tmp$8; nSrc = _tmp$9; err = _tmp$10;
		return [nDst, nSrc, err];
	};
	$ptrType(iso2022JPEncoder).prototype.Reset = function() {
		var $ptr, e;
		e = this;
		e.$set(0);
	};
	$ptrType(iso2022JPEncoder).prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, dst, e, err, nDst, nSrc, r, size, src, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$21, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		e = this;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			/* */ if (r < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r < 128) { */ case 3:
				size = 1;
				if (r === 27) {
					r = 26;
				}
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break; */ $s = 2; continue;
					}
				}
				/* */ if (19968 <= r && r < 40870) { $s = 6; continue; }
				/* */ if (8208 <= r && r < 9840) { $s = 7; continue; }
				/* */ if (12288 <= r && r < 13262) { $s = 8; continue; }
				/* */ if (161 <= r && r < 1120) { $s = 9; continue; }
				/* */ if (63785 <= r && r < 64046) { $s = 10; continue; }
				/* */ if (65281 <= r && r < 65510) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (19968 <= r && r < 40870) { */ case 6:
					r = ((x$5 = r - 19968 >> 0, ((x$5 < 0 || x$5 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$5])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 13:
						/* goto writeJIS */ $s = 15; continue;
					/* } */ case 14:
					$s = 12; continue;
				/* } else if (8208 <= r && r < 9840) { */ case 7:
					r = ((x$6 = r - 8208 >> 0, ((x$6 < 0 || x$6 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$6])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 16:
						/* goto writeJIS */ $s = 15; continue;
					/* } */ case 17:
					$s = 12; continue;
				/* } else if (12288 <= r && r < 13262) { */ case 8:
					r = ((x$7 = r - 12288 >> 0, ((x$7 < 0 || x$7 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$7])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 18:
						/* goto writeJIS */ $s = 15; continue;
					/* } */ case 19:
					$s = 12; continue;
				/* } else if (161 <= r && r < 1120) { */ case 9:
					r = ((x$8 = r - 161 >> 0, ((x$8 < 0 || x$8 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$8])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 20:
						/* goto writeJIS */ $s = 15; continue;
					/* } */ case 21:
					$s = 12; continue;
				/* } else if (63785 <= r && r < 64046) { */ case 10:
					r = ((x$9 = r - 63785 >> 0, ((x$9 < 0 || x$9 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$9])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 22:
						/* goto writeJIS */ $s = 15; continue;
					/* } */ case 23:
					$s = 12; continue;
				/* } else if (65281 <= r && r < 65510) { */ case 11:
					/* */ if (65377 <= r && r < 65440) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (65377 <= r && r < 65440) { */ case 24:
						/* goto writeKatakana */ $s = 26; continue;
					/* } */ case 25:
					r = ((x$10 = r - 65281 >> 0, ((x$10 < 0 || x$10 >= encode5.length) ? $throwRuntimeError("index out of range") : encode5[x$10])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 27:
						/* goto writeJIS */ $s = 15; continue;
					/* } */ case 28:
				/* } */ case 12:
				r = 26;
			/* } */ case 5:
			if (!((e.$get() === 0))) {
				if ((nDst + 4 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
				e.$set(0);
				(x$11 = nDst + 0 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = 27));
				(x$12 = nDst + 1 >> 0, ((x$12 < 0 || x$12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$12] = 40));
				(x$13 = nDst + 2 >> 0, ((x$13 < 0 || x$13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$13] = 66));
				nDst = nDst + (3) >> 0;
			} else if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* writeJIS: */ case 15:
			if (!((e.$get() === 2))) {
				if ((nDst + 5 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
				e.$set(2);
				(x$14 = nDst + 0 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = 27));
				(x$15 = nDst + 1 >> 0, ((x$15 < 0 || x$15 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$15] = 36));
				(x$16 = nDst + 2 >> 0, ((x$16 < 0 || x$16 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$16] = 66));
				nDst = nDst + (3) >> 0;
			} else if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$17 = nDst + 0 >> 0, ((x$17 < 0 || x$17 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$17] = 33 + ((((r >> 7 >> 0) << 24 >>> 24) & 127) >>> 0) << 24 >>> 24));
			(x$18 = nDst + 1 >> 0, ((x$18 < 0 || x$18 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$18] = 33 + (((r << 24 >>> 24) & 127) >>> 0) << 24 >>> 24));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* writeKatakana: */ case 26:
			if (!((e.$get() === 1))) {
				if ((nDst + 4 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
				e.$set(1);
				(x$19 = nDst + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$19] = 27));
				(x$20 = nDst + 1 >> 0, ((x$20 < 0 || x$20 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$20] = 40));
				(x$21 = nDst + 2 >> 0, ((x$21 < 0 || x$21 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$21] = 73));
				nDst = nDst + (3) >> 0;
			} else if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = ((r - 65344 >> 0) << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	shiftJISDecoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, atEOF, c0, c1, dst, err, i, nDst, nSrc, r, size, src, x$5;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		loop:
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			if (c0 < 128) {
				_tmp$2 = (c0 >> 0); _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			} else if (161 <= c0 && c0 < 224) {
				_tmp$4 = (c0 >> 0) + 65216 >> 0; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			} else if ((129 <= c0 && c0 < 160) || (224 <= c0 && c0 < 240)) {
				if (c0 <= 159) {
					c0 = c0 - (112) << 24 >>> 24;
				} else {
					c0 = c0 - (176) << 24 >>> 24;
				}
				c0 = (2 * c0 << 24 >>> 24) - 33 << 24 >>> 24;
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				c1 = (x$5 = nSrc + 1 >> 0, ((x$5 < 0 || x$5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$5]));
				if (c1 < 64) {
					err = errInvalidShiftJIS;
					break loop;
				} else if (c1 < 127) {
					c0 = c0 - (1) << 24 >>> 24;
					c1 = c1 - (64) << 24 >>> 24;
				} else if (c1 === 127) {
					err = errInvalidShiftJIS;
					break loop;
				} else if (c1 < 159) {
					c0 = c0 - (1) << 24 >>> 24;
					c1 = c1 - (65) << 24 >>> 24;
				} else if (c1 < 253) {
					c1 = c1 - (159) << 24 >>> 24;
				} else {
					err = errInvalidShiftJIS;
					break loop;
				}
				_tmp$6 = 65533; _tmp$7 = 2; r = _tmp$6; size = _tmp$7;
				i = ((c0 >> 0) * 94 >> 0) + (c1 >> 0) >> 0;
				if (i < 11104) {
					r = (((i < 0 || i >= jis0208Decode.length) ? $throwRuntimeError("index out of range") : jis0208Decode[i]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				}
			} else {
				err = errInvalidShiftJIS;
				break loop;
			}
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break loop;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		}
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			err = errInvalidShiftJIS;
		}
		_tmp$8 = nDst; _tmp$9 = nSrc; _tmp$10 = err; nDst = _tmp$8; nSrc = _tmp$9; err = _tmp$10;
		return [nDst, nSrc, err];
	};
	shiftJISDecoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	shiftJISEncoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _q, _q$1, _q$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, dst, err, j1, j2, nDst, nSrc, r, size, src, x$10, x$11, x$12, x$13, x$14, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			/* */ if (r < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r < 128) { */ case 3:
				size = 1;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break loop; */ $s = 2; continue s;
					}
				}
				/* */ if (19968 <= r && r < 40870) { $s = 6; continue; }
				/* */ if (8208 <= r && r < 9840) { $s = 7; continue; }
				/* */ if (12288 <= r && r < 13262) { $s = 8; continue; }
				/* */ if (161 <= r && r < 1120) { $s = 9; continue; }
				/* */ if (63785 <= r && r < 64046) { $s = 10; continue; }
				/* */ if (65281 <= r && r < 65510) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (19968 <= r && r < 40870) { */ case 6:
					r = ((x$5 = r - 19968 >> 0, ((x$5 < 0 || x$5 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$5])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 13:
						/* goto write2 */ $s = 15; continue;
					/* } */ case 14:
					$s = 12; continue;
				/* } else if (8208 <= r && r < 9840) { */ case 7:
					r = ((x$6 = r - 8208 >> 0, ((x$6 < 0 || x$6 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$6])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 16:
						/* goto write2 */ $s = 15; continue;
					/* } */ case 17:
					$s = 12; continue;
				/* } else if (12288 <= r && r < 13262) { */ case 8:
					r = ((x$7 = r - 12288 >> 0, ((x$7 < 0 || x$7 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$7])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 18:
						/* goto write2 */ $s = 15; continue;
					/* } */ case 19:
					$s = 12; continue;
				/* } else if (161 <= r && r < 1120) { */ case 9:
					r = ((x$8 = r - 161 >> 0, ((x$8 < 0 || x$8 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$8])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 20:
						/* goto write2 */ $s = 15; continue;
					/* } */ case 21:
					$s = 12; continue;
				/* } else if (63785 <= r && r < 64046) { */ case 10:
					r = ((x$9 = r - 63785 >> 0, ((x$9 < 0 || x$9 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$9])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 22:
						/* goto write2 */ $s = 15; continue;
					/* } */ case 23:
					$s = 12; continue;
				/* } else if (65281 <= r && r < 65510) { */ case 11:
					/* */ if (65377 <= r && r < 65440) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (65377 <= r && r < 65440) { */ case 24:
						r = r - (65216) >> 0;
						/* goto write1 */ $s = 26; continue;
					/* } */ case 25:
					r = ((x$10 = r - 65281 >> 0, ((x$10 < 0 || x$10 >= encode5.length) ? $throwRuntimeError("index out of range") : encode5[x$10])) >> 0);
					/* */ if ((r >> 14 >> 0) === 1) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if ((r >> 14 >> 0) === 1) { */ case 27:
						/* goto write2 */ $s = 15; continue;
					/* } */ case 28:
				/* } */ case 12:
				r = 26;
			/* } */ case 5:
			/* write1: */ case 26:
			if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write2: */ case 15:
			j1 = (((r >> 7 >> 0) << 24 >>> 24) & 127) >>> 0;
			j2 = ((r << 24 >>> 24) & 127) >>> 0;
			if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break loop; */ $s = 2; continue s;
			}
			if (j1 <= 61) {
				(x$11 = nDst + 0 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = 129 + (_q = j1 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24));
			} else {
				(x$12 = nDst + 0 >> 0, ((x$12 < 0 || x$12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$12] = 193 + (_q$1 = j1 / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24));
			}
			if (((j1 & 1) >>> 0) === 0) {
				(x$13 = nDst + 1 >> 0, ((x$13 < 0 || x$13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$13] = (j2 + (_q$2 = j2 / 63, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 64 << 24 >>> 24));
			} else {
				(x$14 = nDst + 1 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = j2 + 159 << 24 >>> 24));
			}
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	shiftJISEncoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	eucJPDecoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	eucJPEncoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	shiftJISDecoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	shiftJISEncoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	eucJPDecoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	eucJPEncoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	shiftJISDecoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	shiftJISEncoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = internal.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = identifier.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		eucJP = new internal.Encoding.ptr(new internal.SimpleEncoding.ptr((x = new eucJPDecoder.ptr(new transform.NopResetter.ptr()), new x.constructor.elem(x)), (x$1 = new eucJPEncoder.ptr(new transform.NopResetter.ptr()), new x$1.constructor.elem(x$1))), "EUC-JP", 18);
		$pkg.EUCJP = eucJP;
		errInvalidEUCJP = errors.New("japanese: invalid EUC-JP encoding");
		iso2022JP = new internal.Encoding.ptr((x$2 = new internal.FuncEncoding.ptr(iso2022JPNewDecoder, iso2022JPNewEncoder), new x$2.constructor.elem(x$2)), "ISO-2022-JP", 39);
		$pkg.ISO2022JP = iso2022JP;
		errInvalidISO2022JP = errors.New("japanese: invalid ISO-2022-JP encoding");
		shiftJIS = new internal.Encoding.ptr(new internal.SimpleEncoding.ptr((x$3 = new shiftJISDecoder.ptr(new transform.NopResetter.ptr()), new x$3.constructor.elem(x$3)), (x$4 = new shiftJISEncoder.ptr(new transform.NopResetter.ptr()), new x$4.constructor.elem(x$4))), "Shift JIS", 17);
		$pkg.ShiftJIS = shiftJIS;
		errInvalidShiftJIS = errors.New("japanese: invalid Shift JIS encoding");
		jis0208Decode = $toNativeArray($kindUint
		jis0212Decode = $toNativeArray($kindUint16, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 184, 729, 733, 175, 731, 730, 65374, 900, 901, 0, 0, 0, 0, 0, 0, 0, 0, 161, 166, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 170, 169, 174, 8482, 164, 8470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 902, 904, 905, 906, 938, 0, 908, 0, 910, 939, 0, 911, 0, 0, 0, 0, 940, 941, 942, 943, 970, 912, 972, 962, 973, 971, 944, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 272, 0, 294, 0, 306, 0, 321, 319, 0, 330, 216, 338, 0, 358, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 273, 240, 295, 305, 307, 312, 322, 320, 329, 331, 248, 339, 223, 359, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 192, 196, 194, 258, 461, 256, 260, 197, 195, 262, 264, 268, 199, 266, 270, 201, 200, 203, 202, 282, 278, 274, 280, 0, 284, 286, 290, 288, 292, 205, 204, 207, 206, 463, 304, 298, 302, 296, 308, 310, 313, 317, 315, 323, 327, 325, 209, 211, 210, 214, 212, 465, 336, 332, 213, 340, 344, 342, 346, 348, 352, 350, 356, 354, 218, 217, 220, 219, 364, 467, 368, 362, 370, 366, 360, 471, 475, 473, 469, 372, 221, 376, 374, 377, 381, 379, 0, 0, 0, 0, 0, 0, 0, 225, 224, 228, 226, 259, 462, 257, 261, 229, 227, 263, 265, 269, 231, 267, 271, 233, 232, 235, 234, 283, 279, 275, 281, 501, 285, 287, 0, 289, 293, 237, 236, 239, 238, 464, 0, 299, 303, 297, 309, 311, 314, 318, 316, 324, 328, 326, 241, 243, 242, 246, 244, 466, 337, 333, 245, 341, 345, 343, 347, 349, 353, 351, 357, 355, 250, 249, 252, 251, 365, 468, 369, 363, 371, 367, 361, 472, 476, 474, 470, 373, 253, 255, 375, 378, 382, 380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19970, 19972, 19973, 19980, 19986, 19999, 20003, 20004, 20008, 20011, 20014, 20015, 20016, 20021, 20032, 20033, 20036, 20039, 20049, 20058, 20060, 20067, 20072, 20073, 20084, 20085, 20089, 20095, 20109, 20118, 20119, 20125, 20143, 20153, 20163, 20176, 20186, 20187, 20192, 20193, 20194, 20200, 20207, 20209, 20211, 20213, 20221, 20222, 20223, 20224, 20226, 20227, 20232, 20235, 20236, 20242, 20245, 20246, 20247, 20249, 20270, 20273, 20320, 20275, 20277, 20279, 20281, 20283, 20286, 20288, 20290, 20296, 20297, 20299, 20300, 20306, 20308, 20310, 20312, 20319, 20323, 20330, 20332, 20334, 20337, 20343, 20344, 20345, 20346, 20349, 20350, 20353, 20354, 20356, 20357, 20361, 20362, 20364, 20366, 20368, 20370, 20371, 20372, 20375, 20377, 20378, 20382, 20383, 20402, 20407, 20409, 20411, 20412, 20413, 20414, 20416, 20417, 20421, 20422, 20424, 20425, 20427, 20428, 20429, 20431, 20434, 20444, 20448, 20450, 20464, 20466, 20476, 20477, 20479, 20480, 20481, 20484, 20487, 20490, 20492, 20494, 20496, 20499, 20503, 20504, 20507, 20508, 20509, 20510, 20514, 20519, 20526, 20528, 20530, 20531, 20533, 20544, 20545, 20546, 20549, 20550, 20554, 20556, 20558, 20561, 20562, 20563, 20567, 20569, 20575, 20576, 20578, 20579, 20582, 20583, 20586, 20589, 20592, 20593, 20539, 20609, 20611, 20612, 20614, 20618, 20622, 20623, 20624, 20626, 20627, 20628, 20630, 20635, 20636, 20638, 20639, 20640, 20641, 20642, 20650, 20655, 20656, 20665, 20666, 20669, 20672, 20675, 20676, 20679, 20684, 20686, 20688, 20691, 20692, 20696, 20700, 20701, 20703, 20706, 20708, 20710, 20712, 20713, 20719, 20721, 20726, 20730, 20734, 20739, 20742, 20743, 20744, 20747, 20748, 20749, 20750, 20722, 20752, 20759, 20761, 20763, 20764, 20765, 20766, 20771, 20775, 20776, 20780, 20781, 20783, 20785, 20787, 20788, 20789, 20792, 20793, 20802, 20810, 20815, 20819, 20821, 20823, 20824, 20831, 20836, 20838, 20862, 20867, 20868, 20875, 20878, 20888, 20893, 20897, 20899, 20909, 20920, 20922, 20924, 20926, 20927, 20930, 20936, 20943, 20945, 20946, 20947, 20949, 20952, 20958, 20962, 20965, 20974, 20978, 20979, 20980, 20983, 20993, 20994, 20997, 21010, 21011, 21013, 21014, 21016, 21026, 21032, 21041, 21042, 21045, 21052, 21061, 21065, 21077, 21079, 21080, 21082, 21084, 21087, 21088, 21089, 21094, 21102, 21111, 21112, 21113, 21120, 21122, 21125, 21130, 21132, 21139, 21141, 21142, 21143, 21144, 21146, 21148, 21156, 21157, 21158, 21159, 21167, 21168, 21174, 21175, 21176, 21178, 21179, 21181, 21184, 21188, 21190, 21192, 21196, 21199, 21201, 21204, 21206, 21211, 21212, 21217, 21221, 21224, 21225, 21226, 21228, 21232, 21233, 21236, 21238, 21239, 21248, 21251, 21258, 21259, 21260, 21265, 21267, 21272, 21275, 21276, 21278, 21279, 21285, 21287, 21288, 21289, 21291, 21292, 21293, 21296, 21298, 21301, 21308, 21309, 21310, 21314, 21324, 21323, 21337, 21339, 21345, 21347, 21349, 21356, 21357, 21362, 21369, 21374, 21379, 21383, 21384, 21390, 21395, 21396, 21401, 21405, 21409, 21412, 21418, 21419, 21423, 21426, 21428, 21429, 21431, 21432, 21434, 21437, 21440, 21445, 21455, 21458, 21459, 21461, 21466, 21469, 21470, 21472, 21478, 21479, 21493, 21506, 21523, 21530, 21537, 21543, 21544, 21546, 21551, 21553, 21556, 21557, 21571, 21572, 21575, 21581, 21583, 21598, 21602, 21604, 21606, 21607, 21609, 21611, 21613, 21614, 21620, 21631, 21633, 21635, 21637, 21640, 21641, 21645, 21649, 21653, 21654, 21660, 21663, 21665, 21670, 21671, 21673, 21674, 21677, 21678, 21681, 21687, 21689, 21690, 21691, 21695, 21702, 21706, 21709, 21710, 21728, 21738, 21740, 21743, 21750, 21756, 21758, 21759, 21760, 21761, 21765, 21768, 21769, 21772, 21773, 21774, 21781, 21802, 21803, 21810, 21813, 21814, 21819, 21820, 21821, 21825, 21831, 21833, 21834, 21837, 21840, 21841, 21848, 21850, 21851, 21854, 21856, 21857, 21860, 21862, 21887, 21889, 21890, 21894, 21896, 21902, 21903, 21905, 21906, 21907, 21908, 21911, 21923, 21924, 21933, 21938, 21951, 21953, 21955, 21958, 21961, 21963, 21964, 21966, 21969, 21970, 21971, 21975, 21976, 21979, 21982, 21986, 21993, 22006, 22015, 22021, 22024, 22026, 22029, 22030, 22031, 22032, 22033, 22034, 22041, 22060, 22064, 22067, 22069, 22071, 22073, 22075, 22076, 22077, 22079, 22080, 22081, 22083, 22084, 22086, 22089, 22091, 22093, 22095, 22100, 22110, 22112, 22113, 22114, 22115, 22118, 22121, 22125, 22127, 22129, 22130, 22133, 22148, 22149, 22152, 22155, 22156, 22165, 22169, 22170, 22173, 22174, 22175, 22182, 22183, 22184, 22185, 22187, 22188, 22189, 22193, 22195, 22199, 22206, 22213, 22217, 22218, 22219, 22223, 22224, 22220, 22221, 22233, 22236, 22237, 22239, 22241, 22244, 22245, 22246, 22247, 22248, 22257, 22251, 22253, 22262, 22263, 22273, 22274, 22279, 22282, 22284, 22289, 22293, 22298, 22299, 22301, 22304, 22306, 22307, 22308, 22309, 22313, 22314, 22316, 22318, 22319, 22323, 22324, 22333, 22334, 22335, 22341, 22342, 22348, 22349, 22354, 22370, 22373, 22375, 22376, 22379, 22381, 22382, 22383, 22384, 22385, 22387, 22388, 22389, 22391, 22393, 22394, 22395, 22396, 22398, 22401, 22403, 22412, 22420, 22423, 22425, 22426, 22428, 22429, 22430, 22431, 22433, 22421, 22439, 22440, 22441, 22444, 22456, 22461, 22471, 22472, 22476, 22479, 22485, 22493, 22494, 22500, 22502, 22503, 22505, 22509, 22512, 22517, 22518, 22520, 22525, 22526, 22527, 22531, 22532, 22536, 22537, 22497, 22540, 22541, 22555, 22558, 22559, 22560, 22566, 22567, 22573, 22578, 22585, 22591, 22601, 22604, 22605, 22607, 22608, 22613, 22623, 22625, 22628, 22631, 22632, 22648, 22652, 22655, 22656, 22657, 22663, 22664, 22665, 22666, 22668, 22669, 22671, 22672, 22676, 22678, 22685, 22688, 22689, 22690, 22694, 22697, 22705, 22706, 22724, 22716, 22722, 22728, 22733, 22734, 22736, 22738, 22740, 22742, 22746, 22749, 22753, 22754, 22761, 22771, 22789, 22790, 22795, 22796, 22802, 22803, 22804, 34369, 22813, 22817, 22819, 22820, 22824, 22831, 22832, 22835, 22837, 22838, 22847, 22851, 22854, 22866, 22867, 22873, 22875, 22877, 22878, 22879, 22881, 22883, 22891, 22893, 22895, 22898, 22901, 22902, 22905, 22907, 22908, 22923, 22924, 22926, 22930, 22933, 22935, 22943, 22948, 22951, 22957, 22958, 22959, 22960, 22963, 22967, 22970, 22972, 22977, 22979, 22980, 22984, 22986, 22989, 22994, 23005, 23006, 23007, 23011, 23012, 23015, 23022, 23023, 23025, 23026, 23028, 23031, 23040, 23044, 23052, 23053, 23054, 23058, 23059, 23070, 23075, 23076, 23079, 23080, 23082, 23085, 23088, 23108, 23109, 23111, 23112, 23116, 23120, 23125, 23134, 23139, 23141, 23143, 23149, 23159, 23162, 23163, 23166, 23179, 23184, 23187, 23190, 23193, 23196, 23198, 23199, 23200, 23202, 23207, 23212, 23217, 23218, 23219, 23221, 23224, 23226, 23227, 23231, 23236, 23238, 23240, 23247, 23258, 23260, 23264, 23269, 23274, 23278, 23285, 23286, 23293, 23296, 23297, 23304, 23319, 23348, 23321, 23323, 23325, 23329, 23333, 23341, 23352, 23361, 23371, 23372, 23378, 23382, 23390, 23400, 23406, 23407, 23420, 23421, 23422, 23423, 23425, 23428, 23430, 23434, 23438, 23440, 23441, 23443, 23444, 23446, 23464, 23465, 23468, 23469, 23471, 23473, 23474, 23479, 23482, 23484, 23488, 23489, 23501, 23503, 23510, 23511, 23512, 23513, 23514, 23520, 23535, 23537, 23540, 23549, 23564, 23575, 23582, 23583, 23587, 23590, 23593, 23595, 23596, 23598, 23600, 23602, 23605, 23606, 23641, 23642, 23644, 23650, 23651, 23655, 23656, 23657, 23661, 23664, 23668, 23669, 23674, 23675, 23676, 23677, 23687, 23688, 23690, 23695, 23698, 23709, 23711, 23712, 23714, 23715, 23718, 23722, 23730, 23732, 23733, 23738, 23753, 23755, 23762, 23773, 23767, 23790, 23793, 23794, 23796, 23809, 23814, 23821, 23826, 23851, 23843, 23844, 23846, 23847, 23857, 23860, 23865, 23869, 23871, 23874, 23875, 23878, 23880, 23893, 23889, 23897, 23882, 23903, 23904, 23905, 23906, 23908, 23914, 23917, 23920, 23929, 23930, 23934, 23935, 23937, 23939, 23944, 23946, 23954, 23955, 23956, 23957, 23961, 23963, 23967, 23968, 23975, 23979, 23984, 23988, 23992, 23993, 24003, 24007, 24011, 24016, 24014, 24024, 24025, 24032, 24036, 24041, 24056, 24057, 24064, 24071, 24077, 24082, 24084, 24085, 24088, 24095, 24096, 24110, 24104, 24114, 24117, 24126, 24139, 24144, 24137, 24145, 24150, 24152, 24155, 24156, 24158, 24168, 24170, 24171, 24172, 24173, 24174, 24176, 24192, 24203, 24206, 24226, 24228, 24229, 24232, 24234, 24236, 24241, 24243, 24253, 24254, 24255, 24262, 24268, 24267, 24270, 24273, 24274, 24276, 24277, 24284, 24286, 24293, 24299, 24322, 24326, 24327, 24328, 24334, 24345, 24348, 24349, 24353, 24354, 24355, 24356, 24360, 24363, 24364, 24366, 24368, 24372, 24374, 24379, 24381, 24383, 24384, 24388, 24389, 24391, 24397, 24400, 24404, 24408, 24411, 24416, 24419, 24420, 24423, 24431, 24434, 24436, 24437, 24440, 24442, 24445, 24446, 24457, 24461, 24463, 24470, 24476, 24477, 24482, 24487, 24491, 24484, 24492, 24495, 24496, 24497, 24504, 24516, 24519, 24520, 24521, 24523, 24528, 24529, 24530, 24531, 24532, 24542, 24545, 24546, 24552, 24553, 24554, 24556, 24557, 24558, 24559, 24562, 24563, 24566, 24570, 24572, 24583, 24586, 24589, 24595, 24596, 24599, 24600, 24602, 24607, 24612, 24621, 24627, 24629, 24640, 24647, 24648, 24649, 24652, 24657, 24660, 24662, 24663, 24669, 24673, 24679, 24689, 24702, 24703, 24706, 24710, 24712, 24714, 24718, 24721, 24723, 24725, 24728, 24733, 24734, 24738, 24740, 24741, 24744, 24752, 24753, 24759, 24763, 24766, 24770, 24772, 24776, 24777, 24778, 24779, 24782, 24783, 24788, 24789, 24793, 24795, 24797, 24798, 24802, 24805, 24818, 24821, 24824, 24828, 24829, 24834, 24839, 24842, 24844, 24848, 24849, 24850, 24851, 24852, 24854, 24855, 24857, 24860, 24862, 24866, 24874, 24875, 24880, 24881, 24885, 24886, 24887, 24889, 24897, 24901, 24902, 24905, 24926, 24928, 24940, 24946, 24952, 24955, 24956, 24959, 24960, 24961, 24963, 24964, 24971, 24973, 24978, 24979, 24983, 24984, 24988, 24989, 24991, 24992, 24997, 25000, 25002, 25005, 25016, 25017, 25020, 25024, 25025, 25026, 25038, 25039, 25045, 25052, 25053, 25054, 25055, 25057, 25058, 25063, 25065, 25061, 25068, 25069, 25071, 25089, 25091, 25092, 25095, 25107, 25109, 25116, 25120, 25122, 25123, 25127, 25129, 25131, 25145, 25149, 25154, 25155, 25156, 25158, 25164, 25168, 25169, 25170, 25172, 25174, 25178, 25180, 25188, 25197, 25199, 25203, 25210, 25213, 25229, 25230, 25231, 25232, 25254, 25256, 25267, 25270, 25271, 25274, 25278, 25279, 25284, 25294, 25301, 25302, 25306, 25322, 25330, 25332, 25340, 25341, 25347, 25348, 25354, 25355, 25357, 25360, 25363, 25366, 25368, 25385, 25386, 25389, 25397, 25398, 25401, 25404, 25409, 25410, 25411, 25412, 25414, 25418, 25419, 25422, 25426, 25427, 25428, 25432, 25435, 25445, 25446, 25452, 25453, 25457, 25460, 25461, 25464, 25468, 25469, 25471, 25474, 25476, 25479, 25482, 25488, 25492, 25493, 25497, 25498, 25502, 25508, 25510, 25517, 25518, 25519, 25533, 25537, 25541, 25544, 25550, 25553, 25555, 25556, 25557, 25564, 25568, 25573, 25578, 25580, 25586, 25587, 25589, 25592, 25593, 25609, 25610, 25616, 25618, 25620, 25624, 25630, 25632, 25634, 25636, 25637, 25641, 25642, 25647, 25648, 25653, 25661, 25663, 25675, 25679, 25681, 25682, 25683, 25684, 25690, 25691, 25692, 25693, 25695, 25696, 25697, 25699, 25709, 25715, 25716, 25723, 25725, 25733, 25735, 25743, 25744, 25745, 25752, 25753, 25755, 25757, 25759, 25761, 25763, 25766, 25768, 25772, 25779, 25789, 25790, 25791, 25796, 25801, 25802, 25803, 25804, 25806, 25808, 25809, 25813, 25815, 25828, 25829, 25833, 25834, 25837, 25840, 25845, 25847, 25851, 25855, 25857, 25860, 25864, 25865, 25866, 25871, 25875, 25876, 25878, 25881, 25883, 25886, 25887, 25890, 25894, 25897, 25902, 25905, 25914, 25916, 25917, 25923, 25927, 25929, 25936, 25938, 25940, 25951, 25952, 25959, 25963, 25978, 25981, 25985, 25989, 25994, 26002, 26005, 26008, 26013, 26016, 26019, 26022, 26030, 26034, 26035, 26036, 26047, 26050, 26056, 26057, 26062, 26064, 26068, 26070, 26072, 26079, 26096, 26098, 26100, 26101, 26105, 26110, 26111, 26112, 26116, 26120, 26121, 26125, 26129, 26130, 26133, 26134, 26141, 26142, 26145, 26146, 26147, 26148, 26150, 26153, 26154, 26155, 26156, 26158, 26160, 26161, 26163, 26169, 26167, 26176, 26181, 26182, 26186, 26188, 26193, 26190, 26199, 26200, 26201, 26203, 26204, 26208, 26209, 26363, 26218, 26219, 26220, 26238, 26227, 26229, 26239, 26231, 26232, 26233, 26235, 26240, 26236, 26251, 26252, 26253, 26256, 26258, 26265, 26266, 26267, 26268, 26271, 26272, 26276, 26285, 26289, 26290, 26293, 26299, 26303, 26304, 26306, 26307, 26312, 26316, 26318, 26319, 26324, 26331, 26335, 26344, 26347, 26348, 26350, 26362, 26373, 26375, 26382, 26387, 26393, 26396, 26400, 26402, 26419, 26430, 26437, 26439, 26440, 26444, 26452, 26453, 26461, 26470, 26476, 26478, 26484, 26486, 26491, 26497, 26500, 26510, 26511, 26513, 26515, 26518, 26520, 26521, 26523, 26544, 26545, 26546, 26549, 26555, 26556, 26557, 26617, 26560, 26562, 26563, 26565, 26568, 26569, 26578, 26583, 26585, 26588, 26593, 26598, 26608, 26610, 26614, 26615, 26706, 26644, 26649, 26653, 26655, 26664, 26663, 26668, 26669, 26671, 26672, 26673, 26675, 26683, 26687, 26692, 26693, 26698, 26700, 26709, 26711, 26712, 26715, 26731, 26734, 26735, 26736, 26737, 26738, 26741, 26745, 26746, 26747, 26748, 26754, 26756, 26758, 26760, 26774, 26776, 26778, 26780, 26785, 26787, 26789, 26793, 26794, 26798, 26802, 26811, 26821, 26824, 26828, 26831, 26832, 26833, 26835, 26838, 26841, 26844, 26845, 26853, 26856, 26858, 26859, 26860, 26861, 26864, 26865, 26869, 26870, 26875, 26876, 26877, 26886, 26889, 26890, 26896, 26897, 26899, 26902, 26903, 26929, 26931, 26933, 26936, 26939, 26946, 26949, 26953, 26958, 26967, 26971, 26979, 26980, 26981, 26982, 26984, 26985, 26988, 26992, 26993, 26994, 27002, 27003, 27007, 27008, 27021, 27026, 27030, 27032, 27041, 27045, 27046, 27048, 27051, 27053, 27055, 27063, 27064, 27066, 27068, 27077, 27080, 27089, 27094, 27095, 27106, 27109, 27118, 27119, 27121, 27123, 27125, 27134, 27136, 27137, 27139, 27151, 27153, 27157, 27162, 27165, 27168, 27172, 27176, 27184, 27186, 27188, 27191, 27195, 27198, 27199, 27205, 27206, 27209, 27210, 27214, 27216, 27217, 27218, 27221, 27222, 27227, 27236, 27239, 27242, 27249, 27251, 27262, 27265, 27267, 27270, 27271, 27273, 27275, 27281, 27291, 27293, 27294, 27295, 27301, 27307, 27311, 27312, 27313, 27316, 27325, 27326, 27327, 27334, 27337, 27336, 27340, 27344, 27348, 27349, 27350, 27356, 27357, 27364, 27367, 27372, 27376, 27377, 27378, 27388, 27389, 27394, 27395, 27398, 27399, 27401, 27407, 27408, 27409, 27415, 27419, 27422, 27428, 27432, 27435, 27436, 27439, 27445, 27446, 27451, 27455, 27462, 27466, 27469, 27474, 27478, 27480, 27485, 27488, 27495, 27499, 27502, 27504, 27509, 27517, 27518, 27522, 27525, 27543, 27547, 27551, 27552, 27554, 27555, 27560, 27561, 27564, 27565, 27566, 27568, 27576, 27577, 27581, 27582, 27587, 27588, 27593, 27596, 27606, 27610, 27617, 27619, 27622, 27623, 27630, 27633, 27639, 27641, 27647, 27650, 27652, 27653, 27657, 27661, 27662, 27664, 27666, 27673, 27679, 27686, 27687, 27688, 27692, 27694, 27699, 27701, 27702, 27706, 27707, 27711, 27722, 27723, 27725, 27727, 27730, 27732, 27737, 27739, 27740, 27755, 27757, 27759, 27764, 27766, 27768, 27769, 27771, 27781, 27782, 27783, 27785, 27796, 27797, 27799, 27800, 27804, 27807, 27824, 27826, 27828, 27842, 27846, 27853, 27855, 27856, 27857, 27858, 27860, 27862, 27866, 27868, 27872, 27879, 27881, 27883, 27884, 27886, 27890, 27892, 27908, 27911, 27914, 27918, 27919, 27921, 27923, 27930, 27942, 27943, 27944, 27751, 27950, 27951, 27953, 27961, 27964, 27967, 27991, 27998, 27999, 28001, 28005, 28007, 28015, 28016, 28028, 28034, 28039, 28049, 28050, 28052, 28054, 28055, 28056, 28074, 28076, 28084, 28087, 28089, 28093, 28095, 28100, 28104, 28106, 28110, 28111, 28118, 28123, 28125, 28127, 28128, 28130, 28133, 28137, 28143, 28144, 28148, 28150, 28156, 28160, 28164, 28190, 28194, 28199, 28210, 28214, 28217, 28219, 28220, 28228, 28229, 28232, 28233, 28235, 28239, 28241, 28242, 28243, 28244, 28247, 28252, 28253, 28254, 28258, 28259, 28264, 28275, 28283, 28285, 28301, 28307, 28313, 28320, 28327, 28333, 28334, 28337, 28339, 28347, 28351, 28352, 28353, 28355, 28359, 28360, 28362, 28365, 28366, 28367, 28395, 28397, 28398, 28409, 28411, 28413, 28420, 28424, 28426, 28428, 28429, 28438, 28440, 28442, 28443, 28454, 28457, 28458, 28463, 28464, 28467, 28470, 28475, 28476, 28461, 28495, 28497, 28498, 28499, 28503, 28505, 28506, 28509, 28510, 28513, 28514, 28520, 28524, 28541, 28542, 28547, 28551, 28552, 28555, 28556, 28557, 28560, 28562, 28563, 28564, 28566, 28570, 28575, 28576, 28581, 28582, 28583, 28584, 28590, 28591, 28592, 28597, 28598, 28604, 28613, 28615, 28616, 28618, 28634, 28638, 28648, 28649, 28656, 28661, 28665, 28668, 28669, 28672, 28677, 28678, 28679, 28685, 28695, 28704, 28707, 28719, 28724, 28727, 28729, 28732, 28739, 28740, 28744, 28745, 28746, 28747, 28756, 28757, 28765, 28766, 28750, 28772, 28773, 28780, 28782, 28789, 28790, 28798, 28801, 28805, 28806, 28820, 28821, 28822, 28823, 28824, 28827, 28836, 28843, 28848, 28849, 28852, 28855, 28874, 28881, 28883, 28884, 28885, 28886, 28888, 28892, 28900, 28922, 28931, 28932, 28933, 28934, 28935, 28939, 28940, 28943, 28958, 28960, 28971, 28973, 28975, 28976, 28977, 28984, 28993, 28997, 28998, 28999, 29002, 29003, 29008, 29010, 29015, 29018, 29020, 29022, 29024, 29032, 29049, 29056, 29061, 29063, 29068, 29074, 29082, 29083, 29088, 29090, 29103, 29104, 29106, 29107, 29114, 29119, 29120, 29121, 29124, 29131, 29132, 29139, 29142, 29145, 29146, 29148, 29176, 29182, 29184, 29191, 29192, 29193, 29203, 29207, 29210, 29213, 29215, 29220, 29227, 29231, 29236, 29240, 29241, 29249, 29250, 29251, 29253, 29262, 29263, 29264, 29267, 29269, 29270, 29274, 29276, 29278, 29280, 29283, 29288, 29291, 29294, 29295, 29297, 29303, 29304, 29307, 29308, 29311, 29316, 29321, 29325, 29326, 29331, 29339, 29352, 29357, 29358, 29361, 29364, 29374, 29377, 29383, 29385, 29388, 29397, 29398, 29400, 29407, 29413, 29427, 29428, 29434, 29435, 29438, 29442, 29444, 29445, 29447, 29451, 29453, 29458, 29459, 29464, 29465, 29470, 29474, 29476, 29479, 29480, 29484, 29489, 29490, 29493, 29498, 29499, 29501, 29507, 29517, 29520, 29522, 29526, 29528, 29533, 29534, 29535, 29536, 29542, 29543, 29545, 29547, 29548, 29550, 29551, 29553, 29559, 29561, 29564, 29568, 29569, 29571, 29573, 29574, 29582, 29584, 29587, 29589, 29591, 29592, 29596, 29598, 29599, 29600, 29602, 29605, 29606, 29610, 29611, 29613, 29621, 29623, 29625, 29628, 29629, 29631, 29637, 29638, 29641, 29643, 29644, 29647, 29650, 29651, 29654, 29657, 29661, 29665, 29667, 29670, 29671, 29673, 29684, 29685, 29687, 29689, 29690, 29691, 29693, 29695, 29696, 29697, 29700, 29703, 29706, 29713, 29722, 29723, 29732, 29734, 29736, 29737, 29738, 29739, 29740, 29741, 29742, 29743, 29744, 29745, 29753, 29760, 29763, 29764, 29766, 29767, 29771, 29773, 29777, 29778, 29783, 29789, 29794, 29798, 29799, 29800, 29803, 29805, 29806, 29809, 29810, 29824, 29825, 29829, 29830, 29831, 29833, 29839, 29840, 29841, 29842, 29848, 29849, 29850, 29852, 29855, 29856, 29857, 29859, 29862, 29864, 29865, 29866, 29867, 29870, 29871, 29873, 29874, 29877, 29881, 29883, 29887, 29896, 29897, 29900, 29904, 29907, 29912, 29914, 29915, 29918, 29919, 29924, 29928, 29930, 29931, 29935, 29940, 29946, 29947, 29948, 29951, 29958, 29970, 29974, 29975, 29984, 29985, 29988, 29991, 29993, 29994, 29999, 30006, 30009, 30013, 30014, 30015, 30016, 30019, 30023, 30024, 30030, 30032, 30034, 30039, 30046, 30047, 30049, 30063, 30065, 30073, 30074, 30075, 30076, 30077, 30078, 30081, 30085, 30096, 30098, 30099, 30101, 30105, 30108, 30114, 30116, 30132, 30138, 30143, 30144, 30145, 30148, 30150, 30156, 30158, 30159, 30167, 30172, 30175, 30176, 30177, 30180, 30183, 30188, 30190, 30191, 30193, 30201, 30208, 30210, 30211, 30212, 30215, 30216, 30218, 30220, 30223, 30226, 30227, 30229, 30230, 30233, 30235, 30236, 30237, 30238, 30243, 30245, 30246, 30249, 30253, 30258, 30259, 30261, 30264, 30265, 30266, 30268, 30282, 30272, 30273, 30275, 30276, 30277, 30281, 30283, 30293, 30297, 30303, 30308, 30309, 30317, 30318, 30319, 30321, 30324, 30337, 30341, 30348, 30349, 30357, 30363, 30364, 30365, 30367, 30368, 30370, 30371, 30372, 30373, 30374, 30375, 30376, 30378, 30381, 30397, 30401, 30405, 30409, 30411, 30412, 30414, 30420, 30425, 30432, 30438, 30440, 30444, 30448, 30449, 30454, 30457, 30460, 30464, 30470, 30474, 30478, 30482, 30484, 30485, 30487, 30489, 30490, 30492, 30498, 30504, 30509, 30510, 30511, 30516, 30517, 30518, 30521, 30525, 30526, 30530, 30533, 30534, 30538, 30541, 30542, 30543, 30546, 30550, 30551, 30556, 30558, 30559, 30560, 30562, 30564, 30567, 30570, 30572, 30576, 30578, 30579, 30580, 30586, 30589, 30592, 30596, 30604, 30605, 30612, 30613, 30614, 30618, 30623, 30626, 30631, 30634, 30638, 30639, 30641, 30645, 30654, 30659, 30665, 30673, 30674, 30677, 30681, 30686, 30687, 30688, 30692, 30694, 30698, 30700, 30704, 30705, 30708, 30712, 30715, 30725, 30726, 30729, 30733, 30734, 30737, 30749, 30753, 30754, 30755, 30765, 30766, 30768, 30773, 30775, 30787, 30788, 30791, 30792, 30796, 30798, 30802, 30812, 30814, 30816, 30817, 30819, 30820, 30824, 30826, 30830, 30842, 30846, 30858, 30863, 30868, 30872, 30881, 30877, 30878, 30879, 30884, 30888, 30892, 30893, 30896, 30897, 30898, 30899, 30907, 30909, 30911, 30919, 30920, 30921, 30924, 30926, 30930, 30931, 30933, 30934, 30948, 30939, 30943, 30944, 30945, 30950, 30954, 30962, 30963, 30976, 30966, 30967, 30970, 30971, 30975, 30982, 30988, 30992, 31002, 31004, 31006, 31007, 31008, 31013, 31015, 31017, 31021, 31025, 31028, 31029, 31035, 31037, 31039, 31044, 31045, 31046, 31050, 31051, 31055, 31057, 31060, 31064, 31067, 31068, 31079, 31081, 31083, 31090, 31097, 31099, 31100, 31102, 31115, 31116, 31121, 31123, 31124, 31125, 31126, 31128, 31131, 31132, 31137, 31144, 31145, 31147, 31151, 31153, 31156, 31160, 31163, 31170, 31172, 31175, 31176, 31178, 31183, 31188, 31190, 31194, 31197, 31198, 31200, 31202, 31205, 31210, 31211, 31213, 31217, 31224, 31228, 31234, 31235, 31239, 31241, 31242, 31244, 31249, 31253, 31259, 31262, 31265, 31271, 31275, 31277, 31279, 31280, 31284, 31285, 31288, 31289, 31290, 31300, 31301, 31303, 31304, 31308, 31317, 31318, 31321, 31324, 31325, 31327, 31328, 31333, 31335, 31338, 31341, 31349, 31352, 31358, 31360, 31362, 31365, 31366, 31370, 31371, 31376, 31377, 31380, 31390, 31392, 31395, 31404, 31411, 31413, 31417, 31419, 31420, 31430, 31433, 31436, 31438, 31441, 31451, 31464, 31465, 31467, 31468, 31473, 31476, 31483, 31485, 31486, 31495, 31508, 31519, 31523, 31527, 31529, 31530, 31531, 31533, 31534, 31535, 31536, 31537, 31540, 31549, 31551, 31552, 31553, 31559, 31566, 31573, 31584, 31588, 31590, 31593, 31594, 31597, 31599, 31602, 31603, 31607, 31620, 31625, 31630, 31632, 31633, 31638, 31643, 31646, 31648, 31653, 31660, 31663, 31664, 31666, 31669, 31670, 31674, 31675, 31676, 31677, 31682, 31685, 31688, 31690, 31700, 31702, 31703, 31705, 31706, 31707, 31720, 31722, 31730, 31732, 31733, 31736, 31737, 31738, 31740, 31742, 31745, 31746, 31747, 31748, 31750, 31753, 31755, 31756, 31758, 31759, 31769, 31771, 31776, 31781, 31782, 31784, 31788, 31793, 31795, 31796, 31798, 31801, 31802, 31814, 31818, 31829, 31825, 31826, 31827, 31833, 31834, 31835, 31836, 31837, 31838, 31841, 31843, 31847, 31849, 31853, 31854, 31856, 31858, 31865, 31868, 31869, 31878, 31879, 31887, 31892, 31902, 31904, 31910, 31920, 31926, 31927, 31930, 31931, 31932, 31935, 31940, 31943, 31944, 31945, 31949, 31951, 31955, 31956, 31957, 31959, 31961, 31962, 31965, 31974, 31977, 31979, 31989, 32003, 32007, 32008, 32009, 32015, 32017, 32018, 32019, 32022, 32029, 32030, 32035, 32038, 32042, 32045, 32049, 32060, 32061, 32062, 32064, 32065, 32071, 32072, 32077, 32081, 32083, 32087, 32089, 32090, 32092, 32093, 32101, 32103, 32106, 32112, 32120, 32122, 32123, 32127, 32129, 32130, 32131, 32133, 32134, 32136, 32139, 32140, 32141, 32145, 32150, 32151, 32157, 32158, 32166, 32167, 32170, 32179, 32182, 32183, 32185, 32194, 32195, 32196, 32197, 32198, 32204, 32205, 32206, 32215, 32217, 32256, 32226, 32229, 32230, 32234, 32235, 32237, 32241, 32245, 32246, 32249, 32250, 32264, 32272, 32273, 32277, 32279, 32284, 32285, 32288, 32295, 32296, 32300, 32301, 32303, 32307, 32310, 32319, 32324, 32325, 32327, 32334, 32336, 32338, 32344, 32351, 32353, 32354, 32357, 32363, 32366, 32367, 32371, 32376, 32382, 32385, 32390, 32391, 32394, 32397, 32401, 32405, 32408, 32410, 32413, 32414, 32572, 32571, 32573, 32574, 32575, 32579, 32580, 32583, 32591, 32594, 32595, 32603, 32604, 32605, 32609, 32611, 32612, 32613, 32614, 32621, 32625, 32637, 32638, 32639, 32640, 32651, 32653, 32655, 32656, 32657, 32662, 32663, 32668, 32673, 32674, 32678, 32682, 32685, 32692, 32700, 32703, 32704, 32707, 32712, 32718, 32719, 32731, 32735, 32739, 32741, 32744, 32748, 32750, 32751, 32754, 32762, 32765, 32766, 32767, 32775, 32776, 32778, 32781, 32782, 32783, 32785, 32787, 32788, 32790, 32797, 32798, 32799, 32800, 32804, 32806, 32812, 32814, 32816, 32820, 32821, 32823, 32825, 32826, 32828, 32830, 32832, 32836, 32864, 32868, 32870, 32877, 32881, 32885, 32897, 32904, 32910, 32924, 32926, 32934, 32935, 32939, 32952, 32953, 32968, 32973, 32975, 32978, 32980, 32981, 32983, 32984, 32992, 33005, 33006, 33008, 33010, 33011, 33014, 33017, 33018, 33022, 33027, 33035, 33046, 33047, 33048, 33052, 33054, 33056, 33060, 33063, 33068, 33072, 33077, 33082, 33084, 33093, 33095, 33098, 33100, 33106, 33111, 33120, 33121, 33127, 33128, 33129, 33133, 33135, 33143, 33153, 33168, 33156, 33157, 33158, 33163, 33166, 33174, 33176, 33179, 33182, 33186, 33198, 33202, 33204, 33211, 33227, 33219, 33221, 33226, 33230, 33231, 33237, 33239, 33243, 33245, 33246, 33249, 33252, 33259, 33260, 33264, 33265, 33266, 33269, 33270, 33272, 33273, 33277, 33279, 33280, 33283, 33295, 33299, 33300, 33305, 33306, 33309, 33313, 33314, 33320, 33330, 33332, 33338, 33347, 33348, 33349, 33350, 33355, 33358, 33359, 33361, 33366, 33372, 33376, 33379, 33383, 33389, 33396, 33403, 33405, 33407, 33408, 33409, 33411, 33412, 33415, 33417, 33418, 33422, 33425, 33428, 33430, 33432, 33434, 33435, 33440, 33441, 33443, 33444, 33447, 33448, 33449, 33450, 33454, 33456, 33458, 33460, 33463, 33466, 33468, 33470, 33471, 33478, 33488, 33493, 33498, 33504, 33506, 33508, 33512, 33514, 33517, 33519, 33526, 33527, 33533, 33534, 33536, 33537, 33543, 33544, 33546, 33547, 33620, 33563, 33565, 33566, 33567, 33569, 33570, 33580, 33581, 33582, 33584, 33587, 33591, 33594, 33596, 33597, 33602, 33603, 33604, 33607, 33613, 33614, 33617, 33621, 33622, 33623, 33648, 33656, 33661, 33663, 33664, 33666, 33668, 33670, 33677, 33682, 33684, 33685, 33688, 33689, 33691, 33692, 33693, 33702, 33703, 33705, 33708, 33726, 33727, 33728, 33735, 33737, 33743, 33744, 33745, 33748, 33757, 33619, 33768, 33770, 33782, 33784, 33785, 33788, 33793, 33798, 33802, 33807, 33809, 33813, 33817, 33709, 33839, 33849, 33861, 33863, 33864, 33866, 33869, 33871, 33873, 33874, 33878, 33880, 33881, 33882, 33884, 33888, 33892, 33893, 33895, 33898, 33904, 33907, 33908, 33910, 33912, 33916, 33917, 33921, 33925, 33938, 33939, 33941, 33950, 33958, 33960, 33961, 33962, 33967, 33969, 33972, 33978, 33981, 33982, 33984, 33986, 33991, 33992, 33996, 33999, 34003, 34012, 34023, 34026, 34031, 34032, 34033, 34034, 34039, 34098, 34042, 34043, 34045, 34050, 34051, 34055, 34060, 34062, 34064, 34076, 34078, 34082, 34083, 34084, 34085, 34087, 34090, 34091, 34095, 34099, 34100, 34102, 34111, 34118, 34127, 34128, 34129, 34130, 34131, 34134, 34137, 34140, 34141, 34142, 34143, 34144, 34145, 34146, 34148, 34155, 34159, 34169, 34170, 34171, 34173, 34175, 34177, 34181, 34182, 34185, 34187, 34188, 34191, 34195, 34200, 34205, 34207, 34208, 34210, 34213, 34215, 34228, 34230, 34231, 34232, 34236, 34237, 34238, 34239, 34242, 34247, 34250, 34251, 34254, 34221, 34264, 34266, 34271, 34272, 34278, 34280, 34285, 34291, 34294, 34300, 34303, 34304, 34308, 34309, 34317, 34318, 34320, 34321, 34322, 34328, 34329, 34331, 34334, 34337, 34343, 34345, 34358, 34360, 34362, 34364, 34365, 34368, 34370, 34374, 34386, 34387, 34390, 34391, 34392, 34393, 34397, 34400, 34401, 34402, 34403, 34404, 34409, 34412, 34415, 34421, 34422, 34423, 34426, 34445, 34449, 34454, 34456, 34458, 34460, 34465, 34470, 34471, 34472, 34477, 34481, 34483, 34484, 34485, 34487, 34488, 34489, 34495, 34496, 34497, 34499, 34501, 34513, 34514, 34517, 34519, 34522, 34524, 34528, 34531, 34533, 34535, 34440, 34554, 34556, 34557, 34564, 34565, 34567, 34571, 34574, 34575, 34576, 34579, 34580, 34585, 34590, 34591, 34593, 34595, 34600, 34606, 34607, 34609, 34610, 34617, 34618, 34620, 34621, 34622, 34624, 34627, 34629, 34637, 34648, 34653, 34657, 34660, 34661, 34671, 34673, 34674, 34683, 34691, 34692, 34693, 34694, 34695, 34696, 34697, 34699, 34700, 34704, 34707, 34709, 34711, 34712, 34713, 34718, 34720, 34723, 34727, 34732, 34733, 34734, 34737, 34741, 34750, 34751, 34753, 34760, 34761, 34762, 34766, 34773, 34774, 34777, 34778, 34780, 34783, 34786, 34787, 34788, 34794, 34795, 34797, 34801, 34803, 34808, 34810, 34815, 34817, 34819, 34822, 34825, 34826, 34827, 34832, 34841, 34834, 34835, 34836, 34840, 34842, 34843, 34844, 34846, 34847, 34856, 34861, 34862, 34864, 34866, 34869, 34874, 34876, 34881, 34883, 34885, 34888, 34889, 34890, 34891, 34894, 34897, 34901, 34902, 34904, 34906, 34908, 34911, 34912, 34916, 34921, 34929, 34937, 34939, 34944, 34968, 34970, 34971, 34972, 34975, 34976, 34984, 34986, 35002, 35005, 35006, 35008, 35018, 35019, 35020, 35021, 35022, 35025, 35026, 35027, 35035, 35038, 35047, 35055, 35056, 35057, 35061, 35063, 35073, 35078, 35085, 35086, 35087, 35093, 35094, 35096, 35097, 35098, 35100, 35104, 35110, 35111, 35112, 35120, 35121, 35122, 35125, 35129, 35130, 35134, 35136, 35138, 35141, 35142, 35145, 35151, 35154, 35159, 35162, 35163, 35164, 35169, 35170, 35171, 35179, 35182, 35184, 35187, 35189, 35194, 35195, 35196, 35197, 35209, 35213, 35216, 35220, 35221, 35227, 35228, 35231, 35232, 35237, 35248, 35252, 35253, 35254, 35255, 35260, 35284, 35285, 35286, 35287, 35288, 35301, 35305, 35307, 35309, 35313, 35315, 35318, 35321, 35325, 35327, 35332, 35333, 35335, 35343, 35345, 35346, 35348, 35349, 35358, 35360, 35362, 35364, 35366, 35371, 35372, 35375, 35381, 35383, 35389, 35390, 35392, 35395, 35397, 35399, 35401, 35405, 35406, 35411, 35414, 35415, 35416, 35420, 35421, 35425, 35429, 35431, 35445, 35446, 35447, 35449, 35450, 35451, 35454, 35455, 35456, 35459, 35462, 35467, 35471, 35472, 35474, 35478, 35479, 35481, 35487, 35495, 35497, 35502, 35503, 35507, 35510, 35511, 35515, 35518, 35523, 35526, 35528, 35529, 35530, 35537, 35539, 35540, 35541, 35543, 35549, 35551, 35564, 35568, 35572, 35573, 35574, 35580, 35583, 35589, 35590, 35595, 35601, 35612, 35614, 35615, 35594, 35629, 35632, 35639, 35644, 35650, 35651, 35652, 35653, 35654, 35656, 35666, 35667, 35668, 35673, 35661, 35678, 35683, 35693, 35702, 35704, 35705, 35708, 35710, 35713, 35716, 35717, 35723, 35725, 35727, 35732, 35733, 35740, 35742, 35743, 35896, 35897, 35901, 35902, 35909, 35911, 35913, 35915, 35919, 35921, 35923, 35924, 35927, 35928, 35931, 35933, 35929, 35939, 35940, 35942, 35944, 35945, 35949, 35955, 35957, 35958, 35963, 35966, 35974, 35975, 35979, 35984, 35986, 35987, 35993, 35995, 35996, 36004, 36025, 36026, 36037, 36038, 36041, 36043, 36047, 36054, 36053, 36057, 36061, 36065, 36072, 36076, 36079, 36080, 36082, 36085, 36087, 36088, 36094, 36095, 36097, 36099, 36105, 36114, 36119, 36123, 36197, 36201, 36204, 36206, 36223, 36226, 36228, 36232, 36237, 36240, 36241, 36245, 36254, 36255, 36256, 36262, 36267, 36268, 36271, 36274, 36277, 36279, 36281, 36283, 36288, 36293, 36294, 36295, 36296, 36298, 36302, 36305, 36308, 36309, 36311, 36313, 36324, 36325, 36327, 36332, 36336, 36284, 36337, 36338, 36340, 36349, 36353, 36356, 36357, 36358, 36363, 36369, 36372, 36374, 36384, 36385, 36386, 36387, 36390, 36391, 36401, 36403, 36406, 36407, 36408, 36409, 36413, 36416, 36417, 36427, 36429, 36430, 36431, 36436, 36443, 36444, 36445, 36446, 36449, 36450, 36457, 36460, 36461, 36463, 36464, 36465, 36473, 36474, 36475, 36482, 36483, 36489, 36496, 36498, 36501, 36506, 36507, 36509, 36510, 36514, 36519, 36521, 36525, 36526, 36531, 36533, 36538, 36539, 36544, 36545, 36547, 36548, 36551, 36559, 36561, 36564, 36572, 36584, 36590, 36592, 36593, 36599, 36601, 36602, 36589, 36608, 36610, 36615, 36616, 36623, 36624, 36630, 36631, 36632, 36638, 36640, 36641, 36643, 36645, 36647, 36648, 36652, 36653, 36654, 36660, 36661, 36662, 36663, 36666, 36672, 36673, 36675, 36679, 36687, 36689, 36690, 36691, 36692, 36693, 36696, 36701, 36702, 36709, 36765, 36768, 36769, 36772, 36773, 36774, 36789, 36790, 36792, 36798, 36800, 36801, 36806, 36810, 36811, 36813, 36816, 36818, 36819, 36821, 36832, 36835, 36836, 36840, 36846, 36849, 36853, 36854, 36859, 36862, 36866, 36868, 36872, 36876, 36888, 36891, 36904, 36905, 36911, 36906, 36908, 36909, 36915, 36916, 36919, 36927, 36931, 36932, 36940, 36955, 36957, 36962, 36966, 36967, 36972, 36976, 36980, 36985, 36997, 37000, 37003, 37004, 37006, 37008, 37013, 37015, 37016, 37017, 37019, 37024, 37025, 37026, 37029, 37040, 37042, 37043, 37044, 37046, 37053, 37068, 37054, 37059, 37060, 37061, 37063, 37064, 37077, 37079, 37080, 37081, 37084, 37085, 37087, 37093, 37074, 37110, 37099, 37103, 37104, 37108, 37118, 37119, 37120, 37124, 37125, 37126, 37128, 37133, 37136, 37140, 37142, 37143, 37144, 37146, 37148, 37150, 37152, 37157, 37154, 37155, 37159, 37161, 37166, 37167, 37169, 37172, 37174, 37175, 37177, 37178, 37180, 37181, 37187, 37191, 37192, 37199, 37203, 37207, 37209, 37210, 37211, 37217, 37220, 37223, 37229, 37236, 37241, 37242, 37243, 37249, 37251, 37253, 37254, 37258, 37262, 37265, 37267, 37268, 37269, 37272, 37278, 37281, 37286, 37288, 37292, 37293, 37294, 37296, 37297, 37298, 37299, 37302, 37307, 37308, 37309, 37311, 37314, 37315, 37317, 37331, 37332, 37335, 37337, 37338, 37342, 37348, 37349, 37353, 37354, 37356, 37357, 37358, 37359, 37360, 37361, 37367, 37369, 37371, 37373, 37376, 37377, 37380, 37381, 37382, 37383, 37385, 37386, 37388, 37392, 37394, 37395, 37398, 37400, 37404, 37405, 37411, 37412, 37413, 37414, 37416, 37422, 37423, 37424, 37427, 37429, 37430, 37432, 37433, 37434, 37436, 37438, 37440, 37442, 37443, 37446, 37447, 37450, 37453, 37454, 37455, 37457, 37464, 37465, 37468, 37469, 37472, 37473, 37477, 37479, 37480, 37481, 37486, 37487, 37488, 37493, 37494, 37495, 37496, 37497, 37499, 37500, 37501, 37503, 37512, 37513, 37514, 37517, 37518, 37522, 37527, 37529, 37535, 37536, 37540, 37541, 37543, 37544, 37547, 37551, 37554, 37558, 37560, 37562, 37563, 37564, 37565, 37567, 37568, 37569, 37570, 37571, 37573, 37574, 37575, 37576, 37579, 37580, 37581, 37582, 37584, 37587, 37589, 37591, 37592, 37593, 37596, 37597, 37599, 37600, 37601, 37603, 37605, 37607, 37608, 37612, 37614, 37616, 37625, 37627, 37631, 37632, 37634, 37640, 37645, 37649, 37652, 37653, 37660, 37661, 37662, 37663, 37665, 37668, 37669, 37671, 37673, 37674, 37683, 37684, 37686, 37687, 37703, 37704, 37705, 37712, 37713, 37714, 37717, 37719, 37720, 37722, 37726, 37732, 37733, 37735, 37737, 37738, 37741, 37743, 37744, 37745, 37747, 37748, 37750, 37754, 37757, 37759, 37760, 37761, 37762, 37768, 37770, 37771, 37773, 37775, 37778, 37781, 37784, 37787, 37790, 37793, 37795, 37796, 37798, 37800, 37803, 37812, 37813, 37814, 37818, 37801, 37825, 37828, 37829, 37830, 37831, 37833, 37834, 37835, 37836, 37837, 37843, 37849, 37852, 37854, 37855, 37858, 37862, 37863, 37881, 37879, 37880, 37882, 37883, 37885, 37889, 37890, 37892, 37896, 37897, 37901, 37902, 37903, 37909, 37910, 37911, 37919, 37934, 37935, 37937, 37938, 37939, 37940, 37947, 37951, 37949, 37955, 37957, 37960, 37962, 37964, 37973, 37977, 37980, 37983, 37985, 37987, 37992, 37995, 37997, 37998, 37999, 38001, 38002, 38020, 38019, 38264, 38265, 38270, 38276, 38280, 38284, 38285, 38286, 38301, 38302, 38303, 38305, 38310, 38313, 38315, 38316, 38324, 38326, 38330, 38333, 38335, 38342, 38344, 38345, 38347, 38352, 38353, 38354, 38355, 38361, 38362, 38365, 38366, 38367, 38368, 38372, 38374, 38429, 38430, 38434, 38436, 38437, 38438, 38444, 38449, 38451, 38455, 38456, 38457, 38458, 38460, 38461, 38465, 38482, 38484, 38486, 38487, 38488, 38497, 38510, 38516, 38523, 38524, 38526, 38527, 38529, 38530, 38531, 38532, 38537, 38545, 38550, 38554, 38557, 38559, 38564, 38565, 38566, 38569, 38574, 38575, 38579, 38586, 38602, 38610, 23986, 38616, 38618, 38621, 38622, 38623, 38633, 38639, 38641, 38650, 38658, 38659, 38661, 38665, 38682, 38683, 38685, 38689, 38690, 38691, 38696, 38705, 38707, 38721, 38723, 38730, 38734, 38735, 38741, 38743, 38744, 38746, 38747, 38755, 38759, 38762, 38766, 38771, 38774, 38775, 38776, 38779, 38781, 38783, 38784, 38793, 38805, 38806, 38807, 38809, 38810, 38814, 38815, 38818, 38828, 38830, 38833, 38834, 38837, 38838, 38840, 38841, 38842, 38844, 38846, 38847, 38849, 38852, 38853, 38855, 38857, 38858, 38860, 38861, 38862, 38864, 38865, 38868, 38871, 38872, 38873, 38877, 38878, 38880, 38875, 38881, 38884, 38895, 38897, 38900, 38903, 38904, 38906, 38919, 38922, 38937, 38925, 38926, 38932, 38934, 38940, 38942, 38944, 38947, 38950, 38955, 38958, 38959, 38960, 38962, 38963, 38965, 38949, 38974, 38980, 38983, 38986, 38993, 38994, 38995, 38998, 38999, 39001, 39002, 39010, 39011, 39013, 39014, 39018, 39020, 39083, 39085, 39086, 39088, 39092, 39095, 39096, 39098, 39099, 39103, 39106, 39109, 39112, 39116, 39137, 39139, 39141, 39142, 39143, 39146, 39155, 39158, 39170, 39175, 39176, 39185, 39189, 39190, 39191, 39194, 39195, 39196, 39199, 39202, 39206, 39207, 39211, 39217, 39218, 39219, 39220, 39221, 39225, 39226, 39227, 39228, 39232, 39233, 39238, 39239, 39240, 39245, 39246, 39252, 39256, 39257, 39259, 39260, 39262, 39263, 39264, 39323, 39325, 39327, 39334, 39344, 39345, 39346, 39349, 39353, 39354, 39357, 39359, 39363, 39369, 39379, 39380, 39385, 39386, 39388, 39390, 39399, 39402, 39403, 39404, 39408, 39412, 39413, 39417, 39421, 39422, 39426, 39427, 39428, 39435, 39436, 39440, 39441, 39446, 39454, 39456, 39458, 39459, 39460, 39463, 39469, 39470, 39475, 39477, 39478, 39480, 39495, 39489, 39492, 39498, 39499, 39500, 39502, 39505, 39508, 39510, 39517, 39594, 39596, 39598, 39599, 39602, 39604, 39605, 39606, 39609, 39611, 39614, 39615, 39617, 39619, 39622, 39624, 39630, 39632, 39634, 39637, 39638, 39639, 39643, 39644, 39648, 39652, 39653, 39655, 39657, 39660, 39666, 39667, 39669, 39673, 39674, 39677, 39679, 39680, 39681, 39682, 39683, 39684, 39685, 39688, 39689, 39691, 39692, 39693, 39694, 39696, 39698, 39702, 39705, 39707, 39708, 39712, 39718, 39723, 39725, 39731, 39732, 39733, 39735, 39737, 39738, 39741, 39752, 39755, 39756, 39765, 39766, 39767, 39771, 39774, 39777, 39779, 39781, 39782, 39784, 39786, 39787, 39788, 39789, 39790, 39795, 39797, 39799, 39800, 39801, 39807, 39808, 39812, 39813, 39814, 39815, 39817, 39818, 39819, 39821, 39823, 39824, 39828, 39834, 39837, 39838, 39846, 39847, 39849, 39852, 39856, 39857, 39858, 39863, 39864, 39867, 39868, 39870, 39871, 39873, 39879, 39880, 39886, 39888, 39895, 39896, 39901, 39903, 39909, 39911, 39914, 39915, 39919, 39923, 39927, 39928, 39929, 39930, 39933, 39935, 39936, 39938, 39947, 39951, 39953, 39958, 39960, 39961, 39962, 39964, 39966, 39970, 39971, 39974, 39975, 39976, 39977, 39978, 39985, 39989, 39990, 39991, 39997, 40001, 40003, 40004, 40005, 40009, 40010, 40014, 40015, 40016, 40019, 40020, 40022, 40024, 40027, 40029, 40030, 40031, 40035, 40041, 40042, 40028, 40043, 40040, 40046, 40048, 40050, 40053, 40055, 40059, 40166, 40178, 40183, 40185, 40203, 40194, 40209, 40215, 40216, 40220, 40221, 40222, 40239, 40240, 40242, 40243, 40244, 40250, 40252, 40261, 40253, 40258, 40259, 40263, 40266, 40275, 40276, 40287, 40291, 40290, 40293, 40297, 40298, 40299, 40304, 40310, 40311, 40315, 40316, 40318, 40323, 40324, 40326, 40330, 40333, 40334, 40338, 40339, 40341, 40342, 40343, 40344, 40353, 40362, 40364, 40366, 40369, 40373, 40377, 40380, 40383, 40387, 40391, 40393, 40394, 40404, 40405, 40406, 40407, 40410, 40414, 40415, 40416, 40421, 40423, 40425, 40427, 40430, 40432, 40435, 40436, 40446, 40458, 40450, 40455, 40462, 40464, 40465, 40466, 40469, 40470, 40473, 40476, 40477, 40570, 40571, 40572, 40576, 40578, 40579, 40580, 40581, 40583, 40590, 40591, 40598, 40600, 40603, 40606, 40612, 40616, 40620, 40622, 40623, 40624, 40627, 40628, 40629, 40646, 40648, 40651, 40661, 40671, 40676, 40679, 40684, 40685, 40686, 40688, 40689, 40690, 40693, 40696, 40703, 40706, 40707, 40713, 40719, 40720, 40721, 40722, 40724, 40726, 40727, 40729, 40730, 40731, 40735, 40738, 40742, 40746, 40747, 40751, 40753, 40754, 40756, 40759, 40761, 40762, 40764, 40765, 40767, 40769, 40771, 40772, 40773, 40774, 40775, 40787, 40789, 40790, 40791, 40792, 40794, 40797, 40798, 40808, 40809, 40813, 40814, 40815, 40816, 40817, 40819, 40821, 40826, 40829, 40847, 40848, 40849, 40850, 40852, 40854, 40855, 40862, 40865, 40866, 40867, 40869]);
		encode0 = $toNativeArray($kindUint
		encode1 = $toNativeArray($kindUint16, [16413, 0, 0, 0, 0, 16412, 0, 0, 16421, 16422, 0, 0, 16423, 16424, 0, 0, 16598, 16599, 0, 0, 0, 16420, 16419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16594, 0, 16459, 16460, 0, 0, 0, 0, 0, 0, 0, 16519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17987, 32974, 0, 0, 0, 0, 0, 0, 0, 0, 16593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17940, 17941, 17942, 17943, 17944, 17945, 17946, 17947, 17948, 17949, 0, 0, 0, 0, 0, 0, 28112, 28113, 28114, 28115, 28116, 28117, 28118, 28119, 28120, 28121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16522, 16523, 16521, 16524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16556, 0, 16557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16558, 0, 16574, 16559, 0, 0, 0, 16575, 16537, 0, 0, 16538, 0, 0, 0, 0, 0, 18003, 0, 0, 0, 0, 0, 0, 0, 0, 16580, 0, 0, 16582, 16454, 18007, 16571, 0, 0, 0, 0, 16417, 0, 16553, 16554, 16544, 16543, 16584, 16585, 0, 18002, 0, 0, 0, 0, 0, 16455, 16583, 0, 0, 0, 0, 0, 0, 0, 16581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16449, 16576, 0, 0, 0, 0, 16452, 16453, 0, 0, 16578, 16579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16541, 16542, 0, 0, 16539, 16540, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17920, 17921, 17922, 17923, 17924, 17925, 17926, 17927, 17928, 17929, 17930, 17931, 17932, 17933, 17934, 17935, 17936, 17937, 17938, 17939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17280, 17291, 17281, 17292, 0, 0, 0, 0, 0, 0, 0, 0, 17282, 0, 0, 17293, 17283, 0, 0, 17294, 17285, 0, 0, 17296, 17284, 0, 0, 17295, 17286, 17307, 0, 0, 17302, 0, 0, 17297, 17288, 17309, 0, 0, 17304, 0, 0, 17299, 17287, 0, 0, 17303, 17308, 0, 0, 17298, 17289, 0, 0, 17305, 17310, 0, 0, 17300, 17290, 0, 0, 17306, 0, 0, 17311, 0, 0, 0, 0, 0, 0, 0, 0, 17301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16514, 16513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16516, 16515, 0, 0, 0, 0, 0, 0, 0, 0, 16518, 16517, 0, 0, 0, 0, 0, 0, 0, 0, 16512, 16477, 0, 0, 0, 16474, 0, 0, 16476, 16475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16473, 16472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16457, 0, 16456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16597, 0, 0, 16596, 0, 16595]);
		encode2 = $toNativeArray($kindUint16, [16384, 16385, 16386, 16406, 0, 16408, 16409, 16410, 16433, 16434, 16435, 16436, 16437, 16438, 16439, 16440, 16441, 16442, 16520, 16525, 16427, 16428, 0, 0, 0, 0, 0, 0, 0, 17983, 0, 17984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16768, 16769, 16770, 16771, 16772, 16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781, 16782, 16783, 16784, 16785, 16786, 16787, 16788, 16789, 16790, 16791, 16792, 16793, 16794, 16795, 16796, 16797, 16798, 16799, 16800, 16801, 16802, 16803, 16804, 16805, 16806, 16807, 16808, 16809, 16810, 16811, 16812, 16813, 16814, 16815, 16816, 16817, 16818, 16819, 16820, 16821, 16822, 16823, 16824, 16825, 16826, 16827, 16828, 16829, 16830, 16831, 16832, 16833, 16834, 16835, 16836, 16837, 16838, 16839, 16840, 16841, 16842, 16843, 16844, 16845, 16846, 16847, 16848, 16849, 16850, 0, 0, 0, 0, 0, 0, 0, 16394, 16395, 16404, 16405, 0, 0, 16896, 16897, 16898, 16899, 16900, 16901, 16902, 16903, 16904, 16905, 16906, 16907, 16908, 16909, 16910, 16911, 16912, 16913, 16914, 16915, 16916, 16917, 16918, 16919, 16920, 16921, 16922, 16923, 16924, 16925, 16926, 16927, 16928, 16929, 16930, 16931, 16932, 16933, 16934, 16935, 16936, 16937, 16938, 16939, 16940, 16941, 16942, 16943, 16944, 16945, 16946, 16947, 16948, 16949, 16950, 16951, 16952, 16953, 16954, 16955, 16956, 16957, 16958, 16959, 16960, 16961, 16962, 16963, 16964, 16965, 16966, 16967, 16968, 16969, 16970, 16971, 16972, 16973, 16974, 16975, 16976, 16977, 16978, 16979, 16980, 16981, 0, 0, 0, 0, 16389, 16411, 16402, 16403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17993, 17994, 0, 0, 0, 0, 0, 0, 17995, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17988, 17989, 17990, 17991, 17992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17961, 0, 0, 0, 0, 0, 0, 17952, 0, 0, 0, 17955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17953, 17963, 0, 0, 17962, 17956, 0, 0, 0, 17964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17958, 0, 0, 0, 0, 17966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17951, 17965, 0, 0, 17954, 0, 0, 0, 17959, 0, 0, 0, 0, 0, 17960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17982, 17998, 17997, 17996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17970, 17971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17967, 17968, 17969, 0, 0, 17973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17972, 0, 0, 0, 0, 0, 0, 0, 0, 17986]);
		encode3 = $toNativeArray($kindUint16, [32929, 0, 0, 32975, 0, 32930, 16471, 16398, 32972, 32971, 0, 0, 0, 32973, 32915, 16458, 16445, 0, 0, 16396, 0, 16600, 0, 32912, 0, 32970, 0, 0, 0, 0, 32931, 33921, 33920, 33923, 33929, 33922, 33928, 33792, 33933, 33937, 33936, 33939, 33938, 33951, 33950, 33953, 33952, 0, 33967, 33969, 33968, 33971, 33975, 33970, 16446, 33803, 33986, 33985, 33988, 33987, 34001, 33807, 33837, 34049, 34048, 34051, 34057, 34050, 34056, 33824, 34061, 34065, 34064, 34067, 34066, 34079, 34078, 34081, 34080, 33826, 34095, 34097, 34096, 34099, 34103, 34098, 16447, 33835, 34114, 34113, 34116, 34115, 34129, 33839, 34130, 33926, 34054, 33924, 34052, 33927, 34055, 33930, 34058, 33931, 34059, 33934, 34062, 33932, 34060, 33935, 34063, 33793, 33825, 33942, 34070, 0, 0, 33941, 34069, 33943, 34071, 33940, 34068, 33945, 34073, 33946, 34074, 33948, 34076, 33947, 0, 33949, 34077, 33795, 33827, 33958, 34086, 33956, 34084, 0, 0, 33957, 34085, 33955, 33828, 33797, 33829, 33959, 34087, 33960, 34088, 33830, 33961, 34089, 33963, 34091, 33962, 34090, 33800, 33832, 33799, 33831, 33964, 34092, 33966, 34094, 33965, 34093, 33833, 33802, 33834, 33974, 34102, 0, 0, 33973, 34101, 33804, 33836, 33976, 34104, 33978, 34106, 33977, 34105, 33979, 34107, 33980, 34108, 33982, 34110, 33981, 34109, 33984, 34112, 33983, 34111, 33806, 33838, 33995, 34123, 33992, 34120, 33989, 34117, 33994, 34122, 33991, 34119, 33993, 34121, 34000, 34128, 34003, 34131, 34002, 34004, 34132, 34006, 34134, 34005, 34133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33925, 34053, 33954, 34082, 33972, 34100, 33990, 34118, 33999, 34127, 33996, 34124, 33998, 34126, 33997, 34125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32910, 32913, 32917, 32916, 0, 32914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32919, 32920, 33472, 0, 33473, 33474, 33475, 0, 33478, 0, 33480, 33483, 33493, 17024, 17025, 17026, 17027, 17028, 17029, 17030, 17031, 17032, 17033, 17034, 17035, 17036, 17037, 17038, 17039, 17040, 0, 17041, 17042, 17043, 17044, 17045, 17046, 17047, 33476, 33481, 33488, 33489, 33490, 33491, 33498, 17056, 17057, 17058, 17059, 17060, 17061, 17062, 17063, 17064, 17065, 17066, 17067, 17068, 17069, 17070, 17071, 17072, 33495, 17073, 17074, 17075, 17076, 17077, 17078, 17079, 33492, 33497, 33494, 33496, 33499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17158, 33569, 33570, 33571, 33572, 33573, 33574, 33575, 33576, 33577, 33578, 33579, 0, 33580, 33581, 17152, 17153, 17154, 17155, 17156, 17157, 17159, 17160, 17161, 17162, 17163, 17164, 17165, 17166, 17167, 17168, 17169, 17170, 17171, 17172, 17173, 17174, 17175, 17176, 17177, 17178, 17179, 17180, 17181, 17182, 17183, 17184, 17200, 17201, 17202, 17203, 17204, 17205, 17207, 17208, 17209, 17210, 17211, 17212, 17213, 17214, 17215, 17216, 17217, 17218, 17219, 17220, 17221, 17222, 17223, 17224, 17225, 17226, 17227, 17228, 17229, 17230, 17231, 17232, 0, 17206, 33617, 33618, 33619, 33620, 33621, 33622, 33623, 33624, 33625, 33626, 33627, 0, 33628, 33629]);
		encode4 = $toNativeArray($kindUint16, [27813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27699, 27710, 27711, 27732, 27805, 27821, 27823, 27866, 27906, 27929, 27937, 27938, 27939, 27941, 27945, 27948, 27957, 27968, 27970, 27971, 27980, 27988, 27990, 27991, 27994, 28056, 28063, 28079, 28091, 28092, 28094, 28107]);
		encode5 = $toNativeArray($kindUint16, [16393, 28125, 16467, 16463, 16466, 16468, 28124, 16425, 16426, 16469, 16443, 16387, 16444, 16388, 16414, 16655, 16656, 16657, 16658, 16659, 16660, 16661, 16662, 16663, 16664, 16390, 16391, 16450, 16448, 16451, 16392, 16470, 16672, 16673, 16674, 16675, 16676, 16677, 16678, 16679, 16680, 16681, 16682, 16683, 16684, 16685, 16686, 16687, 16688, 16689, 16690, 16691, 16692, 16693, 16694, 16695, 16696, 16697, 16429, 16415, 16430, 16399, 16401, 16397, 16704, 16705, 16706, 16707, 16708, 16709, 16710, 16711, 16712, 16713, 16714, 16715, 16716, 16717, 16718, 16719, 16720, 16721, 16722, 16723, 16724, 16725, 16726, 16727, 16728, 16729, 16431, 16418, 16432, 16416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16464, 16465, 16555, 16400, 28123, 16462]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/korean"] = (function() {
	var $pkg = {}, $init, errors, encoding, internal, identifier, transform, utf8, eucKRDecoder, eucKREncoder, sliceType$1, eucKR, eucKR_ptr, errInvalidEUCKR, decode, encode0, encode1, encode2, encode3, encode4, encode5, encode6, x, x$1, init;
	errors = $packages["errors"];
	encoding = $packages["golang.org/x/text/encoding"];
	internal = $packages["golang.org/x/text/encoding/internal"];
	identifier = $packages["golang.org/x/text/encoding/internal/identifier"];
	transform = $packages["golang.org/x/text/transform"];
	utf8 = $packages["unicode/utf8"];
	eucKRDecoder = $pkg.eucKRDecoder = $newType(0, $kindStruct, "korean.eucKRDecoder", "eucKRDecoder", "golang.org/x/text/encoding/korean", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	eucKREncoder = $pkg.eucKREncoder = $newType(0, $kindStruct, "korean.eucKREncoder", "eucKREncoder", "golang.org/x/text/encoding/korean", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	sliceType$1 = $sliceType($Uint8);
	eucKRDecoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, atEOF, c0, c1, dst, err, nDst, nSrc, r, size, src, x$2, x$3, x$4;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		loop:
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			if (c0 < 128) {
				_tmp$2 = (c0 >> 0); _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			} else if (129 <= c0 && c0 < 255) {
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				c1 = (x$2 = nSrc + 1 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2]));
				if (c0 < 199) {
					r = (x$3 = ((c0 - 129 << 24 >>> 24) >> 0), (((178 >>> 16 << 16) * x$3 >> 0) + (178 << 16 >>> 16) * x$3) >> 0);
					if (65 <= c1 && c1 < 91) {
						r = r + (((c1 >> 0) - 65 >> 0)) >> 0;
					} else if (97 <= c1 && c1 < 123) {
						r = r + (((c1 >> 0) - 71 >> 0)) >> 0;
					} else if (129 <= c1 && c1 < 255) {
						r = r + (((c1 >> 0) - 77 >> 0)) >> 0;
					} else {
						err = errInvalidEUCKR;
						break loop;
					}
				} else if (161 <= c1 && c1 < 255) {
					r = (12460 + (x$4 = ((c0 - 199 << 24 >>> 24) >> 0), (((x$4 >>> 16 << 16) * 94 >> 0) + (x$4 << 16 >>> 16) * 94) >> 0) >> 0) + ((c1 - 161 << 24 >>> 24) >> 0) >> 0;
				} else {
					err = errInvalidEUCKR;
					break loop;
				}
				if ((r >> 0) < 17630) {
					r = (((r < 0 || r >= decode.length) ? $throwRuntimeError("index out of range") : decode[r]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				} else {
					r = 65533;
				}
				size = 2;
			} else {
				err = errInvalidEUCKR;
				break loop;
			}
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break loop;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		}
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			err = errInvalidEUCKR;
		}
		_tmp$4 = nDst; _tmp$5 = nSrc; _tmp$6 = err; nDst = _tmp$4; nSrc = _tmp$5; err = _tmp$6;
		return [nDst, nSrc, err];
	};
	eucKRDecoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	eucKREncoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, dst, err, nDst, nSrc, r, size, src, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			/* */ if (r < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r < 128) { */ case 3:
				size = 1;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break; */ $s = 2; continue;
					}
				}
				/* */ if (19968 <= r && r < 40861) { $s = 6; continue; }
				/* */ if (44032 <= r && r < 55204) { $s = 7; continue; }
				/* */ if (8213 <= r && r < 9838) { $s = 8; continue; }
				/* */ if (12288 <= r && r < 13278) { $s = 9; continue; }
				/* */ if (161 <= r && r < 1106) { $s = 10; continue; }
				/* */ if (63744 <= r && r < 64012) { $s = 11; continue; }
				/* */ if (65281 <= r && r < 65511) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (19968 <= r && r < 40861) { */ case 6:
					r = ((x$2 = r - 19968 >> 0, ((x$2 < 0 || x$2 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$2])) >> 0);
					/* */ if (!((r === 0))) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!((r === 0))) { */ case 14:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 15:
					$s = 13; continue;
				/* } else if (44032 <= r && r < 55204) { */ case 7:
					r = ((x$3 = r - 44032 >> 0, ((x$3 < 0 || x$3 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$3])) >> 0);
					/* */ if (!((r === 0))) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!((r === 0))) { */ case 17:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 18:
					$s = 13; continue;
				/* } else if (8213 <= r && r < 9838) { */ case 8:
					r = ((x$4 = r - 8213 >> 0, ((x$4 < 0 || x$4 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$4])) >> 0);
					/* */ if (!((r === 0))) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!((r === 0))) { */ case 19:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 20:
					$s = 13; continue;
				/* } else if (12288 <= r && r < 13278) { */ case 9:
					r = ((x$5 = r - 12288 >> 0, ((x$5 < 0 || x$5 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$5])) >> 0);
					/* */ if (!((r === 0))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!((r === 0))) { */ case 21:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 22:
					$s = 13; continue;
				/* } else if (161 <= r && r < 1106) { */ case 10:
					r = ((x$6 = r - 161 >> 0, ((x$6 < 0 || x$6 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$6])) >> 0);
					/* */ if (!((r === 0))) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (!((r === 0))) { */ case 23:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 24:
					$s = 13; continue;
				/* } else if (63744 <= r && r < 64012) { */ case 11:
					r = ((x$7 = r - 63744 >> 0, ((x$7 < 0 || x$7 >= encode5.length) ? $throwRuntimeError("index out of range") : encode5[x$7])) >> 0);
					/* */ if (!((r === 0))) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!((r === 0))) { */ case 25:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 26:
					$s = 13; continue;
				/* } else if (65281 <= r && r < 65511) { */ case 12:
					r = ((x$8 = r - 65281 >> 0, ((x$8 < 0 || x$8 >= encode6.length) ? $throwRuntimeError("index out of range") : encode6[x$8])) >> 0);
					/* */ if (!((r === 0))) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!((r === 0))) { */ case 27:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 28:
				/* } */ case 13:
				r = 26;
			/* } */ case 5:
			if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write2: */ case 16:
			if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$9 = nDst + 0 >> 0, ((x$9 < 0 || x$9 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$9] = ((r >> 8 >> 0) << 24 >>> 24)));
			(x$10 = nDst + 1 >> 0, ((x$10 < 0 || x$10 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$10] = (r << 24 >>> 24)));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	eucKREncoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	init = function() {
		var $ptr;
	};
	eucKRDecoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	eucKREncoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	eucKRDecoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	eucKREncoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = internal.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = identifier.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		eucKR = new internal.Encoding.ptr(new internal.SimpleEncoding.ptr((x = new eucKRDecoder.ptr(new transform.NopResetter.ptr()), new x.constructor.elem(x)), (x$1 = new eucKREncoder.ptr(new transform.NopResetter.ptr()), new x$1.constructor.elem(x$1))), "EUC-KR", 38);
		$pkg.EUCKR = eucKR;
		errInvalidEUCKR = errors.New("korean: invalid EUC-KR encoding");
		decode = $toNativeArray($kindUint16, [44034, 44035, 44037, 44038, 44043, 44044, 44045, 44046, 44047, 44056, 44062, 44063, 44065, 44066, 44067, 44069, 44070, 44071, 44072, 44073, 44074, 44075, 44078, 44082, 44083, 44084, 44085, 44086, 44087, 44090, 44091, 44093, 44094, 44095, 44097, 44098, 44099, 44100, 44101, 44102, 44103, 44104, 44105, 44106, 44108, 44110, 44111, 44112, 44113, 44114, 44115, 44117, 44118, 44119, 44121, 44122, 44123, 44125, 44126, 44127, 44128, 44129, 44130, 44131, 44132, 44133, 44134, 44135, 44136, 44137, 44138, 44139, 44140, 44141, 44142, 44143, 44146, 44147, 44149, 44150, 44153, 44155, 44156, 44157, 44158, 44159, 44162, 44167, 44168, 44173, 44174, 44175, 44177, 44178, 44179, 44181, 44182, 44183, 44184, 44185, 44186, 44187, 44190, 44194, 44195, 44196, 44197, 44198, 44199, 44203, 44205, 44206, 44209, 44210, 44211, 44212, 44213, 44214, 44215, 44218, 44222, 44223, 44224, 44226, 44227, 44229, 44230, 44231, 44233, 44234, 44235, 44237, 44238, 44239, 44240, 44241, 44242, 44243, 44244, 44246, 44248, 44249, 44250, 44251, 44252, 44253, 44254, 44255, 44258, 44259, 44261, 44262, 44265, 44267, 44269, 44270, 44274, 44276, 44279, 44280, 44281, 44282, 44283, 44286, 44287, 44289, 44290, 44291, 44293, 44295, 44296, 44297, 44298, 44299, 44302, 44304, 44306, 44307, 44308, 44309, 44310, 44311, 44313, 44314, 44315, 44317, 44318, 44319, 44321, 44322, 44323, 44324, 44325, 44326, 44327, 44328, 44330, 44331, 44334, 44335, 44336, 44337, 44338, 44339, 44342, 44343, 44345, 44346, 44347, 44349, 44350, 44351, 44352, 44353, 44354, 44355, 44358, 44360, 44362, 44363, 44364, 44365, 44366, 44367, 44369, 44370, 44371, 44373, 44374, 44375, 44377, 44378, 44379, 44380, 44381, 44382, 44383, 44384, 44386, 44388, 44389, 44390, 44391, 44392, 44393, 44394, 44395, 44398, 44399, 44401, 44402, 44407, 44408, 44409, 44410, 44414, 44416, 44419, 44420, 44421, 44422, 44423, 44426, 44427, 44429, 44430, 44431, 44433, 44434, 44435, 44436, 44437, 44438, 44439, 44440, 44441, 44442, 44443, 44446, 44447, 44448, 44449, 44450, 44451, 44453, 44454, 44455, 44456, 44457, 44458, 44459, 44460, 44461, 44462, 44463, 44464, 44465, 44466, 44467, 44468, 44469, 44470, 44472, 44473, 44474, 44475, 44476, 44477, 44478, 44479, 44482, 44483, 44485, 44486, 44487, 44489, 44490, 44491, 44492, 44493, 44494, 44495, 44498, 44500, 44501, 44502, 44503, 44504, 44505, 44506, 44507, 44509, 44510, 44511, 44513, 44514, 44515, 44517, 44518, 44519, 44520, 44521, 44522, 44523, 44524, 44525, 44526, 44527, 44528, 44529, 44530, 44531, 44532, 44533, 44534, 44535, 44538, 44539, 44541, 44542, 44546, 44547, 44548, 44549, 44550, 44551, 44554, 44556, 44558, 44559, 44560, 44561, 44562, 44563, 44565, 44566, 44567, 44568, 44569, 44570, 44571, 44572, 44573, 44574, 44575, 44576, 44577, 44578, 44579, 44580, 44581, 44582, 44583, 44584, 44585, 44586, 44587, 44588, 44589, 44590, 44591, 44594, 44595, 44597, 44598, 44601, 44603, 44604, 44605, 44606, 44607, 44610, 44612, 44615, 44616, 44617, 44619, 44623, 44625, 44626, 44627, 44629, 44631, 44632, 44633, 44634, 44635, 44638, 44642, 44643, 44644, 44646, 44647, 44650, 44651, 44653, 44654, 44655, 44657, 44658, 44659, 44660, 44661, 44662, 44663, 44666, 44670, 44671, 44672, 44673, 44674, 44675, 44678, 44679, 44680, 44681, 44682, 44683, 44685, 44686, 44687, 44688, 44689, 44690, 44691, 44692, 44693, 44694, 44695, 44696, 44697, 44698, 44699, 44700, 44701, 44702, 44703, 44704, 44705, 44706, 44707, 44708, 44709, 44710, 44711, 44712, 44713, 44714, 44715, 44716, 44717, 44718, 44719, 44720, 44721, 44722, 44723, 44724, 44725, 44726, 44727, 44728, 44729, 44730, 44731, 44735, 44737, 44738, 44739, 44741, 44742, 44743, 44744, 44745, 44746, 44747, 44750, 44754, 44755, 44756, 44757, 44758, 44759, 44762, 44763, 44765, 44766, 44767, 44768, 44769, 44770, 44771, 44772, 44773, 44774, 44775, 44777, 44778, 44780, 44782, 44783, 44784, 44785, 44786, 44787, 44789, 44790, 44791, 44793, 44794, 44795, 44797, 44798, 44799, 44800, 44801, 44802, 44803, 44804, 44805, 44806, 44809, 44810, 44811, 44812, 44814, 44815, 44817, 44818, 44819, 44820, 44821, 44822, 44823, 44824, 44825, 44826, 44827, 44828, 44829, 44830, 44831, 44832, 44833, 44834, 44835, 44836, 44837, 44838, 44839, 44840, 44841, 44842, 44843, 44846, 44847, 44849, 44851, 44853, 44854, 44855, 44856, 44857, 44858, 44859, 44862, 44864, 44868, 44869, 44870, 44871, 44874, 44875, 44876, 44877, 44878, 44879, 44881, 44882, 44883, 44884, 44885, 44886, 44887, 44888, 44889, 44890, 44891, 44894, 44895, 44896, 44897, 44898, 44899, 44902, 44903, 44904, 44905, 44906, 44907, 44908, 44909, 44910, 44911, 44912, 44913, 44914, 44915, 44916, 44917, 44918, 44919, 44920, 44922, 44923, 44924, 44925, 44926, 44927, 44929, 44930, 44931, 44933, 44934, 44935, 44937, 44938, 44939, 44940, 44941, 44942, 44943, 44946, 44947, 44948, 44950, 44951, 44952, 44953, 44954, 44955, 44957, 44958, 44959, 44960, 44961, 44962, 44963, 44964, 44965, 44966, 44967, 44968, 44969, 44970, 44971, 44972, 44973, 44974, 44975, 44976, 44977, 44978, 44979, 44980, 44981, 44982, 44983, 44986, 44987, 44989, 44990, 44991, 44993, 44994, 44995, 44996, 44997, 44998, 45002, 45004, 45007, 45008, 45009, 45010, 45011, 45013, 45014, 45015, 45016, 45017, 45018, 45019, 45021, 45022, 45023, 45024, 45025, 45026, 45027, 45028, 45029, 45030, 45031, 45034, 45035, 45036, 45037, 45038, 45039, 45042, 45043, 45045, 45046, 45047, 45049, 45050, 45051, 45052, 45053, 45054, 45055, 45058, 45059, 45061, 45062, 45063, 45064, 45065, 45066, 45067, 45069, 45070, 45071, 45073, 45074, 45075, 45077, 45078, 45079, 45080, 45081, 45082, 45083, 45086, 45087, 45088, 45089, 45090, 45091, 45092, 45093, 45094, 45095, 45097, 45098, 45099, 45100, 45101, 45102, 45103, 45104, 45105, 45106, 45107, 45108, 45109, 45110, 45111, 45112, 45113, 45114, 45115, 45116, 45117, 45118, 45119, 45120, 45121, 45122, 45123, 45126, 45127, 45129, 45131, 45133, 45135, 45136, 45137, 45138, 45142, 45144, 45146, 45147, 45148, 45150, 45151, 45152, 45153, 45154, 45155, 45156, 45157, 45158, 45159, 45160, 45161, 45162, 45163, 45164, 45165, 45166, 45167, 45168, 45169, 45170, 45171, 45172, 45173, 45174, 45175, 45176, 45177, 45178, 45179, 45182, 45183, 45185, 45186, 45187, 45189, 45190, 45191, 45192, 45193, 45194, 45195, 45198, 45200, 45202, 45203, 45204, 45205, 45206, 45207, 45211, 45213, 45214, 45219, 45220, 45221, 45222, 45223, 45226, 45232, 45234, 45238, 45239, 45241, 45242, 45243, 45245, 45246, 45247, 45248, 45249, 45250, 45251, 45254, 45258, 45259, 45260, 45261, 45262, 45263, 45266, 45267, 45269, 45270, 45271, 45273, 45274, 45275, 45276, 45277, 45278, 45279, 45281, 45282, 45283, 45284, 45286, 45287, 45288, 45289, 45290, 45291, 45292, 45293, 45294, 45295, 45296, 45297, 45298, 45299, 45300, 45301, 45302, 45303, 45304, 45305, 45306, 45307, 45308, 45309, 45310, 45311, 45312, 45313, 45314, 45315, 45316, 45317, 45318, 45319, 45322, 45325, 45326, 45327, 45329, 45332, 45333, 45334, 45335, 45338, 45342, 45343, 45344, 45345, 45346, 45350, 45351, 45353, 45354, 45355, 45357, 45358, 45359, 45360, 45361, 45362, 45363, 45366, 45370, 45371, 45372, 45373, 45374, 45375, 45378, 45379, 45381, 45382, 45383, 45385, 45386, 45387, 45388, 45389, 45390, 45391, 45394, 45395, 45398, 45399, 45401, 45402, 45403, 45405, 45406, 45407, 45409, 45410, 45411, 45412, 45413, 45414, 45415, 45416, 45417, 45418, 45419, 45420, 45421, 45422, 45423, 45424, 45425, 45426, 45427, 45428, 45429, 45430, 45431, 45434, 45435, 45437, 45438, 45439, 45441, 45443, 45444, 45445, 45446, 45447, 45450, 45452, 45454, 45455, 45456, 45457, 45461, 45462, 45463, 45465, 45466, 45467, 45469, 45470, 45471, 45472, 45473, 45474, 45475, 45476, 45477, 45478, 45479, 45481, 45482, 45483, 45484, 45485, 45486, 45487, 45488, 45489, 45490, 45491, 45492, 45493, 45494, 45495, 45496, 45497, 45498, 45499, 45500, 45501, 45502, 45503, 45504, 45505, 45506, 45507, 45508, 45509, 45510, 45511, 45512, 45513, 45514, 45515, 45517, 45518, 45519, 45521, 45522, 45523, 45525, 45526, 45527, 45528, 45529, 45530, 45531, 45534, 45536, 45537, 45538, 45539, 45540, 45541, 45542, 45543, 45546, 45547, 45549, 45550, 45551, 45553, 45554, 45555, 45556, 45557, 45558, 45559, 45560, 45562, 45564, 45566, 45567, 45568, 45569, 45570, 45571, 45574, 45575, 45577, 45578, 45581, 45582, 45583, 45584, 45585, 45586, 45587, 45590, 45592, 45594, 45595, 45596, 45597, 45598, 45599, 45601, 45602, 45603, 45604, 45605, 45606, 45607, 45608, 45609, 45610, 45611, 45612, 45613, 45614, 45615, 45616, 45617, 45618, 45619, 45621, 45622, 45623, 45624, 45625, 45626, 45627, 45629, 45630, 45631, 45632, 45633, 45634, 45635, 45636, 45637, 45638, 45639, 45640, 45641, 45642, 45643, 45644, 45645, 45646, 45647, 45648, 45649, 45650, 45651, 45652, 45653, 45654, 45655, 45657, 45658, 45659, 45661, 45662, 45663, 45665, 45666, 45667, 45668, 45669, 45670, 45671, 45674, 45675, 45676, 45677, 45678, 45679, 45680, 45681, 45682, 45683, 45686, 45687, 45688, 45689, 45690, 45691, 45693, 45694, 45695, 45696, 45697, 45698, 45699, 45702, 45703, 45704, 45706, 45707, 45708, 45709, 45710, 45711, 45714, 45715, 45717, 45718, 45719, 45723, 45724, 45725, 45726, 45727, 45730, 45732, 45735, 45736, 45737, 45739, 45741, 45742, 45743, 45745, 45746, 45747, 45749, 45750, 45751, 45752, 45753, 45754, 45755, 45756, 45757, 45758, 45759, 45760, 45761, 45762, 45763, 45764, 45765, 45766, 45767, 45770, 45771, 45773, 45774, 45775, 45777, 45779, 45780, 45781, 45782, 45783, 45786, 45788, 45790, 45791, 45792, 45793, 45795, 45799, 45801, 45802, 45808, 45809, 45810, 45814, 45820, 45821, 45822, 45826, 45827, 45829, 45830, 45831, 45833, 45834, 45835, 45836, 45837, 45838, 45839, 45842, 45846, 45847, 45848, 45849, 45850, 45851, 45853, 45854, 45855, 45856, 45857, 45858, 45859, 45860, 45861, 45862, 45863, 45864, 45865, 45866, 45867, 45868, 45869, 45870, 45871, 45872, 45873, 45874, 45875, 45876, 45877, 45878, 45879, 45880, 45881, 45882, 45883, 45884, 45885, 45886, 45887, 45888, 45889, 45890, 45891, 45892, 45893, 45894, 45895, 45896, 45897, 45898, 45899, 45900, 45901, 45902, 45903, 45904, 45905, 45906, 45907, 45911, 45913, 45914, 45917, 45920, 45921, 45922, 45923, 45926, 45928, 45930, 45932, 45933, 45935, 45938, 45939, 45941, 45942, 45943, 45945, 45946, 45947, 45948, 45949, 45950, 45951, 45954, 45958, 45959, 45960, 45961, 45962, 45963, 45965, 45966, 45967, 45969, 45970, 45971, 45973, 45974, 45975, 45976, 45977, 45978, 45979, 45980, 45981, 45982, 45983, 45986, 45987, 45988, 45989, 45990, 45991, 45993, 45994, 45995, 45997, 45998, 45999, 46000, 46001, 46002, 46003, 46004, 46005, 46006, 46007, 46008, 46009, 46010, 46011, 46012, 46013, 46014, 46015, 46016, 46017, 46018, 46019, 46022, 46023, 46025, 46026, 46029, 46031, 46033, 46034, 46035, 46038, 46040, 46042, 46044, 46046, 46047, 46049, 46050, 46051, 46053, 46054, 46055, 46057, 46058, 46059, 46060, 46061, 46062, 46063, 46064, 46065, 46066, 46067, 46068, 46069, 46070, 46071, 46072, 46073, 46074, 46075, 46077, 46078, 46079, 46080, 46081, 46082, 46083, 46084, 46085, 46086, 46087, 46088, 46089, 46090, 46091, 46092, 46093, 46094, 46095, 46097, 46098, 46099, 46100, 46101, 46102, 46103, 46105, 46106, 46107, 46109, 46110, 46111, 46113, 46114, 46115, 46116, 46117, 46118, 46119, 46122, 46124, 46125, 46126, 46127, 46128, 46129, 46130, 46131, 46133, 46134, 46135, 46136, 46137, 46138, 46139, 46140, 46141, 46142, 46143, 46144, 46145, 46146, 46147, 46148, 46149, 46150, 46151, 46152, 46153, 46154, 46155, 46156, 46157, 46158, 46159, 46162, 46163, 46165, 46166, 46167, 46169, 46170, 46171, 46172, 46173, 46174, 46175, 46178, 46180, 46182, 46183, 46184, 46185, 46186, 46187, 46189, 46190, 46191, 46192, 46193, 46194, 46195, 46196, 46197, 46198, 46199, 46200, 46201, 46202, 46203, 46204, 46205, 46206, 46207, 46209, 46210, 46211, 46212, 46213, 46214, 46215, 46217, 46218, 46219, 46220, 46221, 46222, 46223, 46224, 46225, 46226, 46227, 46228, 46229, 46230, 46231, 46232, 46233, 46234, 46235, 46236, 46238, 46239, 46240, 46241, 46242, 46243, 46245, 46246, 46247, 46249, 46250, 46251, 46253, 46254, 46255, 46256, 46257, 46258, 46259, 46260, 46262, 46264, 46266, 46267, 46268, 46269, 46270, 46271, 46273, 46274, 46275, 46277, 46278, 46279, 46281, 46282, 46283, 46284, 46285, 46286, 46287, 46289, 46290, 46291, 46292, 46294, 46295, 46296, 46297, 46298, 46299, 46302, 46303, 46305, 46306, 46309, 46311, 46312, 46313, 46314, 46315, 46318, 46320, 46322, 46323, 46324, 46325, 46326, 46327, 46329, 46330, 46331, 46332, 46333, 46334, 46335, 46336, 46337, 46338, 46339, 46340, 46341, 46342, 46343, 46344, 46345, 46346, 46347, 46348, 46349, 46350, 46351, 46352, 46353, 46354, 46355, 46358, 46359, 46361, 46362, 46365, 46366, 46367, 46368, 46369, 46370, 46371, 46374, 46379, 46380, 46381, 46382, 46383, 46386, 46387, 46389, 46390, 46391, 46393, 46394, 46395, 46396, 46397, 46398, 46399, 46402, 46406, 46407, 46408, 46409, 46410, 46414, 46415, 46417, 46418, 46419, 46421, 46422, 46423, 46424, 46425, 46426, 46427, 46430, 46434, 46435, 46436, 46437, 46438, 46439, 46440, 46441, 46442, 46443, 46444, 46445, 46446, 46447, 46448, 46449, 46450, 46451, 46452, 46453, 46454, 46455, 46456, 46457, 46458, 46459, 46460, 46461, 46462, 46463, 46464, 46465, 46466, 46467, 46468, 46469, 46470, 46471, 46472, 46473, 46474, 46475, 46476, 46477, 46478, 46479, 46480, 46481, 46482, 46483, 46484, 46485, 46486, 46487, 46488, 46489, 46490, 46491, 46492, 46493, 46494, 46495, 46498, 46499, 46501, 46502, 46503, 46505, 46508, 46509, 46510, 46511, 46514, 46518, 46519, 46520, 46521, 46522, 46526, 46527, 46529, 46530, 46531, 46533, 46534, 46535, 46536, 46537, 46538, 46539, 46542, 46546, 46547, 46548, 46549, 46550, 46551, 46553, 46554, 46555, 46556, 46557, 46558, 46559, 46560, 46561, 46562, 46563, 46564, 46565, 46566, 46567, 46568, 46569, 46570, 46571, 46573, 46574, 46575, 46576, 46577, 46578, 46579, 46580, 46581, 46582, 46583, 46584, 46585, 46586, 46587, 46588, 46589, 46590, 46591, 46592, 46593, 46594, 46595, 46596, 46597, 46598, 46599, 46600, 46601, 46602, 46603, 46604, 46605, 46606, 46607, 46610, 46611, 46613, 46614, 46615, 46617, 46618, 46619, 46620, 46621, 46622, 46623, 46624, 46625, 46626, 46627, 46628, 46630, 46631, 46632, 46633, 46634, 46635, 46637, 46638, 46639, 46640, 46641, 46642, 46643, 46645, 46646, 46647, 46648, 46649, 46650, 46651, 46652, 46653, 46654, 46655, 46656, 46657, 46658, 46659, 46660, 46661, 46662, 46663, 46665, 46666, 46667, 46668, 46669, 46670, 46671, 46672, 46673, 46674, 46675, 46676, 46677, 46678, 46679, 46680, 46681, 46682, 46683, 46684, 46685, 46686, 46687, 46688, 46689, 46690, 46691, 46693, 46694, 46695, 46697, 46698, 46699, 46700, 46701, 46702, 46703, 46704, 46705, 46706, 46707, 46708, 46709, 46710, 46711, 46712, 46713, 46714, 46715, 46716, 46717, 46718, 46719, 46720, 46721, 46722, 46723, 46724, 46725, 46726, 46727, 46728, 46729, 46730, 46731, 46732, 46733, 46734, 46735, 46736, 46737, 46738, 46739, 46740, 46741, 46742, 46743, 46744, 46745, 46746, 46747, 46750, 46751, 46753, 46754, 46755, 46757, 46758, 46759, 46760, 46761, 46762, 46765, 46766, 46767, 46768, 46770, 46771, 46772, 46773, 46774, 46775, 46776, 46777, 46778, 46779, 46780, 46781, 46782, 46783, 46784, 46785, 46786, 46787, 46788, 46789, 46790, 46791, 46792, 46793, 46794, 46795, 46796, 46797, 46798, 46799, 46800, 46801, 46802, 46803, 46805, 46806, 46807, 46808, 46809, 46810, 46811, 46812, 46813, 46814, 46815, 46816, 46817, 46818, 46819, 46820, 46821, 46822, 46823, 46824, 46825, 46826, 46827, 46828, 46829, 46830, 46831, 46833, 46834, 46835, 46837, 46838, 46839, 46841, 46842, 46843, 46844, 46845, 46846, 46847, 46850, 46851, 46852, 46854, 46855, 46856, 46857, 46858, 46859, 46860, 46861, 46862, 46863, 46864, 46865, 46866, 46867, 46868, 46869, 46870, 46871, 46872, 46873, 46874, 46875, 46876, 46877, 46878, 46879, 46880, 46881, 46882, 46883, 46884, 46885, 46886, 46887, 46890, 46891, 46893, 46894, 46897, 46898, 46899, 46900, 46901, 46902, 46903, 46906, 46908, 46909, 46910, 46911, 46912, 46913, 46914, 46915, 46917, 46918, 46919, 46921, 46922, 46923, 46925, 46926, 46927, 46928, 46929, 46930, 46931, 46934, 46935, 46936, 46937, 46938, 46939, 46940, 46941, 46942, 46943, 46945, 46946, 46947, 46949, 46950, 46951, 46953, 46954, 46955, 46956, 46957, 46958, 46959, 46962, 46964, 46966, 46967, 46968, 46969, 46970, 46971, 46974, 46975, 46977, 46978, 46979, 46981, 46982, 46983, 46984, 46985, 46986, 46987, 46990, 46995, 46996, 46997, 47002, 47003, 47005, 47006, 47007, 47009, 47010, 47011, 47012, 47013, 47014, 47015, 47018, 47022, 47023, 47024, 47025, 47026, 47027, 47030, 47031, 47033, 47034, 47035, 47036, 47037, 47038, 47039, 47040, 47041, 47042, 47043, 47044, 47045, 47046, 47048, 47050, 47051, 47052, 47053, 47054, 47055, 47056, 47057, 47058, 47059, 47060, 47061, 47062, 47063, 47064, 47065, 47066, 47067, 47068, 47069, 47070, 47071, 47072, 47073, 47074, 47075, 47076, 47077, 47078, 47079, 47080, 47081, 47082, 47083, 47086, 47087, 47089, 47090, 47091, 47093, 47094, 47095, 47096, 47097, 47098, 47099, 47102, 47106, 47107, 47108, 47109, 47110, 47114, 47115, 47117, 47118, 47119, 47121, 47122, 47123, 47124, 47125, 47126, 47127, 47130, 47132, 47134, 47135, 47136, 47137, 47138, 47139, 47142, 47143, 47145, 47146, 47147, 47149, 47150, 47151, 47152, 47153, 47154, 47155, 47158, 47162, 47163, 47164, 47165, 47166, 47167, 47169, 47170, 47171, 47173, 47174, 47175, 47176, 47177, 47178, 47179, 47180, 47181, 47182, 47183, 47184, 47186, 47188, 47189, 47190, 47191, 47192, 47193, 47194, 47195, 47198, 47199, 47201, 47202, 47203, 47205, 47206, 47207, 47208, 47209, 47210, 47211, 47214, 47216, 47218, 47219, 47220, 47221, 47222, 47223, 47225, 47226, 47227, 47229, 47230, 47231, 47232, 47233, 47234, 47235, 47236, 47237, 47238, 47239, 47240, 47241, 47242, 47243, 47244, 47246, 47247, 47248, 47249, 47250, 47251, 47252, 47253, 47254, 47255, 47256, 47257, 47258, 47259, 47260, 47261, 47262, 47263, 47264, 47265, 47266, 47267, 47268, 47269, 47270, 47271, 47273, 47274, 47275, 47276, 47277, 47278, 47279, 47281, 47282, 47283, 47285, 47286, 47287, 47289, 47290, 47291, 47292, 47293, 47294, 47295, 47298, 47300, 47302, 47303, 47304, 47305, 47306, 47307, 47309, 47310, 47311, 47313, 47314, 47315, 47317, 47318, 47319, 47320, 47321, 47322, 47323, 47324, 47326, 47328, 47330, 47331, 47332, 47333, 47334, 47335, 47338, 47339, 47341, 47342, 47343, 47345, 47346, 47347, 47348, 47349, 47350, 47351, 47354, 47356, 47358, 47359, 47360, 47361, 47362, 47363, 47365, 47366, 47367, 47368, 47369, 47370, 47371, 47372, 47373, 47374, 47375, 47376, 47377, 47378, 47379, 47380, 47381, 47382, 47383, 47385, 47386, 47387, 47388, 47389, 47390, 47391, 47393, 47394, 47395, 47396, 47397, 47398, 47399, 47400, 47401, 47402, 47403, 47404, 47405, 47406, 47407, 47408, 47409, 47410, 47411, 47412, 47413, 47414, 47415, 47416, 47417, 47418, 47419, 47422, 47423, 47425, 47426, 47427, 47429, 47430, 47431, 47432, 47433, 47434, 47435, 47437, 47438, 47440, 47442, 47443, 47444, 47445, 47446, 47447, 47450, 47451, 47453, 47454, 47455, 47457, 47458, 47459, 47460, 47461, 47462, 47463, 47466, 47468, 47470, 47471, 47472, 47473, 47474, 47475, 47478, 47479, 47481, 47482, 47483, 47485, 47486, 47487, 47488, 47489, 47490, 47491, 47494, 47496, 47499, 47500, 47503, 47504, 47505, 47506, 47507, 47508, 47509, 47510, 47511, 47512, 47513, 47514, 47515, 47516, 47517, 47518, 47519, 47520, 47521, 47522, 47523, 47524, 47525, 47526, 47527, 47528, 47529, 47530, 47531, 47534, 47535, 47537, 47538, 47539, 47541, 47542, 47543, 47544, 47545, 47546, 47547, 47550, 47552, 47554, 47555, 47556, 47557, 47558, 47559, 47562, 47563, 47565, 47571, 47572, 47573, 47574, 47575, 47578, 47580, 47583, 47584, 47586, 47590, 47591, 47593, 47594, 47595, 47597, 47598, 47599, 47600, 47601, 47602, 47603, 47606, 47611, 47612, 47613, 47614, 47615, 47618, 47619, 47620, 47621, 47622, 47623, 47625, 47626, 47627, 47628, 47629, 47630, 47631, 47632, 47633, 47634, 47635, 47636, 47638, 47639, 47640, 47641, 47642, 47643, 47644, 47645, 47646, 47647, 47648, 47649, 47650, 47651, 47652, 47653, 47654, 47655, 47656, 47657, 47658, 47659, 47660, 47661, 47662, 47663, 47664, 47665, 47666, 47667, 47668, 47669, 47670, 47671, 47674, 47675, 47677, 47678, 47679, 47681, 47683, 47684, 47685, 47686, 47687, 47690, 47692, 47695, 47696, 47697, 47698, 47702, 47703, 47705, 47706, 47707, 47709, 47710, 47711, 47712, 47713, 47714, 47715, 47718, 47722, 47723, 47724, 47725, 47726, 47727, 47730, 47731, 47733, 47734, 47735, 47737, 47738, 47739, 47740, 47741, 47742, 47743, 47744, 47745, 47746, 47750, 47752, 47753, 47754, 47755, 47757, 47758, 47759, 47760, 47761, 47762, 47763, 47764, 47765, 47766, 47767, 47768, 47769, 47770, 47771, 47772, 47773, 47774, 47775, 47776, 47777, 47778, 47779, 47780, 47781, 47782, 47783, 47786, 47789, 47790, 47791, 47793, 47795, 47796, 47797, 47798, 47799, 47802, 47804, 47806, 47807, 47808, 47809, 47810, 47811, 47813, 47814, 47815, 47817, 47818, 47819, 47820, 47821, 47822, 47823, 47824, 47825, 47826, 47827, 47828, 47829, 47830, 47831, 47834, 47835, 47836, 47837, 47838, 47839, 47840, 47841, 47842, 47843, 47844, 47845, 47846, 47847, 47848, 47849, 47850, 47851, 47852, 47853, 47854, 47855, 47856, 47857, 47858, 47859, 47860, 47861, 47862, 47863, 47864, 47865, 47866, 47867, 47869, 47870, 47871, 47873, 47874, 47875, 47877, 47878, 47879, 47880, 47881, 47882, 47883, 47884, 47886, 47888, 47890, 47891, 47892, 47893, 47894, 47895, 47897, 47898, 47899, 47901, 47902, 47903, 47905, 47906, 47907, 47908, 47909, 47910, 47911, 47912, 47914, 47916, 47917, 47918, 47919, 47920, 47921, 47922, 47923, 47927, 47929, 47930, 47935, 47936, 47937, 47938, 47939, 47942, 47944, 47946, 47947, 47948, 47950, 47953, 47954, 47955, 47957, 47958, 47959, 47961, 47962, 47963, 47964, 47965, 47966, 47967, 47968, 47970, 47972, 47973, 47974, 47975, 47976, 47977, 47978, 47979, 47981, 47982, 47983, 47984, 47985, 47986, 47987, 47988, 47989, 47990, 47991, 47992, 47993, 47994, 47995, 47996, 47997, 47998, 47999, 48000, 48001, 48002, 48003, 48004, 48005, 48006, 48007, 48009, 48010, 48011, 48013, 48014, 48015, 48017, 48018, 48019, 48020, 48021, 48022, 48023, 48024, 48025, 48026, 48027, 48028, 48029, 48030, 48031, 48032, 48033, 48034, 48035, 48037, 48038, 48039, 48041, 48042, 48043, 48045, 48046, 48047, 48048, 48049, 48050, 48051, 48053, 48054, 48056, 48057, 48058, 48059, 48060, 48061, 48062, 48063, 48065, 48066, 48067, 48069, 48070, 48071, 48073, 48074, 48075, 48076, 48077, 48078, 48079, 48081, 48082, 48084, 48085, 48086, 48087, 48088, 48089, 48090, 48091, 48092, 48093, 48094, 48095, 48096, 48097, 48098, 48099, 48100, 48101, 48102, 48103, 48104, 48105, 48106, 48107, 48108, 48109, 48110, 48111, 48112, 48113, 48114, 48115, 48116, 48117, 48118, 48119, 48122, 48123, 48125, 48126, 48129, 48131, 48132, 48133, 48134, 48135, 48138, 48142, 48144, 48146, 48147, 48153, 48154, 48160, 48161, 48162, 48163, 48166, 48168, 48170, 48171, 48172, 48174, 48175, 48178, 48179, 48181, 48182, 48183, 48185, 48186, 48187, 48188, 48189, 48190, 48191, 48194, 48198, 48199, 48200, 48202, 48203, 48206, 48207, 48209, 48210, 48211, 48212, 48213, 48214, 48215, 48216, 48217, 48218, 48219, 48220, 48222, 48223, 48224, 48225, 48226, 48227, 48228, 48229, 48230, 48231, 48232, 48233, 48234, 48235, 48236, 48237, 48238, 48239, 48240, 48241, 48242, 48243, 48244, 48245, 48246, 48247, 48248, 48249, 48250, 48251, 48252, 48253, 48254, 48255, 48256, 48257, 48258, 48259, 48262, 48263, 48265, 48266, 48269, 48271, 48272, 48273, 48274, 48275, 48278, 48280, 48283, 48284, 48285, 48286, 48287, 48290, 48291, 48293, 48294, 48297, 48298, 48299, 48300, 48301, 48302, 48303, 48306, 48310, 48311, 48312, 48313, 48314, 48315, 48318, 48319, 48321, 48322, 48323, 48325, 48326, 48327, 48328, 48329, 48330, 48331, 48332, 48334, 48338, 48339, 48340, 48342, 48343, 48345, 48346, 48347, 48349, 48350, 48351, 48352, 48353, 48354, 48355, 48356, 48357, 48358, 48359, 48360, 48361, 48362, 48363, 48364, 48365, 48366, 48367, 48368, 48369, 48370, 48371, 48375, 48377, 48378, 48379, 48381, 48382, 48383, 48384, 48385, 48386, 48387, 48390, 48392, 48394, 48395, 48396, 48397, 48398, 48399, 48401, 48402, 48403, 48405, 48406, 48407, 48408, 48409, 48410, 48411, 48412, 48413, 48414, 48415, 48416, 48417, 48418, 48419, 48421, 48422, 48423, 48424, 48425, 48426, 48427, 48429, 48430, 48431, 48432, 48433, 48434, 48435, 48436, 48437, 48438, 48439, 48440, 48441, 48442, 48443, 48444, 48445, 48446, 48447, 48449, 48450, 48451, 48452, 48453, 48454, 48455, 48458, 48459, 48461, 48462, 48463, 48465, 48466, 48467, 48468, 48469, 48470, 48471, 48474, 48475, 48476, 48477, 48478, 48479, 48480, 48481, 48482, 48483, 48485, 48486, 48487, 48489, 48490, 48491, 48492, 48493, 48494, 48495, 48496, 48497, 48498, 48499, 48500, 48501, 48502, 48503, 48504, 48505, 48506, 48507, 48508, 48509, 48510, 48511, 48514, 48515, 48517, 48518, 48523, 48524, 48525, 48526, 48527, 48530, 48532, 48534, 48535, 48536, 48539, 48541, 48542, 48543, 48544, 48545, 48546, 48547, 48549, 48550, 48551, 48552, 48553, 48554, 48555, 48556, 48557, 48558, 48559, 48561, 48562, 48563, 48564, 48565, 48566, 48567, 48569, 48570, 48571, 48572, 48573, 48574, 48575, 48576, 48577, 48578, 48579, 48580, 48581, 48582, 48583, 48584, 48585, 48586, 48587, 48588, 48589, 48590, 48591, 48592, 48593, 48594, 48595, 48598, 48599, 48601, 48602, 48603, 48605, 48606, 48607, 48608, 48609, 48610, 48611, 48612, 48613, 48614, 48615, 48616, 48618, 48619, 48620, 48621, 48622, 48623, 48625, 48626, 48627, 48629, 48630, 48631, 48633, 48634, 48635, 48636, 48637, 48638, 48639, 48641, 48642, 48644, 48646, 48647, 48648, 48649, 48650, 48651, 48654, 48655, 48657, 48658, 48659, 48661, 48662, 48663, 48664, 48665, 48666, 48667, 48670, 48672, 48673, 48674, 48675, 48676, 48677, 48678, 48679, 48680, 48681, 48682, 48683, 48684, 48685, 48686, 48687, 48688, 48689, 48690, 48691, 48692, 48693, 48694, 48695, 48696, 48697, 48698, 48699, 48700, 48701, 48702, 48703, 48704, 48705, 48706, 48707, 48710, 48711, 48713, 48714, 48715, 48717, 48719, 48720, 48721, 48722, 48723, 48726, 48728, 48732, 48733, 48734, 48735, 48738, 48739, 48741, 48742, 48743, 48745, 48747, 48748, 48749, 48750, 48751, 48754, 48758, 48759, 48760, 48761, 48762, 48766, 48767, 48769, 48770, 48771, 48773, 48774, 48775, 48776, 48777, 48778, 48779, 48782, 48786, 48787, 48788, 48789, 48790, 48791, 48794, 48795, 48796, 48797, 48798, 48799, 48800, 48801, 48802, 48803, 48804, 48805, 48806, 48807, 48809, 48810, 48811, 48812, 48813, 48814, 48815, 48816, 48817, 48818, 48819, 48820, 48821, 48822, 48823, 48824, 48825, 48826, 48827, 48828, 48829, 48830, 48831, 48832, 48833, 48834, 48835, 48836, 48837, 48838, 48839, 48840, 48841, 48842, 48843, 48844, 48845, 48846, 48847, 48850, 48851, 48853, 48854, 48857, 48858, 48859, 48860, 48861, 48862, 48863, 48865, 48866, 48870, 48871, 48872, 48873, 48874, 48875, 48877, 48878, 48879, 48880, 48881, 48882, 48883, 48884, 48885, 48886, 48887, 48888, 48889, 48890, 48891, 48892, 48893, 48894, 48895, 48896, 48898, 48899, 48900, 48901, 48902, 48903, 48906, 48907, 48908, 48909, 48910, 48911, 48912, 48913, 48914, 48915, 48916, 48917, 48918, 48919, 48922, 48926, 48927, 48928, 48929, 48930, 48931, 48932, 48933, 48934, 48935, 48936, 48937, 48938, 48939, 48940, 48941, 48942, 48943, 48944, 48945, 48946, 48947, 48948, 48949, 48950, 48951, 48952, 48953, 48954, 48955, 48956, 48957, 48958, 48959, 48962, 48963, 48965, 48966, 48967, 48969, 48970, 48971, 48972, 48973, 48974, 48975, 48978, 48979, 48980, 48982, 48983, 48984, 48985, 48986, 48987, 48988, 48989, 48990, 48991, 48992, 48993, 48994, 48995, 48996, 48997, 48998, 48999, 49000, 49001, 49002, 49003, 49004, 49005, 49006, 49007, 49008, 49009, 49010, 49011, 49012, 49013, 49014, 49015, 49016, 49017, 49018, 49019, 49020, 49021, 49022, 49023, 49024, 49025, 49026, 49027, 49028, 49029, 49030, 49031, 49032, 49033, 49034, 49035, 49036, 49037, 49038, 49039, 49040, 49041, 49042, 49043, 49045, 49046, 49047, 49048, 49049, 49050, 49051, 49052, 49053, 49054, 49055, 49056, 49057, 49058, 49059, 49060, 49061, 49062, 49063, 49064, 49065, 49066, 49067, 49068, 49069, 49070, 49071, 49073, 49074, 49075, 49076, 49077, 49078, 49079, 49080, 49081, 49082, 49083, 49084, 49085, 49086, 49087, 49088, 49089, 49090, 49091, 49092, 49094, 49095, 49096, 49097, 49098, 49099, 49102, 49103, 49105, 49106, 49107, 49109, 49110, 49111, 49112, 49113, 49114, 49115, 49117, 49118, 49120, 49122, 49123, 49124, 49125, 49126, 49127, 49128, 49129, 49130, 49131, 49132, 49133, 49134, 49135, 49136, 49137, 49138, 49139, 49140, 49141, 49142, 49143, 49144, 49145, 49146, 49147, 49148, 49149, 49150, 49151, 49152, 49153, 49154, 49155, 49156, 49157, 49158, 49159, 49160, 49161, 49162, 49163, 49164, 49165, 49166, 49167, 49168, 49169, 49170, 49171, 49172, 49173, 49174, 49175, 49176, 49177, 49178, 49179, 49180, 49181, 49182, 49183, 49184, 49185, 49186, 49187, 49188, 49189, 49190, 49191, 49192, 49193, 49194, 49195, 49196, 49197, 49198, 49199, 49200, 49201, 49202, 49203, 49204, 49205, 49206, 49207, 49208, 49209, 49210, 49211, 49213, 49214, 49215, 49216, 49217, 49218, 49219, 49220, 49221, 49222, 49223, 49224, 49225, 49226, 49227, 49228, 49229, 49230, 49231, 49232, 49234, 49235, 49236, 49237, 49238, 49239, 49241, 49242, 49243, 49245, 49246, 49247, 49249, 49250, 49251, 49252, 49253, 49254, 49255, 49258, 49259, 49260, 49261, 49262, 49263, 49264, 49265, 49266, 49267, 49268, 49269, 49270, 49271, 49272, 49273, 49274, 49275, 49276, 49277, 49278, 49279, 49280, 49281, 49282, 49283, 49284, 49285, 49286, 49287, 49288, 49289, 49290, 49291, 49292, 49293, 49294, 49295, 49298, 49299, 49301, 49302, 49303, 49305, 49306, 49307, 49308, 49309, 49310, 49311, 49314, 49316, 49318, 49319, 49320, 49321, 49322, 49323, 49326, 49329, 49330, 49335, 49336, 49337, 49338, 49339, 49342, 49346, 49347, 49348, 49350, 49351, 49354, 49355, 49357, 49358, 49359, 49361, 49362, 49363, 49364, 49365, 49366, 49367, 49370, 49374, 49375, 49376, 49377, 49378, 49379, 49382, 49383, 49385, 49386, 49387, 49389, 49390, 49391, 49392, 49393, 49394, 49395, 49398, 49400, 49402, 49403, 49404, 49405, 49406, 49407, 49409, 49410, 49411, 49413, 49414, 49415, 49417, 49418, 49419, 49420, 49421, 49422, 49423, 49425, 49426, 49427, 49428, 49430, 49431, 49432, 49433, 49434, 49435, 49441, 49442, 49445, 49448, 49449, 49450, 49451, 49454, 49458, 49459, 49460, 49461, 49463, 49466, 49467, 49469, 49470, 49471, 49473, 49474, 49475, 49476, 49477, 49478, 49479, 49482, 49486, 49487, 49488, 49489, 49490, 49491, 49494, 49495, 49497, 49498, 49499, 49501, 49502, 49503, 49504, 49505, 49506, 49507, 49510, 49514, 49515, 49516, 49517, 49518, 49519, 49521, 49522, 49523, 49525, 49526, 49527, 49529, 49530, 49531, 49532, 49533, 49534, 49535, 49536, 49537, 49538, 49539, 49540, 49542, 49543, 49544, 49545, 49546, 49547, 49551, 49553, 49554, 49555, 49557, 49559, 49560, 49561, 49562, 49563, 49566, 49568, 49570, 49571, 49572, 49574, 49575, 49578, 49579, 49581, 49582, 49583, 49585, 49586, 49587, 49588, 49589, 49590, 49591, 49592, 49593, 49594, 49595, 49596, 49598, 49599, 49600, 49601, 49602, 49603, 49605, 49606, 49607, 49609, 49610, 49611, 49613, 49614, 49615, 49616, 49617, 49618, 49619, 49621, 49622, 49625, 49626, 49627, 49628, 49629, 49630, 49631, 49633, 49634, 49635, 49637, 49638, 49639, 49641, 49642, 49643, 49644, 49645, 49646, 49647, 49650, 49652, 49653, 49654, 49655, 49656, 49657, 49658, 49659, 49662, 49663, 49665, 49666, 49667, 49669, 49670, 49671, 49672, 49673, 49674, 49675, 49678, 49680, 49682, 49683, 49684, 49685, 49686, 49687, 49690, 49691, 49693, 49694, 49697, 49698, 49699, 49700, 49701, 49702, 49703, 49706, 49708, 49710, 49712, 49715, 49717, 49718, 49719, 49720, 49721, 49722, 49723, 49724, 49725, 49726, 49727, 49728, 49729, 49730, 49731, 49732, 49733, 49734, 49735, 49737, 49738, 49739, 49740, 49741, 49742, 49743, 49746, 49747, 49749, 49750, 49751, 49753, 49754, 49755, 49756, 49757, 49758, 49759, 49761, 49762, 49763, 49764, 49766, 49767, 49768, 49769, 49770, 49771, 49774, 49775, 49777, 49778, 49779, 49781, 49782, 49783, 49784, 49785, 49786, 49787, 49790, 49792, 49794, 49795, 49796, 49797, 49798, 49799, 49802, 49803, 49804, 49805, 49806, 49807, 49809, 49810, 49811, 49812, 49813, 49814, 49815, 49817, 49818, 49820, 49822, 49823, 49824, 49825, 49826, 49827, 49830, 49831, 49833, 49834, 49835, 49838, 49839, 49840, 49841, 49842, 49843, 49846, 49848, 49850, 49851, 49852, 49853, 49854, 49855, 49856, 49857, 49858, 49859, 49860, 49861, 49862, 49863, 49864, 49865, 49866, 49867, 49868, 49869, 49870, 49871, 49872, 49873, 49874, 49875, 49876, 49877, 49878, 49879, 49880, 49881, 49882, 49883, 49886, 49887, 49889, 49890, 49893, 49894, 49895, 49896, 49897, 49898, 49902, 49904, 49906, 49907, 49908, 49909, 49911, 49914, 49917, 49918, 49919, 49921, 49922, 49923, 49924, 49925, 49926, 49927, 49930, 49931, 49934, 49935, 49936, 49937, 49938, 49942, 49943, 49945, 49946, 49947, 49949, 49950, 49951, 49952, 49953, 49954, 49955, 49958, 49959, 49962, 49963, 49964, 49965, 49966, 49967, 49968, 49969, 49970, 49971, 49972, 49973, 49974, 49975, 49976, 49977, 49978, 49979, 49980, 49981, 49982, 49983, 49984, 49985, 49986, 49987, 49988, 49990, 49991, 49992, 49993, 49994, 49995, 49996, 49997, 49998, 49999, 50000, 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009, 50010, 50011, 50012, 50013, 50014, 50015, 50016, 50017, 50018, 50019, 50020, 50021, 50022, 50023, 50026, 50027, 50029, 50030, 50031, 50033, 50035, 50036, 50037, 50038, 50039, 50042, 50043, 50046, 50047, 50048, 50049, 50050, 50051, 50053, 50054, 50055, 50057, 50058, 50059, 50061, 50062, 50063, 50064, 50065, 50066, 50067, 50068, 50069, 50070, 50071, 50072, 50073, 50074, 50075, 50076, 50077, 50078, 50079, 50080, 50081, 50082, 50083, 50084, 50085, 50086, 50087, 50088, 50089, 50090, 50091, 50092, 50093, 50094, 50095, 50096, 50097, 50098, 50099, 50100, 50101, 50102, 50103, 50104, 50105, 50106, 50107, 50108, 50109, 50110, 50111, 50113, 50114, 50115, 50116, 50117, 50118, 50119, 50120, 50121, 50122, 50123, 50124, 50125, 50126, 50127, 50128, 50129, 50130, 50131, 50132, 50133, 50134, 50135, 50138, 50139, 50141, 50142, 50145, 50147, 50148, 50149, 50150, 50151, 50154, 50155, 50156, 50158, 50159, 50160, 50161, 50162, 50163, 50166, 50167, 50169, 50170, 50171, 50172, 50173, 50174, 50175, 50176, 50177, 50178, 50179, 50180, 50181, 50182, 50183, 50185, 50186, 50187, 50188, 50189, 50190, 50191, 50193, 50194, 50195, 50196, 50197, 50198, 50199, 50200, 50201, 50202, 50203, 50204, 50205, 50206, 50207, 50208, 50209, 50210, 50211, 50213, 50214, 50215, 50216, 50217, 50218, 50219, 50221, 50222, 50223, 50225, 50226, 50227, 50229, 50230, 50231, 50232, 50233, 50234, 50235, 50238, 50239, 50240, 50241, 50242, 50243, 50244, 50245, 50246, 50247, 50249, 50250, 50251, 50252, 50253, 50254, 50255, 50256, 50257, 50258, 50259, 50260, 50261, 50262, 50263, 50264, 50265, 50266, 50267, 50268, 50269, 50270, 50271, 50272, 50273, 50274, 50275, 50278, 50279, 50281, 50282, 50283, 50285, 50286, 50287, 50288, 50289, 50290, 50291, 50294, 50295, 50296, 50298, 50299, 50300, 50301, 50302, 50303, 50305, 50306, 50307, 50308, 50309, 50310, 50311, 50312, 50313, 50314, 50315, 50316, 50317, 50318, 50319, 50320, 50321, 50322, 50323, 50325, 50326, 50327, 50328, 50329, 50330, 50331, 50333, 50334, 50335, 50336, 50337, 50338, 50339, 50340, 50341, 50342, 50343, 50344, 50345, 50346, 50347, 50348, 50349, 50350, 50351, 50352, 50353, 50354, 50355, 50356, 50357, 50358, 50359, 50361, 50362, 50363, 50365, 50366, 50367, 50368, 50369, 50370, 50371, 50372, 50373, 50374, 50375, 50376, 50377, 50378, 50379, 50380, 50381, 50382, 50383, 50384, 50385, 50386, 50387, 50388, 50389, 50390, 50391, 50392, 50393, 50394, 50395, 50396, 50397, 50398, 50399, 50400, 50401, 50402, 50403, 50404, 50405, 50406, 50407, 50408, 50410, 50411, 50412, 50413, 50414, 50415, 50418, 50419, 50421, 50422, 50423, 50425, 50427, 50428, 50429, 50430, 50434, 50435, 50436, 50437, 50438, 50439, 50440, 50441, 50442, 50443, 50445, 50446, 50447, 50449, 50450, 50451, 50453, 50454, 50455, 50456, 50457, 50458, 50459, 50461, 50462, 50463, 50464, 50465, 50466, 50467, 50468, 50469, 50470, 50471, 50474, 50475, 50477, 50478, 50479, 50481, 50482, 50483, 50484, 50485, 50486, 50487, 50490, 50492, 50494, 50495, 50496, 50497, 50498, 50499, 50502, 50503, 50507, 50511, 50512, 50513, 50514, 50518, 50522, 50523, 50524, 50527, 50530, 50531, 50533, 50534, 50535, 50537, 50538, 50539, 50540, 50541, 50542, 50543, 50546, 50550, 50551, 50552, 50553, 50554, 50555, 50558, 50559, 50561, 50562, 50563, 50565, 50566, 50568, 50569, 50570, 50571, 50574, 50576, 50578, 50579, 50580, 50582, 50585, 50586, 50587, 50589, 50590, 50591, 50593, 50594, 50595, 50596, 50597, 50598, 50599, 50600, 50602, 50603, 50604, 50605, 50606, 50607, 50608, 50609, 50610, 50611, 50614, 50615, 50618, 50623, 50624, 50625, 50626, 50627, 50635, 50637, 50639, 50642, 50643, 50645, 50646, 50647, 50649, 50650, 50651, 50652, 50653, 50654, 50655, 50658, 50660, 50662, 50663, 50664, 50665, 50666, 50667, 50671, 50673, 50674, 50675, 50677, 50680, 50681, 50682, 50683, 50690, 50691, 50692, 50697, 50698, 50699, 50701, 50702, 50703, 50705, 50706, 50707, 50708, 50709, 50710, 50711, 50714, 50717, 50718, 50719, 50720, 50721, 50722, 50723, 50726, 50727, 50729, 50730, 50731, 50735, 50737, 50738, 50742, 50744, 50746, 50748, 50749, 50750, 50751, 50754, 50755, 50757, 50758, 50759, 50761, 50762, 50763, 50764, 50765, 50766, 50767, 50770, 50774, 50775, 50776, 50777, 50778, 50779, 50782, 50783, 50785, 50786, 50787, 50788, 50789, 50790, 50791, 50792, 50793, 50794, 50795, 50797, 50798, 50800, 50802, 50803, 50804, 50805, 50806, 50807, 50810, 50811, 50813, 50814, 50815, 50817, 50818, 50819, 50820, 50821, 50822, 50823, 50826, 50828, 50830, 50831, 50832, 50833, 50834, 50835, 50838, 50839, 50841, 50842, 50843, 50845, 50846, 50847, 50848, 50849, 50850, 50851, 50854, 50856, 50858, 50859, 50860, 50861, 50862, 50863, 50866, 50867, 50869, 50870, 50871, 50875, 50876, 50877, 50878, 50879, 50882, 50884, 50886, 50887, 50888, 50889, 50890, 50891, 50894, 50895, 50897, 50898, 50899, 50901, 50902, 50903, 50904, 50905, 50906, 50907, 50910, 50911, 50914, 50915, 50916, 50917, 50918, 50919, 50922, 50923, 50925, 50926, 50927, 50929, 50930, 50931, 50932, 50933, 50934, 50935, 50938, 50939, 50940, 50942, 50943, 50944, 50945, 50946, 50947, 50950, 50951, 50953, 50954, 50955, 50957, 50958, 50959, 50960, 50961, 50962, 50963, 50966, 50968, 50970, 50971, 50972, 50973, 50974, 50975, 50978, 50979, 50981, 50982, 50983, 50985, 50986, 50987, 50988, 50989, 50990, 50991, 50994, 50996, 50998, 51000, 51001, 51002, 51003, 51006, 51007, 51009, 51010, 51011, 51013, 51014, 51015, 51016, 51017, 51019, 51022, 51024, 51033, 51034, 51035, 51037, 51038, 51039, 51041, 51042, 51043, 51044, 51045, 51046, 51047, 51049, 51050, 51052, 51053, 51054, 51055, 51056, 51057, 51058, 51059, 51062, 51063, 51065, 51066, 51067, 51071, 51072, 51073, 51074, 51078, 51083, 51084, 51085, 51087, 51090, 51091, 51093, 51097, 51099, 51100, 51101, 51102, 51103, 51106, 51111, 51112, 51113, 51114, 51115, 51118, 51119, 51121, 51122, 51123, 51125, 51126, 51127, 51128, 51129, 51130, 51131, 51134, 51138, 51139, 51140, 51141, 51142, 51143, 51146, 51147, 51149, 51151, 51153, 51154, 51155, 51156, 51157, 51158, 51159, 51161, 51162, 51163, 51164, 51166, 51167, 51168, 51169, 51170, 51171, 51173, 51174, 51175, 51177, 51178, 51179, 51181, 51182, 51183, 51184, 51185, 51186, 51187, 51188, 51189, 51190, 51191, 51192, 51193, 51194, 51195, 51196, 51197, 51198, 51199, 51202, 51203, 51205, 51206, 51207, 51209, 51211, 51212, 51213, 51214, 51215, 51218, 51220, 51223, 51224, 51225, 51226, 51227, 51230, 51231, 51233, 51234, 51235, 51237, 51238, 51239, 51240, 51241, 51242, 51243, 51246, 51248, 51250, 51251, 51252, 51253, 51254, 51255, 51257, 51258, 51259, 51261, 51262, 51263, 51265, 51266, 51267, 51268, 51269, 51270, 51271, 51274, 51275, 51278, 51279, 51280, 51281, 51282, 51283, 51285, 51286, 51287, 51288, 51289, 51290, 51291, 51292, 51293, 51294, 51295, 51296, 51297, 51298, 51299, 51300, 51301, 51302, 51303, 51304, 51305, 51306, 51307, 51308, 51309, 51310, 51311, 51314, 51315, 51317, 51318, 51319, 51321, 51323, 51324, 51325, 51326, 51327, 51330, 51332, 51336, 51337, 51338, 51342, 51343, 51344, 51345, 51346, 51347, 51349, 51350, 51351, 51352, 51353, 51354, 51355, 51356, 51358, 51360, 51362, 51363, 51364, 51365, 51366, 51367, 51369, 51370, 51371, 51372, 51373, 51374, 51375, 51376, 51377, 51378, 51379, 51380, 51381, 51382, 51383, 51384, 51385, 51386, 51387, 51390, 51391, 51392, 51393, 51394, 51395, 51397, 51398, 51399, 51401, 51402, 51403, 51405, 51406, 51407, 51408, 51409, 51410, 51411, 51414, 51416, 51418, 51419, 51420, 51421, 51422, 51423, 51426, 51427, 51429, 51430, 51431, 51432, 51433, 51434, 51435, 51436, 51437, 51438, 51439, 51440, 51441, 51442, 51443, 51444, 51446, 51447, 51448, 51449, 51450, 51451, 51454, 51455, 51457, 51458, 51459, 51463, 51464, 51465, 51466, 51467, 51470, 12288, 12289, 12290, 183, 8229, 8230, 168, 12291, 173, 8213, 8741, 65340, 8764, 8216, 8217, 8220, 8221, 12308, 12309, 12296, 12297, 12298, 12299, 12300, 12301, 12302, 12303, 12304, 12305, 177, 215, 247, 8800, 8804, 8805, 8734, 8756, 176, 8242, 8243, 8451, 8491, 65504, 65505, 65509, 9794, 9792, 8736, 8869, 8978, 8706, 8711, 8801, 8786, 167, 8251, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 9661, 9660, 8594, 8592, 8593, 8595, 8596, 12307, 8810, 8811, 8730, 8765, 8733, 8757, 8747, 8748, 8712, 8715, 8838, 8839, 8834, 8835, 8746, 8745, 8743, 8744, 65506, 51472, 51474, 51475, 51476, 51477, 51478, 51479, 51481, 51482, 51483, 51484, 51485, 51486, 51487, 51488, 51489, 51490, 51491, 51492, 51493, 51494, 51495, 51496, 51497, 51498, 51499, 51501, 51502, 51503, 51504, 51505, 51506, 51507, 51509, 51510, 51511, 51512, 51513, 51514, 51515, 51516, 51517, 51518, 51519, 51520, 51521, 51522, 51523, 51524, 51525, 51526, 51527, 51528, 51529, 51530, 51531, 51532, 51533, 51534, 51535, 51538, 51539, 51541, 51542, 51543, 51545, 51546, 51547, 51548, 51549, 51550, 51551, 51554, 51556, 51557, 51558, 51559, 51560, 51561, 51562, 51563, 51565, 51566, 51567, 8658, 8660, 8704, 8707, 180, 65374, 711, 728, 733, 730, 729, 184, 731, 161, 191, 720, 8750, 8721, 8719, 164, 8457, 8240, 9665, 9664, 9655, 9654, 9828, 9824, 9825, 9829, 9831, 9827, 8857, 9672, 9635, 9680, 9681, 9618, 9636, 9637, 9640, 9639, 9638, 9641, 9832, 9743, 9742, 9756, 9758, 182, 8224, 8225, 8597, 8599, 8601, 8598, 8600, 9837, 9833, 9834, 9836, 12927, 12828, 8470, 13255, 8482, 13250, 13272, 8481, 8364, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51569, 51570, 51571, 51573, 51574, 51575, 51576, 51577, 51578, 51579, 51581, 51582, 51583, 51584, 51585, 51586, 51587, 51588, 51589, 51590, 51591, 51594, 51595, 51597, 51598, 51599, 51601, 51602, 51603, 51604, 51605, 51606, 51607, 51610, 51612, 51614, 51615, 51616, 51617, 51618, 51619, 51620, 51621, 51622, 51623, 51624, 51625, 51626, 51627, 51628, 51629, 51630, 51631, 51632, 51633, 51634, 51635, 51636, 51637, 51638, 51639, 51640, 51641, 51642, 51643, 51644, 51645, 51646, 51647, 51650, 51651, 51653, 51654, 51657, 51659, 51660, 51661, 51662, 51663, 51666, 51668, 51671, 51672, 51675, 65281, 65282, 65283, 65284, 65285, 65286, 65287, 65288, 65289, 65290, 65291, 65292, 65293, 65294, 65295, 65296, 65297, 65298, 65299, 65300, 65301, 65302, 65303, 65304, 65305, 65306, 65307, 65308, 65309, 65310, 65311, 65312, 65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338, 65339, 65510, 65341, 65342, 65343, 65344, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 65371, 65372, 65373, 65507, 51678, 51679, 51681, 51683, 51685, 51686, 51688, 51689, 51690, 51691, 51694, 51698, 51699, 51700, 51701, 51702, 51703, 51706, 51707, 51709, 51710, 51711, 51713, 51714, 51715, 51716, 51717, 51718, 51719, 51722, 51726, 51727, 51728, 51729, 51730, 51731, 51733, 51734, 51735, 51737, 51738, 51739, 51740, 51741, 51742, 51743, 51744, 51745, 51746, 51747, 51748, 51749, 51750, 51751, 51752, 51754, 51755, 51756, 51757, 51758, 51759, 51760, 51761, 51762, 51763, 51764, 51765, 51766, 51767, 51768, 51769, 51770, 51771, 51772, 51773, 51774, 51775, 51776, 51777, 51778, 51779, 51780, 51781, 51782, 12593, 12594, 12595, 12596, 12597, 12598, 12599, 12600, 12601, 12602, 12603, 12604, 12605, 12606, 12607, 12608, 12609, 12610, 12611, 12612, 12613, 12614, 12615, 12616, 12617, 12618, 12619, 12620, 12621, 12622, 12623, 12624, 12625, 12626, 12627, 12628, 12629, 12630, 12631, 12632, 12633, 12634, 12635, 12636, 12637, 12638, 12639, 12640, 12641, 12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657, 12658, 12659, 12660, 12661, 12662, 12663, 12664, 12665, 12666, 12667, 12668, 12669, 12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678, 12679, 12680, 12681, 12682, 12683, 12684, 12685, 12686, 51783, 51784, 51785, 51786, 51787, 51790, 51791, 51793, 51794, 51795, 51797, 51798, 51799, 51800, 51801, 51802, 51803, 51806, 51810, 51811, 51812, 51813, 51814, 51815, 51817, 51818, 51819, 51820, 51821, 51822, 51823, 51824, 51825, 51826, 51827, 51828, 51829, 51830, 51831, 51832, 51833, 51834, 51835, 51836, 51838, 51839, 51840, 51841, 51842, 51843, 51845, 51846, 51847, 51848, 51849, 51850, 51851, 51852, 51853, 51854, 51855, 51856, 51857, 51858, 51859, 51860, 51861, 51862, 51863, 51865, 51866, 51867, 51868, 51869, 51870, 51871, 51872, 51873, 51874, 51875, 51876, 51877, 51878, 51879, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 0, 0, 0, 0, 0, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 0, 0, 0, 0, 0, 0, 0, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 0, 0, 0, 0, 0, 0, 0, 0, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 0, 0, 0, 0, 0, 0, 51880, 51881, 51882, 51883, 51884, 51885, 51886, 51887, 51888, 51889, 51890, 51891, 51892, 51893, 51894, 51895, 51896, 51897, 51898, 51899, 51902, 51903, 51905, 51906, 51907, 51909, 51910, 51911, 51912, 51913, 51914, 51915, 51918, 51920, 51922, 51924, 51925, 51926, 51927, 51930, 51931, 51932, 51933, 51934, 51935, 51937, 51938, 51939, 51940, 51941, 51942, 51943, 51944, 51945, 51946, 51947, 51949, 51950, 51951, 51952, 51953, 51954, 51955, 51957, 51958, 51959, 51960, 51961, 51962, 51963, 51964, 51965, 51966, 51967, 51968, 51969, 51970, 51971, 51972, 51973, 51974, 51975, 51977, 51978, 9472, 9474, 9484, 9488, 9496, 9492, 9500, 9516, 9508, 9524, 9532, 9473, 9475, 9487, 9491, 9499, 9495, 9507, 9523, 9515, 9531, 9547, 9504, 9519, 9512, 9527, 9535, 9501, 9520, 9509, 9528, 9538, 9490, 9489, 9498, 9497, 9494, 9493, 9486, 9485, 9502, 9503, 9505, 9506, 9510, 9511, 9513, 9514, 9517, 9518, 9521, 9522, 9525, 9526, 9529, 9530, 9533, 9534, 9536, 9537, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51979, 51980, 51981, 51982, 51983, 51985, 51986, 51987, 51989, 51990, 51991, 51993, 51994, 51995, 51996, 51997, 51998, 51999, 52002, 52003, 52004, 52005, 52006, 52007, 52008, 52009, 52010, 52011, 52012, 52013, 52014, 52015, 52016, 52017, 52018, 52019, 52020, 52021, 52022, 52023, 52024, 52025, 52026, 52027, 52028, 52029, 52030, 52031, 52032, 52034, 52035, 52036, 52037, 52038, 52039, 52042, 52043, 52045, 52046, 52047, 52049, 52050, 52051, 52052, 52053, 52054, 52055, 52058, 52059, 52060, 52062, 52063, 52064, 52065, 52066, 52067, 52069, 52070, 52071, 52072, 52073, 52074, 52075, 52076, 13205, 13206, 13207, 8467, 13208, 13252, 13219, 13220, 13221, 13222, 13209, 13210, 13211, 13212, 13213, 13214, 13215, 13216, 13217, 13218, 13258, 13197, 13198, 13199, 13263, 13192, 13193, 13256, 13223, 13224, 13232, 13233, 13234, 13235, 13236, 13237, 13238, 13239, 13240, 13241, 13184, 13185, 13186, 13187, 13188, 13242, 13243, 13244, 13245, 13246, 13247, 13200, 13201, 13202, 13203, 13204, 8486, 13248, 13249, 13194, 13195, 13196, 13270, 13253, 13229, 13230, 13231, 13275, 13225, 13226, 13227, 13228, 13277, 13264, 13267, 13251, 13257, 13276, 13254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52077, 52078, 52079, 52080, 52081, 52082, 52083, 52084, 52085, 52086, 52087, 52090, 52091, 52092, 52093, 52094, 52095, 52096, 52097, 52098, 52099, 52100, 52101, 52102, 52103, 52104, 52105, 52106, 52107, 52108, 52109, 52110, 52111, 52112, 52113, 52114, 52115, 52116, 52117, 52118, 52119, 52120, 52121, 52122, 52123, 52125, 52126, 52127, 52128, 52129, 52130, 52131, 52132, 52133, 52134, 52135, 52136, 52137, 52138, 52139, 52140, 52141, 52142, 52143, 52144, 52145, 52146, 52147, 52148, 52149, 52150, 52151, 52153, 52154, 52155, 52156, 52157, 52158, 52159, 52160, 52161, 52162, 52163, 52164, 198, 208, 170, 294, 0, 306, 0, 319, 321, 216, 338, 186, 222, 358, 330, 0, 12896, 12897, 12898, 12899, 12900, 12901, 12902, 12903, 12904, 12905, 12906, 12907, 12908, 12909, 12910, 12911, 12912, 12913, 12914, 12915, 12916, 12917, 12918, 12919, 12920, 12921, 12922, 12923, 9424, 9425, 9426, 9427, 9428, 9429, 9430, 9431, 9432, 9433, 9434, 9435, 9436, 9437, 9438, 9439, 9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448, 9449, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 189, 8531, 8532, 188, 190, 8539, 8540, 8541, 8542, 52165, 52166, 52167, 52168, 52169, 52170, 52171, 52172, 52173, 52174, 52175, 52176, 52177, 52178, 52179, 52181, 52182, 52183, 52184, 52185, 52186, 52187, 52188, 52189, 52190, 52191, 52192, 52193, 52194, 52195, 52197, 52198, 52200, 52202, 52203, 52204, 52205, 52206, 52207, 52208, 52209, 52210, 52211, 52212, 52213, 52214, 52215, 52216, 52217, 52218, 52219, 52220, 52221, 52222, 52223, 52224, 52225, 52226, 52227, 52228, 52229, 52230, 52231, 52232, 52233, 52234, 52235, 52238, 52239, 52241, 52242, 52243, 52245, 52246, 52247, 52248, 52249, 52250, 52251, 52254, 52255, 52256, 52259, 52260, 230, 273, 240, 295, 305, 307, 312, 320, 322, 248, 339, 223, 254, 359, 331, 329, 12800, 12801, 12802, 12803, 12804, 12805, 12806, 12807, 12808, 12809, 12810, 12811, 12812, 12813, 12814, 12815, 12816, 12817, 12818, 12819, 12820, 12821, 12822, 12823, 12824, 12825, 12826, 12827, 9372, 9373, 9374, 9375, 9376, 9377, 9378, 9379, 9380, 9381, 9382, 9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391, 9392, 9393, 9394, 9395, 9396, 9397, 9332, 9333, 9334, 9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346, 185, 178, 179, 8308, 8319, 8321, 8322, 8323, 8324, 52261, 52262, 52266, 52267, 52269, 52271, 52273, 52274, 52275, 52276, 52277, 52278, 52279, 52282, 52287, 52288, 52289, 52290, 52291, 52294, 52295, 52297, 52298, 52299, 52301, 52302, 52303, 52304, 52305, 52306, 52307, 52310, 52314, 52315, 52316, 52317, 52318, 52319, 52321, 52322, 52323, 52325, 52327, 52329, 52330, 52331, 52332, 52333, 52334, 52335, 52337, 52338, 52339, 52340, 52342, 52343, 52344, 52345, 52346, 52347, 52348, 52349, 52350, 52351, 52352, 52353, 52354, 52355, 52356, 52357, 52358, 52359, 52360, 52361, 52362, 52363, 52364, 52365, 52366, 52367, 52368, 52369, 52370, 52371, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52372, 52373, 52374, 52375, 52378, 52379, 52381, 52382, 52383, 52385, 52386, 52387, 52388, 52389, 52390, 52391, 52394, 52398, 52399, 52400, 52401, 52402, 52403, 52406, 52407, 52409, 52410, 52411, 52413, 52414, 52415, 52416, 52417, 52418, 52419, 52422, 52424, 52426, 52427, 52428, 52429, 52430, 52431, 52433, 52434, 52435, 52437, 52438, 52439, 52440, 52441, 52442, 52443, 52444, 52445, 52446, 52447, 52448, 52449, 52450, 52451, 52453, 52454, 52455, 52456, 52457, 52458, 52459, 52461, 52462, 52463, 52465, 52466, 52467, 52468, 52469, 52470, 52471, 52472, 52473, 52474, 52475, 52476, 52477, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, 0, 0, 0, 0, 0, 0, 0, 0, 52478, 52479, 52480, 52482, 52483, 52484, 52485, 52486, 52487, 52490, 52491, 52493, 52494, 52495, 52497, 52498, 52499, 52500, 52501, 52502, 52503, 52506, 52508, 52510, 52511, 52512, 52513, 52514, 52515, 52517, 52518, 52519, 52521, 52522, 52523, 52525, 52526, 52527, 52528, 52529, 52530, 52531, 52532, 52533, 52534, 52535, 52536, 52538, 52539, 52540, 52541, 52542, 52543, 52544, 52545, 52546, 52547, 52548, 52549, 52550, 52551, 52552, 52553, 52554, 52555, 52556, 52557, 52558, 52559, 52560, 52561, 52562, 52563, 52564, 52565, 52566, 52567, 52568, 52569, 52570, 52571, 52573, 52574, 52575, 1040, 1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1072, 1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52577, 52578, 52579, 52581, 52582, 52583, 52584, 52585, 52586, 52587, 52590, 52592, 52594, 52595, 52596, 52597, 52598, 52599, 52601, 52602, 52603, 52604, 52605, 52606, 52607, 52608, 52609, 52610, 52611, 52612, 52613, 52614, 52615, 52617, 52618, 52619, 52620, 52621, 52622, 52623, 52624, 52625, 52626, 52627, 52630, 52631, 52633, 52634, 52635, 52637, 52638, 52639, 52640, 52641, 52642, 52643, 52646, 52648, 52650, 52651, 52652, 52653, 52654, 52655, 52657, 52658, 52659, 52660, 52661, 52662, 52663, 52664, 52665, 52666, 52667, 52668, 52669, 52670, 52671, 52672, 52673, 52674, 52675, 52677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52678, 52679, 52680, 52681, 52682, 52683, 52685, 52686, 52687, 52689, 52690, 52691, 52692, 52693, 52694, 52695, 52696, 52697, 52698, 52699, 52700, 52701, 52702, 52703, 52704, 52705, 52706, 52707, 52708, 52709, 52710, 52711, 52713, 52714, 52715, 52717, 52718, 52719, 52721, 52722, 52723, 52724, 52725, 52726, 52727, 52730, 52732, 52734, 52735, 52736, 52737, 52738, 52739, 52741, 52742, 52743, 52745, 52746, 52747, 52749, 52750, 52751, 52752, 52753, 52754, 52755, 52757, 52758, 52759, 52760, 52762, 52763, 52764, 52765, 52766, 52767, 52770, 52771, 52773, 52774, 52775, 52777, 52778, 52779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52780, 52781, 52782, 52783, 52786, 52788, 52790, 52791, 52792, 52793, 52794, 52795, 52796, 52797, 52798, 52799, 52800, 52801, 52802, 52803, 52804, 52805, 52806, 52807, 52808, 52809, 52810, 52811, 52812, 52813, 52814, 52815, 52816, 52817, 52818, 52819, 52820, 52821, 52822, 52823, 52826, 52827, 52829, 52830, 52834, 52835, 52836, 52837, 52838, 52839, 52842, 52844, 52846, 52847, 52848, 52849, 52850, 52851, 52854, 52855, 52857, 52858, 52859, 52861, 52862, 52863, 52864, 52865, 52866, 52867, 52870, 52872, 52874, 52875, 52876, 52877, 52878, 52879, 52882, 52883, 52885, 52886, 52887, 52889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52890, 52891, 52892, 52893, 52894, 52895, 52898, 52902, 52903, 52904, 52905, 52906, 52907, 52910, 52911, 52912, 52913, 52914, 52915, 52916, 52917, 52918, 52919, 52920, 52921, 52922, 52923, 52924, 52925, 52926, 52927, 52928, 52930, 52931, 52932, 52933, 52934, 52935, 52936, 52937, 52938, 52939, 52940, 52941, 52942, 52943, 52944, 52945, 52946, 52947, 52948, 52949, 52950, 52951, 52952, 52953, 52954, 52955, 52956, 52957, 52958, 52959, 52960, 52961, 52962, 52963, 52966, 52967, 52969, 52970, 52973, 52974, 52975, 52976, 52977, 52978, 52979, 52982, 52986, 52987, 52988, 52989, 52990, 52991, 44032, 44033, 44036, 44039, 44040, 44041, 44042, 44048, 44049, 44050, 44051, 44052, 44053, 44054, 44055, 44057, 44058, 44059, 44060, 44061, 44064, 44068, 44076, 44077, 44079, 44080, 44081, 44088, 44089, 44092, 44096, 44107, 44109, 44116, 44120, 44124, 44144, 44145, 44148, 44151, 44152, 44154, 44160, 44161, 44163, 44164, 44165, 44166, 44169, 44170, 44171, 44172, 44176, 44180, 44188, 44189, 44191, 44192, 44193, 44200, 44201, 44202, 44204, 44207, 44208, 44216, 44217, 44219, 44220, 44221, 44225, 44228, 44232, 44236, 44245, 44247, 44256, 44257, 44260, 44263, 44264, 44266, 44268, 44271, 44272, 44273, 44275, 44277, 44278, 44284, 44285, 44288, 44292, 44294, 52994, 52995, 52997, 52998, 52999, 53001, 53002, 53003, 53004, 53005, 53006, 53007, 53010, 53012, 53014, 53015, 53016, 53017, 53018, 53019, 53021, 53022, 53023, 53025, 53026, 53027, 53029, 53030, 53031, 53032, 53033, 53034, 53035, 53038, 53042, 53043, 53044, 53045, 53046, 53047, 53049, 53050, 53051, 53052, 53053, 53054, 53055, 53056, 53057, 53058, 53059, 53060, 53061, 53062, 53063, 53064, 53065, 53066, 53067, 53068, 53069, 53070, 53071, 53072, 53073, 53074, 53075, 53078, 53079, 53081, 53082, 53083, 53085, 53086, 53087, 53088, 53089, 53090, 53091, 53094, 53096, 53098, 53099, 53100, 44300, 44301, 44303, 44305, 44312, 44316, 44320, 44329, 44332, 44333, 44340, 44341, 44344, 44348, 44356, 44357, 44359, 44361, 44368, 44372, 44376, 44385, 44387, 44396, 44397, 44400, 44403, 44404, 44405, 44406, 44411, 44412, 44413, 44415, 44417, 44418, 44424, 44425, 44428, 44432, 44444, 44445, 44452, 44471, 44480, 44481, 44484, 44488, 44496, 44497, 44499, 44508, 44512, 44516, 44536, 44537, 44540, 44543, 44544, 44545, 44552, 44553, 44555, 44557, 44564, 44592, 44593, 44596, 44599, 44600, 44602, 44608, 44609, 44611, 44613, 44614, 44618, 44620, 44621, 44622, 44624, 44628, 44630, 44636, 44637, 44639, 44640, 44641, 44645, 44648, 44649, 44652, 44656, 44664, 53101, 53102, 53103, 53106, 53107, 53109, 53110, 53111, 53113, 53114, 53115, 53116, 53117, 53118, 53119, 53121, 53122, 53123, 53124, 53126, 53127, 53128, 53129, 53130, 53131, 53133, 53134, 53135, 53136, 53137, 53138, 53139, 53140, 53141, 53142, 53143, 53144, 53145, 53146, 53147, 53148, 53149, 53150, 53151, 53152, 53154, 53155, 53156, 53157, 53158, 53159, 53161, 53162, 53163, 53164, 53165, 53166, 53167, 53169, 53170, 53171, 53172, 53173, 53174, 53175, 53176, 53177, 53178, 53179, 53180, 53181, 53182, 53183, 53184, 53185, 53186, 53187, 53189, 53190, 53191, 53192, 53193, 53194, 53195, 44665, 44667, 44668, 44669, 44676, 44677, 44684, 44732, 44733, 44734, 44736, 44740, 44748, 44749, 44751, 44752, 44753, 44760, 44761, 44764, 44776, 44779, 44781, 44788, 44792, 44796, 44807, 44808, 44813, 44816, 44844, 44845, 44848, 44850, 44852, 44860, 44861, 44863, 44865, 44866, 44867, 44872, 44873, 44880, 44892, 44893, 44900, 44901, 44921, 44928, 44932, 44936, 44944, 44945, 44949, 44956, 44984, 44985, 44988, 44992, 44999, 45000, 45001, 45003, 45005, 45006, 45012, 45020, 45032, 45033, 45040, 45041, 45044, 45048, 45056, 45057, 45060, 45068, 45072, 45076, 45084, 45085, 45096, 45124, 45125, 45128, 45130, 45132, 45134, 45139, 45140, 45141, 45143, 45145, 53196, 53197, 53198, 53199, 53200, 53201, 53202, 53203, 53204, 53205, 53206, 53207, 53208, 53209, 53210, 53211, 53212, 53213, 53214, 53215, 53218, 53219, 53221, 53222, 53223, 53225, 53226, 53227, 53228, 53229, 53230, 53231, 53234, 53236, 53238, 53239, 53240, 53241, 53242, 53243, 53245, 53246, 53247, 53249, 53250, 53251, 53253, 53254, 53255, 53256, 53257, 53258, 53259, 53260, 53261, 53262, 53263, 53264, 53266, 53267, 53268, 53269, 53270, 53271, 53273, 53274, 53275, 53276, 53277, 53278, 53279, 53280, 53281, 53282, 53283, 53284, 53285, 53286, 53287, 53288, 53289, 53290, 53291, 53292, 45149, 45180, 45181, 45184, 45188, 45196, 45197, 45199, 45201, 45208, 45209, 45210, 45212, 45215, 45216, 45217, 45218, 45224, 45225, 45227, 45228, 45229, 45230, 45231, 45233, 45235, 45236, 45237, 45240, 45244, 45252, 45253, 45255, 45256, 45257, 45264, 45265, 45268, 45272, 45280, 45285, 45320, 45321, 45323, 45324, 45328, 45330, 45331, 45336, 45337, 45339, 45340, 45341, 45347, 45348, 45349, 45352, 45356, 45364, 45365, 45367, 45368, 45369, 45376, 45377, 45380, 45384, 45392, 45393, 45396, 45397, 45400, 45404, 45408, 45432, 45433, 45436, 45440, 45442, 45448, 45449, 45451, 45453, 45458, 45459, 45460, 45464, 45468, 45480, 45516, 45520, 45524, 45532, 45533, 53294, 53295, 53296, 53297, 53298, 53299, 53302, 53303, 53305, 53306, 53307, 53309, 53310, 53311, 53312, 53313, 53314, 53315, 53318, 53320, 53322, 53323, 53324, 53325, 53326, 53327, 53329, 53330, 53331, 53333, 53334, 53335, 53337, 53338, 53339, 53340, 53341, 53342, 53343, 53345, 53346, 53347, 53348, 53349, 53350, 53351, 53352, 53353, 53354, 53355, 53358, 53359, 53361, 53362, 53363, 53365, 53366, 53367, 53368, 53369, 53370, 53371, 53374, 53375, 53376, 53378, 53379, 53380, 53381, 53382, 53383, 53384, 53385, 53386, 53387, 53388, 53389, 53390, 53391, 53392, 53393, 53394, 53395, 53396, 45535, 45544, 45545, 45548, 45552, 45561, 45563, 45565, 45572, 45573, 45576, 45579, 45580, 45588, 45589, 45591, 45593, 45600, 45620, 45628, 45656, 45660, 45664, 45672, 45673, 45684, 45685, 45692, 45700, 45701, 45705, 45712, 45713, 45716, 45720, 45721, 45722, 45728, 45729, 45731, 45733, 45734, 45738, 45740, 45744, 45748, 45768, 45769, 45772, 45776, 45778, 45784, 45785, 45787, 45789, 45794, 45796, 45797, 45798, 45800, 45803, 45804, 45805, 45806, 45807, 45811, 45812, 45813, 45815, 45816, 45817, 45818, 45819, 45823, 45824, 45825, 45828, 45832, 45840, 45841, 45843, 45844, 45845, 45852, 45908, 45909, 45910, 45912, 45915, 45916, 45918, 45919, 45924, 45925, 53397, 53398, 53399, 53400, 53401, 53402, 53403, 53404, 53405, 53406, 53407, 53408, 53409, 53410, 53411, 53414, 53415, 53417, 53418, 53419, 53421, 53422, 53423, 53424, 53425, 53426, 53427, 53430, 53432, 53434, 53435, 53436, 53437, 53438, 53439, 53442, 53443, 53445, 53446, 53447, 53450, 53451, 53452, 53453, 53454, 53455, 53458, 53462, 53463, 53464, 53465, 53466, 53467, 53470, 53471, 53473, 53474, 53475, 53477, 53478, 53479, 53480, 53481, 53482, 53483, 53486, 53490, 53491, 53492, 53493, 53494, 53495, 53497, 53498, 53499, 53500, 53501, 53502, 53503, 53504, 53505, 53506, 53507, 53508, 45927, 45929, 45931, 45934, 45936, 45937, 45940, 45944, 45952, 45953, 45955, 45956, 45957, 45964, 45968, 45972, 45984, 45985, 45992, 45996, 46020, 46021, 46024, 46027, 46028, 46030, 46032, 46036, 46037, 46039, 46041, 46043, 46045, 46048, 46052, 46056, 46076, 46096, 46104, 46108, 46112, 46120, 46121, 46123, 46132, 46160, 46161, 46164, 46168, 46176, 46177, 46179, 46181, 46188, 46208, 46216, 46237, 46244, 46248, 46252, 46261, 46263, 46265, 46272, 46276, 46280, 46288, 46293, 46300, 46301, 46304, 46307, 46308, 46310, 46316, 46317, 46319, 46321, 46328, 46356, 46357, 46360, 46363, 46364, 46372, 46373, 46375, 46376, 46377, 46378, 46384, 46385, 46388, 46392, 53509, 53510, 53511, 53512, 53513, 53514, 53515, 53516, 53518, 53519, 53520, 53521, 53522, 53523, 53524, 53525, 53526, 53527, 53528, 53529, 53530, 53531, 53532, 53533, 53534, 53535, 53536, 53537, 53538, 53539, 53540, 53541, 53542, 53543, 53544, 53545, 53546, 53547, 53548, 53549, 53550, 53551, 53554, 53555, 53557, 53558, 53559, 53561, 53563, 53564, 53565, 53566, 53567, 53570, 53574, 53575, 53576, 53577, 53578, 53579, 53582, 53583, 53585, 53586, 53587, 53589, 53590, 53591, 53592, 53593, 53594, 53595, 53598, 53600, 53602, 53603, 53604, 53605, 53606, 53607, 53609, 53610, 53611, 53613, 46400, 46401, 46403, 46404, 46405, 46411, 46412, 46413, 46416, 46420, 46428, 46429, 46431, 46432, 46433, 46496, 46497, 46500, 46504, 46506, 46507, 46512, 46513, 46515, 46516, 46517, 46523, 46524, 46525, 46528, 46532, 46540, 46541, 46543, 46544, 46545, 46552, 46572, 46608, 46609, 46612, 46616, 46629, 46636, 46644, 46664, 46692, 46696, 46748, 46749, 46752, 46756, 46763, 46764, 46769, 46804, 46832, 46836, 46840, 46848, 46849, 46853, 46888, 46889, 46892, 46895, 46896, 46904, 46905, 46907, 46916, 46920, 46924, 46932, 46933, 46944, 46948, 46952, 46960, 46961, 46963, 46965, 46972, 46973, 46976, 46980, 46988, 46989, 46991, 46992, 46993, 46994, 46998, 46999, 53614, 53615, 53616, 53617, 53618, 53619, 53620, 53621, 53622, 53623, 53624, 53625, 53626, 53627, 53629, 53630, 53631, 53632, 53633, 53634, 53635, 53637, 53638, 53639, 53641, 53642, 53643, 53644, 53645, 53646, 53647, 53648, 53649, 53650, 53651, 53652, 53653, 53654, 53655, 53656, 53657, 53658, 53659, 53660, 53661, 53662, 53663, 53666, 53667, 53669, 53670, 53671, 53673, 53674, 53675, 53676, 53677, 53678, 53679, 53682, 53684, 53686, 53687, 53688, 53689, 53691, 53693, 53694, 53695, 53697, 53698, 53699, 53700, 53701, 53702, 53703, 53704, 53705, 53706, 53707, 53708, 53709, 53710, 53711, 47000, 47001, 47004, 47008, 47016, 47017, 47019, 47020, 47021, 47028, 47029, 47032, 47047, 47049, 47084, 47085, 47088, 47092, 47100, 47101, 47103, 47104, 47105, 47111, 47112, 47113, 47116, 47120, 47128, 47129, 47131, 47133, 47140, 47141, 47144, 47148, 47156, 47157, 47159, 47160, 47161, 47168, 47172, 47185, 47187, 47196, 47197, 47200, 47204, 47212, 47213, 47215, 47217, 47224, 47228, 47245, 47272, 47280, 47284, 47288, 47296, 47297, 47299, 47301, 47308, 47312, 47316, 47325, 47327, 47329, 47336, 47337, 47340, 47344, 47352, 47353, 47355, 47357, 47364, 47384, 47392, 47420, 47421, 47424, 47428, 47436, 47439, 47441, 47448, 47449, 47452, 47456, 47464, 47465, 53712, 53713, 53714, 53715, 53716, 53717, 53718, 53719, 53721, 53722, 53723, 53724, 53725, 53726, 53727, 53728, 53729, 53730, 53731, 53732, 53733, 53734, 53735, 53736, 53737, 53738, 53739, 53740, 53741, 53742, 53743, 53744, 53745, 53746, 53747, 53749, 53750, 53751, 53753, 53754, 53755, 53756, 53757, 53758, 53759, 53760, 53761, 53762, 53763, 53764, 53765, 53766, 53768, 53770, 53771, 53772, 53773, 53774, 53775, 53777, 53778, 53779, 53780, 53781, 53782, 53783, 53784, 53785, 53786, 53787, 53788, 53789, 53790, 53791, 53792, 53793, 53794, 53795, 53796, 53797, 53798, 53799, 53800, 53801, 47467, 47469, 47476, 47477, 47480, 47484, 47492, 47493, 47495, 47497, 47498, 47501, 47502, 47532, 47533, 47536, 47540, 47548, 47549, 47551, 47553, 47560, 47561, 47564, 47566, 47567, 47568, 47569, 47570, 47576, 47577, 47579, 47581, 47582, 47585, 47587, 47588, 47589, 47592, 47596, 47604, 47605, 47607, 47608, 47609, 47610, 47616, 47617, 47624, 47637, 47672, 47673, 47676, 47680, 47682, 47688, 47689, 47691, 47693, 47694, 47699, 47700, 47701, 47704, 47708, 47716, 47717, 47719, 47720, 47721, 47728, 47729, 47732, 47736, 47747, 47748, 47749, 47751, 47756, 47784, 47785, 47787, 47788, 47792, 47794, 47800, 47801, 47803, 47805, 47812, 47816, 47832, 47833, 47868, 53802, 53803, 53806, 53807, 53809, 53810, 53811, 53813, 53814, 53815, 53816, 53817, 53818, 53819, 53822, 53824, 53826, 53827, 53828, 53829, 53830, 53831, 53833, 53834, 53835, 53836, 53837, 53838, 53839, 53840, 53841, 53842, 53843, 53844, 53845, 53846, 53847, 53848, 53849, 53850, 53851, 53853, 53854, 53855, 53856, 53857, 53858, 53859, 53861, 53862, 53863, 53864, 53865, 53866, 53867, 53868, 53869, 53870, 53871, 53872, 53873, 53874, 53875, 53876, 53877, 53878, 53879, 53880, 53881, 53882, 53883, 53884, 53885, 53886, 53887, 53890, 53891, 53893, 53894, 53895, 53897, 53898, 53899, 53900, 47872, 47876, 47885, 47887, 47889, 47896, 47900, 47904, 47913, 47915, 47924, 47925, 47926, 47928, 47931, 47932, 47933, 47934, 47940, 47941, 47943, 47945, 47949, 47951, 47952, 47956, 47960, 47969, 47971, 47980, 48008, 48012, 48016, 48036, 48040, 48044, 48052, 48055, 48064, 48068, 48072, 48080, 48083, 48120, 48121, 48124, 48127, 48128, 48130, 48136, 48137, 48139, 48140, 48141, 48143, 48145, 48148, 48149, 48150, 48151, 48152, 48155, 48156, 48157, 48158, 48159, 48164, 48165, 48167, 48169, 48173, 48176, 48177, 48180, 48184, 48192, 48193, 48195, 48196, 48197, 48201, 48204, 48205, 48208, 48221, 48260, 48261, 48264, 48267, 48268, 48270, 48276, 48277, 48279, 53901, 53902, 53903, 53906, 53907, 53908, 53910, 53911, 53912, 53913, 53914, 53915, 53917, 53918, 53919, 53921, 53922, 53923, 53925, 53926, 53927, 53928, 53929, 53930, 53931, 53933, 53934, 53935, 53936, 53938, 53939, 53940, 53941, 53942, 53943, 53946, 53947, 53949, 53950, 53953, 53955, 53956, 53957, 53958, 53959, 53962, 53964, 53965, 53966, 53967, 53968, 53969, 53970, 53971, 53973, 53974, 53975, 53977, 53978, 53979, 53981, 53982, 53983, 53984, 53985, 53986, 53987, 53990, 53991, 53992, 53993, 53994, 53995, 53996, 53997, 53998, 53999, 54002, 54003, 54005, 54006, 54007, 54009, 54010, 48281, 48282, 48288, 48289, 48292, 48295, 48296, 48304, 48305, 48307, 48308, 48309, 48316, 48317, 48320, 48324, 48333, 48335, 48336, 48337, 48341, 48344, 48348, 48372, 48373, 48374, 48376, 48380, 48388, 48389, 48391, 48393, 48400, 48404, 48420, 48428, 48448, 48456, 48457, 48460, 48464, 48472, 48473, 48484, 48488, 48512, 48513, 48516, 48519, 48520, 48521, 48522, 48528, 48529, 48531, 48533, 48537, 48538, 48540, 48548, 48560, 48568, 48596, 48597, 48600, 48604, 48617, 48624, 48628, 48632, 48640, 48643, 48645, 48652, 48653, 48656, 48660, 48668, 48669, 48671, 48708, 48709, 48712, 48716, 48718, 48724, 48725, 48727, 48729, 48730, 48731, 48736, 48737, 48740, 54011, 54012, 54013, 54014, 54015, 54018, 54020, 54022, 54023, 54024, 54025, 54026, 54027, 54031, 54033, 54034, 54035, 54037, 54039, 54040, 54041, 54042, 54043, 54046, 54050, 54051, 54052, 54054, 54055, 54058, 54059, 54061, 54062, 54063, 54065, 54066, 54067, 54068, 54069, 54070, 54071, 54074, 54078, 54079, 54080, 54081, 54082, 54083, 54086, 54087, 54088, 54089, 54090, 54091, 54092, 54093, 54094, 54095, 54096, 54097, 54098, 54099, 54100, 54101, 54102, 54103, 54104, 54105, 54106, 54107, 54108, 54109, 54110, 54111, 54112, 54113, 54114, 54115, 54116, 54117, 54118, 54119, 54120, 54121, 48744, 48746, 48752, 48753, 48755, 48756, 48757, 48763, 48764, 48765, 48768, 48772, 48780, 48781, 48783, 48784, 48785, 48792, 48793, 48808, 48848, 48849, 48852, 48855, 48856, 48864, 48867, 48868, 48869, 48876, 48897, 48904, 48905, 48920, 48921, 48923, 48924, 48925, 48960, 48961, 48964, 48968, 48976, 48977, 48981, 49044, 49072, 49093, 49100, 49101, 49104, 49108, 49116, 49119, 49121, 49212, 49233, 49240, 49244, 49248, 49256, 49257, 49296, 49297, 49300, 49304, 49312, 49313, 49315, 49317, 49324, 49325, 49327, 49328, 49331, 49332, 49333, 49334, 49340, 49341, 49343, 49344, 49345, 49349, 49352, 49353, 49356, 49360, 49368, 49369, 49371, 49372, 49373, 49380, 54122, 54123, 54124, 54125, 54126, 54127, 54128, 54129, 54130, 54131, 54132, 54133, 54134, 54135, 54136, 54137, 54138, 54139, 54142, 54143, 54145, 54146, 54147, 54149, 54150, 54151, 54152, 54153, 54154, 54155, 54158, 54162, 54163, 54164, 54165, 54166, 54167, 54170, 54171, 54173, 54174, 54175, 54177, 54178, 54179, 54180, 54181, 54182, 54183, 54186, 54188, 54190, 54191, 54192, 54193, 54194, 54195, 54197, 54198, 54199, 54201, 54202, 54203, 54205, 54206, 54207, 54208, 54209, 54210, 54211, 54214, 54215, 54218, 54219, 54220, 54221, 54222, 54223, 54225, 54226, 54227, 54228, 54229, 54230, 49381, 49384, 49388, 49396, 49397, 49399, 49401, 49408, 49412, 49416, 49424, 49429, 49436, 49437, 49438, 49439, 49440, 49443, 49444, 49446, 49447, 49452, 49453, 49455, 49456, 49457, 49462, 49464, 49465, 49468, 49472, 49480, 49481, 49483, 49484, 49485, 49492, 49493, 49496, 49500, 49508, 49509, 49511, 49512, 49513, 49520, 49524, 49528, 49541, 49548, 49549, 49550, 49552, 49556, 49558, 49564, 49565, 49567, 49569, 49573, 49576, 49577, 49580, 49584, 49597, 49604, 49608, 49612, 49620, 49623, 49624, 49632, 49636, 49640, 49648, 49649, 49651, 49660, 49661, 49664, 49668, 49676, 49677, 49679, 49681, 49688, 49689, 49692, 49695, 49696, 49704, 49705, 49707, 49709, 54231, 54233, 54234, 54235, 54236, 54237, 54238, 54239, 54240, 54242, 54244, 54245, 54246, 54247, 54248, 54249, 54250, 54251, 54254, 54255, 54257, 54258, 54259, 54261, 54262, 54263, 54264, 54265, 54266, 54267, 54270, 54272, 54274, 54275, 54276, 54277, 54278, 54279, 54281, 54282, 54283, 54284, 54285, 54286, 54287, 54288, 54289, 54290, 54291, 54292, 54293, 54294, 54295, 54296, 54297, 54298, 54299, 54300, 54302, 54303, 54304, 54305, 54306, 54307, 54308, 54309, 54310, 54311, 54312, 54313, 54314, 54315, 54316, 54317, 54318, 54319, 54320, 54321, 54322, 54323, 54324, 54325, 54326, 54327, 49711, 49713, 49714, 49716, 49736, 49744, 49745, 49748, 49752, 49760, 49765, 49772, 49773, 49776, 49780, 49788, 49789, 49791, 49793, 49800, 49801, 49808, 49816, 49819, 49821, 49828, 49829, 49832, 49836, 49837, 49844, 49845, 49847, 49849, 49884, 49885, 49888, 49891, 49892, 49899, 49900, 49901, 49903, 49905, 49910, 49912, 49913, 49915, 49916, 49920, 49928, 49929, 49932, 49933, 49939, 49940, 49941, 49944, 49948, 49956, 49957, 49960, 49961, 49989, 50024, 50025, 50028, 50032, 50034, 50040, 50041, 50044, 50045, 50052, 50056, 50060, 50112, 50136, 50137, 50140, 50143, 50144, 50146, 50152, 50153, 50157, 50164, 50165, 50168, 50184, 50192, 50212, 50220, 50224, 54328, 54329, 54330, 54331, 54332, 54333, 54334, 54335, 54337, 54338, 54339, 54341, 54342, 54343, 54344, 54345, 54346, 54347, 54348, 54349, 54350, 54351, 54352, 54353, 54354, 54355, 54356, 54357, 54358, 54359, 54360, 54361, 54362, 54363, 54365, 54366, 54367, 54369, 54370, 54371, 54373, 54374, 54375, 54376, 54377, 54378, 54379, 54380, 54382, 54384, 54385, 54386, 54387, 54388, 54389, 54390, 54391, 54394, 54395, 54397, 54398, 54401, 54403, 54404, 54405, 54406, 54407, 54410, 54412, 54414, 54415, 54416, 54417, 54418, 54419, 54421, 54422, 54423, 54424, 54425, 54426, 54427, 54428, 54429, 50228, 50236, 50237, 50248, 50276, 50277, 50280, 50284, 50292, 50293, 50297, 50304, 50324, 50332, 50360, 50364, 50409, 50416, 50417, 50420, 50424, 50426, 50431, 50432, 50433, 50444, 50448, 50452, 50460, 50472, 50473, 50476, 50480, 50488, 50489, 50491, 50493, 50500, 50501, 50504, 50505, 50506, 50508, 50509, 50510, 50515, 50516, 50517, 50519, 50520, 50521, 50525, 50526, 50528, 50529, 50532, 50536, 50544, 50545, 50547, 50548, 50549, 50556, 50557, 50560, 50564, 50567, 50572, 50573, 50575, 50577, 50581, 50583, 50584, 50588, 50592, 50601, 50612, 50613, 50616, 50617, 50619, 50620, 50621, 50622, 50628, 50629, 50630, 50631, 50632, 50633, 50634, 50636, 50638, 54430, 54431, 54432, 54433, 54434, 54435, 54436, 54437, 54438, 54439, 54440, 54442, 54443, 54444, 54445, 54446, 54447, 54448, 54449, 54450, 54451, 54452, 54453, 54454, 54455, 54456, 54457, 54458, 54459, 54460, 54461, 54462, 54463, 54464, 54465, 54466, 54467, 54468, 54469, 54470, 54471, 54472, 54473, 54474, 54475, 54477, 54478, 54479, 54481, 54482, 54483, 54485, 54486, 54487, 54488, 54489, 54490, 54491, 54493, 54494, 54496, 54497, 54498, 54499, 54500, 54501, 54502, 54503, 54505, 54506, 54507, 54509, 54510, 54511, 54513, 54514, 54515, 54516, 54517, 54518, 54519, 54521, 54522, 54524, 50640, 50641, 50644, 50648, 50656, 50657, 50659, 50661, 50668, 50669, 50670, 50672, 50676, 50678, 50679, 50684, 50685, 50686, 50687, 50688, 50689, 50693, 50694, 50695, 50696, 50700, 50704, 50712, 50713, 50715, 50716, 50724, 50725, 50728, 50732, 50733, 50734, 50736, 50739, 50740, 50741, 50743, 50745, 50747, 50752, 50753, 50756, 50760, 50768, 50769, 50771, 50772, 50773, 50780, 50781, 50784, 50796, 50799, 50801, 50808, 50809, 50812, 50816, 50824, 50825, 50827, 50829, 50836, 50837, 50840, 50844, 50852, 50853, 50855, 50857, 50864, 50865, 50868, 50872, 50873, 50874, 50880, 50881, 50883, 50885, 50892, 50893, 50896, 50900, 50908, 50909, 50912, 50913, 50920, 54526, 54527, 54528, 54529, 54530, 54531, 54533, 54534, 54535, 54537, 54538, 54539, 54541, 54542, 54543, 54544, 54545, 54546, 54547, 54550, 54552, 54553, 54554, 54555, 54556, 54557, 54558, 54559, 54560, 54561, 54562, 54563, 54564, 54565, 54566, 54567, 54568, 54569, 54570, 54571, 54572, 54573, 54574, 54575, 54576, 54577, 54578, 54579, 54580, 54581, 54582, 54583, 54584, 54585, 54586, 54587, 54590, 54591, 54593, 54594, 54595, 54597, 54598, 54599, 54600, 54601, 54602, 54603, 54606, 54608, 54610, 54611, 54612, 54613, 54614, 54615, 54618, 54619, 54621, 54622, 54623, 54625, 54626, 54627, 50921, 50924, 50928, 50936, 50937, 50941, 50948, 50949, 50952, 50956, 50964, 50965, 50967, 50969, 50976, 50977, 50980, 50984, 50992, 50993, 50995, 50997, 50999, 51004, 51005, 51008, 51012, 51018, 51020, 51021, 51023, 51025, 51026, 51027, 51028, 51029, 51030, 51031, 51032, 51036, 51040, 51048, 51051, 51060, 51061, 51064, 51068, 51069, 51070, 51075, 51076, 51077, 51079, 51080, 51081, 51082, 51086, 51088, 51089, 51092, 51094, 51095, 51096, 51098, 51104, 51105, 51107, 51108, 51109, 51110, 51116, 51117, 51120, 51124, 51132, 51133, 51135, 51136, 51137, 51144, 51145, 51148, 51150, 51152, 51160, 51165, 51172, 51176, 51180, 51200, 51201, 51204, 51208, 51210, 54628, 54630, 54631, 54634, 54636, 54638, 54639, 54640, 54641, 54642, 54643, 54646, 54647, 54649, 54650, 54651, 54653, 54654, 54655, 54656, 54657, 54658, 54659, 54662, 54666, 54667, 54668, 54669, 54670, 54671, 54673, 54674, 54675, 54676, 54677, 54678, 54679, 54680, 54681, 54682, 54683, 54684, 54685, 54686, 54687, 54688, 54689, 54690, 54691, 54692, 54694, 54695, 54696, 54697, 54698, 54699, 54700, 54701, 54702, 54703, 54704, 54705, 54706, 54707, 54708, 54709, 54710, 54711, 54712, 54713, 54714, 54715, 54716, 54717, 54718, 54719, 54720, 54721, 54722, 54723, 54724, 54725, 54726, 54727, 51216, 51217, 51219, 51221, 51222, 51228, 51229, 51232, 51236, 51244, 51245, 51247, 51249, 51256, 51260, 51264, 51272, 51273, 51276, 51277, 51284, 51312, 51313, 51316, 51320, 51322, 51328, 51329, 51331, 51333, 51334, 51335, 51339, 51340, 51341, 51348, 51357, 51359, 51361, 51368, 51388, 51389, 51396, 51400, 51404, 51412, 51413, 51415, 51417, 51424, 51425, 51428, 51445, 51452, 51453, 51456, 51460, 51461, 51462, 51468, 51469, 51471, 51473, 51480, 51500, 51508, 51536, 51537, 51540, 51544, 51552, 51553, 51555, 51564, 51568, 51572, 51580, 51592, 51593, 51596, 51600, 51608, 51609, 51611, 51613, 51648, 51649, 51652, 51655, 51656, 51658, 51664, 51665, 51667, 54730, 54731, 54733, 54734, 54735, 54737, 54739, 54740, 54741, 54742, 54743, 54746, 54748, 54750, 54751, 54752, 54753, 54754, 54755, 54758, 54759, 54761, 54762, 54763, 54765, 54766, 54767, 54768, 54769, 54770, 54771, 54774, 54776, 54778, 54779, 54780, 54781, 54782, 54783, 54786, 54787, 54789, 54790, 54791, 54793, 54794, 54795, 54796, 54797, 54798, 54799, 54802, 54806, 54807, 54808, 54809, 54810, 54811, 54813, 54814, 54815, 54817, 54818, 54819, 54821, 54822, 54823, 54824, 54825, 54826, 54827, 54828, 54830, 54831, 54832, 54833, 54834, 54835, 54836, 54837, 54838, 54839, 54842, 54843, 51669, 51670, 51673, 51674, 51676, 51677, 51680, 51682, 51684, 51687, 51692, 51693, 51695, 51696, 51697, 51704, 51705, 51708, 51712, 51720, 51721, 51723, 51724, 51725, 51732, 51736, 51753, 51788, 51789, 51792, 51796, 51804, 51805, 51807, 51808, 51809, 51816, 51837, 51844, 51864, 51900, 51901, 51904, 51908, 51916, 51917, 51919, 51921, 51923, 51928, 51929, 51936, 51948, 51956, 51976, 51984, 51988, 51992, 52000, 52001, 52033, 52040, 52041, 52044, 52048, 52056, 52057, 52061, 52068, 52088, 52089, 52124, 52152, 52180, 52196, 52199, 52201, 52236, 52237, 52240, 52244, 52252, 52253, 52257, 52258, 52263, 52264, 52265, 52268, 52270, 52272, 52280, 52281, 52283, 54845, 54846, 54847, 54849, 54850, 54851, 54852, 54854, 54855, 54858, 54860, 54862, 54863, 54864, 54866, 54867, 54870, 54871, 54873, 54874, 54875, 54877, 54878, 54879, 54880, 54881, 54882, 54883, 54884, 54885, 54886, 54888, 54890, 54891, 54892, 54893, 54894, 54895, 54898, 54899, 54901, 54902, 54903, 54904, 54905, 54906, 54907, 54908, 54909, 54910, 54911, 54912, 54913, 54914, 54916, 54918, 54919, 54920, 54921, 54922, 54923, 54926, 54927, 54929, 54930, 54931, 54933, 54934, 54935, 54936, 54937, 54938, 54939, 54940, 54942, 54944, 54946, 54947, 54948, 54949, 54950, 54951, 54953, 54954, 52284, 52285, 52286, 52292, 52293, 52296, 52300, 52308, 52309, 52311, 52312, 52313, 52320, 52324, 52326, 52328, 52336, 52341, 52376, 52377, 52380, 52384, 52392, 52393, 52395, 52396, 52397, 52404, 52405, 52408, 52412, 52420, 52421, 52423, 52425, 52432, 52436, 52452, 52460, 52464, 52481, 52488, 52489, 52492, 52496, 52504, 52505, 52507, 52509, 52516, 52520, 52524, 52537, 52572, 52576, 52580, 52588, 52589, 52591, 52593, 52600, 52616, 52628, 52629, 52632, 52636, 52644, 52645, 52647, 52649, 52656, 52676, 52684, 52688, 52712, 52716, 52720, 52728, 52729, 52731, 52733, 52740, 52744, 52748, 52756, 52761, 52768, 52769, 52772, 52776, 52784, 52785, 52787, 52789, 54955, 54957, 54958, 54959, 54961, 54962, 54963, 54964, 54965, 54966, 54967, 54968, 54970, 54972, 54973, 54974, 54975, 54976, 54977, 54978, 54979, 54982, 54983, 54985, 54986, 54987, 54989, 54990, 54991, 54992, 54994, 54995, 54997, 54998, 55000, 55002, 55003, 55004, 55005, 55006, 55007, 55009, 55010, 55011, 55013, 55014, 55015, 55017, 55018, 55019, 55020, 55021, 55022, 55023, 55025, 55026, 55027, 55028, 55030, 55031, 55032, 55033, 55034, 55035, 55038, 55039, 55041, 55042, 55043, 55045, 55046, 55047, 55048, 55049, 55050, 55051, 55052, 55053, 55054, 55055, 55056, 55058, 55059, 55060, 52824, 52825, 52828, 52831, 52832, 52833, 52840, 52841, 52843, 52845, 52852, 52853, 52856, 52860, 52868, 52869, 52871, 52873, 52880, 52881, 52884, 52888, 52896, 52897, 52899, 52900, 52901, 52908, 52909, 52929, 52964, 52965, 52968, 52971, 52972, 52980, 52981, 52983, 52984, 52985, 52992, 52993, 52996, 53000, 53008, 53009, 53011, 53013, 53020, 53024, 53028, 53036, 53037, 53039, 53040, 53041, 53048, 53076, 53077, 53080, 53084, 53092, 53093, 53095, 53097, 53104, 53105, 53108, 53112, 53120, 53125, 53132, 53153, 53160, 53168, 53188, 53216, 53217, 53220, 53224, 53232, 53233, 53235, 53237, 53244, 53248, 53252, 53265, 53272, 53293, 53300, 53301, 53304, 53308, 55061, 55062, 55063, 55066, 55067, 55069, 55070, 55071, 55073, 55074, 55075, 55076, 55077, 55078, 55079, 55082, 55084, 55086, 55087, 55088, 55089, 55090, 55091, 55094, 55095, 55097, 55098, 55099, 55101, 55102, 55103, 55104, 55105, 55106, 55107, 55109, 55110, 55112, 55114, 55115, 55116, 55117, 55118, 55119, 55122, 55123, 55125, 55130, 55131, 55132, 55133, 55134, 55135, 55138, 55140, 55142, 55143, 55144, 55146, 55147, 55149, 55150, 55151, 55153, 55154, 55155, 55157, 55158, 55159, 55160, 55161, 55162, 55163, 55166, 55167, 55168, 55170, 55171, 55172, 55173, 55174, 55175, 55178, 55179, 53316, 53317, 53319, 53321, 53328, 53332, 53336, 53344, 53356, 53357, 53360, 53364, 53372, 53373, 53377, 53412, 53413, 53416, 53420, 53428, 53429, 53431, 53433, 53440, 53441, 53444, 53448, 53449, 53456, 53457, 53459, 53460, 53461, 53468, 53469, 53472, 53476, 53484, 53485, 53487, 53488, 53489, 53496, 53517, 53552, 53553, 53556, 53560, 53562, 53568, 53569, 53571, 53572, 53573, 53580, 53581, 53584, 53588, 53596, 53597, 53599, 53601, 53608, 53612, 53628, 53636, 53640, 53664, 53665, 53668, 53672, 53680, 53681, 53683, 53685, 53690, 53692, 53696, 53720, 53748, 53752, 53767, 53769, 53776, 53804, 53805, 53808, 53812, 53820, 53821, 53823, 53825, 53832, 53852, 55181, 55182, 55183, 55185, 55186, 55187, 55188, 55189, 55190, 55191, 55194, 55196, 55198, 55199, 55200, 55201, 55202, 55203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53860, 53888, 53889, 53892, 53896, 53904, 53905, 53909, 53916, 53920, 53924, 53932, 53937, 53944, 53945, 53948, 53951, 53952, 53954, 53960, 53961, 53963, 53972, 53976, 53980, 53988, 53989, 54000, 54001, 54004, 54008, 54016, 54017, 54019, 54021, 54028, 54029, 54030, 54032, 54036, 54038, 54044, 54045, 54047, 54048, 54049, 54053, 54056, 54057, 54060, 54064, 54072, 54073, 54075, 54076, 54077, 54084, 54085, 54140, 54141, 54144, 54148, 54156, 54157, 54159, 54160, 54161, 54168, 54169, 54172, 54176, 54184, 54185, 54187, 54189, 54196, 54200, 54204, 54212, 54213, 54216, 54217, 54224, 54232, 54241, 54243, 54252, 54253, 54256, 54260, 54268, 54269, 54271, 54273, 54280, 54301, 54336, 54340, 54364, 54368, 54372, 54381, 54383, 54392, 54393, 54396, 54399, 54400, 54402, 54408, 54409, 54411, 54413, 54420, 54441, 54476, 54480, 54484, 54492, 54495, 54504, 54508, 54512, 54520, 54523, 54525, 54532, 54536, 54540, 54548, 54549, 54551, 54588, 54589, 54592, 54596, 54604, 54605, 54607, 54609, 54616, 54617, 54620, 54624, 54629, 54632, 54633, 54635, 54637, 54644, 54645, 54648, 54652, 54660, 54661, 54663, 54664, 54665, 54672, 54693, 54728, 54729, 54732, 54736, 54738, 54744, 54745, 54747, 54749, 54756, 54757, 54760, 54764, 54772, 54773, 54775, 54777, 54784, 54785, 54788, 54792, 54800, 54801, 54803, 54804, 54805, 54812, 54816, 54820, 54829, 54840, 54841, 54844, 54848, 54853, 54856, 54857, 54859, 54861, 54865, 54868, 54869, 54872, 54876, 54887, 54889, 54896, 54897, 54900, 54915, 54917, 54924, 54925, 54928, 54932, 54941, 54943, 54945, 54952, 54956, 54960, 54969, 54971, 54980, 54981, 54984, 54988, 54993, 54996, 54999, 55001, 55008, 55012, 55016, 55024, 55029, 55036, 55037, 55040, 55044, 55057, 55064, 55065, 55068, 55072, 55080, 55081, 55083, 55085, 55092, 55093, 55096, 55100, 55108, 55111, 55113, 55120, 55121, 55124, 55126, 55127, 55128, 55129, 55136, 55137, 55139, 55141, 55145, 55148, 55152, 55156, 55164, 55165, 55169, 55176, 55177, 55180, 55184, 55192, 55193, 55195, 55197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20285, 20339, 20551, 20729, 21152, 21487, 21621, 21733, 22025, 23233, 23478, 26247, 26550, 26551, 26607, 27468, 29634, 30146, 31292, 33499, 33540, 34903, 34952, 35382, 36040, 36303, 36603, 36838, 39381, 21051, 21364, 21508, 24682, 24932, 27580, 29647, 33050, 35258, 35282, 38307, 20355, 21002, 22718, 22904, 23014, 24178, 24185, 25031, 25536, 26438, 26604, 26751, 28567, 30286, 30475, 30965, 31240, 31487, 31777, 32925, 33390, 33393, 35563, 38291, 20075, 21917, 26359, 28212, 30883, 31469, 33883, 35088, 34638, 38824, 21208, 22350, 22570, 23884, 24863, 25022, 25121, 25954, 26577, 27204, 28187, 29976, 30131, 30435, 30640, 32058, 37039, 37969, 37970, 40853, 21283, 23724, 30002, 32987, 37440, 38296, 21083, 22536, 23004, 23713, 23831, 24247, 24378, 24394, 24951, 27743, 30074, 30086, 31968, 32115, 32177, 32652, 33108, 33313, 34193, 35137, 35611, 37628, 38477, 40007, 20171, 20215, 20491, 20977, 22607, 24887, 24894, 24936, 25913, 27114, 28433, 30117, 30342, 30422, 31623, 33445, 33995, 63744, 37799, 38283, 21888, 23458, 22353, 63745, 31923, 32697, 37301, 20520, 21435, 23621, 24040, 25298, 25454, 25818, 25831, 28192, 28844, 31067, 36317, 36382, 63746, 36989, 37445, 37624, 20094, 20214, 20581, 24062, 24314, 24838, 26967, 33137, 34388, 36423, 37749, 39467, 20062, 20625, 26480, 26688, 20745, 21133, 21138, 27298, 30652, 37392, 40660, 21163, 24623, 36850, 20552, 25001, 25581, 25802, 26684, 27268, 28608, 33160, 35233, 38548, 22533, 29309, 29356, 29956, 32121, 32365, 32937, 35211, 35700, 36963, 40273, 25225, 27770, 28500, 32080, 32570, 35363, 20860, 24906, 31645, 35609, 37463, 37772, 20140, 20435, 20510, 20670, 20742, 21185, 21197, 21375, 22384, 22659, 24218, 24465, 24950, 25004, 25806, 25964, 26223, 26299, 26356, 26775, 28039, 28805, 28913, 29855, 29861, 29898, 30169, 30828, 30956, 31455, 31478, 32069, 32147, 32789, 32831, 33051, 33686, 35686, 36629, 36885, 37857, 38915, 38968, 39514, 39912, 20418, 21843, 22586, 22865, 23395, 23622, 24760, 25106, 26690, 26800, 26856, 28330, 30028, 30328, 30926, 31293, 31995, 32363, 32380, 35336, 35489, 35903, 38542, 40388, 21476, 21481, 21578, 21617, 22266, 22993, 23396, 23611, 24235, 25335, 25911, 25925, 25970, 26272, 26543, 27073, 27837, 30204, 30352, 30590, 31295, 32660, 32771, 32929, 33167, 33510, 33533, 33776, 34241, 34865, 34996, 35493, 63747, 36764, 37678, 38599, 39015, 39640, 40723, 21741, 26011, 26354, 26767, 31296, 35895, 40288, 22256, 22372, 23825, 26118, 26801, 26829, 28414, 29736, 34974, 39908, 27752, 63748, 39592, 20379, 20844, 20849, 21151, 23380, 24037, 24656, 24685, 25329, 25511, 25915, 29657, 31354, 34467, 36002, 38799, 20018, 23521, 25096, 26524, 29916, 31185, 33747, 35463, 35506, 36328, 36942, 37707, 38982, 24275, 27112, 34303, 37101, 63749, 20896, 23448, 23532, 24931, 26874, 27454, 28748, 29743, 29912, 31649, 32592, 33733, 35264, 36011, 38364, 39208, 21038, 24669, 25324, 36866, 20362, 20809, 21281, 22745, 24291, 26336, 27960, 28826, 29378, 29654, 31568, 33009, 37979, 21350, 25499, 32619, 20054, 20608, 22602, 22750, 24618, 24871, 25296, 27088, 39745, 23439, 32024, 32945, 36703, 20132, 20689, 21676, 21932, 23308, 23968, 24039, 25898, 25934, 26657, 27211, 29409, 30350, 30703, 32094, 32761, 33184, 34126, 34527, 36611, 36686, 37066, 39171, 39509, 39851, 19992, 20037, 20061, 20167, 20465, 20855, 21246, 21312, 21475, 21477, 21646, 22036, 22389, 22434, 23495, 23943, 24272, 25084, 25304, 25937, 26552, 26601, 27083, 27472, 27590, 27628, 27714, 28317, 28792, 29399, 29590, 29699, 30655, 30697, 31350, 32127, 32777, 33276, 33285, 33290, 33503, 34914, 35635, 36092, 36544, 36881, 37041, 37476, 37558, 39378, 39493, 40169, 40407, 40860, 22283, 23616, 33738, 38816, 38827, 40628, 21531, 31384, 32676, 35033, 36557, 37089, 22528, 23624, 25496, 31391, 23470, 24339, 31353, 31406, 33422, 36524, 20518, 21048, 21240, 21367, 22280, 25331, 25458, 27402, 28099, 30519, 21413, 29527, 34152, 36470, 38357, 26426, 27331, 28528, 35437, 36556, 39243, 63750, 26231, 27512, 36020, 39740, 63751, 21483, 22317, 22862, 25542, 27131, 29674, 30789, 31418, 31429, 31998, 33909, 35215, 36211, 36917, 38312, 21243, 22343, 30023, 31584, 33740, 37406, 63752, 27224, 20811, 21067, 21127, 25119, 26840, 26997, 38553, 20677, 21156, 21220, 25027, 26020, 26681, 27135, 29822, 31563, 33465, 33771, 35250, 35641, 36817, 39241, 63753, 20170, 22935, 25810, 26129, 27278, 29748, 31105, 31165, 33449, 34942, 34943, 35167, 63754, 37670, 20235, 21450, 24613, 25201, 27762, 32026, 32102, 20120, 20834, 30684, 32943, 20225, 20238, 20854, 20864, 21980, 22120, 22331, 22522, 22524, 22804, 22855, 22931, 23492, 23696, 23822, 24049, 24190, 24524, 25216, 26071, 26083, 26398, 26399, 26462, 26827, 26820, 27231, 27450, 27683, 27773, 27778, 28103, 29592, 29734, 29738, 29826, 29859, 30072, 30079, 30849, 30959, 31041, 31047, 31048, 31098, 31637, 32000, 32186, 32648, 32774, 32813, 32908, 35352, 35663, 35912, 36215, 37665, 37668, 39138, 39249, 39438, 39439, 39525, 40594, 32202, 20342, 21513, 25326, 26708, 37329, 21931, 20794, 63755, 63756, 23068, 25062, 63757, 25295, 25343, 63758, 63759, 63760, 63761, 63762, 63763, 37027, 63764, 63765, 63766, 63767, 63768, 35582, 63769, 63770, 63771, 63772, 26262, 63773, 29014, 63774, 63775, 38627, 63776, 25423, 25466, 21335, 63777, 26511, 26976, 28275, 63778, 30007, 63779, 63780, 63781, 32013, 63782, 63783, 34930, 22218, 23064, 63784, 63785, 63786, 63787, 63788, 20035, 63789, 20839, 22856, 26608, 32784, 63790, 22899, 24180, 25754, 31178, 24565, 24684, 25288, 25467, 23527, 23511, 21162, 63791, 22900, 24361, 24594, 63792, 63793, 63794, 29785, 63795, 63796, 63797, 63798, 63799, 63800, 39377, 63801, 63802, 63803, 63804, 63805, 63806, 63807, 63808, 63809, 63810, 63811, 28611, 63812, 63813, 33215, 36786, 24817, 63814, 63815, 33126, 63816, 63817, 23615, 63818, 63819, 63820, 63821, 63822, 63823, 63824, 63825, 23273, 35365, 26491, 32016, 63826, 63827, 63828, 63829, 63830, 63831, 33021, 63832, 63833, 23612, 27877, 21311, 28346, 22810, 33590, 20025, 20150, 20294, 21934, 22296, 22727, 24406, 26039, 26086, 27264, 27573, 28237, 30701, 31471, 31774, 32222, 34507, 34962, 37170, 37723, 25787, 28606, 29562, 30136, 36948, 21846, 22349, 25018, 25812, 26311, 28129, 28251, 28525, 28601, 30192, 32835, 33213, 34113, 35203, 35527, 35674, 37663, 27795, 30035, 31572, 36367, 36957, 21776, 22530, 22616, 24162, 25095, 25758, 26848, 30070, 31958, 34739, 40680, 20195, 22408, 22382, 22823, 23565, 23729, 24118, 24453, 25140, 25825, 29619, 33274, 34955, 36024, 38538, 40667, 23429, 24503, 24755, 20498, 20992, 21040, 22294, 22581, 22615, 23566, 23648, 23798, 23947, 24230, 24466, 24764, 25361, 25481, 25623, 26691, 26873, 27330, 28120, 28193, 28372, 28644, 29182, 30428, 30585, 31153, 31291, 33796, 35241, 36077, 36339, 36424, 36867, 36884, 36947, 37117, 37709, 38518, 38876, 27602, 28678, 29272, 29346, 29544, 30563, 31167, 31716, 32411, 35712, 22697, 24775, 25958, 26109, 26302, 27788, 28958, 29129, 35930, 38931, 20077, 31361, 20189, 20908, 20941, 21205, 21516, 24999, 26481, 26704, 26847, 27934, 28540, 30140, 30643, 31461, 33012, 33891, 37509, 20828, 26007, 26460, 26515, 30168, 31431, 33651, 63834, 35910, 36887, 38957, 23663, 33216, 33434, 36929, 36975, 37389, 24471, 23965, 27225, 29128, 30331, 31561, 34276, 35588, 37159, 39472, 21895, 25078, 63835, 30313, 32645, 34367, 34746, 35064, 37007, 63836, 27931, 28889, 29662, 32097, 33853, 63837, 37226, 39409, 63838, 20098, 21365, 27396, 27410, 28734, 29211, 34349, 40478, 21068, 36771, 23888, 25829, 25900, 27414, 28651, 31811, 32412, 34253, 35172, 35261, 25289, 33240, 34847, 24266, 26391, 28010, 29436, 29701, 29807, 34690, 37086, 20358, 23821, 24480, 33802, 20919, 25504, 30053, 20142, 20486, 20841, 20937, 26753, 27153, 31918, 31921, 31975, 33391, 35538, 36635, 37327, 20406, 20791, 21237, 21570, 24300, 24942, 25150, 26053, 27354, 28670, 31018, 34268, 34851, 38317, 39522, 39530, 40599, 40654, 21147, 26310, 27511, 28701, 31019, 36706, 38722, 24976, 25088, 25891, 28451, 29001, 29833, 32244, 32879, 34030, 36646, 36899, 37706, 20925, 21015, 21155, 27916, 28872, 35010, 24265, 25986, 27566, 28610, 31806, 29557, 20196, 20278, 22265, 63839, 23738, 23994, 24604, 29618, 31533, 32666, 32718, 32838, 36894, 37428, 38646, 38728, 38936, 40801, 20363, 28583, 31150, 37300, 38583, 21214, 63840, 25736, 25796, 27347, 28510, 28696, 29200, 30439, 32769, 34310, 34396, 36335, 36613, 38706, 39791, 40442, 40565, 30860, 31103, 32160, 33737, 37636, 40575, 40595, 35542, 22751, 24324, 26407, 28711, 29903, 31840, 32894, 20769, 28712, 29282, 30922, 36034, 36058, 36084, 38647, 20102, 20698, 23534, 24278, 26009, 29134, 30274, 30637, 32842, 34044, 36988, 39719, 40845, 22744, 23105, 23650, 27155, 28122, 28431, 30267, 32047, 32311, 34078, 35128, 37860, 38475, 21129, 26066, 26611, 27060, 27969, 28316, 28687, 29705, 29792, 30041, 30244, 30827, 35628, 39006, 20845, 25134, 38520, 20374, 20523, 23833, 28138, 32184, 36650, 24459, 24900, 26647, 63841, 38534, 21202, 32907, 20956, 20940, 26974, 31260, 32190, 33777, 38517, 20442, 21033, 21400, 21519, 21774, 23653, 24743, 26446, 26792, 28012, 29313, 29432, 29702, 29827, 63842, 30178, 31852, 32633, 32696, 33673, 35023, 35041, 37324, 37328, 38626, 39881, 21533, 28542, 29136, 29848, 34298, 36522, 38563, 40023, 40607, 26519, 28107, 29747, 33256, 38678, 30764, 31435, 31520, 31890, 25705, 29802, 30194, 30908, 30952, 39340, 39764, 40635, 23518, 24149, 28448, 33180, 33707, 37000, 19975, 21325, 23081, 24018, 24398, 24930, 25405, 26217, 26364, 28415, 28459, 28771, 30622, 33836, 34067, 34875, 36627, 39237, 39995, 21788, 25273, 26411, 27819, 33545, 35178, 38778, 20129, 22916, 24536, 24537, 26395, 32178, 32596, 33426, 33579, 33725, 36638, 37017, 22475, 22969, 23186, 23504, 26151, 26522, 26757, 27599, 29028, 32629, 36023, 36067, 36993, 39749, 33032, 35978, 38476, 39488, 40613, 23391, 27667, 29467, 30450, 30431, 33804, 20906, 35219, 20813, 20885, 21193, 26825, 27796, 30468, 30496, 32191, 32236, 38754, 40629, 28357, 34065, 20901, 21517, 21629, 26126, 26269, 26919, 28319, 30399, 30609, 33559, 33986, 34719, 37225, 37528, 40180, 34946, 20398, 20882, 21215, 22982, 24125, 24917, 25720, 25721, 26286, 26576, 27169, 27597, 27611, 29279, 29281, 29761, 30520, 30683, 32791, 33468, 33541, 35584, 35624, 35980, 26408, 27792, 29287, 30446, 30566, 31302, 40361, 27519, 27794, 22818, 26406, 33945, 21359, 22675, 22937, 24287, 25551, 26164, 26483, 28218, 29483, 31447, 33495, 37672, 21209, 24043, 25006, 25035, 25098, 25287, 25771, 26080, 26969, 27494, 27595, 28961, 29687, 30045, 32326, 33310, 33538, 34154, 35491, 36031, 38695, 40289, 22696, 40664, 20497, 21006, 21563, 21839, 25991, 27766, 32010, 32011, 32862, 34442, 38272, 38639, 21247, 27797, 29289, 21619, 23194, 23614, 23883, 24396, 24494, 26410, 26806, 26979, 28220, 28228, 30473, 31859, 32654, 34183, 35598, 36855, 38753, 40692, 23735, 24758, 24845, 25003, 25935, 26107, 26108, 27665, 27887, 29599, 29641, 32225, 38292, 23494, 34588, 35600, 21085, 21338, 25293, 25615, 25778, 26420, 27192, 27850, 29632, 29854, 31636, 31893, 32283, 33162, 33334, 34180, 36843, 38649, 39361, 20276, 21322, 21453, 21467, 25292, 25644, 25856, 26001, 27075, 27886, 28504, 29677, 30036, 30242, 30436, 30460, 30928, 30971, 31020, 32070, 33324, 34784, 36820, 38930, 39151, 21187, 25300, 25765, 28196, 28497, 30332, 36299, 37297, 37474, 39662, 39747, 20515, 20621, 22346, 22952, 23592, 24135, 24439, 25151, 25918, 26041, 26049, 26121, 26507, 27036, 28354, 30917, 32033, 32938, 33152, 33323, 33459, 33953, 34444, 35370, 35607, 37030, 38450, 40848, 20493, 20467, 63843, 22521, 24472, 25308, 25490, 26479, 28227, 28953, 30403, 32972, 32986, 35060, 35061, 35097, 36064, 36649, 37197, 38506, 20271, 20336, 24091, 26575, 26658, 30333, 30334, 39748, 24161, 27146, 29033, 29140, 30058, 63844, 32321, 34115, 34281, 39132, 20240, 31567, 32624, 38309, 20961, 24070, 26805, 27710, 27726, 27867, 29359, 31684, 33539, 27861, 29754, 20731, 21128, 22721, 25816, 27287, 29863, 30294, 30887, 34327, 38370, 38713, 63845, 21342, 24321, 35722, 36776, 36783, 37002, 21029, 30629, 40009, 40712, 19993, 20482, 20853, 23643, 24183, 26142, 26170, 26564, 26821, 28851, 29953, 30149, 31177, 31453, 36647, 39200, 39432, 20445, 22561, 22577, 23542, 26222, 27493, 27921, 28282, 28541, 29668, 29995, 33769, 35036, 35091, 35676, 36628, 20239, 20693, 21264, 21340, 23443, 24489, 26381, 31119, 33145, 33583, 34068, 35079, 35206, 36665, 36667, 39333, 39954, 26412, 20086, 20472, 22857, 23553, 23791, 23792, 25447, 26834, 28925, 29090, 29739, 32299, 34028, 34562, 36898, 37586, 40179, 19981, 20184, 20463, 20613, 21078, 21103, 21542, 21648, 22496, 22827, 23142, 23386, 23413, 23500, 24220, 63846, 25206, 25975, 26023, 28014, 28325, 29238, 31526, 31807, 32566, 33104, 33105, 33178, 33344, 33433, 33705, 35331, 36000, 36070, 36091, 36212, 36282, 37096, 37340, 38428, 38468, 39385, 40167, 21271, 20998, 21545, 22132, 22707, 22868, 22894, 24575, 24996, 25198, 26128, 27774, 28954, 30406, 31881, 31966, 32027, 33452, 36033, 38640, 63847, 20315, 24343, 24447, 25282, 23849, 26379, 26842, 30844, 32323, 40300, 19989, 20633, 21269, 21290, 21329, 22915, 23138, 24199, 24754, 24970, 25161, 25209, 26000, 26503, 27047, 27604, 27606, 27607, 27608, 27832, 63848, 29749, 30202, 30738, 30865, 31189, 31192, 31875, 32203, 32737, 32933, 33086, 33218, 33778, 34586, 35048, 35513, 35692, 36027, 37145, 38750, 39131, 40763, 22188, 23338, 24428, 25996, 27315, 27567, 27996, 28657, 28693, 29277, 29613, 36007, 36051, 38971, 24977, 27703, 32856, 39425, 20045, 20107, 20123, 20181, 20282, 20284, 20351, 20447, 20735, 21490, 21496, 21766, 21987, 22235, 22763, 22882, 23057, 23531, 23546, 23556, 24051, 24107, 24473, 24605, 25448, 26012, 26031, 26614, 26619, 26797, 27515, 27801, 27863, 28195, 28681, 29509, 30722, 31038, 31040, 31072, 31169, 31721, 32023, 32114, 32902, 33293, 33678, 34001, 34503, 35039, 35408, 35422, 35613, 36060, 36198, 36781, 37034, 39164, 39391, 40605, 21066, 63849, 26388, 63850, 20632, 21034, 23665, 25955, 27733, 29642, 29987, 30109, 31639, 33948, 37240, 38704, 20087, 25746, 27578, 29022, 34217, 19977, 63851, 26441, 26862, 28183, 33439, 34072, 34923, 25591, 28545, 37394, 39087, 19978, 20663, 20687, 20767, 21830, 21930, 22039, 23360, 23577, 23776, 24120, 24202, 24224, 24258, 24819, 26705, 27233, 28248, 29245, 29248, 29376, 30456, 31077, 31665, 32724, 35059, 35316, 35443, 35937, 36062, 38684, 22622, 29885, 36093, 21959, 63852, 31329, 32034, 33394, 29298, 29983, 29989, 63853, 31513, 22661, 22779, 23996, 24207, 24246, 24464, 24661, 25234, 25471, 25933, 26257, 26329, 26360, 26646, 26866, 29312, 29790, 31598, 32110, 32214, 32626, 32997, 33298, 34223, 35199, 35475, 36893, 37604, 40653, 40736, 22805, 22893, 24109, 24796, 26132, 26227, 26512, 27728, 28101, 28511, 30707, 30889, 33990, 37323, 37675, 20185, 20682, 20808, 21892, 23307, 23459, 25159, 25982, 26059, 28210, 29053, 29697, 29764, 29831, 29887, 30316, 31146, 32218, 32341, 32680, 33146, 33203, 33337, 34330, 34796, 35445, 36323, 36984, 37521, 37925, 39245, 39854, 21352, 23633, 26964, 27844, 27945, 28203, 33292, 34203, 35131, 35373, 35498, 38634, 40807, 21089, 26297, 27570, 32406, 34814, 36109, 38275, 38493, 25885, 28041, 29166, 63854, 22478, 22995, 23468, 24615, 24826, 25104, 26143, 26207, 29481, 29689, 30427, 30465, 31596, 32854, 32882, 33125, 35488, 37266, 19990, 21218, 27506, 27927, 31237, 31545, 32048, 63855, 36016, 21484, 22063, 22609, 23477, 23567, 23569, 24034, 25152, 25475, 25620, 26157, 26803, 27836, 28040, 28335, 28703, 28836, 29138, 29990, 30095, 30094, 30233, 31505, 31712, 31787, 32032, 32057, 34092, 34157, 34311, 35380, 36877, 36961, 37045, 37559, 38902, 39479, 20439, 23660, 26463, 28049, 31903, 32396, 35606, 36118, 36895, 23403, 24061, 25613, 33984, 36956, 39137, 29575, 23435, 24730, 26494, 28126, 35359, 35494, 36865, 38924, 21047, 63856, 28753, 30862, 37782, 34928, 37335, 20462, 21463, 22013, 22234, 22402, 22781, 23234, 23432, 23723, 23744, 24101, 24833, 25101, 25163, 25480, 25628, 25910, 25976, 27193, 27530, 27700, 27929, 28465, 29159, 29417, 29560, 29703, 29874, 30246, 30561, 31168, 31319, 31466, 31929, 32143, 32172, 32353, 32670, 33065, 33585, 33936, 34010, 34282, 34966, 35504, 35728, 36664, 36930, 36995, 37228, 37526, 37561, 38539, 38567, 38568, 38614, 38656, 38920, 39318, 39635, 39706, 21460, 22654, 22809, 23408, 23487, 28113, 28506, 29087, 29729, 29881, 32901, 33789, 24033, 24455, 24490, 24642, 26092, 26642, 26991, 27219, 27529, 27957, 28147, 29667, 30462, 30636, 31565, 32020, 33059, 33308, 33600, 34036, 34147, 35426, 35524, 37255, 37662, 38918, 39348, 25100, 34899, 36848, 37477, 23815, 23847, 23913, 29791, 33181, 34664, 28629, 25342, 32722, 35126, 35186, 19998, 20056, 20711, 21213, 21319, 25215, 26119, 32361, 34821, 38494, 20365, 21273, 22070, 22987, 23204, 23608, 23630, 23629, 24066, 24337, 24643, 26045, 26159, 26178, 26558, 26612, 29468, 30690, 31034, 32709, 33940, 33997, 35222, 35430, 35433, 35553, 35925, 35962, 22516, 23508, 24335, 24687, 25325, 26893, 27542, 28252, 29060, 31698, 34645, 35672, 36606, 39135, 39166, 20280, 20353, 20449, 21627, 23072, 23480, 24892, 26032, 26216, 29180, 30003, 31070, 32051, 33102, 33251, 33688, 34218, 34254, 34563, 35338, 36523, 36763, 63857, 36805, 22833, 23460, 23526, 24713, 23529, 23563, 24515, 27777, 63858, 28145, 28683, 29978, 33455, 35574, 20160, 21313, 63859, 38617, 27663, 20126, 20420, 20818, 21854, 23077, 23784, 25105, 29273, 33469, 33706, 34558, 34905, 35357, 38463, 38597, 39187, 40201, 40285, 22538, 23731, 23997, 24132, 24801, 24853, 25569, 27138, 28197, 37122, 37716, 38990, 39952, 40823, 23433, 23736, 25353, 26191, 26696, 30524, 38593, 38797, 38996, 39839, 26017, 35585, 36555, 38332, 21813, 23721, 24022, 24245, 26263, 30284, 33780, 38343, 22739, 25276, 29390, 40232, 20208, 22830, 24591, 26171, 27523, 31207, 40230, 21395, 21696, 22467, 23830, 24859, 26326, 28079, 30861, 33406, 38552, 38724, 21380, 25212, 25494, 28082, 32266, 33099, 38989, 27387, 32588, 40367, 40474, 20063, 20539, 20918, 22812, 24825, 25590, 26928, 29242, 32822, 63860, 37326, 24369, 63861, 63862, 32004, 33509, 33903, 33979, 34277, 36493, 63863, 20335, 63864, 63865, 22756, 23363, 24665, 25562, 25880, 25965, 26264, 63866, 26954, 27171, 27915, 28673, 29036, 30162, 30221, 31155, 31344, 63867, 32650, 63868, 35140, 63869, 35731, 37312, 38525, 63870, 39178, 22276, 24481, 26044, 28417, 30208, 31142, 35486, 39341, 39770, 40812, 20740, 25014, 25233, 27277, 33222, 20547, 22576, 24422, 28937, 35328, 35578, 23420, 34326, 20474, 20796, 22196, 22852, 25513, 28153, 23978, 26989, 20870, 20104, 20313, 63871, 63872, 63873, 22914, 63874, 63875, 27487, 27741, 63876, 29877, 30998, 63877, 33287, 33349, 33593, 36671, 36701, 63878, 39192, 63879, 63880, 63881, 20134, 63882, 22495, 24441, 26131, 63883, 63884, 30123, 32377, 35695, 63885, 36870, 39515, 22181, 22567, 23032, 23071, 23476, 63886, 24310, 63887, 63888, 25424, 25403, 63889, 26941, 27783, 27839, 28046, 28051, 28149, 28436, 63890, 28895, 28982, 29017, 63891, 29123, 29141, 63892, 30799, 30831, 63893, 31605, 32227, 63894, 32303, 63895, 34893, 36575, 63896, 63897, 63898, 37467, 63899, 40182, 63900, 63901, 63902, 24709, 28037, 63903, 29105, 63904, 63905, 38321, 21421, 63906, 63907, 63908, 26579, 63909, 28814, 28976, 29744, 33398, 33490, 63910, 38331, 39653, 40573, 26308, 63911, 29121, 33865, 63912, 63913, 22603, 63914, 63915, 23992, 24433, 63916, 26144, 26254, 27001, 27054, 27704, 27891, 28214, 28481, 28634, 28699, 28719, 29008, 29151, 29552, 63917, 29787, 63918, 29908, 30408, 31310, 32403, 63919, 63920, 33521, 35424, 36814, 63921, 37704, 63922, 38681, 63923, 63924, 20034, 20522, 63925, 21000, 21473, 26355, 27757, 28618, 29450, 30591, 31330, 33454, 34269, 34306, 63926, 35028, 35427, 35709, 35947, 63927, 37555, 63928, 38675, 38928, 20116, 20237, 20425, 20658, 21320, 21566, 21555, 21978, 22626, 22714, 22887, 23067, 23524, 24735, 63929, 25034, 25942, 26111, 26212, 26791, 27738, 28595, 28879, 29100, 29522, 31613, 34568, 35492, 39986, 40711, 23627, 27779, 29508, 29577, 37434, 28331, 29797, 30239, 31337, 32277, 34314, 20800, 22725, 25793, 29934, 29973, 30320, 32705, 37013, 38605, 39252, 28198, 29926, 31401, 31402, 33253, 34521, 34680, 35355, 23113, 23436, 23451, 26785, 26880, 28003, 29609, 29715, 29740, 30871, 32233, 32747, 33048, 33109, 33694, 35916, 38446, 38929, 26352, 24448, 26106, 26505, 27754, 29579, 20525, 23043, 27498, 30702, 22806, 23916, 24013, 29477, 30031, 63930, 63931, 20709, 20985, 22575, 22829, 22934, 23002, 23525, 63932, 63933, 23970, 25303, 25622, 25747, 25854, 63934, 26332, 63935, 27208, 63936, 29183, 29796, 63937, 31368, 31407, 32327, 32350, 32768, 33136, 63938, 34799, 35201, 35616, 36953, 63939, 36992, 39250, 24958, 27442, 28020, 32287, 35109, 36785, 20433, 20653, 20887, 21191, 22471, 22665, 23481, 24248, 24898, 27029, 28044, 28263, 28342, 29076, 29794, 29992, 29996, 32883, 33592, 33993, 36362, 37780, 37854, 63940, 20110, 20305, 20598, 20778, 21448, 21451, 21491, 23431, 23507, 23588, 24858, 24962, 26100, 29275, 29591, 29760, 30402, 31056, 31121, 31161, 32006, 32701, 33419, 34261, 34398, 36802, 36935, 37109, 37354, 38533, 38632, 38633, 21206, 24423, 26093, 26161, 26671, 29020, 31286, 37057, 38922, 20113, 63941, 27218, 27550, 28560, 29065, 32792, 33464, 34131, 36939, 38549, 38642, 38907, 34074, 39729, 20112, 29066, 38596, 20803, 21407, 21729, 22291, 22290, 22435, 23195, 23236, 23491, 24616, 24895, 25588, 27781, 27961, 28274, 28304, 29232, 29503, 29783, 33489, 34945, 36677, 36960, 63942, 38498, 39000, 40219, 26376, 36234, 37470, 20301, 20553, 20702, 21361, 22285, 22996, 23041, 23561, 24944, 26256, 28205, 29234, 29771, 32239, 32963, 33806, 33894, 34111, 34655, 34907, 35096, 35586, 36949, 38859, 39759, 20083, 20369, 20754, 20842, 63943, 21807, 21929, 23418, 23461, 24188, 24189, 24254, 24736, 24799, 24840, 24841, 25540, 25912, 26377, 63944, 26580, 26586, 63945, 26977, 26978, 27833, 27943, 63946, 28216, 63947, 28641, 29494, 29495, 63948, 29788, 30001, 63949, 30290, 63950, 63951, 32173, 33278, 33848, 35029, 35480, 35547, 35565, 36400, 36418, 36938, 36926, 36986, 37193, 37321, 37742, 63952, 63953, 22537, 63954, 27603, 32905, 32946, 63955, 63956, 20801, 22891, 23609, 63957, 63958, 28516, 29607, 32996, 36103, 63959, 37399, 38287, 63960, 63961, 63962, 63963, 32895, 25102, 28700, 32104, 34701, 63964, 22432, 24681, 24903, 27575, 35518, 37504, 38577, 20057, 21535, 28139, 34093, 38512, 38899, 39150, 25558, 27875, 37009, 20957, 25033, 33210, 40441, 20381, 20506, 20736, 23452, 24847, 25087, 25836, 26885, 27589, 30097, 30691, 32681, 33380, 34191, 34811, 34915, 35516, 35696, 37291, 20108, 20197, 20234, 63965, 63966, 22839, 23016, 63967, 24050, 24347, 24411, 24609, 63968, 63969, 63970, 63971, 29246, 29669, 63972, 30064, 30157, 63973, 31227, 63974, 32780, 32819, 32900, 33505, 33617, 63975, 63976, 36029, 36019, 36999, 63977, 63978, 39156, 39180, 63979, 63980, 28727, 30410, 32714, 32716, 32764, 35610, 20154, 20161, 20995, 21360, 63981, 21693, 22240, 23035, 23493, 24341, 24525, 28270, 63982, 63983, 32106, 33589, 63984, 34451, 35469, 63985, 38765, 38775, 63986, 63987, 19968, 20314, 20350, 22777, 26085, 28322, 36920, 37808, 39353, 20219, 22764, 22922, 23001, 24641, 63988, 63989, 31252, 63990, 33615, 36035, 20837, 21316, 63991, 63992, 63993, 20173, 21097, 23381, 33471, 20180, 21050, 21672, 22985, 23039, 23376, 23383, 23388, 24675, 24904, 28363, 28825, 29038, 29574, 29943, 30133, 30913, 32043, 32773, 33258, 33576, 34071, 34249, 35566, 36039, 38604, 20316, 21242, 22204, 26027, 26152, 28796, 28856, 29237, 32189, 33421, 37196, 38592, 40306, 23409, 26855, 27544, 28538, 30430, 23697, 26283, 28507, 31668, 31786, 34870, 38620, 19976, 20183, 21280, 22580, 22715, 22767, 22892, 23559, 24115, 24196, 24373, 25484, 26290, 26454, 27167, 27299, 27404, 28479, 29254, 63994, 29520, 29835, 31456, 31911, 33144, 33247, 33255, 33674, 33900, 34083, 34196, 34255, 35037, 36115, 37292, 38263, 38556, 20877, 21705, 22312, 23472, 25165, 26448, 26685, 26771, 28221, 28371, 28797, 32289, 35009, 36001, 36617, 40779, 40782, 29229, 31631, 35533, 37658, 20295, 20302, 20786, 21632, 22992, 24213, 25269, 26485, 26990, 27159, 27822, 28186, 29401, 29482, 30141, 31672, 32053, 33511, 33785, 33879, 34295, 35419, 36015, 36487, 36889, 37048, 38606, 40799, 21219, 21514, 23265, 23490, 25688, 25973, 28404, 29380, 63995, 30340, 31309, 31515, 31821, 32318, 32735, 33659, 35627, 36042, 36196, 36321, 36447, 36842, 36857, 36969, 37841, 20291, 20346, 20659, 20840, 20856, 21069, 21098, 22625, 22652, 22880, 23560, 23637, 24283, 24731, 25136, 26643, 27583, 27656, 28593, 29006, 29728, 30000, 30008, 30033, 30322, 31564, 31627, 31661, 31686, 32399, 35438, 36670, 36681, 37439, 37523, 37666, 37931, 38651, 39002, 39019, 39198, 20999, 25130, 25240, 27993, 30308, 31434, 31680, 32118, 21344, 23742, 24215, 28472, 28857, 31896, 38673, 39822, 40670, 25509, 25722, 34678, 19969, 20117, 20141, 20572, 20597, 21576, 22979, 23450, 24128, 24237, 24311, 24449, 24773, 25402, 25919, 25972, 26060, 26230, 26232, 26622, 26984, 27273, 27491, 27712, 28096, 28136, 28191, 28254, 28702, 28833, 29582, 29693, 30010, 30555, 30855, 31118, 31243, 31357, 31934, 32142, 33351, 35330, 35562, 35998, 37165, 37194, 37336, 37478, 37580, 37664, 38662, 38742, 38748, 38914, 40718, 21046, 21137, 21884, 22564, 24093, 24351, 24716, 25552, 26799, 28639, 31085, 31532, 33229, 34234, 35069, 35576, 36420, 37261, 38500, 38555, 38717, 38988, 40778, 20430, 20806, 20939, 21161, 22066, 24340, 24427, 25514, 25805, 26089, 26177, 26362, 26361, 26397, 26781, 26839, 27133, 28437, 28526, 29031, 29157, 29226, 29866, 30522, 31062, 31066, 31199, 31264, 31381, 31895, 31967, 32068, 32368, 32903, 34299, 34468, 35412, 35519, 36249, 36481, 36896, 36973, 37347, 38459, 38613, 40165, 26063, 31751, 36275, 37827, 23384, 23562, 21330, 25305, 29469, 20519, 23447, 24478, 24752, 24939, 26837, 28121, 29742, 31278, 32066, 32156, 32305, 33131, 36394, 36405, 37758, 37912, 20304, 22352, 24038, 24231, 25387, 32618, 20027, 20303, 20367, 20570, 23005, 32964, 21610, 21608, 22014, 22863, 23449, 24030, 24282, 26205, 26417, 26609, 26666, 27880, 27954, 28234, 28557, 28855, 29664, 30087, 31820, 32002, 32044, 32162, 33311, 34523, 35387, 35461, 36208, 36490, 36659, 36913, 37198, 37202, 37956, 39376, 31481, 31909, 20426, 20737, 20934, 22472, 23535, 23803, 26201, 27197, 27994, 28310, 28652, 28940, 30063, 31459, 34850, 36897, 36981, 38603, 39423, 33537, 20013, 20210, 34886, 37325, 21373, 27355, 26987, 27713, 33914, 22686, 24974, 26366, 25327, 28893, 29969, 30151, 32338, 33976, 35657, 36104, 20043, 21482, 21675, 22320, 22336, 24535, 25345, 25351, 25711, 25903, 26088, 26234, 26525, 26547, 27490, 27744, 27802, 28460, 30693, 30757, 31049, 31063, 32025, 32930, 33026, 33267, 33437, 33463, 34584, 35468, 63996, 36100, 36286, 36978, 30452, 31257, 31287, 32340, 32887, 21767, 21972, 22645, 25391, 25634, 26185, 26187, 26733, 27035, 27524, 27941, 28337, 29645, 29800, 29857, 30043, 30137, 30433, 30494, 30603, 31206, 32265, 32285, 33275, 34095, 34967, 35386, 36049, 36587, 36784, 36914, 37805, 38499, 38515, 38663, 20356, 21489, 23018, 23241, 24089, 26702, 29894, 30142, 31209, 31378, 33187, 34541, 36074, 36300, 36845, 26015, 26389, 63997, 22519, 28503, 32221, 36655, 37878, 38598, 24501, 25074, 28548, 19988, 20376, 20511, 21449, 21983, 23919, 24046, 27425, 27492, 30923, 31642, 63998, 36425, 36554, 36974, 25417, 25662, 30528, 31364, 37679, 38015, 40810, 25776, 28591, 29158, 29864, 29914, 31428, 31762, 32386, 31922, 32408, 35738, 36106, 38013, 39184, 39244, 21049, 23519, 25830, 26413, 32046, 20717, 21443, 22649, 24920, 24921, 25082, 26028, 31449, 35730, 35734, 20489, 20513, 21109, 21809, 23100, 24288, 24432, 24884, 25950, 26124, 26166, 26274, 27085, 28356, 28466, 29462, 30241, 31379, 33081, 33369, 33750, 33980, 20661, 22512, 23488, 23528, 24425, 25505, 30758, 32181, 33756, 34081, 37319, 37365, 20874, 26613, 31574, 36012, 20932, 22971, 24765, 34389, 20508, 63999, 21076, 23610, 24957, 25114, 25299, 25842, 26021, 28364, 30240, 33034, 36448, 38495, 38587, 20191, 21315, 21912, 22825, 24029, 25797, 27849, 28154, 29588, 31359, 33307, 34214, 36068, 36368, 36983, 37351, 38369, 38433, 38854, 20984, 21746, 21894, 24505, 25764, 28552, 32180, 36639, 36685, 37941, 20681, 23574, 27838, 28155, 29979, 30651, 31805, 31844, 35449, 35522, 22558, 22974, 24086, 25463, 29266, 30090, 30571, 35548, 36028, 36626, 24307, 26228, 28152, 32893, 33729, 35531, 38737, 39894, 64000, 21059, 26367, 28053, 28399, 32224, 35558, 36910, 36958, 39636, 21021, 21119, 21736, 24980, 25220, 25307, 26786, 26898, 26970, 27189, 28818, 28966, 30813, 30977, 30990, 31186, 31245, 32918, 33400, 33493, 33609, 34121, 35970, 36229, 37218, 37259, 37294, 20419, 22225, 29165, 30679, 34560, 35320, 23544, 24534, 26449, 37032, 21474, 22618, 23541, 24740, 24961, 25696, 32317, 32880, 34085, 37507, 25774, 20652, 23828, 26368, 22684, 25277, 25512, 26894, 27000, 27166, 28267, 30394, 31179, 33467, 33833, 35535, 36264, 36861, 37138, 37195, 37276, 37648, 37656, 37786, 38619, 39478, 39949, 19985, 30044, 31069, 31482, 31569, 31689, 32302, 33988, 36441, 36468, 36600, 36880, 26149, 26943, 29763, 20986, 26414, 40668, 20805, 24544, 27798, 34802, 34909, 34935, 24756, 33205, 33795, 36101, 21462, 21561, 22068, 23094, 23601, 28810, 32736, 32858, 33030, 33261, 36259, 37257, 39519, 40434, 20596, 20164, 21408, 24827, 28204, 23652, 20360, 20516, 21988, 23769, 24159, 24677, 26772, 27835, 28100, 29118, 30164, 30196, 30305, 31258, 31305, 32199, 32251, 32622, 33268, 34473, 36636, 38601, 39347, 40786, 21063, 21189, 39149, 35242, 19971, 26578, 28422, 20405, 23522, 26517, 27784, 28024, 29723, 30759, 37341, 37756, 34756, 31204, 31281, 24555, 20182, 21668, 21822, 22702, 22949, 24816, 25171, 25302, 26422, 26965, 33333, 38464, 39345, 39389, 20524, 21331, 21828, 22396, 64001, 25176, 64002, 25826, 26219, 26589, 28609, 28655, 29730, 29752, 35351, 37944, 21585, 22022, 22374, 24392, 24986, 27470, 28760, 28845, 32187, 35477, 22890, 33067, 25506, 30472, 32829, 36010, 22612, 25645, 27067, 23445, 24081, 28271, 64003, 34153, 20812, 21488, 22826, 24608, 24907, 27526, 27760, 27888, 31518, 32974, 33492, 36294, 37040, 39089, 64004, 25799, 28580, 25745, 25860, 20814, 21520, 22303, 35342, 24927, 26742, 64005, 30171, 31570, 32113, 36890, 22534, 27084, 33151, 35114, 36864, 38969, 20600, 22871, 22956, 25237, 36879, 39722, 24925, 29305, 38358, 22369, 23110, 24052, 25226, 25773, 25850, 26487, 27874, 27966, 29228, 29750, 30772, 32631, 33453, 36315, 38935, 21028, 22338, 26495, 29256, 29923, 36009, 36774, 37393, 38442, 20843, 21485, 25420, 20329, 21764, 24726, 25943, 27803, 28031, 29260, 29437, 31255, 35207, 35997, 24429, 28558, 28921, 33192, 24846, 20415, 20559, 25153, 29255, 31687, 32232, 32745, 36941, 38829, 39449, 36022, 22378, 24179, 26544, 33805, 35413, 21536, 23318, 24163, 24290, 24330, 25987, 32954, 34109, 38281, 38491, 20296, 21253, 21261, 21263, 21638, 21754, 22275, 24067, 24598, 25243, 25265, 25429, 64006, 27873, 28006, 30129, 30770, 32990, 33071, 33502, 33889, 33970, 34957, 35090, 36875, 37610, 39165, 39825, 24133, 26292, 26333, 28689, 29190, 64007, 20469, 21117, 24426, 24915, 26451, 27161, 28418, 29922, 31080, 34920, 35961, 39111, 39108, 39491, 21697, 31263, 26963, 35575, 35914, 39080, 39342, 24444, 25259, 30130, 30382, 34987, 36991, 38466, 21305, 24380, 24517, 27852, 29644, 30050, 30091, 31558, 33534, 39325, 20047, 36924, 19979, 20309, 21414, 22799, 24264, 26160, 27827, 29781, 33655, 34662, 36032, 36944, 38686, 39957, 22737, 23416, 34384, 35604, 40372, 23506, 24680, 24717, 26097, 27735, 28450, 28579, 28698, 32597, 32752, 38289, 38290, 38480, 38867, 21106, 36676, 20989, 21547, 21688, 21859, 21898, 27323, 28085, 32216, 33382, 37532, 38519, 40569, 21512, 21704, 30418, 34532, 38308, 38356, 38492, 20130, 20233, 23022, 23270, 24055, 24658, 25239, 26477, 26689, 27782, 28207, 32568, 32923, 33322, 64008, 64009, 38917, 20133, 20565, 21683, 22419, 22874, 23401, 23475, 25032, 26999, 28023, 28707, 34809, 35299, 35442, 35559, 36994, 39405, 39608, 21182, 26680, 20502, 24184, 26447, 33607, 34892, 20139, 21521, 22190, 29670, 37141, 38911, 39177, 39255, 39321, 22099, 22687, 34395, 35377, 25010, 27382, 29563, 36562, 27463, 38570, 39511, 22869, 29184, 36203, 38761, 20436, 23796, 24358, 25080, 26203, 27883, 28843, 29572, 29625, 29694, 30505, 30541, 32067, 32098, 32291, 33335, 34898, 64010, 36066, 37449, 39023, 23377, 31348, 34880, 38913, 23244, 20448, 21332, 22846, 23805, 25406, 28025, 29433, 33029, 33031, 33698, 37583, 38960, 20136, 20804, 21009, 22411, 24418, 27842, 28366, 28677, 28752, 28847, 29074, 29673, 29801, 33610, 34722, 34913, 36872, 37026, 37795, 39336, 20846, 24407, 24800, 24935, 26291, 34137, 36426, 37295, 38795, 20046, 20114, 21628, 22741, 22778, 22909, 23733, 24359, 25142, 25160, 26122, 26215, 27627, 28009, 28111, 28246, 28408, 28564, 28640, 28649, 28765, 29392, 29733, 29786, 29920, 30355, 31068, 31946, 32286, 32993, 33446, 33899, 33983, 34382, 34399, 34676, 35703, 35946, 37804, 38912, 39013, 24785, 25110, 37239, 23130, 26127, 28151, 28222, 29759, 39746, 24573, 24794, 31503, 21700, 24344, 27742, 27859, 27946, 28888, 32005, 34425, 35340, 40251, 21270, 21644, 23301, 27194, 28779, 30069, 31117, 31166, 33457, 33775, 35441, 35649, 36008, 38772, 64011, 25844, 25899, 30906, 30907, 31339, 20024, 21914, 22864, 23462, 24187, 24739, 25563, 27489, 26213, 26707, 28185, 29029, 29872, 32008, 36996, 39529, 39973, 27963, 28369, 29502, 35905, 38346, 20976, 24140, 24488, 24653, 24822, 24880, 24908, 26179, 26180, 27045, 27841, 28255, 28361, 28514, 29004, 29852, 30343, 31681, 31783, 33618, 34647, 36945, 38541, 40643, 21295, 22238, 24315, 24458, 24674, 24724, 25079, 26214, 26371, 27292, 28142, 28590, 28784, 29546, 32362, 33214, 33588, 34516, 35496, 36036, 21123, 29554, 23446, 27243, 37892, 21742, 22150, 23389, 25928, 25989, 26313, 26783, 28045, 28102, 29243, 32948, 37237, 39501, 20399, 20505, 21402, 21518, 21564, 21897, 21957, 24127, 24460, 26429, 29030, 29661, 36869, 21211, 21235, 22628, 22734, 28932, 29071, 29179, 34224, 35347, 26248, 34216, 21927, 26244, 29002, 33841, 21321, 21913, 27585, 24409, 24509, 25582, 26249, 28999, 35569, 36637, 40638, 20241, 25658, 28875, 30054, 34407, 24676, 35662, 40440, 20807, 20982, 21256, 27958, 33016, 40657, 26133, 27427, 28824, 30165, 21507, 23673, 32007, 35350, 27424, 27453, 27462, 21560, 24688, 27965, 32725, 33288, 20694, 20958, 21916, 22123, 22221, 23020, 23305, 24076, 24985, 24984, 25137, 26206, 26342, 29081, 29113, 29114, 29351, 31143, 31232, 32690, 35440]);
		encode0 = $toNativeArray($kindUint16, [60649, 61387, 0, 63186, 0, 0, 0, 55474, 60891, 57266, 57278, 63931, 0, 56564, 0, 0, 0, 62948, 0, 0, 62374, 56800, 57766, 0, 52984, 56496, 0, 0, 0, 0, 58282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61929, 0, 0, 0, 0, 52730, 0, 0, 0, 0, 0, 64687, 54177, 0, 61867, 0, 0, 0, 0, 0, 0, 59345, 53932, 0, 52985, 0, 0, 0, 0, 0, 61949, 0, 57023, 64442, 63929, 0, 0, 0, 0, 0, 0, 52946, 0, 58283, 60384, 0, 0, 0, 52986, 52215, 58789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51937, 0, 54476, 0, 0, 0, 0, 0, 60129, 0, 0, 56547, 57261, 0, 0, 0, 0, 0, 0, 52203, 0, 0, 0, 54703, 0, 0, 0, 55029, 0, 58872, 0, 0, 57024, 60579, 0, 59853, 0, 60071, 59894, 64443, 0, 59369, 61388, 0, 0, 53478, 0, 0, 57025, 0, 0, 58540, 0, 0, 55500, 63985, 0, 52959, 64164, 59058, 0, 64251, 0, 0, 64189, 52424, 61389, 54741, 0, 0, 0, 0, 0, 0, 0, 54178, 0, 0, 0, 60625, 0, 0, 0, 0, 0, 58535, 60626, 0, 0, 63153, 0, 0, 52987, 0, 0, 53457, 52159, 0, 60836, 0, 0, 0, 0, 0, 0, 60840, 57026, 63202, 60892, 56565, 57529, 0, 0, 0, 54478, 0, 62645, 0, 0, 0, 54235, 54965, 60580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58598, 0, 61930, 0, 0, 0, 52204, 52160, 0, 0, 0, 60658, 0, 0, 0, 0, 0, 53482, 0, 0, 0, 0, 0, 0, 0, 63986, 60581, 53471, 0, 59370, 53483, 56529, 56297, 64972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56279, 0, 0, 0, 0, 56033, 0, 54966, 0, 58335, 0, 57027, 0, 57028, 51873, 0, 0, 0, 0, 0, 61164, 0, 0, 54179, 61111, 63695, 0, 0, 0, 0, 60104, 61112, 61868, 61861, 59854, 0, 0, 0, 63932, 0, 0, 0, 58873, 60650, 56790, 60866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63653, 0, 0, 0, 0, 0, 58810, 56280, 0, 0, 51874, 0, 0, 53709, 0, 0, 0, 61165, 0, 0, 0, 60651, 57029, 0, 58336, 0, 51913, 62185, 0, 54734, 0, 63158, 0, 52930, 54983, 0, 58292, 0, 61869, 0, 60130, 0, 0, 0, 0, 55234, 0, 62375, 0, 0, 52714, 0, 60398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55730, 64933, 0, 0, 0, 0, 0, 63189, 54754, 0, 0, 0, 0, 0, 0, 0, 0, 63669, 0, 0, 52469, 62901, 58541, 0, 0, 0, 0, 59371, 61909, 0, 0, 0, 61627, 0, 0, 59829, 0, 52425, 64213, 0, 0, 57812, 0, 0, 55254, 0, 0, 56513, 0, 57030, 64239, 58337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57843, 56566, 0, 52988, 0, 56260, 0, 63729, 0, 0, 56548, 0, 58863, 0, 0, 0, 0, 0, 0, 0, 56497, 0, 0, 0, 54742, 0, 0, 62426, 0, 52161, 0, 56259, 0, 0, 0, 55802, 54254, 0, 0, 0, 64184, 0, 0, 64934, 60399, 0, 62630, 0, 52426, 62376, 0, 62427, 0, 56231, 63159, 0, 53222, 61682, 52186, 0, 59346, 55235, 63216, 59614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58790, 0, 0, 0, 0, 0, 0, 0, 58855, 0, 0, 0, 51875, 52391, 60105, 0, 0, 0, 0, 0, 63670, 0, 0, 0, 0, 0, 64165, 0, 0, 0, 0, 61870, 0, 61390, 0, 0, 0, 0, 0, 0, 0, 0, 52205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63152, 61391, 59855, 0, 63454, 0, 0, 0, 0, 0, 0, 0, 52947, 0, 0, 0, 0, 56567, 0, 0, 0, 0, 0, 0, 0, 56232, 0, 0, 0, 52216, 0, 0, 0, 0, 0, 0, 57249, 56801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62922, 59830, 0, 0, 0, 0, 59372, 61166, 0, 62448, 0, 57279, 0, 0, 0, 0, 0, 0, 52427, 0, 0, 0, 0, 0, 0, 53441, 0, 0, 0, 62674, 57530, 0, 0, 0, 0, 57280, 0, 52960, 0, 0, 0, 56530, 65002, 0, 0, 0, 55030, 0, 0, 0, 60106, 0, 0, 0, 0, 0, 0, 59625, 0, 58284, 0, 0, 0, 0, 0, 62416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51876, 0, 56312, 0, 0, 0, 57031, 60400, 61910, 0, 0, 58850, 0, 52428, 0, 0, 52219, 0, 0, 0, 0, 0, 0, 0, 0, 60131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57281, 0, 55021, 0, 0, 0, 0, 0, 0, 0, 0, 59856, 0, 0, 0, 0, 0, 0, 0, 61113, 0, 0, 0, 0, 54755, 0, 0, 53715, 0, 58864, 0, 0, 0, 59572, 60355, 0, 60074, 64252, 62966, 61628, 64980, 57531, 52931, 0, 53434, 63418, 55539, 63437, 0, 0, 0, 58542, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54495, 0, 0, 0, 0, 0, 53479, 0, 0, 60669, 0, 53934, 61167, 54743, 60132, 63650, 52715, 55231, 64433, 0, 0, 52716, 0, 0, 0, 56498, 53484, 52989, 61168, 0, 0, 0, 52418, 0, 0, 0, 53485, 0, 0, 0, 0, 0, 58871, 0, 0, 0, 62460, 0, 0, 61090, 0, 0, 0, 0, 55731, 0, 0, 55540, 0, 59831, 0, 0, 0, 0, 0, 0, 0, 0, 52910, 0, 0, 0, 0, 55714, 0, 0, 0, 0, 55537, 0, 54479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58791, 54738, 0, 0, 0, 0, 0, 54953, 0, 0, 0, 0, 0, 0, 62626, 0, 61911, 0, 0, 54744, 0, 61629, 55248, 54480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55247, 60394, 65003, 0, 0, 56301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64709, 52162, 0, 0, 0, 0, 64981, 0, 62664, 59626, 62963, 0, 0, 63966, 0, 0, 54255, 0, 0, 60627, 0, 0, 56770, 61367, 59348, 0, 51914, 0, 0, 0, 55803, 0, 0, 64253, 0, 0, 0, 0, 0, 54954, 0, 0, 0, 0, 0, 62712, 0, 0, 0, 0, 0, 0, 63479, 56492, 0, 0, 0, 55255, 57250, 0, 0, 0, 52926, 0, 54256, 0, 0, 0, 0, 0, 61604, 57836, 53223, 62411, 60841, 51902, 0, 0, 0, 0, 0, 0, 0, 62703, 0, 0, 0, 63182, 0, 0, 57083, 53435, 54711, 61169, 0, 0, 0, 0, 0, 0, 62632, 0, 56568, 0, 0, 0, 0, 52135, 0, 56014, 0, 0, 0, 57574, 0, 0, 0, 0, 0, 0, 0, 60837, 61170, 0, 0, 0, 0, 56569, 0, 0, 63964, 0, 0, 62428, 0, 0, 0, 0, 0, 0, 0, 63730, 0, 62713, 0, 0, 0, 64753, 0, 0, 0, 53436, 56313, 55217, 0, 0, 0, 52220, 0, 0, 0, 61605, 52221, 0, 0, 0, 0, 0, 0, 0, 0, 54772, 0, 0, 0, 52717, 51877, 0, 0, 54955, 53442, 0, 0, 0, 0, 61630, 53949, 52388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64182, 0, 0, 52429, 0, 56058, 0, 63183, 0, 59832, 0, 55541, 0, 0, 0, 52430, 0, 0, 0, 0, 55245, 0, 0, 54481, 59885, 0, 51947, 55778, 0, 64946, 0, 58285, 54988, 55732, 0, 0, 57767, 61139, 53443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64947, 0, 54756, 0, 0, 53224, 0, 60867, 53426, 0, 0, 52990, 55976, 0, 0, 0, 0, 0, 63696, 0, 0, 64982, 0, 0, 0, 0, 63697, 0, 63698, 56531, 0, 0, 0, 0, 56802, 64505, 56769, 0, 58293, 0, 0, 0, 0, 0, 0, 60893, 52932, 0, 52129, 0, 0, 0, 0, 0, 0, 56803, 0, 0, 0, 0, 64733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63919, 0, 0, 0, 0, 0, 54011, 53153, 58536, 0, 62646, 60670, 0, 0, 58286, 59373, 64961, 56034, 0, 0, 55475, 0, 0, 0, 56804, 61679, 63217, 64240, 0, 0, 53749, 0, 0, 56015, 0, 56532, 0, 56486, 0, 61375, 0, 0, 0, 0, 0, 52943, 0, 57561, 0, 0, 0, 0, 0, 0, 55766, 60628, 60107, 0, 0, 51903, 54704, 0, 53225, 0, 0, 0, 0, 0, 61933, 0, 52431, 0, 0, 0, 0, 58616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58605, 0, 0, 0, 0, 55256, 0, 64935, 0, 0, 0, 0, 60075, 63154, 0, 0, 0, 0, 53232, 63933, 0, 0, 0, 0, 0, 0, 59124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52187, 0, 0, 0, 0, 0, 0, 0, 62417, 0, 0, 0, 0, 59857, 62377, 53472, 59858, 0, 56035, 0, 0, 0, 0, 0, 0, 58066, 0, 63138, 57844, 0, 0, 0, 56036, 0, 0, 0, 0, 0, 59349, 62911, 53154, 52655, 53155, 0, 0, 0, 52656, 61950, 53411, 57775, 63651, 0, 51878, 63419, 62186, 57032, 59859, 0, 0, 0, 0, 57033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64990, 51904, 0, 0, 0, 63978, 53710, 61140, 0, 54482, 55715, 64936, 55257, 63438, 64190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53206, 0, 55280, 0, 60385, 63685, 0, 0, 0, 0, 0, 56570, 0, 0, 56771, 0, 63967, 0, 0, 0, 0, 0, 0, 0, 59375, 0, 0, 0, 0, 64997, 63139, 0, 55804, 64937, 0, 59374, 0, 0, 0, 54757, 0, 0, 0, 0, 0, 61392, 0, 52657, 0, 0, 0, 0, 0, 0, 63394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61874, 0, 61873, 0, 0, 0, 0, 0, 0, 52658, 0, 55979, 0, 51879, 0, 0, 0, 0, 0, 58338, 64444, 55716, 0, 0, 61114, 0, 0, 0, 0, 0, 63699, 0, 0, 0, 0, 0, 64506, 0, 53156, 0, 56571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63203, 0, 0, 0, 60842, 0, 0, 62113, 52961, 0, 0, 0, 0, 0, 0, 64166, 0, 0, 0, 0, 63968, 0, 0, 0, 0, 60630, 0, 0, 58606, 63905, 0, 0, 64495, 0, 0, 0, 63979, 61091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60076, 0, 0, 0, 51880, 0, 0, 62714, 0, 0, 0, 0, 52694, 64758, 0, 0, 0, 62665, 0, 0, 0, 0, 0, 0, 0, 63700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63654, 0, 57034, 62150, 0, 0, 0, 0, 0, 0, 55258, 0, 54224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55493, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60134, 0, 62429, 0, 0, 0, 58586, 0, 0, 0, 0, 0, 0, 0, 0, 63204, 0, 0, 0, 0, 0, 63218, 0, 57282, 0, 0, 0, 0, 0, 0, 0, 0, 55805, 0, 0, 0, 52470, 0, 0, 54202, 0, 0, 0, 0, 0, 0, 0, 58543, 0, 0, 0, 0, 63969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61606, 0, 0, 0, 52179, 0, 0, 0, 57532, 0, 62666, 54522, 0, 64938, 63970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62647, 64962, 64688, 0, 65004, 51938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64957, 0, 60135, 57283, 53714, 52962, 0, 54180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64939, 0, 57312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62151, 0, 0, 0, 0, 0, 59376, 0, 53486, 0, 0, 62378, 0, 0, 0, 57035, 63160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57845, 61875, 0, 0, 0, 0, 0, 0, 0, 63395, 0, 0, 51881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53157, 0, 0, 57284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57776, 0, 0, 61631, 0, 63140, 0, 58294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53487, 0, 0, 65005, 0, 0, 0, 0, 0, 0, 0, 0, 56772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59071, 0, 0, 0, 0, 0, 0, 57005, 0, 64191, 0, 0, 0, 0, 0, 58865, 0, 0, 0, 0, 0, 0, 0, 60868, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53925, 0, 0, 65006, 0, 0, 0, 62902, 0, 0, 0, 0, 0, 0, 0, 0, 57846, 57036, 0, 0, 64734, 0, 60631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52701, 0, 0, 0, 0, 0, 0, 0, 0, 54967, 52659, 0, 0, 0, 0, 0, 0, 0, 0, 63701, 58840, 0, 0, 0, 53226, 0, 0, 53200, 0, 60108, 0, 0, 0, 0, 60078, 60077, 0, 0, 54257, 0, 54181, 0, 0, 0, 0, 0, 0, 63439, 0, 0, 0, 0, 0, 0, 0, 0, 61092, 0, 0, 0, 0, 53412, 0, 0, 62114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53488, 0, 0, 0, 0, 62115, 0, 63480, 0, 0, 0, 0, 53427, 0, 0, 56233, 0, 0, 54203, 51948, 0, 61862, 52181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63463, 0, 0, 52702, 0, 63396, 0, 0, 0, 63680, 0, 0, 0, 54237, 0, 52432, 0, 0, 0, 0, 53158, 0, 0, 0, 0, 0, 0, 63219, 0, 0, 0, 0, 0, 57847, 0, 0, 0, 0, 0, 54236, 0, 0, 64254, 0, 0, 0, 0, 0, 0, 0, 64167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60377, 0, 53159, 60079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58607, 0, 0, 0, 59833, 61912, 0, 0, 55512, 0, 0, 57586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59060, 56572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62449, 0, 0, 0, 58320, 0, 0, 62203, 0, 56262, 53489, 0, 53490, 0, 0, 0, 53212, 0, 54225, 0, 0, 52401, 63448, 0, 52136, 60348, 58558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62684, 0, 0, 56514, 0, 0, 61607, 0, 0, 59072, 0, 0, 51949, 0, 0, 0, 0, 59627, 58856, 56515, 0, 0, 60894, 54258, 0, 0, 0, 0, 52471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52948, 59307, 0, 0, 0, 52163, 0, 57777, 0, 0, 63410, 0, 0, 54259, 54226, 0, 62912, 0, 0, 0, 57309, 0, 0, 61171, 59377, 0, 64948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62152, 0, 0, 0, 62418, 0, 0, 61172, 0, 58067, 0, 0, 0, 0, 52433, 0, 57322, 0, 0, 0, 59834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55767, 0, 0, 0, 0, 0, 0, 0, 0, 62925, 0, 61938, 64199, 0, 0, 0, 0, 0, 0, 0, 0, 55800, 54466, 0, 0, 0, 0, 63205, 0, 0, 0, 0, 56773, 0, 0, 0, 0, 0, 0, 59378, 60895, 0, 0, 51915, 0, 0, 56314, 0, 0, 0, 59573, 0, 54182, 0, 0, 0, 0, 0, 0, 64949, 0, 0, 63945, 0, 58594, 0, 64445, 0, 0, 55204, 52933, 0, 0, 0, 0, 52949, 55014, 0, 0, 0, 0, 58813, 0, 0, 0, 0, 0, 0, 57037, 60659, 0, 0, 60896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60652, 64446, 57323, 0, 57848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63934, 0, 0, 0, 0, 53491, 57514, 59618, 0, 0, 58068, 54013, 0, 58792, 0, 0, 0, 0, 0, 55763, 0, 0, 0, 0, 54238, 0, 62648, 63420, 56573, 0, 59628, 58599, 0, 0, 58359, 0, 0, 0, 0, 0, 60584, 0, 0, 0, 0, 0, 0, 64241, 0, 0, 0, 0, 0, 58866, 0, 0, 53492, 53935, 56549, 0, 0, 0, 0, 53413, 61876, 64689, 52472, 0, 0, 56774, 64209, 0, 63455, 0, 0, 64168, 0, 0, 0, 0, 0, 61173, 0, 57038, 0, 0, 0, 0, 59379, 0, 0, 63404, 60356, 60897, 57515, 56775, 0, 0, 0, 0, 53939, 53951, 0, 0, 0, 51916, 0, 0, 0, 0, 64447, 0, 0, 0, 0, 58877, 56805, 55501, 0, 0, 0, 0, 0, 60660, 0, 0, 0, 0, 0, 0, 0, 0, 53493, 0, 0, 59629, 53458, 0, 55768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63206, 0, 0, 56234, 0, 0, 0, 63456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55513, 0, 62627, 0, 0, 62685, 0, 0, 0, 0, 61393, 0, 0, 55733, 0, 0, 60843, 0, 58295, 0, 0, 0, 0, 61115, 52660, 0, 57587, 60109, 0, 0, 0, 0, 60661, 59630, 0, 52137, 61871, 0, 0, 0, 0, 0, 0, 0, 0, 51917, 0, 60585, 0, 62187, 0, 65007, 0, 63987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59073, 0, 0, 60632, 0, 0, 0, 60844, 0, 60110, 0, 59615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57039, 0, 0, 0, 0, 0, 0, 53926, 0, 0, 59380, 53718, 0, 0, 59074, 58339, 0, 0, 0, 0, 58544, 0, 0, 0, 55476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63141, 0, 0, 0, 0, 0, 62430, 0, 0, 0, 0, 55205, 0, 0, 0, 0, 63464, 0, 0, 59590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64486, 0, 0, 0, 0, 0, 0, 0, 56806, 0, 0, 0, 56574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55514, 0, 0, 0, 0, 0, 0, 0, 55980, 60080, 0, 0, 0, 0, 0, 0, 0, 0, 58296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51882, 57849, 0, 60081, 0, 0, 0, 0, 62188, 0, 0, 64238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61141, 0, 0, 0, 0, 63988, 0, 0, 53996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64507, 0, 0, 0, 65008, 0, 57533, 52963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57285, 0, 0, 58814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60845, 64234, 0, 0, 52718, 60838, 0, 60846, 61677, 0, 56737, 0, 60847, 64760, 0, 55531, 0, 0, 0, 52473, 52661, 0, 0, 0, 0, 64169, 0, 57821, 0, 0, 0, 0, 58069, 60879, 0, 0, 0, 56738, 0, 0, 63946, 0, 60136, 0, 58861, 0, 0, 0, 0, 0, 0, 0, 0, 54251, 0, 59860, 57850, 58572, 0, 57828, 59591, 0, 0, 52955, 0, 0, 0, 56533, 0, 63413, 64755, 61683, 52911, 61877, 61394, 59592, 60401, 0, 0, 0, 0, 0, 52180, 57534, 58360, 60137, 64690, 0, 0, 0, 0, 0, 57588, 0, 53216, 0, 61093, 0, 0, 64170, 59075, 57778, 51883, 0, 58340, 59835, 0, 0, 0, 0, 0, 58070, 62450, 0, 61142, 60082, 53494, 60633, 56011, 53160, 0, 0, 0, 0, 56739, 0, 0, 0, 55515, 0, 63950, 59861, 58321, 0, 0, 53948, 0, 0, 0, 0, 0, 0, 55468, 62412, 0, 52731, 63190, 0, 59381, 59631, 58361, 53947, 62451, 58363, 0, 57040, 52912, 0, 55031, 61913, 0, 0, 0, 0, 0, 62913, 56516, 0, 62907, 0, 57041, 0, 0, 0, 0, 0, 0, 56550, 0, 0, 57042, 0, 0, 60898, 61174, 60111, 61678, 58364, 0, 54239, 54260, 57779, 0, 57780, 0, 0, 0, 0, 62675, 0, 0, 57286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59862, 0, 0, 0, 56235, 0, 0, 0, 0, 0, 0, 0, 0, 63142, 0, 0, 0, 0, 0, 0, 58297, 60357, 62633, 52662, 54009, 0, 55981, 53987, 53201, 0, 0, 0, 0, 52188, 52474, 0, 53213, 0, 0, 59561, 0, 58299, 58298, 0, 0, 57562, 0, 0, 0, 61175, 0, 0, 0, 0, 0, 56499, 0, 0, 0, 0, 54261, 0, 55206, 0, 63157, 55259, 0, 0, 0, 0, 0, 0, 57813, 0, 0, 54506, 0, 57251, 0, 0, 0, 0, 0, 0, 0, 64991, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53495, 60884, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52138, 0, 0, 0, 0, 0, 0, 0, 58587, 0, 57851, 52130, 0, 0, 0, 0, 54240, 0, 58559, 0, 64448, 0, 55998, 58573, 0, 54969, 0, 0, 0, 61376, 0, 57852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63161, 0, 0, 0, 0, 0, 0, 57287, 0, 0, 0, 0, 0, 0, 0, 58545, 0, 0, 0, 0, 0, 0, 56551, 56552, 0, 0, 0, 64214, 0, 54262, 0, 0, 0, 0, 61914, 0, 64242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58109, 0, 0, 0, 0, 0, 54735, 53496, 0, 0, 52703, 0, 0, 62923, 0, 58608, 52139, 0, 55236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58110, 0, 56794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55982, 51950, 0, 0, 0, 54713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58273, 0, 0, 59619, 0, 0, 62379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53161, 0, 0, 0, 54263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54513, 0, 0, 52964, 0, 59634, 0, 0, 0, 0, 0, 0, 0, 58869, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59310, 0, 54970, 0, 57324, 58560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59620, 0, 0, 0, 0, 55477, 0, 0, 0, 58588, 0, 0, 0, 0, 0, 0, 62649, 61878, 0, 0, 58078, 57781, 0, 0, 52719, 61863, 52965, 52189, 0, 0, 55779, 0, 0, 62380, 0, 0, 53497, 60587, 57043, 63465, 0, 0, 63989, 0, 0, 0, 0, 0, 57822, 52206, 0, 0, 0, 58300, 63702, 0, 0, 56302, 0, 0, 0, 0, 0, 65009, 0, 0, 0, 0, 63414, 0, 0, 0, 0, 62686, 0, 0, 62189, 0, 56281, 0, 61608, 0, 0, 0, 0, 0, 0, 0, 57853, 0, 0, 0, 0, 0, 57044, 0, 57516, 0, 0, 0, 0, 0, 60899, 0, 0, 54241, 0, 57288, 0, 0, 0, 0, 55734, 0, 64940, 61395, 0, 0, 0, 58561, 63723, 0, 56236, 0, 0, 0, 0, 64710, 0, 0, 0, 0, 0, 0, 0, 0, 55469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63162, 0, 56287, 54227, 63687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51918, 63681, 53940, 0, 0, 56500, 64185, 51919, 0, 64691, 60138, 60139, 53498, 0, 0, 0, 0, 0, 60900, 0, 0, 56807, 0, 0, 57289, 0, 0, 0, 0, 57325, 0, 0, 0, 0, 0, 61116, 0, 61377, 0, 0, 52434, 0, 56740, 0, 0, 0, 57290, 0, 0, 0, 0, 0, 54264, 61864, 0, 0, 0, 52663, 0, 61396, 0, 0, 0, 0, 0, 0, 0, 58589, 57326, 52140, 59836, 0, 0, 0, 0, 0, 60140, 0, 0, 0, 57291, 0, 0, 0, 0, 0, 63935, 54959, 54726, 0, 0, 0, 0, 0, 53162, 0, 0, 52905, 0, 0, 55032, 0, 0, 0, 61879, 61176, 0, 0, 0, 55769, 62431, 0, 63688, 52934, 0, 0, 0, 0, 0, 0, 0, 0, 54758, 0, 0, 0, 0, 0, 0, 62694, 0, 0, 59077, 61397, 0, 0, 52207, 64735, 0, 0, 0, 0, 0, 56487, 0, 0, 55015, 0, 0, 0, 0, 0, 63689, 0, 0, 0, 0, 58322, 0, 58301, 0, 53217, 61632, 60634, 0, 56791, 64496, 0, 0, 60588, 0, 0, 0, 61609, 0, 0, 0, 0, 0, 0, 64215, 64449, 0, 53952, 0, 0, 0, 0, 0, 0, 0, 58800, 0, 0, 0, 60901, 0, 0, 0, 0, 52141, 0, 63920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63397, 0, 52142, 0, 55983, 0, 55478, 0, 0, 0, 0, 0, 0, 0, 54183, 64434, 0, 64964, 0, 60589, 0, 0, 0, 0, 0, 0, 64417, 0, 0, 0, 58857, 59886, 0, 62452, 63731, 61633, 57007, 63664, 0, 0, 62432, 59311, 0, 0, 0, 0, 0, 56237, 0, 59061, 0, 0, 63912, 0, 0, 56792, 59609, 61398, 0, 0, 0, 54242, 0, 58079, 0, 0, 64736, 55240, 64941, 0, 0, 0, 57327, 52435, 54265, 0, 0, 0, 0, 54512, 56263, 57045, 0, 0, 0, 0, 61684, 0, 54736, 58841, 0, 0, 0, 0, 0, 0, 64711, 56534, 58080, 0, 0, 0, 55984, 0, 0, 0, 0, 0, 0, 62371, 0, 54252, 0, 62667, 0, 0, 0, 64965, 0, 0, 0, 0, 0, 58365, 0, 63921, 0, 0, 0, 0, 0, 0, 53499, 60635, 0, 0, 0, 0, 0, 0, 0, 0, 62908, 62116, 55502, 55503, 0, 0, 0, 0, 0, 0, 62967, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53943, 0, 0, 0, 0, 0, 0, 0, 64492, 0, 56776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58600, 0, 0, 53953, 0, 0, 0, 63703, 0, 0, 0, 0, 0, 54971, 57046, 0, 0, 63421, 60590, 0, 0, 0, 53473, 0, 57589, 60083, 0, 52950, 0, 0, 0, 0, 52389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60662, 58081, 58302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64712, 0, 0, 52720, 0, 63990, 0, 0, 57328, 0, 0, 0, 58815, 0, 0, 0, 52927, 0, 0, 0, 0, 64737, 60848, 64977, 63163, 0, 0, 63951, 60378, 51905, 0, 53944, 52721, 0, 58323, 64998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59117, 0, 0, 0, 58362, 0, 0, 61610, 63952, 0, 0, 0, 0, 0, 0, 64738, 0, 63655, 0, 0, 0, 57829, 61177, 0, 0, 0, 59382, 60141, 0, 0, 64692, 62914, 0, 0, 55260, 0, 0, 0, 0, 0, 0, 0, 0, 61685, 0, 56808, 54253, 62972, 0, 55999, 0, 52475, 0, 0, 0, 54266, 62628, 0, 0, 0, 0, 0, 0, 0, 61399, 0, 54467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64483, 0, 0, 0, 0, 0, 0, 0, 0, 64493, 0, 57517, 0, 0, 60142, 64435, 58562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63207, 53981, 0, 57292, 0, 0, 64713, 0, 0, 58793, 57590, 63155, 0, 0, 0, 0, 0, 57854, 0, 0, 0, 0, 52208, 0, 60143, 60144, 0, 0, 0, 56000, 63668, 60402, 0, 0, 0, 0, 0, 58563, 0, 0, 0, 0, 59863, 58609, 0, 0, 0, 51951, 0, 0, 0, 0, 0, 0, 0, 52951, 0, 0, 0, 0, 0, 0, 0, 0, 64714, 0, 0, 0, 62433, 0, 0, 52164, 0, 0, 0, 0, 58341, 0, 52165, 60084, 0, 0, 59837, 0, 55241, 0, 0, 60379, 60849, 0, 52419, 63422, 64715, 0, 0, 0, 0, 0, 0, 63732, 0, 55735, 0, 0, 62419, 62420, 0, 0, 0, 63460, 0, 63441, 0, 0, 55479, 52913, 51906, 0, 0, 64436, 52166, 0, 0, 61686, 0, 0, 54759, 0, 60112, 0, 0, 0, 0, 0, 52436, 52143, 0, 0, 0, 0, 0, 62634, 59823, 0, 0, 62915, 59864, 0, 0, 0, 0, 0, 0, 0, 56809, 0, 0, 0, 61939, 0, 54779, 57019, 0, 0, 62715, 0, 0, 0, 65011, 65010, 63398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56777, 0, 0, 54483, 0, 52392, 0, 56001, 52437, 0, 55780, 0, 0, 0, 64202, 0, 0, 0, 58851, 0, 0, 0, 54204, 0, 0, 0, 51952, 0, 0, 0, 0, 53444, 0, 0, 0, 51920, 64171, 60395, 59384, 55781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62372, 0, 0, 0, 54523, 64739, 64216, 0, 62421, 0, 53163, 0, 0, 60403, 54780, 0, 0, 0, 0, 0, 0, 54228, 52732, 0, 55782, 0, 58105, 58017, 60372, 0, 57591, 58546, 52476, 0, 0, 0, 64484, 0, 0, 0, 62635, 0, 0, 0, 0, 53437, 0, 51953, 0, 0, 0, 0, 0, 0, 0, 0, 61368, 0, 0, 0, 55232, 0, 61178, 65012, 0, 0, 54243, 0, 64450, 0, 0, 0, 0, 0, 0, 0, 54760, 56238, 57782, 63671, 0, 0, 0, 0, 0, 57535, 64451, 56810, 0, 58018, 0, 61094, 0, 0, 0, 0, 0, 63208, 0, 0, 0, 0, 63221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56778, 0, 0, 53474, 0, 0, 0, 0, 56742, 0, 0, 56811, 0, 0, 58617, 0, 0, 58287, 53500, 0, 0, 0, 62716, 0, 0, 0, 0, 52412, 63466, 0, 0, 0, 0, 0, 0, 58852, 57329, 0, 0, 63457, 0, 63991, 61369, 0, 0, 63704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63913, 0, 0, 0, 0, 0, 63705, 0, 0, 0, 61117, 0, 0, 0, 55494, 0, 0, 58595, 62926, 0, 0, 0, 0, 56793, 0, 0, 0, 0, 55783, 53945, 54723, 0, 0, 56037, 56016, 0, 53721, 52952, 0, 52190, 62636, 56059, 0, 63209, 59635, 53164, 61680, 0, 62717, 56264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52928, 58324, 53711, 61941, 0, 52722, 0, 53227, 0, 0, 0, 52664, 0, 0, 0, 0, 0, 0, 58278, 53722, 0, 62117, 0, 0, 0, 0, 0, 62118, 0, 58574, 0, 0, 0, 0, 0, 0, 0, 54267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61865, 0, 0, 0, 62153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61400, 59081, 0, 55480, 64243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62389, 0, 0, 63652, 0, 0, 53747, 59080, 0, 0, 0, 0, 63706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56553, 57047, 0, 0, 0, 0, 0, 52191, 0, 0, 0, 53228, 0, 0, 0, 0, 62687, 0, 0, 53748, 53946, 0, 0, 0, 57330, 0, 0, 0, 57783, 0, 0, 0, 0, 58019, 54268, 0, 0, 60902, 0, 0, 0, 0, 0, 56265, 0, 0, 0, 58618, 0, 53214, 0, 0, 52944, 0, 0, 0, 0, 54739, 62453, 63406, 0, 0, 61384, 0, 52723, 62927, 58867, 61634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51921, 0, 0, 0, 60145, 0, 53414, 0, 0, 0, 0, 0, 0, 0, 0, 55770, 61611, 0, 0, 0, 0, 0, 60391, 0, 0, 0, 58816, 64693, 0, 0, 0, 0, 0, 58564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52393, 64966, 0, 0, 0, 0, 0, 60085, 0, 58794, 57274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57823, 0, 56017, 0, 0, 0, 0, 57784, 0, 59636, 54269, 0, 0, 0, 0, 58020, 0, 0, 0, 0, 0, 62154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56038, 63411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64973, 0, 0, 0, 62390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61143, 0, 0, 0, 0, 0, 0, 0, 62916, 0, 0, 0, 0, 0, 0, 0, 0, 55460, 0, 0, 0, 0, 0, 62119, 0, 0, 0, 0, 0, 0, 0, 0, 55736, 55737, 61385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54990, 0, 0, 0, 0, 0, 0, 0, 0, 63435, 57262, 59637, 0, 0, 0, 0, 0, 0, 53941, 0, 0, 0, 54229, 0, 0, 0, 0, 0, 62668, 56060, 0, 0, 0, 0, 0, 55784, 0, 63467, 62921, 0, 62396, 0, 56018, 0, 0, 0, 0, 0, 0, 0, 0, 54197, 0, 0, 0, 0, 0, 59574, 0, 0, 54991, 62650, 0, 63433, 0, 0, 52394, 0, 0, 61635, 52438, 0, 0, 0, 53459, 0, 54205, 0, 0, 0, 56315, 0, 52192, 0, 0, 0, 0, 0, 0, 54244, 63223, 0, 0, 54714, 62413, 52193, 0, 0, 0, 0, 60404, 0, 0, 0, 0, 0, 62637, 0, 64682, 0, 0, 0, 0, 0, 63468, 0, 0, 0, 59638, 0, 56039, 0, 0, 0, 63436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58817, 0, 0, 0, 0, 57582, 0, 0, 0, 0, 0, 54781, 0, 0, 0, 0, 0, 0, 52966, 64683, 54715, 0, 0, 62120, 0, 0, 0, 0, 0, 0, 58021, 52665, 60146, 52167, 0, 52724, 0, 0, 56239, 61401, 0, 0, 0, 0, 0, 52666, 0, 0, 64761, 0, 0, 0, 0, 57331, 52967, 56002, 0, 53165, 0, 0, 0, 0, 59385, 63656, 0, 0, 0, 0, 0, 0, 62434, 0, 0, 0, 51954, 57252, 0, 0, 54468, 0, 0, 0, 0, 0, 52439, 58818, 0, 0, 0, 0, 52667, 0, 61402, 61144, 0, 56743, 58022, 0, 0, 0, 0, 0, 57536, 0, 0, 0, 54960, 63690, 0, 64762, 0, 55806, 0, 0, 0, 0, 57008, 0, 0, 0, 56812, 56040, 0, 0, 0, 0, 0, 54496, 0, 55033, 0, 52695, 57048, 0, 0, 62200, 0, 58582, 0, 0, 53445, 62638, 0, 56744, 0, 0, 0, 60869, 62422, 0, 0, 57049, 58342, 0, 0, 0, 0, 0, 0, 54184, 0, 56240, 0, 0, 58842, 58303, 0, 0, 0, 56241, 0, 0, 0, 54761, 0, 0, 0, 0, 0, 57537, 61403, 0, 0, 61673, 0, 0, 55218, 0, 0, 0, 0, 53501, 0, 0, 0, 0, 0, 0, 0, 0, 55785, 0, 0, 53502, 0, 60653, 54185, 0, 62121, 61636, 0, 0, 58082, 59887, 0, 0, 0, 63953, 0, 0, 59865, 0, 0, 0, 0, 0, 59610, 56003, 56004, 54469, 0, 59386, 0, 0, 0, 0, 0, 0, 52704, 58288, 0, 56242, 64452, 0, 62435, 0, 55717, 64487, 56779, 53460, 0, 59062, 57518, 64986, 0, 0, 0, 0, 0, 0, 0, 0, 56501, 57592, 59313, 0, 0, 0, 0, 62960, 0, 55516, 60870, 0, 0, 0, 0, 57785, 0, 58304, 63936, 59888, 0, 0, 55771, 0, 62436, 0, 0, 0, 56502, 58601, 0, 0, 0, 0, 0, 61637, 58305, 64716, 64717, 0, 0, 0, 0, 62155, 0, 62156, 0, 0, 0, 58575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61915, 0, 64217, 0, 61880, 65013, 57593, 0, 0, 0, 0, 59387, 64695, 64740, 64453, 58343, 55481, 0, 63224, 0, 0, 56517, 52440, 0, 0, 0, 57519, 62695, 0, 61404, 53244, 61405, 0, 62122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64958, 0, 0, 51884, 64955, 64967, 0, 0, 0, 0, 59314, 0, 60113, 57332, 0, 0, 0, 0, 53740, 58590, 58819, 0, 0, 0, 0, 55718, 0, 0, 52668, 0, 62437, 0, 0, 0, 0, 0, 0, 0, 0, 60885, 0, 0, 55738, 0, 0, 0, 60903, 64437, 63724, 0, 0, 0, 0, 57575, 0, 52441, 0, 0, 54470, 0, 0, 0, 0, 0, 59301, 0, 54773, 54206, 0, 64763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58610, 0, 0, 57333, 0, 0, 59640, 63725, 0, 0, 52935, 0, 0, 0, 0, 0, 65014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59608, 0, 52696, 59350, 52442, 0, 0, 51939, 57334, 61639, 61638, 0, 55482, 0, 61940, 62704, 62924, 0, 0, 64741, 0, 0, 0, 0, 60101, 60147, 0, 56795, 0, 56535, 0, 0, 0, 0, 0, 0, 57085, 62201, 0, 54727, 0, 0, 0, 55504, 0, 61640, 53665, 53666, 0, 0, 0, 0, 0, 0, 55764, 55016, 55754, 0, 55985, 55495, 56546, 62414, 62964, 0, 0, 61881, 0, 0, 56019, 0, 63210, 0, 0, 0, 53237, 0, 0, 64942, 0, 0, 0, 0, 0, 0, 0, 0, 51922, 0, 0, 57268, 0, 0, 0, 0, 55261, 64186, 61095, 62909, 0, 63733, 0, 0, 60904, 0, 0, 0, 0, 0, 54497, 0, 53667, 57814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63992, 0, 56266, 52217, 54484, 0, 55772, 0, 61118, 0, 63469, 0, 0, 0, 53998, 0, 0, 57830, 63481, 0, 0, 0, 0, 0, 0, 0, 56813, 0, 59611, 0, 56243, 0, 0, 0, 53751, 57520, 0, 0, 54498, 0, 63191, 0, 55289, 0, 0, 55517, 0, 52733, 62123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52669, 63682, 0, 0, 62124, 0, 0, 51885, 51886, 53166, 0, 0, 0, 0, 0, 58306, 0, 0, 0, 0, 0, 56503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56282, 55739, 51955, 63187, 59128, 60149, 0, 0, 0, 0, 0, 60150, 0, 0, 63225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53167, 0, 0, 51923, 0, 0, 51887, 53936, 61882, 0, 55219, 58307, 62461, 57050, 0, 0, 0, 0, 57051, 0, 0, 61406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58083, 61179, 0, 0, 57335, 55242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52968, 56283, 0, 0, 0, 0, 0, 0, 0, 61883, 0, 0, 0, 0, 59889, 0, 0, 0, 0, 0, 0, 0, 0, 64183, 53446, 0, 0, 52395, 61096, 0, 0, 52218, 63993, 52477, 54270, 0, 0, 0, 0, 58576, 0, 0, 0, 0, 0, 62190, 0, 54485, 57293, 0, 64696, 53712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62157, 0, 0, 0, 0, 0, 0, 0, 0, 63442, 0, 0, 0, 0, 0, 0, 0, 0, 51924, 0, 54745, 0, 0, 0, 55518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52697, 0, 0, 0, 61097, 63164, 0, 0, 52443, 0, 0, 0, 0, 0, 61641, 0, 64764, 0, 59593, 62718, 0, 0, 0, 0, 59388, 55262, 0, 0, 0, 0, 57052, 0, 61612, 52478, 52705, 0, 57786, 0, 56303, 55986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53669, 56504, 0, 0, 0, 55542, 0, 53668, 0, 52706, 0, 0, 0, 0, 56554, 0, 0, 61687, 0, 61642, 53438, 0, 56796, 0, 0, 0, 0, 54486, 54230, 0, 0, 0, 0, 0, 0, 60880, 52641, 0, 0, 0, 0, 0, 57269, 0, 0, 0, 57336, 0, 0, 0, 0, 0, 0, 54433, 52914, 0, 0, 0, 0, 0, 59594, 0, 0, 0, 0, 60405, 0, 0, 0, 0, 0, 0, 0, 58325, 62928, 0, 0, 0, 62881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55719, 0, 0, 0, 0, 0, 0, 0, 0, 58795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59083, 0, 62961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58821, 0, 0, 0, 0, 0, 0, 0, 0, 63907, 57563, 63211, 0, 52209, 0, 55786, 62882, 0, 0, 0, 55249, 0, 53752, 60152, 60153, 55987, 0, 0, 0, 0, 61407, 0, 0, 61935, 0, 58870, 61119, 58084, 0, 0, 0, 0, 0, 53439, 0, 64172, 62929, 59315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59838, 0, 0, 0, 0, 0, 62158, 56244, 0, 0, 0, 0, 0, 0, 0, 0, 64718, 0, 56814, 0, 0, 0, 0, 0, 0, 59316, 0, 0, 0, 0, 0, 55220, 0, 0, 0, 0, 0, 0, 63412, 0, 0, 0, 0, 0, 52670, 0, 56041, 0, 0, 0, 0, 0, 0, 0, 53168, 63449, 62438, 0, 0, 52953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52906, 0, 52168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53415, 0, 61643, 0, 53447, 0, 0, 58565, 0, 0, 0, 0, 0, 0, 0, 56288, 0, 0, 0, 0, 0, 0, 54746, 0, 55207, 0, 0, 0, 61120, 0, 63734, 0, 0, 0, 0, 62930, 60905, 0, 55740, 0, 58822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62883, 0, 0, 56020, 58023, 64508, 0, 0, 61916, 0, 0, 0, 0, 0, 0, 51956, 0, 0, 0, 59642, 0, 0, 52969, 0, 0, 0, 0, 0, 0, 59896, 58085, 0, 0, 0, 0, 53433, 54514, 0, 0, 0, 0, 0, 53670, 0, 57294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54186, 0, 0, 0, 52396, 0, 0, 0, 0, 61408, 0, 0, 0, 58853, 53461, 0, 0, 0, 0, 0, 0, 0, 0, 56316, 0, 0, 0, 0, 64742, 0, 0, 0, 0, 0, 52222, 60906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57009, 0, 0, 0, 0, 0, 0, 0, 63971, 0, 0, 0, 0, 0, 0, 54434, 53238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54992, 0, 0, 0, 0, 0, 0, 54762, 61934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64203, 0, 0, 0, 0, 58785, 0, 0, 0, 0, 0, 0, 0, 0, 54705, 0, 0, 0, 0, 0, 53229, 0, 60907, 0, 0, 0, 0, 0, 54706, 0, 0, 0, 54716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64994, 62381, 0, 64987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59824, 0, 0, 0, 0, 0, 0, 0, 53671, 0, 0, 64995, 52915, 0, 0, 0, 0, 0, 0, 0, 64996, 64206, 0, 0, 0, 0, 51888, 0, 63399, 0, 53169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59042, 0, 64694, 62125, 61409, 62382, 56518, 55787, 0, 0, 0, 59616, 0, 0, 0, 0, 0, 0, 0, 57768, 0, 0, 0, 0, 54774, 53245, 0, 0, 57053, 0, 0, 0, 55761, 0, 0, 0, 58602, 62159, 0, 63423, 0, 0, 58086, 58024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58326, 0, 60881, 0, 0, 0, 0, 0, 59897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54961, 57010, 0, 0, 57576, 0, 0, 54187, 0, 60380, 0, 0, 57263, 0, 51907, 0, 0, 61180, 0, 64963, 0, 0, 0, 60406, 53170, 0, 0, 0, 0, 55788, 0, 55741, 0, 55519, 0, 0, 54456, 60350, 56815, 0, 56816, 56817, 56818, 0, 0, 55742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64454, 53171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61181, 0, 0, 0, 0, 0, 0, 58539, 0, 56005, 0, 55532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58025, 0, 0, 57020, 59317, 0, 0, 0, 0, 0, 56304, 0, 61410, 61936, 53172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56305, 0, 57521, 0, 0, 0, 0, 57253, 0, 63954, 0, 0, 59389, 0, 0, 59043, 64497, 52144, 62126, 0, 0, 0, 0, 0, 0, 0, 52711, 0, 59612, 0, 0, 59351, 0, 0, 63424, 0, 53475, 0, 0, 0, 55969, 0, 0, 0, 52413, 0, 0, 53673, 56780, 0, 0, 58366, 53674, 59562, 0, 60086, 63994, 59084, 63192, 0, 0, 0, 54471, 0, 0, 0, 55755, 0, 55762, 54219, 55543, 55977, 62968, 0, 0, 57054, 62127, 63657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55496, 0, 0, 61121, 0, 0, 0, 0, 63937, 0, 0, 0, 0, 56819, 60154, 0, 63165, 57787, 52671, 62676, 59085, 0, 64719, 64418, 0, 57564, 0, 0, 0, 0, 62651, 56021, 0, 63922, 0, 0, 0, 0, 0, 0, 64498, 0, 56310, 0, 57055, 0, 0, 0, 56306, 0, 0, 0, 0, 0, 63708, 63470, 60392, 0, 54010, 0, 0, 61884, 0, 0, 64218, 0, 0, 56042, 56006, 63425, 0, 0, 59318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58823, 54956, 0, 0, 0, 0, 56519, 0, 0, 0, 0, 0, 57769, 0, 58026, 0, 54694, 0, 0, 54487, 0, 0, 0, 0, 0, 0, 62160, 0, 60155, 0, 57565, 64499, 0, 0, 0, 0, 0, 0, 0, 61885, 0, 0, 58087, 64983, 0, 52936, 60087, 0, 64704, 0, 64999, 63471, 0, 0, 55221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61370, 61917, 0, 57011, 0, 0, 0, 0, 0, 0, 59595, 0, 0, 63709, 0, 0, 64455, 54728, 0, 55263, 0, 56745, 0, 0, 0, 0, 0, 59825, 0, 0, 64173, 63193, 64244, 0, 0, 0, 0, 0, 63658, 0, 0, 0, 0, 0, 59118, 0, 52444, 57788, 57583, 0, 0, 59839, 64765, 59086, 0, 0, 57815, 0, 59087, 0, 62705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58611, 0, 0, 58619, 0, 0, 63972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61411, 0, 0, 53230, 63166, 57522, 64766, 53675, 0, 0, 0, 55290, 0, 0, 0, 64456, 0, 58071, 0, 0, 0, 0, 0, 0, 54435, 61688, 55208, 0, 0, 0, 57831, 0, 0, 54207, 0, 0, 0, 0, 0, 0, 61412, 0, 55237, 60386, 0, 0, 64743, 0, 0, 58530, 0, 58088, 0, 59088, 0, 64488, 62696, 58868, 62652, 62677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57270, 0, 64697, 61122, 51957, 0, 0, 0, 61413, 52194, 54436, 0, 57056, 56061, 58566, 59582, 0, 0, 0, 0, 57566, 63156, 60114, 0, 63995, 0, 0, 57538, 0, 51940, 0, 59319, 0, 60157, 0, 55773, 0, 55988, 61098, 64489, 0, 0, 0, 0, 56267, 55989, 0, 0, 0, 0, 0, 61886, 0, 0, 54188, 0, 0, 0, 0, 0, 0, 0, 0, 64457, 0, 57295, 0, 0, 54208, 58327, 0, 61414, 64720, 0, 0, 0, 0, 0, 0, 0, 59840, 0, 0, 0, 62931, 0, 0, 60636, 63415, 0, 0, 60088, 53753, 0, 0, 0, 0, 0, 0, 56520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60089, 0, 0, 0, 0, 0, 61918, 0, 0, 0, 0, 0, 55222, 53173, 0, 55720, 0, 0, 60654, 0, 0, 56746, 0, 0, 0, 0, 52642, 59566, 0, 0, 0, 57789, 0, 62161, 0, 0, 0, 0, 59841, 0, 0, 0, 54012, 0, 0, 0, 0, 0, 0, 0, 56245, 0, 62439, 55550, 0, 0, 0, 64721, 0, 60850, 62639, 0, 64419, 0, 0, 64705, 0, 61099, 54437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62706, 0, 0, 0, 0, 61145, 0, 0, 0, 64458, 0, 0, 0, 0, 0, 52707, 55483, 0, 58843, 63735, 0, 0, 0, 63188, 0, 0, 0, 0, 0, 0, 0, 0, 55209, 0, 52169, 0, 0, 59089, 61644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55470, 0, 63955, 54782, 0, 0, 0, 0, 0, 0, 0, 55484, 62128, 0, 0, 0, 0, 58027, 62440, 0, 0, 0, 0, 0, 61378, 0, 0, 0, 0, 0, 0, 60908, 0, 59320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56062, 0, 0, 52414, 0, 0, 62204, 56043, 0, 58072, 60886, 0, 0, 54993, 57523, 0, 0, 64722, 0, 60360, 0, 0, 0, 0, 0, 0, 0, 0, 54209, 61645, 0, 53239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60882, 0, 54488, 56521, 55281, 0, 0, 57275, 0, 0, 62373, 0, 0, 0, 62669, 0, 0, 0, 0, 61887, 63665, 0, 59898, 0, 0, 0, 64459, 0, 0, 51925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63956, 63434, 0, 0, 54984, 0, 0, 0, 0, 0, 0, 64744, 62397, 0, 61182, 0, 59390, 0, 0, 0, 0, 0, 54210, 0, 0, 0, 0, 54198, 0, 52397, 63226, 54962, 53976, 0, 0, 0, 0, 0, 0, 59352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58277, 0, 0, 0, 0, 59321, 0, 0, 0, 0, 61613, 64460, 60321, 0, 0, 54438, 0, 0, 0, 0, 64461, 0, 54717, 61919, 0, 0, 63227, 0, 57012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54763, 0, 0, 58824, 0, 0, 0, 64420, 54457, 0, 0, 57057, 0, 58531, 0, 0, 0, 55223, 0, 63726, 0, 0, 0, 57013, 0, 0, 54994, 0, 63957, 59322, 60373, 54775, 61415, 57790, 0, 0, 0, 64174, 0, 0, 0, 55017, 55022, 0, 0, 0, 0, 0, 0, 59323, 0, 0, 0, 0, 0, 0, 0, 60619, 0, 0, 0, 0, 0, 0, 54707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52916, 0, 0, 0, 64421, 57838, 0, 0, 0, 0, 0, 0, 63400, 0, 0, 0, 0, 64462, 0, 0, 0, 0, 0, 55485, 0, 0, 0, 0, 0, 0, 0, 64509, 0, 0, 0, 0, 64745, 0, 0, 0, 0, 0, 0, 0, 53174, 0, 0, 0, 60871, 61100, 0, 0, 0, 0, 0, 0, 0, 52445, 0, 0, 0, 0, 63143, 0, 0, 0, 59130, 0, 0, 0, 62884, 0, 0, 0, 0, 0, 64988, 60851, 52937, 0, 0, 0, 0, 0, 0, 61416, 0, 0, 57791, 0, 0, 0, 0, 0, 0, 64219, 52195, 63401, 0, 64422, 0, 0, 0, 56505, 0, 0, 0, 61888, 60872, 61379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54957, 0, 0, 64974, 0, 0, 0, 59553, 0, 0, 0, 0, 0, 0, 0, 0, 64500, 54695, 0, 0, 0, 61942, 0, 59091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52446, 0, 0, 0, 0, 0, 0, 0, 63666, 0, 0, 0, 56555, 0, 0, 0, 0, 0, 0, 64950, 0, 0, 0, 0, 58858, 0, 0, 61920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56268, 56781, 0, 0, 0, 54472, 0, 0, 55789, 0, 0, 0, 0, 62885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59131, 0, 0, 0, 0, 0, 59092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64968, 0, 54945, 64959, 0, 64723, 0, 61345, 0, 59324, 0, 0, 0, 0, 0, 53742, 0, 0, 59093, 0, 0, 59890, 0, 57264, 0, 0, 0, 0, 0, 55520, 64698, 64943, 61646, 0, 56289, 0, 0, 58825, 0, 60852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57539, 0, 0, 0, 0, 0, 0, 58328, 0, 0, 0, 0, 59899, 60072, 0, 0, 0, 0, 64951, 0, 0, 64423, 0, 59842, 0, 0, 0, 0, 65015, 0, 0, 0, 0, 0, 58073, 0, 0, 56556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59554, 0, 0, 0, 0, 59120, 0, 0, 0, 0, 0, 0, 0, 65016, 65017, 0, 0, 0, 63167, 0, 0, 59303, 0, 59095, 0, 0, 0, 0, 54515, 54473, 0, 0, 0, 0, 55034, 0, 55282, 0, 57792, 0, 56290, 59096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59325, 0, 0, 0, 0, 0, 61647, 62398, 58028, 0, 0, 0, 0, 0, 62903, 57584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64952, 58344, 0, 54439, 59644, 64210, 0, 0, 0, 0, 0, 63727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54995, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61648, 0, 63472, 61107, 0, 0, 60090, 0, 60115, 0, 0, 60873, 56747, 0, 0, 0, 58796, 64929, 0, 57296, 60595, 0, 57297, 0, 0, 0, 0, 0, 60909, 63672, 63482, 0, 0, 0, 63659, 0, 0, 0, 0, 0, 62688, 0, 0, 0, 0, 0, 54458, 58547, 0, 59866, 0, 57014, 0, 55743, 0, 55744, 55023, 0, 0, 0, 0, 55756, 0, 55978, 0, 0, 0, 0, 0, 0, 0, 0, 57317, 0, 0, 0, 0, 0, 0, 63461, 0, 0, 0, 52402, 0, 0, 57337, 55264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54459, 0, 0, 0, 0, 65018, 0, 0, 0, 0, 52403, 0, 0, 56307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57298, 0, 52938, 0, 61146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58596, 0, 64463, 0, 0, 0, 0, 0, 0, 53175, 0, 61123, 0, 0, 0, 0, 0, 0, 0, 52970, 0, 0, 0, 0, 0, 0, 0, 58029, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55265, 64245, 0, 0, 54729, 63660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62441, 0, 0, 0, 0, 55533, 58308, 61681, 0, 0, 0, 0, 0, 0, 0, 59621, 0, 0, 0, 57594, 61124, 55774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60322, 60323, 0, 0, 0, 0, 0, 0, 64706, 60091, 0, 0, 0, 0, 59563, 57058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60911, 0, 59555, 0, 0, 0, 0, 53233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54460, 0, 64746, 0, 0, 0, 0, 0, 59326, 0, 64754, 0, 0, 54964, 0, 0, 58030, 0, 54199, 64204, 0, 0, 0, 0, 0, 0, 0, 0, 64220, 0, 60853, 57827, 0, 59564, 0, 59613, 0, 0, 61417, 0, 0, 0, 0, 0, 62653, 0, 53176, 59867, 53676, 0, 0, 0, 0, 0, 0, 56007, 0, 0, 0, 0, 0, 0, 0, 60361, 0, 59596, 0, 0, 0, 57015, 0, 0, 0, 0, 54972, 54245, 0, 0, 0, 0, 0, 64221, 0, 0, 0, 0, 0, 0, 56022, 0, 51889, 0, 0, 0, 0, 0, 0, 56008, 57254, 0, 63923, 62162, 0, 51908, 0, 0, 0, 0, 0, 0, 52939, 0, 0, 52725, 0, 0, 0, 64944, 54696, 0, 61889, 0, 0, 58089, 56522, 60596, 64192, 0, 0, 64424, 53416, 0, 0, 56044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55790, 0, 57595, 0, 0, 0, 61418, 64222, 0, 0, 57540, 0, 53177, 0, 54730, 55266, 58031, 0, 55224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59597, 0, 0, 0, 0, 0, 0, 0, 63194, 0, 0, 0, 0, 61346, 58074, 63228, 0, 0, 64464, 53677, 0, 52708, 0, 53678, 56557, 59598, 0, 61689, 52917, 59132, 0, 0, 55291, 53462, 56821, 63473, 0, 63229, 0, 56311, 0, 0, 0, 0, 64490, 59868, 55745, 0, 62962, 57541, 0, 0, 0, 0, 0, 0, 60116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63938, 0, 60092, 0, 53957, 64465, 59328, 60325, 0, 57338, 58274, 55225, 0, 59843, 0, 59645, 59567, 0, 0, 62163, 64425, 55461, 0, 0, 0, 0, 54731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53448, 0, 0, 0, 53679, 55267, 0, 0, 0, 57542, 0, 54946, 0, 60912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55283, 0, 0, 0, 64724, 0, 56023, 52447, 0, 62164, 0, 53680, 0, 52448, 0, 56317, 62399, 0, 61649, 0, 0, 0, 0, 0, 64699, 0, 58032, 0, 0, 59045, 0, 0, 0, 58075, 0, 0, 0, 57310, 0, 57543, 0, 0, 0, 0, 0, 0, 62191, 0, 0, 0, 52449, 0, 0, 0, 0, 55018, 0, 0, 0, 0, 59330, 0, 0, 0, 52918, 0, 62400, 0, 52734, 0, 0, 0, 64466, 0, 63736, 63483, 0, 0, 59583, 0, 0, 0, 0, 0, 0, 0, 59575, 0, 0, 0, 0, 0, 0, 0, 0, 60854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56506, 0, 0, 52404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61943, 0, 0, 0, 59576, 0, 0, 51958, 0, 58532, 62678, 0, 0, 0, 57318, 0, 0, 0, 57255, 0, 57319, 57793, 0, 59844, 0, 0, 56523, 59845, 0, 0, 0, 61347, 60326, 52131, 58345, 0, 0, 0, 53755, 61348, 0, 61419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53428, 0, 0, 0, 0, 52643, 0, 0, 59622, 0, 61349, 0, 54220, 56045, 0, 0, 0, 0, 55226, 0, 62165, 62949, 55791, 0, 0, 0, 0, 63924, 0, 0, 54740, 64975, 0, 0, 0, 56291, 0, 0, 0, 0, 61921, 60598, 0, 0, 0, 0, 64510, 54231, 0, 53681, 0, 52145, 0, 0, 0, 0, 53682, 0, 0, 0, 0, 0, 0, 52146, 61890, 0, 0, 62689, 63925, 0, 0, 57795, 57794, 0, 60407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57256, 0, 0, 0, 0, 0, 0, 0, 52170, 0, 0, 0, 0, 0, 59065, 0, 0, 0, 0, 0, 63710, 63914, 51959, 0, 60855, 0, 0, 54200, 62166, 0, 0, 54489, 61125, 62192, 0, 0, 0, 51890, 0, 0, 56507, 0, 61944, 0, 0, 0, 0, 0, 60599, 0, 0, 0, 0, 58826, 0, 63168, 64989, 0, 0, 54499, 52450, 0, 63444, 0, 0, 0, 0, 0, 0, 55269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54211, 0, 55462, 0, 63169, 0, 0, 0, 0, 0, 56822, 0, 52672, 0, 0, 0, 58844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57796, 0, 0, 0, 0, 0, 59568, 62640, 62442, 56046, 0, 55227, 0, 58033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55210, 0, 0, 0, 0, 0, 0, 55035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58591, 0, 51926, 0, 0, 0, 60328, 0, 0, 0, 56318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63170, 0, 0, 61371, 0, 0, 0, 0, 54525, 0, 0, 57544, 0, 0, 0, 59577, 0, 61350, 0, 0, 0, 0, 0, 52644, 0, 0, 54516, 56225, 56284, 56285, 0, 0, 0, 0, 0, 61148, 0, 52171, 64725, 0, 0, 0, 0, 0, 0, 52971, 0, 52673, 0, 0, 64467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62932, 0, 0, 0, 0, 55721, 0, 0, 59869, 56269, 0, 0, 56782, 0, 59331, 0, 60620, 0, 0, 0, 0, 0, 0, 0, 63980, 0, 0, 0, 52172, 0, 0, 0, 0, 57596, 54440, 0, 60883, 55535, 0, 62167, 0, 51960, 56047, 0, 0, 54996, 0, 0, 0, 0, 0, 0, 55757, 0, 0, 0, 55534, 0, 62145, 0, 0, 0, 57299, 0, 0, 0, 56048, 0, 58090, 0, 0, 57597, 0, 0, 55544, 0, 0, 0, 63407, 55990, 0, 51927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62168, 0, 55545, 0, 0, 0, 0, 0, 0, 0, 0, 64223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53231, 55746, 0, 61650, 0, 58577, 0, 0, 0, 62391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61420, 0, 0, 0, 0, 0, 58034, 0, 54461, 0, 0, 55758, 0, 0, 0, 0, 62690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54441, 0, 0, 0, 0, 52674, 59354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62169, 0, 0, 0, 0, 0, 55722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55486, 0, 0, 0, 0, 0, 0, 56493, 0, 0, 0, 0, 0, 0, 58091, 55036, 0, 0, 51961, 0, 0, 54490, 0, 0, 0, 0, 0, 0, 0, 62679, 52385, 0, 0, 53178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62904, 0, 0, 0, 55747, 53480, 0, 0, 0, 0, 0, 58309, 60408, 0, 62129, 0, 0, 0, 53179, 0, 0, 0, 54189, 59617, 52972, 0, 0, 0, 57524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62130, 62454, 63195, 0, 0, 0, 0, 55294, 0, 0, 0, 0, 0, 63711, 0, 63474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55228, 52451, 0, 0, 59099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56797, 0, 0, 0, 0, 53683, 0, 0, 0, 0, 0, 61421, 0, 0, 0, 0, 55006, 58612, 57839, 0, 0, 56824, 0, 0, 0, 0, 0, 59599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51941, 0, 0, 0, 56481, 0, 57525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64684, 64685, 55463, 0, 0, 0, 0, 60856, 0, 0, 0, 56246, 0, 0, 0, 0, 55024, 62383, 0, 0, 52645, 0, 56049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55464, 0, 0, 0, 52452, 0, 0, 53684, 0, 0, 0, 0, 0, 51928, 0, 0, 0, 0, 0, 56050, 0, 0, 0, 0, 0, 62887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62888, 0, 0, 0, 0, 0, 0, 0, 59046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54764, 54776, 56051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58310, 0, 0, 0, 57060, 0, 57061, 53685, 0, 0, 0, 0, 0, 53686, 53687, 62131, 0, 0, 0, 0, 0, 0, 59870, 0, 0, 0, 0, 0, 61651, 62132, 0, 0, 61652, 52196, 64468, 62950, 58346, 0, 57062, 0, 0, 0, 0, 57300, 0, 0, 63737, 0, 0, 0, 0, 61614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53688, 0, 0, 0, 0, 55007, 0, 53463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64673, 61422, 56536, 0, 59871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58845, 65019, 0, 0, 57545, 0, 0, 0, 54985, 0, 0, 54442, 0, 58828, 0, 0, 0, 0, 0, 59872, 0, 0, 0, 53464, 64674, 54462, 58035, 57063, 0, 0, 0, 0, 0, 0, 0, 56508, 53942, 62933, 0, 0, 0, 0, 0, 52897, 62889, 0, 0, 56825, 0, 0, 56826, 0, 0, 0, 0, 0, 0, 61653, 0, 0, 0, 0, 63199, 0, 62170, 58603, 0, 62193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60601, 0, 0, 0, 0, 65020, 0, 0, 0, 0, 57770, 0, 0, 51929, 0, 0, 61423, 0, 62890, 0, 0, 0, 0, 0, 0, 60665, 0, 0, 63661, 0, 62146, 63171, 0, 55250, 0, 0, 63906, 61654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61690, 0, 0, 63200, 0, 0, 0, 0, 59891, 62147, 0, 0, 0, 54443, 51891, 52646, 0, 52675, 52698, 0, 0, 0, 0, 0, 55759, 0, 0, 63172, 0, 0, 0, 61149, 59332, 0, 0, 0, 0, 0, 0, 0, 0, 58036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57314, 59355, 0, 0, 0, 0, 0, 0, 59569, 0, 64686, 0, 0, 0, 0, 58829, 0, 0, 0, 64235, 0, 53180, 0, 0, 53218, 52726, 0, 0, 61424, 0, 62654, 0, 54477, 0, 0, 62392, 0, 0, 0, 59809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62194, 62443, 0, 61655, 0, 0, 53207, 0, 0, 0, 0, 0, 0, 53215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59584, 59585, 0, 0, 0, 53219, 59810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62401, 53419, 0, 54500, 0, 0, 61372, 55457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55775, 0, 62423, 0, 0, 0, 56509, 0, 52453, 60913, 0, 0, 61922, 0, 54491, 0, 0, 0, 0, 58037, 0, 0, 51942, 0, 54190, 0, 0, 0, 0, 0, 0, 52454, 0, 0, 61907, 62951, 0, 0, 0, 0, 51930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64494, 0, 57797, 0, 0, 0, 0, 0, 0, 0, 57321, 0, 61150, 0, 0, 63426, 0, 55458, 0, 0, 0, 0, 0, 56748, 0, 0, 0, 0, 0, 61615, 54973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63926, 0, 0, 54517, 0, 53449, 61351, 58092, 0, 56298, 52940, 62952, 63445, 0, 54221, 0, 62462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57598, 0, 57339, 0, 0, 0, 0, 0, 0, 59101, 0, 0, 0, 0, 0, 0, 0, 59556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52173, 0, 0, 0, 61352, 0, 0, 0, 61108, 0, 0, 0, 0, 56024, 53689, 0, 57257, 0, 0, 62384, 0, 0, 52420, 0, 0, 0, 52919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61353, 0, 0, 0, 57301, 0, 0, 60887, 0, 0, 0, 61126, 0, 0, 0, 0, 0, 0, 0, 61373, 64726, 0, 0, 56308, 0, 61354, 63673, 0, 62953, 0, 0, 0, 0, 0, 0, 0, 0, 58329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57798, 0, 0, 0, 54463, 0, 0, 0, 0, 57064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54191, 0, 0, 51931, 0, 0, 0, 0, 0, 64727, 0, 0, 60888, 57799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62680, 54963, 56749, 0, 0, 0, 54718, 0, 0, 0, 0, 0, 0, 0, 0, 61891, 61151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55019, 0, 0, 0, 62681, 0, 0, 0, 0, 0, 0, 0, 55270, 0, 0, 0, 0, 0, 0, 55991, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56827, 0, 0, 0, 0, 0, 56783, 0, 0, 0, 0, 0, 0, 0, 0, 55459, 0, 0, 56025, 0, 61656, 61380, 0, 0, 0, 0, 0, 0, 57816, 0, 0, 0, 0, 0, 61908, 0, 60914, 0, 0, 0, 0, 0, 0, 54747, 0, 0, 54748, 62404, 52183, 0, 0, 0, 0, 0, 58038, 0, 0, 0, 0, 61425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54232, 0, 0, 0, 0, 0, 0, 0, 56784, 61657, 52147, 0, 0, 0, 0, 0, 0, 54749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52647, 0, 0, 53420, 0, 53690, 0, 61892, 0, 58803, 64501, 59873, 64992, 64700, 0, 55970, 55971, 0, 53921, 0, 0, 53999, 0, 0, 0, 58093, 0, 0, 57065, 52956, 62133, 53476, 56785, 0, 0, 0, 0, 57800, 56247, 57315, 0, 0, 0, 0, 0, 0, 0, 0, 60857, 61893, 0, 62415, 55211, 57772, 0, 0, 58347, 0, 61127, 0, 0, 0, 57801, 51962, 0, 0, 0, 0, 0, 0, 0, 61691, 64225, 61658, 52455, 56052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52973, 0, 0, 54697, 64226, 0, 0, 0, 53477, 0, 60374, 0, 60639, 0, 0, 0, 57340, 0, 0, 63446, 57066, 52148, 0, 0, 61374, 0, 0, 52405, 0, 0, 0, 0, 0, 53181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61426, 58039, 0, 0, 0, 52456, 0, 0, 0, 0, 0, 0, 0, 0, 61692, 0, 0, 0, 55008, 0, 61894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58040, 60331, 0, 0, 0, 52149, 55505, 0, 62670, 62455, 0, 0, 55238, 0, 53691, 63402, 0, 60874, 55251, 55546, 0, 0, 0, 0, 0, 0, 0, 63173, 0, 0, 53708, 56828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57341, 0, 63973, 0, 57546, 0, 0, 62205, 54192, 0, 62707, 56009, 0, 59102, 0, 0, 0, 0, 63674, 59600, 0, 0, 55547, 0, 0, 60117, 0, 0, 0, 0, 54947, 0, 0, 0, 0, 0, 0, 63174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62171, 58620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59570, 0, 0, 0, 0, 0, 56026, 0, 62172, 64470, 59826, 0, 61101, 0, 64227, 0, 0, 0, 0, 0, 0, 0, 56558, 0, 0, 62954, 59104, 0, 61693, 0, 0, 0, 0, 0, 55212, 0, 0, 0, 0, 0, 62917, 61152, 0, 0, 56293, 0, 56798, 0, 0, 55792, 59811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61945, 0, 62148, 57547, 0, 0, 0, 0, 0, 0, 0, 0, 59812, 0, 0, 58041, 0, 0, 0, 0, 0, 0, 0, 58289, 64747, 52648, 0, 52406, 0, 0, 61659, 0, 0, 0, 0, 0, 0, 0, 0, 59066, 0, 0, 52649, 0, 0, 0, 0, 0, 62403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57817, 0, 0, 61355, 0, 0, 0, 59333, 0, 0, 57577, 0, 62405, 0, 0, 54464, 54719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56750, 0, 63996, 0, 52416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58786, 0, 0, 0, 52920, 0, 0, 0, 55506, 63958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61866, 52945, 0, 0, 63175, 0, 56299, 0, 57342, 0, 0, 55521, 0, 63475, 0, 55271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54526, 0, 0, 53692, 0, 58831, 0, 52150, 0, 55992, 0, 0, 0, 0, 0, 52676, 0, 0, 0, 0, 0, 54974, 0, 0, 0, 58042, 0, 0, 0, 0, 0, 53208, 0, 0, 0, 57548, 60409, 0, 0, 0, 0, 0, 0, 0, 0, 65021, 0, 0, 0, 0, 0, 55272, 52184, 0, 0, 0, 59874, 0, 0, 0, 59578, 0, 0, 0, 58311, 0, 0, 0, 0, 60621, 0, 60622, 0, 54975, 0, 0, 0, 58279, 0, 57302, 65000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61153, 63144, 56829, 0, 0, 0, 0, 0, 0, 0, 63675, 0, 59601, 0, 0, 0, 0, 63959, 0, 0, 0, 0, 0, 0, 0, 0, 52974, 0, 0, 60623, 0, 0, 0, 59813, 54997, 0, 52677, 0, 60858, 53693, 0, 0, 53182, 0, 0, 60603, 0, 0, 0, 53937, 0, 0, 0, 0, 52457, 0, 55748, 59900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53694, 0, 0, 0, 0, 0, 60604, 0, 0, 58797, 0, 0, 0, 0, 0, 0, 63408, 0, 52458, 0, 0, 0, 54212, 0, 0, 54976, 0, 0, 0, 55037, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57761, 0, 57021, 0, 63145, 0, 0, 0, 55972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54948, 62918, 0, 57762, 59846, 0, 0, 0, 62149, 0, 0, 0, 0, 0, 62697, 55020, 60371, 0, 0, 0, 0, 60605, 58076, 57067, 61660, 0, 60351, 0, 55246, 53695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62891, 0, 0, 0, 0, 63997, 0, 51932, 0, 0, 0, 52678, 62134, 0, 0, 56830, 0, 0, 0, 52407, 56248, 0, 0, 0, 0, 53481, 0, 52957, 60352, 0, 64930, 0, 0, 0, 0, 0, 63691, 0, 0, 0, 0, 0, 0, 0, 0, 60118, 61872, 0, 0, 0, 0, 0, 0, 0, 56270, 0, 63427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56271, 52132, 0, 0, 63712, 0, 0, 64471, 0, 0, 60362, 57505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52941, 0, 0, 54492, 0, 0, 0, 64984, 0, 0, 0, 0, 54006, 0, 0, 0, 0, 62135, 0, 0, 64246, 63146, 64247, 55526, 0, 62641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59602, 0, 51909, 52459, 0, 0, 0, 0, 0, 0, 0, 58094, 0, 0, 0, 0, 0, 58043, 0, 63405, 0, 0, 0, 63713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62444, 0, 0, 0, 0, 56993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58621, 0, 0, 58348, 0, 56751, 56752, 0, 0, 52151, 59603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57763, 53984, 0, 0, 0, 0, 61694, 0, 0, 0, 0, 59814, 52210, 0, 0, 0, 0, 0, 0, 60915, 56537, 57549, 0, 0, 0, 0, 63450, 56249, 0, 0, 0, 0, 0, 0, 0, 52398, 0, 56027, 0, 0, 0, 0, 52679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56753, 0, 55471, 58275, 0, 0, 52975, 0, 0, 62195, 0, 0, 0, 0, 63667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57550, 0, 62973, 0, 0, 0, 0, 60396, 0, 0, 54213, 64748, 53979, 54507, 0, 56994, 0, 0, 0, 58854, 0, 0, 0, 0, 0, 0, 61616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54724, 0, 0, 0, 0, 0, 0, 60916, 0, 0, 0, 58349, 0, 59586, 0, 60917, 55292, 0, 60859, 0, 0, 63147, 0, 0, 0, 0, 0, 62136, 63176, 0, 0, 0, 0, 0, 54246, 62173, 53183, 0, 60332, 0, 0, 0, 0, 0, 0, 53184, 0, 59048, 65001, 0, 53185, 0, 57567, 57068, 0, 0, 0, 0, 57506, 0, 0, 0, 0, 0, 0, 0, 0, 62655, 58095, 0, 55793, 61895, 0, 52152, 0, 0, 0, 0, 0, 0, 0, 0, 63998, 56250, 56053, 0, 0, 0, 0, 0, 0, 0, 0, 63212, 56028, 64228, 0, 57551, 0, 0, 0, 0, 0, 0, 56754, 0, 0, 0, 0, 59049, 0, 61427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60410, 0, 63974, 0, 0, 0, 0, 0, 0, 0, 51933, 54750, 0, 51934, 57316, 0, 0, 0, 59133, 0, 62892, 0, 0, 0, 0, 0, 58613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59875, 0, 60875, 53220, 0, 0, 0, 55507, 0, 0, 0, 0, 0, 0, 56755, 54508, 0, 0, 62137, 0, 57271, 0, 0, 0, 0, 0, 52174, 64472, 0, 0, 53465, 0, 0, 56786, 63476, 59356, 58533, 0, 64675, 0, 56251, 0, 0, 0, 62138, 59901, 53450, 0, 62934, 55749, 58548, 0, 60839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60093, 59134, 0, 63428, 62893, 0, 55776, 0, 0, 0, 51892, 0, 0, 63714, 53186, 0, 60606, 0, 0, 0, 58804, 52680, 61128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52681, 63927, 0, 0, 61928, 55794, 56309, 51893, 55750, 0, 0, 0, 55497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60860, 0, 0, 55508, 0, 0, 0, 56538, 0, 58044, 0, 0, 64749, 60640, 54014, 0, 59847, 59050, 0, 0, 0, 0, 0, 0, 58096, 0, 0, 0, 0, 0, 0, 64187, 0, 62894, 64426, 0, 0, 0, 0, 60667, 0, 60607, 64728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54501, 0, 0, 0, 63939, 0, 0, 0, 61154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55273, 60918, 0, 0, 0, 57069, 0, 0, 0, 0, 0, 0, 0, 52460, 0, 58350, 0, 0, 0, 0, 0, 59604, 0, 0, 0, 64248, 0, 0, 0, 0, 0, 0, 56756, 58549, 55472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55509, 0, 0, 0, 62698, 0, 0, 0, 52921, 0, 0, 0, 55009, 53202, 0, 53430, 0, 0, 0, 0, 0, 0, 52898, 0, 0, 62446, 0, 0, 0, 0, 0, 62456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56524, 0, 53451, 0, 0, 0, 64676, 52682, 55252, 56995, 0, 58592, 0, 0, 0, 0, 61129, 0, 0, 0, 58077, 0, 0, 0, 0, 0, 62974, 54444, 0, 0, 0, 0, 0, 54737, 0, 55536, 63683, 60119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62935, 0, 0, 55487, 0, 0, 0, 0, 64960, 0, 0, 0, 0, 0, 0, 60333, 0, 0, 0, 0, 54698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61130, 0, 0, 0, 51943, 0, 0, 0, 0, 0, 63715, 0, 54493, 0, 0, 60120, 0, 0, 0, 0, 64473, 60919, 0, 0, 58805, 0, 0, 0, 0, 0, 53421, 0, 0, 0, 0, 61937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58045, 0, 0, 0, 58312, 0, 0, 0, 0, 55765, 0, 0, 57258, 0, 0, 0, 0, 56252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63716, 0, 0, 0, 0, 0, 61946, 0, 0, 58806, 62447, 0, 0, 64474, 57824, 0, 55724, 0, 62955, 0, 57526, 0, 0, 59848, 0, 52175, 0, 58313, 0, 0, 0, 57070, 0, 0, 0, 0, 0, 0, 0, 0, 58046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56559, 0, 54949, 0, 0, 0, 0, 0, 58097, 0, 0, 0, 0, 0, 0, 0, 55038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55713, 0, 55488, 56539, 0, 0, 60861, 57272, 0, 60069, 0, 0, 0, 55213, 0, 0, 62457, 0, 60920, 0, 62919, 0, 0, 0, 0, 0, 0, 57802, 60387, 0, 62174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63692, 0, 60121, 0, 54214, 0, 56294, 0, 0, 0, 0, 0, 62895, 0, 0, 0, 0, 52976, 0, 0, 0, 0, 59902, 0, 0, 0, 0, 0, 64438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58098, 0, 0, 0, 0, 53234, 63417, 55795, 0, 0, 57803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56029, 0, 0, 55993, 0, 0, 0, 0, 0, 0, 0, 60411, 0, 52153, 0, 0, 60921, 0, 0, 0, 0, 0, 0, 57568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62656, 0, 64956, 57265, 58351, 0, 0, 0, 0, 57507, 64953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61617, 0, 0, 0, 0, 0, 0, 52683, 0, 0, 0, 0, 0, 0, 0, 60862, 0, 0, 0, 54720, 58352, 60922, 0, 0, 0, 0, 0, 59876, 0, 0, 0, 0, 0, 0, 54765, 59357, 0, 0, 0, 0, 0, 0, 54518, 58807, 0, 0, 0, 56295, 58047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61131, 0, 0, 55284, 61661, 0, 0, 0, 52907, 0, 0, 59358, 0, 0, 0, 54998, 57804, 0, 0, 59571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58862, 56482, 0, 0, 57552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64475, 0, 63947, 0, 0, 0, 52211, 62629, 0, 0, 0, 0, 0, 64200, 54999, 0, 59877, 64476, 0, 0, 0, 0, 0, 0, 0, 64976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55973, 0, 56253, 0, 0, 0, 0, 0, 0, 60642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52727, 61662, 0, 0, 0, 0, 63177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57071, 0, 0, 0, 54193, 0, 0, 0, 0, 0, 0, 0, 0, 64750, 0, 0, 0, 0, 59587, 0, 61896, 0, 0, 0, 52977, 0, 0, 0, 0, 63981, 0, 0, 0, 0, 0, 0, 0, 0, 62196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58550, 0, 62905, 0, 56560, 58353, 0, 0, 0, 0, 59557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62139, 0, 56996, 0, 56012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51945, 0, 0, 0, 0, 0, 0, 58330, 0, 64729, 0, 0, 0, 0, 0, 0, 0, 60122, 0, 0, 0, 0, 0, 0, 63940, 0, 58276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64477, 0, 61386, 0, 59588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55725, 0, 0, 64427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54233, 0, 0, 0, 0, 0, 0, 54690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57553, 0, 0, 59816, 0, 0, 62969, 0, 0, 0, 0, 0, 0, 64175, 0, 60412, 0, 0, 57578, 0, 0, 0, 0, 0, 0, 58290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54725, 0, 0, 61923, 54766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52684, 0, 0, 0, 0, 60889, 0, 0, 0, 0, 55489, 0, 0, 0, 0, 64236, 0, 0, 0, 0, 0, 61931, 0, 0, 0, 0, 0, 64188, 59106, 0, 0, 0, 0, 64229, 58106, 0, 0, 0, 51894, 0, 58551, 0, 60123, 0, 62970, 0, 0, 0, 64428, 53187, 60413, 0, 0, 0, 0, 63738, 0, 0, 57273, 0, 0, 0, 0, 57841, 0, 53924, 0, 0, 0, 0, 62971, 0, 0, 0, 0, 0, 0, 53466, 53467, 0, 60094, 55729, 0, 0, 0, 0, 0, 51895, 0, 0, 54247, 0, 63717, 0, 0, 0, 0, 54194, 0, 0, 0, 58048, 62175, 0, 0, 0, 0, 0, 0, 52709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63916, 0, 0, 0, 0, 0, 0, 0, 0, 52685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61102, 54958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55274, 0, 0, 0, 0, 59360, 60334, 0, 0, 0, 53209, 0, 0, 56525, 60923, 0, 57072, 0, 55275, 0, 0, 0, 0, 0, 0, 56997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57303, 56272, 56273, 0, 0, 54691, 0, 0, 0, 0, 61618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56540, 0, 0, 0, 0, 0, 0, 0, 0, 51944, 0, 63718, 56526, 0, 0, 0, 0, 60124, 56274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59827, 0, 0, 0, 0, 63451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58280, 0, 55214, 0, 0, 57569, 0, 0, 0, 0, 0, 52154, 0, 0, 58833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53468, 0, 0, 0, 0, 54721, 0, 0, 0, 0, 0, 55498, 0, 0, 0, 0, 0, 0, 0, 58281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57508, 0, 59817, 0, 54215, 0, 0, 56541, 63662, 0, 0, 0, 52408, 0, 0, 0, 53422, 0, 0, 0, 55538, 0, 0, 58314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52399, 0, 0, 0, 0, 0, 0, 0, 54445, 63185, 0, 0, 0, 0, 0, 0, 0, 53452, 0, 0, 0, 0, 0, 0, 0, 51910, 0, 0, 54722, 0, 0, 52922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57304, 0, 0, 0, 62906, 0, 0, 0, 0, 0, 0, 0, 58859, 0, 61428, 56757, 0, 0, 0, 0, 52650, 0, 58354, 0, 64503, 0, 63440, 0, 0, 0, 0, 64954, 0, 0, 64993, 63230, 53696, 0, 0, 59589, 0, 58552, 0, 57832, 0, 0, 0, 52417, 0, 53997, 0, 0, 0, 0, 56254, 0, 0, 57570, 0, 0, 0, 64201, 0, 0, 57805, 0, 51896, 0, 0, 0, 62176, 61897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57073, 0, 0, 0, 61663, 63684, 0, 0, 0, 0, 0, 61132, 0, 0, 57074, 0, 59337, 0, 58099, 59361, 0, 0, 58315, 0, 0, 58316, 0, 0, 0, 53240, 61356, 0, 65022, 64677, 64177, 57305, 0, 57554, 0, 0, 0, 62682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61898, 0, 52899, 0, 0, 0, 0, 62140, 60643, 0, 0, 0, 0, 0, 57509, 0, 63403, 0, 0, 60335, 0, 0, 0, 0, 0, 58846, 0, 57764, 52651, 0, 55796, 59558, 52686, 57833, 0, 64751, 0, 57571, 0, 0, 0, 0, 0, 58049, 0, 52900, 0, 0, 0, 0, 0, 0, 56998, 0, 0, 60414, 0, 60381, 61664, 0, 0, 62683, 0, 58100, 0, 0, 54216, 0, 0, 0, 62699, 0, 61109, 0, 62936, 0, 0, 54751, 0, 0, 0, 55013, 0, 0, 0, 0, 60336, 62691, 0, 0, 0, 0, 58317, 0, 0, 0, 0, 62708, 64178, 0, 0, 61429, 51935, 0, 60337, 60863, 0, 0, 64969, 0, 0, 0, 0, 58534, 63908, 61619, 0, 58860, 0, 0, 0, 53735, 0, 55751, 58583, 60125, 0, 54519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55994, 0, 56013, 0, 0, 0, 63948, 0, 57818, 56255, 0, 52421, 60624, 52155, 0, 57075, 0, 0, 59818, 0, 0, 0, 0, 0, 0, 0, 55752, 0, 0, 61155, 55229, 0, 0, 0, 0, 0, 0, 53188, 0, 0, 0, 0, 0, 53453, 0, 0, 0, 0, 0, 0, 0, 64678, 0, 0, 0, 0, 0, 0, 0, 61947, 0, 0, 0, 0, 64978, 53697, 0, 0, 0, 0, 0, 0, 0, 0, 58331, 0, 54217, 0, 56527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52461, 0, 0, 0, 0, 0, 56999, 0, 0, 59067, 60577, 0, 0, 0, 52409, 0, 0, 64478, 0, 0, 0, 0, 0, 59362, 0, 0, 54465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56488, 0, 0, 0, 0, 0, 58050, 0, 62424, 58835, 0, 0, 62425, 0, 0, 0, 62406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52699, 0, 0, 0, 0, 0, 0, 0, 52652, 0, 64707, 0, 0, 0, 0, 54503, 0, 53698, 0, 63909, 0, 59605, 0, 0, 0, 0, 0, 0, 0, 0, 58318, 0, 0, 0, 0, 54474, 0, 0, 0, 0, 0, 0, 57306, 0, 0, 0, 0, 0, 0, 0, 0, 64479, 59363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63739, 58319, 0, 0, 0, 0, 0, 0, 0, 62896, 0, 0, 0, 0, 0, 0, 0, 55527, 0, 55753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63663, 61430, 0, 56758, 61103, 52728, 0, 0, 0, 0, 57016, 64679, 63484, 63409, 52923, 62625, 0, 0, 61133, 57774, 0, 0, 60611, 53246, 0, 63679, 55522, 54248, 0, 0, 57000, 62692, 60610, 0, 55797, 63941, 56787, 55025, 60668, 64752, 0, 0, 60864, 51897, 0, 61156, 0, 0, 0, 0, 0, 0, 62177, 0, 57017, 0, 0, 0, 0, 0, 0, 55026, 0, 57076, 0, 57307, 0, 56275, 0, 64231, 55523, 62657, 0, 56759, 0, 0, 0, 62197, 0, 0, 54446, 0, 0, 0, 0, 0, 0, 55027, 0, 0, 0, 0, 0, 0, 56760, 53189, 57311, 0, 0, 0, 0, 0, 0, 62142, 63137, 0, 60363, 61948, 0, 62407, 0, 0, 57579, 0, 0, 0, 0, 0, 60924, 0, 0, 57819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61157, 0, 57077, 0, 0, 0, 0, 64211, 0, 0, 0, 0, 61899, 0, 0, 53423, 56761, 0, 0, 53699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62897, 0, 0, 0, 0, 60102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63148, 0, 0, 0, 0, 62937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61675, 0, 0, 0, 0, 0, 0, 56762, 0, 0, 0, 62143, 0, 0, 0, 0, 0, 0, 0, 63429, 0, 0, 0, 0, 56226, 62198, 0, 0, 51898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63477, 0, 52197, 0, 0, 0, 61158, 0, 57555, 0, 0, 0, 0, 52901, 0, 0, 0, 0, 0, 0, 55000, 0, 0, 0, 54447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59849, 0, 0, 0, 0, 54222, 62658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61857, 0, 0, 0, 0, 0, 60338, 0, 0, 0, 0, 61858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60339, 0, 61620, 0, 0, 52212, 54448, 62386, 64439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62956, 0, 0, 0, 0, 0, 61159, 62642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62957, 0, 53235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61666, 0, 0, 0, 0, 0, 61134, 0, 0, 61900, 0, 0, 58808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55285, 58355, 53221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62387, 58584, 53241, 53210, 0, 0, 0, 0, 64205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62958, 0, 0, 51899, 0, 0, 58332, 0, 0, 0, 0, 52978, 0, 55001, 0, 0, 0, 61104, 0, 0, 0, 0, 0, 0, 0, 0, 62693, 55490, 56528, 52462, 0, 0, 0, 0, 0, 54752, 63178, 64970, 55510, 62671, 0, 0, 0, 0, 0, 0, 54950, 56510, 0, 56276, 55239, 0, 0, 0, 0, 62206, 0, 0, 0, 61901, 0, 0, 0, 0, 58051, 56542, 0, 56543, 0, 0, 61357, 59051, 0, 0, 0, 0, 63965, 60095, 0, 0, 0, 61358, 0, 0, 0, 62672, 52979, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59052, 0, 52958, 0, 0, 54777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58356, 52688, 0, 0, 0, 0, 0, 0, 54712, 0, 0, 63485, 0, 56489, 0, 0, 0, 0, 57078, 0, 56490, 62179, 59828, 53980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59878, 0, 0, 58358, 0, 0, 0, 0, 0, 0, 0, 0, 59338, 0, 0, 53454, 0, 0, 56055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51900, 0, 0, 0, 61160, 56030, 0, 62199, 0, 0, 58107, 0, 52390, 0, 0, 0, 0, 55995, 0, 61161, 0, 0, 0, 62938, 0, 0, 63452, 57834, 52929, 54449, 0, 64945, 59069, 0, 64429, 0, 0, 63719, 0, 57806, 0, 63458, 62959, 53191, 0, 0, 54450, 52463, 0, 54504, 0, 61135, 63447, 0, 0, 57510, 54977, 57820, 61667, 61924, 56561, 54951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62709, 0, 0, 61902, 62180, 0, 0, 53424, 0, 0, 60655, 0, 0, 0, 63930, 0, 60341, 0, 0, 54509, 58052, 0, 0, 0, 0, 59879, 0, 0, 60340, 60065, 0, 63676, 52902, 0, 63942, 64730, 0, 54451, 54201, 60126, 0, 0, 0, 59819, 0, 0, 57825, 54223, 62710, 0, 60096, 57807, 0, 52410, 0, 0, 0, 0, 0, 61162, 0, 0, 0, 61668, 62388, 54510, 0, 0, 62144, 0, 0, 61925, 0, 62659, 57556, 0, 60342, 0, 55201, 52200, 0, 63917, 59821, 55524, 64179, 58053, 64701, 0, 0, 60612, 55473, 0, 56491, 0, 0, 0, 0, 54692, 0, 60393, 0, 0, 0, 59579, 0, 0, 0, 55511, 0, 0, 0, 0, 0, 0, 0, 0, 64430, 53729, 0, 0, 56256, 0, 62910, 0, 57079, 0, 0, 0, 0, 51963, 63430, 53192, 0, 0, 0, 57808, 0, 0, 61136, 0, 0, 0, 0, 0, 0, 0, 0, 59892, 0, 0, 0, 0, 0, 0, 0, 0, 52980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54733, 0, 0, 53211, 0, 0, 0, 0, 0, 0, 56763, 0, 0, 0, 0, 52908, 0, 0, 0, 0, 0, 0, 0, 59880, 0, 0, 0, 0, 0, 0, 0, 54452, 0, 0, 0, 0, 58567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62939, 0, 0, 64193, 0, 0, 0, 57001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54520, 0, 0, 0, 0, 0, 61431, 0, 0, 0, 0, 54195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60343, 61432, 62940, 60876, 56277, 61903, 0, 0, 0, 61904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62898, 0, 0, 0, 0, 0, 0, 55726, 54700, 0, 58054, 0, 0, 0, 0, 0, 0, 0, 0, 64931, 0, 64485, 57259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58101, 0, 63149, 0, 62899, 0, 61621, 0, 0, 0, 0, 57765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60578, 60925, 0, 62900, 64440, 0, 56227, 0, 0, 54986, 52185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58836, 0, 0, 0, 0, 0, 0, 62458, 0, 60344, 0, 57527, 55276, 61932, 58799, 54753, 55277, 53713, 0, 0, 0, 0, 0, 57842, 61433, 0, 0, 0, 56764, 63196, 0, 0, 0, 0, 0, 61669, 0, 0, 0, 62660, 0, 0, 59881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54511, 0, 0, 52386, 63486, 57276, 0, 0, 0, 0, 60365, 0, 0, 0, 0, 0, 0, 53431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54978, 0, 0, 0, 0, 0, 59565, 0, 0, 0, 0, 61359, 52133, 0, 0, 0, 0, 52201, 0, 0, 0, 64232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52422, 0, 0, 0, 59111, 0, 0, 60103, 0, 0, 0, 56228, 0, 53193, 58108, 61434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60382, 0, 0, 62920, 0, 54494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57557, 0, 61360, 0, 0, 58055, 0, 55727, 0, 0, 0, 63975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59365, 0, 0, 53194, 57809, 0, 58056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61435, 0, 0, 64249, 0, 0, 56562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57511, 0, 0, 0, 0, 0, 63720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52202, 0, 0, 0, 52156, 0, 0, 0, 0, 0, 0, 0, 55010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62942, 0, 0, 0, 0, 0, 0, 0, 62943, 0, 61110, 0, 0, 0, 58102, 54218, 61436, 53700, 61361, 0, 53701, 0, 53470, 0, 55777, 0, 0, 57528, 0, 0, 52689, 62393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59340, 0, 54952, 52903, 0, 54453, 0, 0, 0, 0, 0, 0, 58568, 0, 0, 0, 0, 0, 0, 54196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60345, 0, 0, 0, 0, 0, 0, 52213, 0, 0, 0, 0, 0, 0, 63197, 0, 61859, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52423, 0, 0, 0, 0, 0, 0, 0, 59850, 0, 57840, 0, 0, 0, 62944, 0, 0, 0, 0, 0, 0, 0, 0, 64431, 0, 0, 0, 52177, 0, 0, 0, 0, 64480, 62181, 0, 0, 60656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59851, 0, 0, 52464, 0, 0, 55215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57558, 0, 0, 0, 0, 0, 61362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62673, 0, 0, 63393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51964, 51965, 0, 0, 0, 0, 0, 0, 0, 0, 52942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62408, 0, 62394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60926, 0, 0, 0, 0, 0, 0, 0, 0, 55974, 0, 0, 57580, 0, 0, 0, 0, 0, 63693, 0, 52178, 0, 0, 0, 60366, 0, 63960, 63961, 51936, 56010, 0, 0, 0, 52134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51912, 63982, 56300, 0, 0, 53425, 0, 0, 0, 0, 54767, 0, 0, 0, 59123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59298, 58585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58593, 0, 0, 64708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63983, 53236, 63462, 0, 0, 0, 0, 0, 52924, 0, 0, 0, 0, 62661, 56483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56765, 0, 0, 0, 0, 62662, 0, 0, 0, 0, 0, 0, 0, 0, 63649, 0, 0, 0, 59606, 0, 0, 0, 56257, 0, 0, 0, 0, 0, 0, 0, 0, 61670, 0, 0, 0, 58553, 63213, 0, 63918, 0, 56766, 0, 0, 0, 0, 0, 0, 55216, 55528, 52157, 0, 0, 63962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63694, 63984, 57581, 58291, 62643, 0, 0, 60098, 62182, 61622, 0, 0, 0, 0, 0, 56278, 0, 0, 0, 0, 0, 60388, 0, 0, 62183, 0, 55253, 54454, 63976, 55233, 0, 0, 0, 0, 58837, 0, 0, 0, 0, 0, 0, 0, 59882, 55244, 0, 0, 0, 54249, 58057, 0, 64731, 52653, 0, 0, 0, 0, 0, 52400, 60066, 0, 0, 58614, 53440, 0, 61623, 61089, 0, 0, 0, 0, 0, 0, 55286, 0, 0, 0, 58058, 58059, 0, 64207, 0, 0, 0, 0, 0, 0, 60383, 0, 0, 0, 0, 0, 54987, 0, 0, 0, 62644, 0, 0, 0, 0, 60877, 58578, 0, 0, 60073, 58554, 62370, 52690, 0, 63179, 0, 61926, 60865, 59580, 61137, 0, 0, 0, 0, 0, 0, 61671, 58060, 0, 0, 58538, 0, 62945, 60890, 0, 0, 0, 0, 0, 55278, 53745, 0, 0, 0, 0, 59883, 59884, 57572, 0, 0, 0, 0, 55975, 56788, 0, 60067, 0, 0, 0, 54979, 55028, 0, 56031, 0, 61363, 0, 0, 0, 0, 58061, 0, 0, 0, 0, 0, 61437, 62184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61381, 0, 59367, 0, 0, 55293, 0, 0, 59342, 0, 0, 57308, 0, 63943, 0, 0, 0, 0, 0, 0, 0, 0, 55798, 0, 0, 0, 0, 0, 0, 0, 0, 57260, 0, 55002, 0, 0, 0, 0, 0, 0, 56484, 0, 0, 0, 61624, 0, 0, 0, 0, 54778, 0, 58615, 0, 0, 0, 54980, 0, 0, 0, 0, 0, 0, 0, 0, 62700, 0, 0, 0, 0, 61438, 0, 0, 0, 0, 0, 61601, 0, 57002, 0, 0, 55996, 55548, 0, 0, 0, 0, 0, 0, 64212, 0, 0, 0, 60645, 0, 0, 0, 0, 0, 0, 64680, 0, 0, 60646, 0, 0, 55499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64441, 0, 58579, 0, 52729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53203, 0, 0, 0, 0, 0, 0, 0, 51946, 0, 0, 53204, 0, 63677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62663, 0, 0, 0, 0, 60127, 0, 0, 0, 0, 0, 0, 0, 63963, 0, 0, 0, 0, 0, 0, 0, 0, 54455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60389, 0, 0, 57810, 0, 0, 0, 0, 60068, 0, 0, 0, 64194, 64481, 64237, 61602, 52465, 0, 64163, 58103, 0, 58062, 0, 59893, 0, 57835, 0, 0, 0, 59368, 59607, 56056, 54475, 0, 0, 0, 63478, 54981, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54505, 0, 0, 64250, 0, 0, 0, 0, 0, 0, 0, 52466, 63453, 0, 57018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52904, 0, 0, 0, 0, 0, 61625, 58622, 58569, 0, 0, 0, 0, 0, 58580, 0, 0, 0, 60099, 0, 61364, 0, 0, 0, 55230, 0, 0, 0, 0, 0, 0, 64482, 0, 52691, 0, 0, 0, 61365, 0, 0, 0, 64233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63910, 0, 0, 0, 0, 0, 0, 57277, 0, 63431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63741, 0, 0, 63740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57003, 56296, 0, 0, 58333, 0, 57826, 53702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63184, 60390, 56057, 0, 0, 0, 0, 60615, 0, 0, 0, 0, 0, 0, 0, 57080, 63721, 58334, 0, 0, 0, 0, 52981, 0, 0, 0, 0, 0, 64195, 58839, 0, 60616, 0, 0, 0, 62409, 0, 0, 58555, 0, 0, 0, 0, 59054, 0, 0, 0, 0, 0, 61366, 0, 56511, 0, 0, 0, 0, 0, 0, 0, 52925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55491, 0, 0, 0, 53455, 0, 53242, 62410, 57559, 0, 0, 0, 53703, 59822, 0, 59581, 0, 0, 64196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58063, 0, 0, 64197, 0, 0, 0, 63928, 0, 0, 0, 0, 0, 0, 0, 56544, 0, 0, 64432, 0, 0, 0, 55465, 58847, 63911, 0, 0, 63214, 0, 63180, 58104, 0, 0, 0, 0, 60657, 0, 0, 0, 0, 0, 0, 0, 56032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61906, 53964, 53195, 0, 0, 51901, 0, 0, 0, 56767, 0, 0, 0, 63215, 0, 57081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64180, 0, 0, 0, 54701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61927, 0, 57022, 0, 0, 0, 0, 0, 0, 56512, 0, 0, 0, 0, 0, 53704, 53705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52214, 0, 0, 0, 0, 54521, 0, 0, 0, 0, 0, 62946, 57811, 0, 0, 0, 0, 0, 0, 0, 0, 55529, 0, 0, 63742, 0, 53196, 0, 0, 0, 0, 0, 0, 0, 64932, 0, 0, 0, 0, 0, 0, 0, 52982, 0, 64208, 0, 0, 52467, 59070, 0, 0, 0, 63150, 0, 0, 54768, 0, 0, 53706, 0, 0, 0, 64702, 54769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58064, 62711, 0, 0, 0, 52692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59299, 0, 0, 0, 0, 0, 0, 0, 0, 56229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55202, 0, 0, 63459, 0, 0, 0, 0, 0, 0, 60070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53409, 0, 0, 0, 0, 52954, 64491, 56230, 56286, 55525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60128, 0, 0, 0, 0, 55466, 0, 0, 0, 0, 0, 58848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61382, 0, 0, 63722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52983, 0, 0, 57560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52710, 0, 0, 0, 52468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62947, 0, 0, 58570, 0, 56545, 0, 0, 63944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59559, 0, 0, 0, 0, 0, 0, 0, 0, 55492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52158, 0, 56494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61672, 0, 56768, 0, 53197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56563, 55728, 0, 59113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58604, 0, 58597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58557, 0, 0, 52700, 55799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56799, 0, 0, 0, 0, 0, 60878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55760, 0, 0, 0, 0, 0, 58787, 0, 0, 0, 0, 63949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63151, 0, 0, 0, 0, 0, 64979, 60397, 55004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58788, 0, 0, 0, 54710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55005, 0, 0, 0, 63977, 0, 0, 0, 59300, 0, 55011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53707, 55012, 0, 0, 0, 54770, 0, 0, 0, 0, 0, 57082, 0, 55288, 0, 0, 0, 0, 0, 55530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53205, 55549, 0, 0, 0, 0, 0, 55467, 0, 0, 64971, 0, 0, 0, 0, 64732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57512, 54771, 0, 0, 64985, 0, 0, 52387, 0, 0, 0, 55801, 0, 0, 54250, 62965, 0, 61383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59560, 56495, 0, 0, 0, 0, 0, 61603, 0, 0, 0, 0, 52693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61626, 61105, 0, 0, 61106, 0, 0, 0, 63181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61138, 0, 54982, 0, 0, 0, 0, 0, 57573, 0, 0, 62395, 0, 58849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55203, 0, 0, 56258, 0, 0, 0, 0, 51966, 0, 0, 0, 0, 0, 0, 53199]);
		encode1 = $toNativeArray($kindUint16, [45217, 45218, 33089, 33090, 45219, 33091, 33092, 45220, 45221, 45222, 45223, 33093, 33094, 33095, 33096, 33097, 45224, 45225, 45226, 45227, 45228, 45229, 45230, 45231, 33098, 45232, 45233, 45234, 45235, 45236, 33099, 33100, 45237, 33101, 33102, 33103, 45238, 33104, 33105, 33106, 33107, 33108, 33109, 33110, 45239, 45240, 33111, 45241, 45242, 45243, 33112, 33113, 33114, 33121, 33122, 33123, 45244, 45245, 33124, 33125, 45246, 33126, 33127, 33128, 45247, 33129, 33130, 33131, 33132, 33133, 33134, 33135, 33136, 33137, 33138, 45248, 33139, 45249, 33140, 33141, 33142, 33143, 33144, 33145, 45250, 33146, 33153, 33154, 45251, 33155, 33156, 33157, 45252, 33158, 33159, 33160, 33161, 33162, 33163, 33164, 33165, 33166, 33167, 33168, 33169, 33170, 33171, 33172, 33173, 33174, 33175, 33176, 45253, 45254, 33177, 33178, 45255, 33179, 33180, 45256, 45257, 33181, 45258, 33182, 33183, 33184, 33185, 33186, 45259, 45260, 33187, 45261, 45262, 45263, 45264, 33188, 33189, 45265, 45266, 45267, 45268, 33190, 33191, 33192, 45269, 33193, 33194, 33195, 45270, 33196, 33197, 33198, 33199, 33200, 33201, 33202, 45271, 45272, 33203, 45273, 45274, 45275, 33204, 33205, 33206, 33207, 33208, 33209, 45276, 45277, 45278, 33210, 45279, 33211, 33212, 45280, 45281, 33213, 33214, 33215, 33216, 33217, 33218, 33219, 45282, 45283, 33220, 45284, 45285, 45286, 33221, 33222, 33223, 45287, 33224, 33225, 45288, 33226, 33227, 33228, 45289, 33229, 33230, 33231, 45290, 33232, 33233, 33234, 33235, 33236, 33237, 33238, 33239, 45291, 33240, 45292, 33241, 33242, 33243, 33244, 33245, 33246, 33247, 33248, 45293, 45294, 33249, 33250, 45295, 33251, 33252, 45296, 45297, 33253, 45298, 33254, 45299, 33255, 33256, 45300, 45301, 45302, 33257, 45303, 33258, 45304, 45305, 33259, 33260, 33261, 33262, 33263, 45306, 45307, 33264, 33265, 45308, 33266, 33267, 33268, 45309, 33269, 45310, 33270, 33271, 33272, 33273, 33274, 45473, 45474, 33275, 45475, 33276, 45476, 33277, 33278, 33345, 33346, 33347, 33348, 45477, 33349, 33350, 33351, 45478, 33352, 33353, 33354, 45479, 33355, 33356, 33357, 33358, 33359, 33360, 33361, 33362, 45480, 33363, 33364, 45481, 45482, 33365, 33366, 33367, 33368, 33369, 33370, 45483, 45484, 33377, 33378, 45485, 33379, 33380, 33381, 45486, 33382, 33383, 33384, 33385, 33386, 33387, 33388, 45487, 45488, 33389, 45489, 33390, 45490, 33391, 33392, 33393, 33394, 33395, 33396, 45491, 33397, 33398, 33399, 45492, 33400, 33401, 33402, 45493, 33409, 33410, 33411, 33412, 33413, 33414, 33415, 33416, 45494, 33417, 45495, 33418, 33419, 33420, 33421, 33422, 33423, 33424, 33425, 45496, 45497, 33426, 33427, 45498, 33428, 33429, 45499, 45500, 45501, 45502, 33430, 33431, 33432, 33433, 45503, 45504, 45505, 33434, 45506, 33435, 45507, 45508, 33436, 33437, 33438, 33439, 33440, 45509, 45510, 33441, 33442, 45511, 33443, 33444, 33445, 45512, 33446, 33447, 33448, 33449, 33450, 33451, 33452, 33453, 33454, 33455, 33456, 45513, 45514, 33457, 33458, 33459, 33460, 33461, 33462, 45515, 33463, 33464, 33465, 33466, 33467, 33468, 33469, 33470, 33471, 33472, 33473, 33474, 33475, 33476, 33477, 33478, 33479, 33480, 45516, 33481, 33482, 33483, 33484, 33485, 33486, 33487, 33488, 45517, 45518, 33489, 33490, 45519, 33491, 33492, 33493, 45520, 33494, 33495, 33496, 33497, 33498, 33499, 33500, 45521, 45522, 33501, 45523, 33502, 33503, 33504, 33505, 33506, 33507, 33508, 33509, 45524, 33510, 33511, 33512, 45525, 33513, 33514, 33515, 45526, 33516, 33517, 33518, 33519, 33520, 33521, 33522, 33523, 33524, 33525, 33526, 33527, 33528, 33529, 33530, 33531, 33532, 33533, 33534, 45527, 45528, 33601, 33602, 45529, 33603, 33604, 45530, 45531, 45532, 33605, 33606, 33607, 33608, 33609, 33610, 45533, 45534, 33611, 45535, 33612, 45536, 33613, 33614, 33615, 33616, 33617, 33618, 45537, 33619, 33620, 33621, 33622, 33623, 33624, 33625, 33626, 33633, 33634, 33635, 33636, 33637, 33638, 33639, 33640, 33641, 33642, 33643, 33644, 33645, 33646, 33647, 33648, 33649, 33650, 33651, 45538, 45539, 33652, 33653, 45540, 33654, 33655, 45541, 45542, 33656, 45543, 33657, 33658, 33665, 33666, 33667, 45544, 45545, 33668, 45546, 33669, 45547, 45548, 33670, 33671, 33672, 45549, 33673, 45550, 45551, 45552, 33674, 45553, 33675, 33676, 33677, 45554, 33678, 45555, 33679, 33680, 33681, 33682, 33683, 45556, 45557, 33684, 45558, 45559, 45560, 33685, 33686, 33687, 45561, 33688, 33689, 45562, 45563, 33690, 33691, 45564, 33692, 33693, 33694, 45565, 33695, 33696, 33697, 33698, 33699, 33700, 33701, 45566, 45729, 33702, 45730, 45731, 45732, 33703, 33704, 33705, 33706, 33707, 33708, 45733, 45734, 33709, 33710, 33711, 33712, 33713, 33714, 45735, 33715, 33716, 33717, 33718, 33719, 33720, 33721, 33722, 33723, 33724, 33725, 33726, 33727, 33728, 33729, 33730, 33731, 33732, 33733, 33734, 33735, 33736, 33737, 33738, 33739, 33740, 33741, 33742, 33743, 33744, 33745, 33746, 33747, 33748, 33749, 33750, 33751, 33752, 33753, 33754, 33755, 33756, 33757, 33758, 33759, 33760, 33761, 45736, 45737, 45738, 33762, 45739, 33763, 33764, 33765, 45740, 33766, 33767, 33768, 33769, 33770, 33771, 33772, 45741, 45742, 33773, 45743, 45744, 45745, 33774, 33775, 33776, 33777, 33778, 33779, 45746, 45747, 33780, 33781, 45748, 33782, 33783, 33784, 33785, 33786, 33787, 33788, 33789, 33790, 33857, 33858, 45749, 33859, 33860, 45750, 33861, 45751, 33862, 33863, 33864, 33865, 33866, 33867, 45752, 33868, 33869, 33870, 45753, 33871, 33872, 33873, 45754, 33874, 33875, 33876, 33877, 33878, 33879, 33880, 33881, 33882, 33889, 45755, 45756, 33890, 33891, 33892, 33893, 45757, 33894, 33895, 45758, 33896, 33897, 33898, 33899, 33900, 33901, 33902, 33903, 33904, 33905, 33906, 33907, 33908, 33909, 33910, 33911, 33912, 33913, 33914, 33921, 33922, 33923, 33924, 33925, 33926, 33927, 33928, 45759, 45760, 33929, 33930, 45761, 33931, 45762, 33932, 45763, 33933, 33934, 33935, 33936, 33937, 33938, 33939, 45764, 45765, 33940, 45766, 33941, 45767, 45768, 45769, 33942, 33943, 33944, 33945, 45770, 45771, 33946, 33947, 33948, 33949, 33950, 33951, 45772, 33952, 33953, 33954, 33955, 33956, 33957, 33958, 33959, 33960, 33961, 33962, 45773, 45774, 33963, 33964, 33965, 33966, 33967, 33968, 45775, 45776, 33969, 33970, 33971, 33972, 33973, 33974, 33975, 33976, 33977, 33978, 33979, 33980, 33981, 33982, 33983, 33984, 33985, 33986, 33987, 45777, 33988, 33989, 33990, 33991, 33992, 33993, 45778, 33994, 33995, 33996, 45779, 33997, 33998, 33999, 45780, 34000, 34001, 34002, 34003, 34004, 34005, 34006, 45781, 45782, 34007, 34008, 34009, 45783, 34010, 34011, 34012, 34013, 34014, 34015, 45784, 34016, 34017, 34018, 34019, 34020, 34021, 34022, 34023, 34024, 34025, 34026, 34027, 34028, 34029, 34030, 34031, 34032, 34033, 34034, 34035, 34036, 34037, 34038, 34039, 34040, 34041, 34042, 45785, 45786, 34043, 34044, 45787, 34045, 34046, 34113, 45788, 34114, 34115, 34116, 34117, 34118, 34119, 45789, 45790, 45791, 34120, 45792, 34121, 45793, 45794, 34122, 34123, 34124, 34125, 34126, 45795, 34127, 34128, 34129, 34130, 34131, 34132, 34133, 45796, 34134, 34135, 34136, 34137, 34138, 34145, 34146, 34147, 34148, 34149, 34150, 45797, 45798, 34151, 34152, 34153, 34154, 34155, 34156, 45799, 45800, 34157, 34158, 45801, 34159, 34160, 34161, 45802, 34162, 34163, 34164, 34165, 34166, 34167, 34168, 45803, 45804, 34169, 34170, 45805, 34177, 34178, 34179, 34180, 34181, 34182, 34183, 45806, 34184, 34185, 34186, 45807, 34187, 34188, 34189, 45808, 34190, 34191, 34192, 34193, 34194, 34195, 34196, 45809, 45810, 34197, 34198, 34199, 34200, 34201, 34202, 34203, 34204, 34205, 34206, 45811, 34207, 34208, 34209, 34210, 34211, 34212, 34213, 34214, 34215, 34216, 34217, 34218, 34219, 34220, 34221, 34222, 34223, 34224, 34225, 34226, 34227, 34228, 34229, 34230, 34231, 34232, 34233, 45812, 45813, 34234, 34235, 45814, 34236, 45815, 34237, 45816, 34238, 45817, 34239, 34240, 34241, 34242, 45818, 45819, 45820, 34243, 45821, 34244, 45822, 34245, 34246, 34247, 45985, 34248, 34249, 34250, 34251, 34252, 34253, 34254, 34255, 34256, 34257, 34258, 34259, 34260, 34261, 34262, 34263, 34264, 34265, 34266, 34267, 34268, 34269, 34270, 34271, 34272, 34273, 34274, 34275, 34276, 34277, 45986, 45987, 34278, 34279, 45988, 34280, 34281, 34282, 45989, 34283, 34284, 34285, 34286, 34287, 34288, 34289, 45990, 45991, 34290, 45992, 34291, 45993, 34292, 34293, 34294, 34295, 34296, 34297, 45994, 45995, 45996, 34298, 45997, 34299, 34300, 45998, 45999, 46000, 46001, 34301, 34302, 34369, 34370, 34371, 46002, 46003, 34372, 46004, 46005, 46006, 46007, 46008, 34373, 46009, 34374, 46010, 46011, 46012, 34375, 34376, 46013, 34377, 34378, 34379, 46014, 34380, 34381, 34382, 34383, 34384, 34385, 34386, 46015, 46016, 34387, 46017, 46018, 46019, 34388, 34389, 34390, 34391, 34392, 34393, 46020, 46021, 34394, 34401, 46022, 34402, 34403, 34404, 46023, 34405, 34406, 34407, 34408, 34409, 34410, 34411, 46024, 34412, 34413, 34414, 34415, 46025, 34416, 34417, 34418, 34419, 34420, 34421, 34422, 34423, 34424, 34425, 34426, 34433, 34434, 34435, 34436, 34437, 34438, 34439, 34440, 34441, 34442, 34443, 34444, 34445, 34446, 34447, 34448, 34449, 34450, 34451, 34452, 34453, 34454, 34455, 46026, 46027, 34456, 46028, 46029, 34457, 34458, 34459, 46030, 34460, 46031, 46032, 34461, 34462, 34463, 34464, 46033, 46034, 34465, 46035, 46036, 46037, 34466, 34467, 34468, 34469, 34470, 46038, 46039, 46040, 34471, 34472, 46041, 34473, 34474, 34475, 46042, 34476, 34477, 34478, 34479, 34480, 34481, 34482, 46043, 46044, 34483, 46045, 46046, 46047, 34484, 34485, 34486, 34487, 34488, 34489, 46048, 46049, 34490, 34491, 46050, 34492, 34493, 34494, 46051, 34495, 34496, 34497, 34498, 34499, 34500, 34501, 46052, 46053, 34502, 34503, 46054, 46055, 34504, 34505, 46056, 34506, 34507, 34508, 46057, 34509, 34510, 34511, 46058, 34512, 34513, 34514, 34515, 34516, 34517, 34518, 34519, 34520, 34521, 34522, 34523, 34524, 34525, 34526, 34527, 34528, 34529, 34530, 34531, 34532, 34533, 34534, 46059, 46060, 34535, 34536, 46061, 34537, 34538, 34539, 46062, 34540, 46063, 34541, 34542, 34543, 34544, 34545, 46064, 46065, 34546, 46066, 34547, 46067, 34548, 34549, 34550, 34551, 46068, 46069, 46070, 34552, 34553, 34554, 46071, 34555, 34556, 34557, 46072, 34558, 34625, 34626, 34627, 34628, 34629, 34630, 34631, 34632, 34633, 34634, 46073, 34635, 34636, 34637, 34638, 34639, 34640, 34641, 34642, 34643, 34644, 34645, 34646, 34647, 34648, 34649, 34650, 34657, 34658, 34659, 34660, 34661, 34662, 34663, 34664, 34665, 34666, 34667, 34668, 34669, 34670, 34671, 34672, 34673, 34674, 34675, 46074, 34676, 34677, 34678, 46075, 34679, 34680, 34681, 46076, 34682, 34689, 34690, 34691, 34692, 34693, 34694, 46077, 46078, 34695, 46241, 34696, 34697, 34698, 34699, 34700, 34701, 34702, 34703, 46242, 46243, 34704, 34705, 46244, 34706, 34707, 34708, 46245, 34709, 34710, 34711, 34712, 34713, 34714, 34715, 34716, 46246, 34717, 46247, 34718, 46248, 34719, 34720, 34721, 34722, 34723, 34724, 46249, 46250, 34725, 34726, 46251, 34727, 34728, 46252, 46253, 34729, 34730, 34731, 34732, 34733, 34734, 34735, 46254, 46255, 34736, 46256, 34737, 46257, 34738, 34739, 34740, 34741, 34742, 34743, 46258, 34744, 34745, 34746, 34747, 34748, 34749, 34750, 34751, 34752, 34753, 34754, 34755, 34756, 34757, 34758, 34759, 34760, 34761, 34762, 46259, 34763, 34764, 34765, 34766, 34767, 34768, 34769, 46260, 34770, 34771, 34772, 34773, 34774, 34775, 34776, 34777, 34778, 34779, 34780, 34781, 34782, 34783, 34784, 34785, 34786, 34787, 34788, 34789, 34790, 34791, 34792, 34793, 34794, 34795, 34796, 46261, 34797, 34798, 34799, 46262, 34800, 34801, 34802, 46263, 34803, 34804, 34805, 34806, 34807, 34808, 34809, 46264, 46265, 34810, 34811, 34812, 34813, 34814, 34881, 34882, 34883, 34884, 34885, 46266, 46267, 34886, 34887, 34888, 34889, 34890, 34891, 46268, 34892, 34893, 34894, 34895, 34896, 34897, 34898, 46269, 46270, 34899, 34900, 34901, 46271, 34902, 34903, 34904, 34905, 34906, 34913, 46272, 46273, 34914, 34915, 46274, 34916, 34917, 34918, 46275, 46276, 46277, 34919, 34920, 34921, 34922, 34923, 46278, 46279, 34924, 46280, 34925, 46281, 46282, 34926, 34927, 34928, 46283, 34929, 46284, 34930, 34931, 34932, 46285, 34933, 34934, 34935, 46286, 34936, 34937, 34938, 34945, 34946, 34947, 34948, 34949, 34950, 34951, 34952, 34953, 34954, 34955, 34956, 34957, 34958, 34959, 34960, 46287, 46288, 34961, 34962, 46289, 34963, 34964, 34965, 46290, 34966, 46291, 34967, 34968, 34969, 34970, 34971, 46292, 46293, 34972, 46294, 34973, 46295, 34974, 34975, 34976, 34977, 46296, 34978, 46297, 46298, 46299, 34979, 46300, 34980, 34981, 46301, 46302, 46303, 46304, 46305, 34982, 34983, 34984, 46306, 46307, 46308, 34985, 46309, 46310, 46311, 46312, 46313, 34986, 34987, 34988, 46314, 46315, 46316, 34989, 34990, 46317, 34991, 34992, 34993, 46318, 34994, 34995, 34996, 34997, 34998, 34999, 35000, 46319, 46320, 35001, 46321, 46322, 46323, 35002, 35003, 35004, 35005, 35006, 35007, 46324, 35008, 35009, 35010, 35011, 35012, 35013, 35014, 35015, 35016, 35017, 35018, 35019, 35020, 35021, 35022, 35023, 35024, 35025, 35026, 35027, 35028, 35029, 35030, 35031, 35032, 35033, 35034, 35035, 35036, 35037, 35038, 35039, 35040, 35041, 35042, 35043, 35044, 35045, 35046, 35047, 35048, 35049, 35050, 35051, 35052, 35053, 35054, 35055, 35056, 35057, 35058, 35059, 35060, 35061, 35062, 46325, 46326, 46327, 35063, 46328, 35064, 35065, 46329, 46330, 35066, 46331, 46332, 35067, 35068, 35069, 35070, 46333, 46334, 35137, 46497, 35138, 46498, 35139, 46499, 35140, 35141, 46500, 35142, 46501, 46502, 35143, 35144, 46503, 35145, 35146, 35147, 46504, 35148, 35149, 35150, 35151, 35152, 35153, 35154, 46505, 46506, 35155, 46507, 46508, 46509, 35156, 35157, 35158, 35159, 35160, 35161, 46510, 35162, 35169, 35170, 46511, 35171, 35172, 35173, 46512, 35174, 35175, 35176, 35177, 35178, 35179, 35180, 35181, 35182, 35183, 35184, 46513, 46514, 35185, 35186, 35187, 35188, 35189, 35190, 46515, 35191, 35192, 35193, 46516, 35194, 35201, 35202, 35203, 35204, 35205, 35206, 35207, 35208, 35209, 35210, 35211, 35212, 35213, 35214, 35215, 35216, 35217, 35218, 35219, 35220, 35221, 35222, 46517, 46518, 35223, 35224, 46519, 35225, 35226, 46520, 46521, 35227, 46522, 35228, 46523, 35229, 35230, 35231, 46524, 46525, 35232, 46526, 35233, 46527, 35234, 46528, 35235, 46529, 35236, 35237, 46530, 35238, 35239, 35240, 46531, 35241, 35242, 35243, 46532, 35244, 35245, 35246, 35247, 35248, 35249, 35250, 35251, 35252, 35253, 35254, 35255, 35256, 35257, 35258, 35259, 35260, 35261, 35262, 46533, 35263, 35264, 35265, 35266, 35267, 35268, 35269, 35270, 35271, 35272, 35273, 35274, 35275, 35276, 35277, 35278, 35279, 35280, 35281, 46534, 35282, 35283, 35284, 35285, 35286, 35287, 35288, 46535, 35289, 35290, 35291, 46536, 35292, 35293, 35294, 46537, 35295, 35296, 35297, 35298, 35299, 35300, 35301, 46538, 46539, 35302, 46540, 35303, 35304, 35305, 35306, 35307, 35308, 35309, 35310, 46541, 35311, 35312, 35313, 35314, 35315, 35316, 35317, 35318, 35319, 35320, 35321, 35322, 35323, 35324, 35325, 35326, 35393, 35394, 35395, 35396, 35397, 35398, 35399, 35400, 35401, 35402, 35403, 46542, 46543, 35404, 35405, 46544, 35406, 35407, 35408, 46545, 35409, 35410, 35411, 35412, 35413, 35414, 35415, 46546, 46547, 35416, 46548, 35417, 46549, 35418, 35425, 35426, 35427, 35428, 35429, 46550, 35430, 35431, 35432, 35433, 35434, 35435, 35436, 35437, 35438, 35439, 35440, 35441, 35442, 35443, 35444, 35445, 35446, 35447, 35448, 46551, 35449, 35450, 35457, 35458, 35459, 35460, 35461, 46552, 35462, 35463, 35464, 35465, 35466, 35467, 35468, 35469, 35470, 35471, 35472, 35473, 35474, 35475, 35476, 35477, 35478, 35479, 35480, 35481, 46553, 35482, 35483, 35484, 35485, 35486, 35487, 46554, 35488, 35489, 35490, 46555, 35491, 35492, 35493, 46556, 35494, 35495, 35496, 35497, 35498, 35499, 35500, 35501, 46557, 35502, 46558, 35503, 46559, 35504, 35505, 35506, 35507, 35508, 35509, 46560, 35510, 35511, 35512, 46561, 35513, 35514, 35515, 46562, 35516, 35517, 35518, 35519, 35520, 35521, 35522, 46563, 35523, 35524, 35525, 35526, 46564, 35527, 35528, 35529, 35530, 35531, 35532, 46565, 46566, 35533, 35534, 46567, 35535, 35536, 46568, 46569, 35537, 46570, 35538, 35539, 35540, 35541, 35542, 46571, 46572, 35543, 46573, 35544, 46574, 35545, 35546, 35547, 35548, 35549, 35550, 46575, 35551, 35552, 35553, 35554, 35555, 35556, 35557, 35558, 35559, 35560, 35561, 35562, 35563, 35564, 35565, 35566, 35567, 35568, 35569, 35570, 35571, 35572, 35573, 35574, 35575, 35576, 35577, 46576, 46577, 35578, 35579, 46578, 35580, 35581, 46579, 46580, 35582, 35649, 35650, 35651, 35652, 35653, 35654, 46581, 46582, 35655, 46583, 46584, 46585, 46586, 35656, 35657, 35658, 35659, 35660, 46587, 46588, 35661, 35662, 46589, 35663, 35664, 35665, 46590, 35666, 35667, 35668, 35669, 35670, 35671, 35672, 46753, 46754, 35673, 46755, 46756, 46757, 35674, 35681, 35682, 35683, 35684, 46758, 46759, 46760, 35685, 35686, 46761, 35687, 35688, 35689, 46762, 35690, 35691, 35692, 35693, 35694, 35695, 35696, 46763, 46764, 35697, 46765, 46766, 46767, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705, 35706, 35713, 35714, 35715, 35716, 35717, 35718, 35719, 35720, 35721, 35722, 35723, 35724, 35725, 35726, 35727, 35728, 35729, 35730, 35731, 35732, 35733, 35734, 35735, 35736, 35737, 35738, 35739, 35740, 35741, 35742, 35743, 35744, 35745, 35746, 35747, 35748, 35749, 35750, 35751, 35752, 35753, 35754, 35755, 35756, 35757, 35758, 35759, 35760, 35761, 35762, 35763, 35764, 35765, 46768, 46769, 35766, 35767, 46770, 35768, 35769, 35770, 46771, 35771, 46772, 46773, 35772, 35773, 35774, 35775, 46774, 46775, 35776, 46776, 46777, 46778, 35777, 35778, 35779, 35780, 35781, 46779, 46780, 46781, 35782, 35783, 46782, 35784, 35785, 35786, 46783, 35787, 35788, 35789, 35790, 35791, 35792, 35793, 46784, 46785, 35794, 46786, 46787, 46788, 35795, 35796, 35797, 35798, 35799, 35800, 46789, 35801, 35802, 35803, 35804, 35805, 35806, 35807, 35808, 35809, 35810, 35811, 35812, 35813, 35814, 35815, 35816, 35817, 35818, 35819, 46790, 35820, 35821, 35822, 35823, 35824, 35825, 35826, 35827, 35828, 35829, 35830, 35831, 35832, 35833, 35834, 35835, 35836, 35837, 35838, 35905, 35906, 35907, 35908, 35909, 35910, 35911, 35912, 35913, 35914, 35915, 35916, 35917, 35918, 35919, 35920, 46791, 46792, 35921, 35922, 46793, 35923, 35924, 35925, 46794, 35926, 35927, 35928, 35929, 35930, 35937, 35938, 35939, 35940, 35941, 35942, 35943, 46795, 35944, 35945, 35946, 35947, 35948, 35949, 46796, 35950, 35951, 35952, 35953, 35954, 35955, 35956, 46797, 35957, 35958, 35959, 35960, 35961, 35962, 35969, 35970, 35971, 35972, 35973, 35974, 35975, 35976, 35977, 35978, 35979, 35980, 35981, 46798, 35982, 35983, 35984, 35985, 35986, 35987, 35988, 35989, 35990, 35991, 35992, 35993, 35994, 35995, 35996, 35997, 35998, 35999, 36000, 36001, 36002, 36003, 36004, 36005, 36006, 36007, 36008, 46799, 36009, 36010, 36011, 46800, 36012, 36013, 36014, 36015, 36016, 36017, 36018, 36019, 36020, 36021, 36022, 36023, 36024, 36025, 36026, 36027, 36028, 36029, 36030, 36031, 36032, 36033, 36034, 36035, 36036, 36037, 36038, 36039, 36040, 36041, 36042, 36043, 36044, 36045, 36046, 36047, 36048, 36049, 36050, 36051, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 36059, 36060, 36061, 36062, 46801, 46802, 36063, 36064, 46803, 36065, 36066, 36067, 46804, 36068, 36069, 36070, 36071, 36072, 36073, 46805, 46806, 36074, 36075, 36076, 36077, 46807, 36078, 36079, 36080, 36081, 36082, 36083, 36084, 36085, 36086, 36087, 36088, 36089, 36090, 36091, 36092, 36093, 36094, 36161, 36162, 36163, 36164, 36165, 36166, 36167, 36168, 36169, 36170, 36171, 36172, 36173, 36174, 36175, 36176, 36177, 46808, 36178, 36179, 36180, 36181, 36182, 36183, 36184, 36185, 36186, 36193, 36194, 36195, 36196, 36197, 36198, 36199, 36200, 36201, 36202, 36203, 36204, 36205, 36206, 36207, 36208, 36209, 36210, 46809, 36211, 36212, 36213, 46810, 36214, 36215, 36216, 46811, 36217, 36218, 36225, 36226, 36227, 36228, 36229, 46812, 46813, 36230, 36231, 36232, 46814, 36233, 36234, 36235, 36236, 36237, 36238, 36239, 36240, 36241, 36242, 36243, 36244, 36245, 36246, 36247, 36248, 36249, 36250, 36251, 36252, 36253, 36254, 36255, 36256, 36257, 36258, 36259, 36260, 36261, 36262, 36263, 36264, 36265, 36266, 46815, 46816, 36267, 36268, 46817, 36269, 36270, 46818, 46819, 36271, 36272, 36273, 36274, 36275, 36276, 36277, 46820, 46821, 36278, 46822, 36279, 36280, 36281, 36282, 36283, 36284, 36285, 36286, 46823, 36287, 36288, 36289, 46824, 36290, 36291, 36292, 46825, 36293, 36294, 36295, 36296, 36297, 36298, 36299, 46826, 46827, 36300, 36301, 36302, 36303, 36304, 36305, 36306, 36307, 36308, 36309, 46828, 36310, 36311, 36312, 46829, 36313, 36314, 36315, 46830, 36316, 36317, 36318, 36319, 36320, 36321, 36322, 46831, 46832, 36323, 46833, 36324, 46834, 36325, 36326, 36327, 36328, 36329, 36330, 46835, 46836, 36331, 36332, 46837, 36333, 36334, 36335, 46838, 36336, 36337, 36338, 36339, 36340, 36341, 36342, 46839, 46840, 36343, 46841, 46842, 46843, 46844, 36344, 36345, 36346, 46845, 46846, 47009, 47010, 36347, 36348, 47011, 36349, 36350, 36417, 47012, 36418, 36419, 36420, 36421, 36422, 36423, 36424, 47013, 47014, 36425, 47015, 47016, 47017, 36426, 36427, 36428, 36429, 36430, 36431, 47018, 47019, 36432, 36433, 47020, 36434, 36435, 36436, 36437, 36438, 36439, 36440, 36441, 36442, 36449, 36450, 36451, 36452, 36453, 47021, 36454, 47022, 36455, 36456, 36457, 36458, 36459, 36460, 36461, 36462, 36463, 36464, 36465, 36466, 36467, 36468, 36469, 36470, 36471, 36472, 36473, 36474, 36481, 36482, 36483, 36484, 36485, 36486, 36487, 36488, 36489, 36490, 36491, 36492, 36493, 36494, 47023, 47024, 36495, 36496, 47025, 36497, 36498, 36499, 47026, 36500, 36501, 36502, 36503, 36504, 36505, 36506, 47027, 47028, 36507, 47029, 47030, 47031, 36508, 36509, 36510, 36511, 36512, 47032, 47033, 47034, 36513, 36514, 47035, 36515, 36516, 36517, 47036, 36518, 36519, 36520, 36521, 36522, 36523, 36524, 47037, 47038, 36525, 47039, 36526, 47040, 36527, 36528, 36529, 36530, 36531, 36532, 47041, 47042, 36533, 36534, 47043, 36535, 36536, 36537, 47044, 36538, 36539, 36540, 36541, 36542, 36543, 36544, 47045, 47046, 36545, 47047, 47048, 47049, 36546, 36547, 36548, 36549, 36550, 36551, 47050, 36552, 36553, 36554, 47051, 36555, 36556, 36557, 36558, 36559, 36560, 36561, 36562, 36563, 36564, 36565, 36566, 47052, 36567, 47053, 36568, 36569, 36570, 36571, 36572, 36573, 36574, 36575, 47054, 47055, 36576, 36577, 47056, 36578, 36579, 36580, 47057, 36581, 36582, 36583, 36584, 36585, 36586, 36587, 47058, 47059, 36588, 47060, 36589, 47061, 36590, 36591, 36592, 36593, 36594, 36595, 47062, 36596, 36597, 36598, 47063, 36599, 36600, 36601, 36602, 36603, 36604, 36605, 36606, 36673, 36674, 36675, 36676, 36677, 36678, 36679, 36680, 47064, 36681, 36682, 36683, 36684, 36685, 36686, 36687, 36688, 36689, 36690, 36691, 36692, 36693, 36694, 36695, 36696, 36697, 36698, 36705, 36706, 36707, 36708, 36709, 36710, 36711, 36712, 47065, 36713, 36714, 36715, 36716, 36717, 36718, 36719, 47066, 36720, 36721, 36722, 47067, 36723, 36724, 36725, 47068, 36726, 36727, 36728, 36729, 36730, 36737, 36738, 47069, 47070, 36739, 47071, 36740, 47072, 36741, 36742, 36743, 36744, 36745, 36746, 47073, 36747, 36748, 36749, 47074, 36750, 36751, 36752, 47075, 36753, 36754, 36755, 36756, 36757, 36758, 36759, 36760, 47076, 36761, 47077, 36762, 47078, 36763, 36764, 36765, 36766, 36767, 36768, 47079, 47080, 36769, 36770, 47081, 36771, 36772, 36773, 47082, 36774, 36775, 36776, 36777, 36778, 36779, 36780, 47083, 47084, 36781, 47085, 36782, 47086, 36783, 36784, 36785, 36786, 36787, 36788, 47087, 36789, 36790, 36791, 36792, 36793, 36794, 36795, 36796, 36797, 36798, 36799, 36800, 36801, 36802, 36803, 36804, 36805, 36806, 36807, 47088, 36808, 36809, 36810, 36811, 36812, 36813, 36814, 47089, 36815, 36816, 36817, 36818, 36819, 36820, 36821, 36822, 36823, 36824, 36825, 36826, 36827, 36828, 36829, 36830, 36831, 36832, 36833, 36834, 36835, 36836, 36837, 36838, 36839, 36840, 36841, 47090, 47091, 36842, 36843, 47092, 36844, 36845, 36846, 47093, 36847, 36848, 36849, 36850, 36851, 36852, 36853, 47094, 36854, 36855, 47095, 36856, 47096, 36857, 36858, 36859, 36860, 36861, 36862, 47097, 47098, 36929, 36930, 47099, 36931, 36932, 36933, 47100, 36934, 36935, 36936, 36937, 36938, 36939, 36940, 47101, 47102, 36941, 47265, 36942, 47266, 36943, 36944, 36945, 36946, 36947, 36948, 47267, 47268, 36949, 36950, 47269, 36951, 36952, 36953, 47270, 36954, 36961, 36962, 36963, 36964, 36965, 36966, 47271, 47272, 36967, 47273, 36968, 47274, 47275, 36969, 36970, 47276, 47277, 36971, 36972, 36973, 36974, 36975, 36976, 36977, 36978, 36979, 36980, 36981, 36982, 36983, 36984, 36985, 36986, 36993, 36994, 36995, 36996, 36997, 36998, 36999, 37000, 37001, 37002, 37003, 37004, 37005, 47278, 47279, 37006, 37007, 47280, 37008, 37009, 37010, 47281, 37011, 37012, 37013, 37014, 37015, 37016, 37017, 47282, 47283, 37018, 47284, 37019, 47285, 37020, 37021, 37022, 37023, 37024, 37025, 47286, 47287, 37026, 37027, 47288, 37028, 47289, 47290, 47291, 47292, 47293, 37029, 37030, 37031, 37032, 37033, 47294, 47295, 37034, 47296, 37035, 47297, 47298, 37036, 37037, 47299, 37038, 47300, 47301, 47302, 37039, 37040, 47303, 37041, 37042, 37043, 47304, 37044, 37045, 37046, 37047, 37048, 37049, 37050, 47305, 47306, 37051, 47307, 47308, 47309, 47310, 37052, 37053, 37054, 37055, 37056, 47311, 47312, 37057, 37058, 37059, 37060, 37061, 37062, 47313, 37063, 37064, 37065, 37066, 37067, 37068, 37069, 37070, 37071, 37072, 37073, 37074, 47314, 37075, 37076, 37077, 37078, 37079, 37080, 37081, 37082, 37083, 37084, 37085, 37086, 37087, 37088, 37089, 37090, 37091, 37092, 37093, 37094, 37095, 37096, 37097, 37098, 37099, 37100, 37101, 37102, 37103, 37104, 37105, 37106, 37107, 37108, 47315, 47316, 37109, 37110, 47317, 37111, 37112, 37113, 47318, 37114, 47319, 37115, 37116, 37117, 37118, 37185, 47320, 47321, 37186, 47322, 37187, 47323, 47324, 37188, 37189, 37190, 37191, 47325, 47326, 47327, 37192, 37193, 47328, 37194, 37195, 37196, 47329, 37197, 37198, 37199, 37200, 37201, 37202, 37203, 47330, 47331, 37204, 47332, 47333, 47334, 37205, 37206, 37207, 37208, 37209, 37210, 47335, 47336, 37217, 37218, 47337, 37219, 37220, 37221, 47338, 37222, 37223, 37224, 37225, 37226, 37227, 37228, 37229, 37230, 37231, 47339, 47340, 47341, 37232, 47342, 37233, 37234, 37235, 37236, 47343, 37237, 37238, 37239, 37240, 37241, 37242, 37249, 37250, 37251, 37252, 37253, 37254, 37255, 37256, 37257, 37258, 37259, 37260, 37261, 37262, 37263, 37264, 37265, 37266, 37267, 37268, 37269, 47344, 47345, 37270, 47346, 47347, 37271, 37272, 37273, 47348, 37274, 47349, 37275, 37276, 37277, 37278, 37279, 47350, 47351, 37280, 47352, 37281, 47353, 37282, 37283, 37284, 37285, 37286, 37287, 47354, 37288, 37289, 37290, 47355, 37291, 37292, 37293, 37294, 37295, 37296, 37297, 37298, 37299, 37300, 37301, 37302, 37303, 37304, 37305, 47356, 47357, 37306, 37307, 37308, 37309, 37310, 37311, 37312, 37313, 37314, 37315, 37316, 37317, 37318, 37319, 37320, 37321, 37322, 37323, 37324, 37325, 37326, 37327, 37328, 37329, 37330, 37331, 37332, 37333, 37334, 37335, 37336, 37337, 37338, 37339, 47358, 37340, 37341, 37342, 47521, 37343, 37344, 37345, 47522, 37346, 37347, 37348, 37349, 37350, 37351, 37352, 37353, 47523, 37354, 47524, 37355, 47525, 37356, 37357, 37358, 37359, 37360, 37361, 47526, 37362, 37363, 37364, 47527, 37365, 37366, 37367, 47528, 37368, 37369, 37370, 37371, 37372, 37373, 37374, 37441, 47529, 37442, 47530, 37443, 37444, 37445, 37446, 37447, 37448, 37449, 37450, 47531, 47532, 47533, 37451, 47534, 37452, 37453, 47535, 47536, 47537, 47538, 37454, 37455, 37456, 37457, 37458, 47539, 47540, 37459, 47541, 37460, 47542, 37461, 37462, 37463, 47543, 37464, 47544, 47545, 37465, 37466, 37473, 47546, 37474, 37475, 37476, 47547, 37477, 37478, 37479, 37480, 37481, 37482, 37483, 37484, 47548, 37485, 47549, 37486, 37487, 37488, 37489, 37490, 37491, 37492, 37493, 47550, 37494, 37495, 37496, 37497, 37498, 37505, 37506, 37507, 37508, 37509, 37510, 37511, 37512, 37513, 37514, 37515, 37516, 37517, 37518, 37519, 37520, 37521, 37522, 37523, 37524, 37525, 37526, 47551, 37527, 37528, 37529, 47552, 37530, 37531, 37532, 47553, 37533, 37534, 37535, 37536, 37537, 37538, 37539, 37540, 37541, 37542, 37543, 37544, 37545, 37546, 37547, 37548, 37549, 37550, 37551, 47554, 37552, 37553, 37554, 47555, 37555, 37556, 37557, 47556, 37558, 37559, 37560, 37561, 37562, 37563, 37564, 47557, 37565, 37566, 47558, 37567, 37568, 37569, 37570, 37571, 37572, 37573, 37574, 47559, 37575, 37576, 37577, 47560, 37578, 37579, 37580, 47561, 37581, 37582, 37583, 37584, 37585, 37586, 37587, 47562, 37588, 37589, 47563, 37590, 37591, 37592, 37593, 37594, 37595, 37596, 37597, 37598, 37599, 37600, 37601, 37602, 37603, 37604, 37605, 37606, 37607, 37608, 37609, 37610, 37611, 37612, 37613, 37614, 37615, 37616, 37617, 37618, 37619, 37620, 37621, 37622, 37623, 37624, 37625, 47564, 47565, 37626, 37627, 47566, 37628, 37629, 47567, 47568, 37630, 47569, 37697, 37698, 37699, 37700, 37701, 47570, 47571, 37702, 47572, 47573, 47574, 37703, 47575, 37704, 47576, 37705, 37706, 47577, 47578, 47579, 47580, 47581, 37707, 37708, 47582, 47583, 47584, 47585, 47586, 37709, 37710, 37711, 37712, 47587, 47588, 37713, 47589, 37714, 47590, 37715, 37716, 37717, 47591, 37718, 37719, 47592, 47593, 37720, 37721, 47594, 37722, 37729, 37730, 47595, 37731, 37732, 37733, 37734, 37735, 37736, 37737, 47596, 47597, 37738, 47598, 47599, 47600, 37739, 37740, 37741, 47601, 37742, 37743, 47602, 47603, 37744, 37745, 47604, 37746, 37747, 37748, 37749, 37750, 37751, 37752, 37753, 37754, 37761, 37762, 37763, 47605, 37764, 37765, 37766, 37767, 37768, 37769, 37770, 37771, 37772, 37773, 37774, 37775, 37776, 37777, 37778, 37779, 37780, 37781, 37782, 37783, 37784, 37785, 37786, 37787, 37788, 37789, 37790, 37791, 37792, 37793, 37794, 37795, 37796, 37797, 37798, 37799, 37800, 37801, 47606, 47607, 37802, 37803, 47608, 37804, 37805, 47609, 47610, 37806, 47611, 37807, 37808, 37809, 37810, 37811, 47612, 47613, 37812, 47614, 37813, 47777, 47778, 37814, 37815, 37816, 37817, 37818, 47779, 47780, 37819, 37820, 47781, 37821, 37822, 47782, 47783, 37823, 37824, 37825, 37826, 37827, 37828, 37829, 47784, 47785, 37830, 47786, 47787, 47788, 37831, 37832, 37833, 37834, 37835, 37836, 47789, 47790, 37837, 37838, 47791, 37839, 37840, 37841, 47792, 37842, 37843, 37844, 37845, 37846, 37847, 37848, 37849, 47793, 37850, 47794, 47795, 47796, 37851, 37852, 37853, 47797, 37854, 37855, 47798, 37856, 37857, 37858, 47799, 37859, 37860, 37861, 37862, 37863, 37864, 37865, 37866, 37867, 37868, 37869, 37870, 37871, 37872, 37873, 37874, 37875, 37876, 37877, 37878, 37879, 37880, 37881, 47800, 47801, 47802, 37882, 47803, 37883, 37884, 37885, 47804, 37886, 37953, 37954, 37955, 37956, 37957, 37958, 47805, 47806, 37959, 47807, 37960, 47808, 37961, 37962, 37963, 37964, 37965, 37966, 47809, 37967, 37968, 37969, 47810, 37970, 37971, 37972, 37973, 37974, 37975, 37976, 37977, 37978, 37985, 37986, 37987, 37988, 37989, 37990, 47811, 37991, 37992, 37993, 37994, 37995, 37996, 37997, 47812, 37998, 37999, 38000, 38001, 38002, 38003, 38004, 38005, 38006, 38007, 38008, 38009, 38010, 38017, 38018, 38019, 38020, 38021, 38022, 47813, 38023, 38024, 38025, 38026, 38027, 38028, 38029, 47814, 47815, 38030, 38031, 47816, 38032, 38033, 38034, 47817, 38035, 38036, 38037, 38038, 38039, 38040, 38041, 47818, 47819, 38042, 38043, 38044, 38045, 38046, 38047, 38048, 38049, 38050, 38051, 47820, 38052, 38053, 38054, 47821, 38055, 38056, 38057, 38058, 38059, 38060, 38061, 38062, 38063, 38064, 38065, 38066, 38067, 38068, 38069, 38070, 38071, 38072, 38073, 38074, 38075, 38076, 38077, 47822, 47823, 38078, 38079, 47824, 38080, 38081, 47825, 47826, 47827, 47828, 38082, 38083, 38084, 38085, 38086, 47829, 47830, 38087, 47831, 38088, 47832, 38089, 38090, 38091, 47833, 47834, 38092, 47835, 38093, 38094, 38095, 38096, 38097, 38098, 38099, 47836, 38100, 38101, 38102, 38103, 38104, 38105, 38106, 38107, 38108, 38109, 38110, 47837, 38111, 38112, 38113, 38114, 38115, 38116, 38117, 47838, 38118, 38119, 38120, 38121, 38122, 38123, 38124, 38125, 38126, 38127, 38128, 38129, 38130, 38131, 38132, 38133, 38134, 38135, 38136, 38137, 38138, 38139, 38140, 38141, 38142, 38209, 38210, 47839, 47840, 38211, 38212, 47841, 38213, 38214, 38215, 47842, 38216, 38217, 38218, 38219, 38220, 38221, 38222, 38223, 38224, 38225, 38226, 38227, 47843, 38228, 38229, 38230, 38231, 38232, 38233, 47844, 38234, 38241, 38242, 47845, 38243, 38244, 38245, 47846, 38246, 38247, 38248, 38249, 38250, 38251, 38252, 47847, 38253, 38254, 47848, 38255, 47849, 38256, 38257, 38258, 38259, 38260, 38261, 47850, 47851, 38262, 38263, 47852, 38264, 38265, 38266, 47853, 38273, 38274, 38275, 38276, 38277, 38278, 38279, 47854, 47855, 38280, 47856, 38281, 38282, 38283, 38284, 38285, 38286, 38287, 38288, 38289, 38290, 38291, 38292, 38293, 38294, 38295, 38296, 38297, 38298, 38299, 38300, 38301, 38302, 38303, 38304, 38305, 38306, 38307, 38308, 38309, 38310, 38311, 38312, 38313, 38314, 38315, 38316, 47857, 47858, 38317, 38318, 47859, 38319, 38320, 38321, 47860, 38322, 47861, 38323, 38324, 38325, 38326, 38327, 47862, 47863, 38328, 47864, 38329, 47865, 47866, 47867, 38330, 38331, 38332, 38333, 47868, 47869, 38334, 38335, 47870, 38336, 38337, 38338, 48033, 38339, 48034, 38340, 38341, 38342, 38343, 38344, 48035, 48036, 38345, 48037, 48038, 48039, 38346, 38347, 38348, 38349, 38350, 48040, 48041, 48042, 38351, 38352, 48043, 38353, 38354, 38355, 48044, 38356, 38357, 38358, 38359, 38360, 38361, 38362, 48045, 48046, 38363, 48047, 48048, 48049, 38364, 38365, 38366, 38367, 38368, 38369, 48050, 48051, 38370, 38371, 38372, 38373, 38374, 38375, 38376, 38377, 38378, 38379, 38380, 38381, 38382, 38383, 48052, 38384, 38385, 38386, 38387, 38388, 38389, 38390, 38391, 38392, 38393, 38394, 38395, 38396, 38397, 38398, 38465, 38466, 38467, 38468, 38469, 38470, 38471, 38472, 38473, 38474, 38475, 38476, 38477, 38478, 38479, 38480, 38481, 38482, 38483, 38484, 38485, 38486, 38487, 38488, 48053, 48054, 38489, 38490, 48055, 38497, 38498, 48056, 48057, 38499, 38500, 38501, 38502, 38503, 38504, 38505, 48058, 38506, 38507, 48059, 48060, 48061, 38508, 38509, 38510, 38511, 38512, 38513, 48062, 38514, 38515, 38516, 38517, 38518, 38519, 38520, 38521, 38522, 38529, 38530, 38531, 38532, 38533, 38534, 38535, 38536, 38537, 38538, 38539, 48063, 38540, 38541, 38542, 38543, 38544, 38545, 48064, 48065, 38546, 38547, 38548, 38549, 38550, 38551, 38552, 38553, 38554, 38555, 38556, 38557, 38558, 38559, 48066, 48067, 38560, 48068, 48069, 48070, 38561, 38562, 38563, 38564, 38565, 38566, 38567, 38568, 38569, 38570, 38571, 38572, 38573, 38574, 38575, 38576, 38577, 38578, 38579, 38580, 38581, 38582, 38583, 38584, 38585, 38586, 38587, 38588, 38589, 38590, 38591, 38592, 38593, 38594, 48071, 48072, 38595, 38596, 48073, 38597, 38598, 38599, 48074, 38600, 38601, 38602, 38603, 38604, 38605, 38606, 48075, 48076, 38607, 38608, 38609, 48077, 38610, 38611, 38612, 38613, 38614, 38615, 38616, 38617, 38618, 38619, 38620, 38621, 38622, 38623, 38624, 38625, 38626, 38627, 38628, 38629, 38630, 38631, 38632, 38633, 38634, 38635, 38636, 38637, 38638, 38639, 38640, 38641, 38642, 38643, 38644, 38645, 38646, 38647, 38648, 38649, 38650, 38651, 38652, 38653, 38654, 38721, 38722, 38723, 38724, 38725, 38726, 38727, 38728, 38729, 38730, 38731, 38732, 38733, 38734, 38735, 38736, 38737, 48078, 38738, 38739, 38740, 38741, 38742, 38743, 38744, 38745, 38746, 38753, 38754, 38755, 38756, 38757, 38758, 38759, 38760, 38761, 38762, 38763, 38764, 38765, 38766, 38767, 38768, 38769, 38770, 48079, 38771, 38772, 38773, 38774, 38775, 38776, 38777, 38778, 38785, 38786, 38787, 38788, 38789, 38790, 38791, 38792, 38793, 38794, 38795, 38796, 48080, 38797, 38798, 38799, 38800, 38801, 38802, 48081, 48082, 38803, 38804, 48083, 38805, 38806, 38807, 48084, 38808, 38809, 38810, 38811, 38812, 38813, 38814, 48085, 38815, 38816, 48086, 38817, 48087, 38818, 38819, 38820, 38821, 38822, 38823, 38824, 38825, 38826, 38827, 38828, 38829, 38830, 38831, 38832, 38833, 38834, 38835, 38836, 38837, 38838, 38839, 38840, 38841, 38842, 38843, 38844, 38845, 38846, 38847, 38848, 38849, 38850, 38851, 38852, 38853, 38854, 38855, 38856, 38857, 38858, 38859, 38860, 38861, 38862, 38863, 38864, 38865, 38866, 38867, 38868, 38869, 38870, 38871, 38872, 38873, 38874, 38875, 38876, 38877, 38878, 38879, 38880, 38881, 38882, 38883, 38884, 38885, 38886, 38887, 38888, 38889, 38890, 38891, 38892, 38893, 38894, 38895, 38896, 38897, 38898, 38899, 38900, 38901, 38902, 38903, 38904, 38905, 38906, 38907, 48088, 38908, 38909, 38910, 38977, 38978, 38979, 38980, 38981, 38982, 38983, 38984, 38985, 38986, 38987, 38988, 38989, 38990, 38991, 38992, 38993, 48089, 38994, 38995, 38996, 38997, 38998, 38999, 48090, 39000, 39001, 39002, 48091, 39009, 39010, 39011, 48092, 39012, 39013, 39014, 39015, 39016, 39017, 39018, 48093, 48094, 39019, 39020, 39021, 39022, 39023, 39024, 39025, 39026, 39027, 39028, 39029, 39030, 39031, 39032, 39033, 39034, 39041, 39042, 39043, 39044, 39045, 39046, 39047, 39048, 39049, 39050, 39051, 39052, 39053, 39054, 39055, 39056, 39057, 39058, 39059, 39060, 39061, 39062, 48095, 48096, 39063, 39064, 48097, 39065, 39066, 39067, 48098, 39068, 39069, 39070, 39071, 39072, 39073, 39074, 48099, 48100, 39075, 48101, 39076, 48102, 39077, 39078, 39079, 39080, 39081, 39082, 48103, 48104, 39083, 48105, 48106, 39084, 39085, 48107, 48108, 48109, 48110, 39086, 39087, 39088, 39089, 39090, 48111, 48112, 39091, 48113, 48114, 48115, 39092, 39093, 39094, 48116, 39095, 39096, 48117, 48118, 39097, 39098, 48119, 39099, 39100, 39101, 48120, 39102, 39103, 39104, 39105, 39106, 39107, 39108, 48121, 48122, 39109, 48123, 48124, 48125, 39110, 39111, 39112, 39113, 39114, 39115, 48126, 48289, 39116, 39117, 48290, 39118, 39119, 39120, 48291, 39121, 39122, 39123, 39124, 39125, 39126, 39127, 48292, 48293, 39128, 48294, 39129, 48295, 39130, 39131, 39132, 39133, 39134, 39135, 48296, 39136, 39137, 39138, 48297, 39139, 39140, 39141, 48298, 39142, 39143, 39144, 39145, 39146, 39147, 39148, 48299, 39149, 39150, 39151, 39152, 48300, 39153, 39154, 39155, 39156, 39157, 39158, 48301, 48302, 48303, 48304, 48305, 39159, 39160, 48306, 48307, 39161, 48308, 48309, 39162, 39163, 39164, 39165, 48310, 48311, 39166, 48312, 48313, 48314, 39233, 39234, 39235, 39236, 48315, 39237, 48316, 48317, 39238, 39239, 48318, 39240, 39241, 39242, 48319, 39243, 39244, 39245, 39246, 39247, 39248, 39249, 48320, 48321, 39250, 48322, 48323, 48324, 39251, 39252, 39253, 39254, 39255, 39256, 48325, 48326, 39257, 39258, 48327, 39265, 39266, 39267, 48328, 39268, 39269, 39270, 39271, 39272, 39273, 39274, 48329, 48330, 39275, 48331, 48332, 48333, 39276, 39277, 39278, 39279, 39280, 39281, 48334, 39282, 39283, 39284, 48335, 39285, 39286, 39287, 48336, 39288, 39289, 39290, 39297, 39298, 39299, 39300, 39301, 39302, 39303, 39304, 39305, 48337, 39306, 39307, 39308, 39309, 39310, 39311, 48338, 48339, 48340, 39312, 48341, 39313, 39314, 39315, 48342, 39316, 48343, 39317, 39318, 39319, 39320, 39321, 48344, 48345, 39322, 48346, 39323, 48347, 39324, 39325, 39326, 48348, 39327, 39328, 48349, 48350, 39329, 39330, 48351, 39331, 39332, 39333, 48352, 39334, 39335, 39336, 39337, 39338, 39339, 39340, 39341, 39342, 39343, 39344, 39345, 48353, 39346, 39347, 39348, 39349, 39350, 39351, 48354, 39352, 39353, 39354, 48355, 39355, 39356, 39357, 48356, 39358, 39359, 39360, 39361, 39362, 39363, 39364, 48357, 39365, 39366, 48358, 48359, 39367, 39368, 39369, 39370, 39371, 39372, 39373, 48360, 39374, 39375, 39376, 48361, 39377, 39378, 39379, 48362, 39380, 39381, 39382, 39383, 39384, 39385, 39386, 48363, 48364, 39387, 48365, 39388, 39389, 39390, 39391, 39392, 39393, 39394, 39395, 48366, 48367, 39396, 39397, 48368, 39398, 39399, 39400, 48369, 39401, 39402, 39403, 39404, 39405, 39406, 39407, 48370, 48371, 39408, 48372, 39409, 48373, 39410, 39411, 39412, 39413, 39414, 39415, 48374, 48375, 39416, 39417, 48376, 39418, 39419, 48377, 48378, 39420, 39421, 39422, 39489, 39490, 39491, 39492, 48379, 48380, 39493, 48381, 39494, 48382, 39495, 48545, 39496, 48546, 48547, 39497, 48548, 39498, 39499, 39500, 39501, 39502, 39503, 39504, 39505, 39506, 39507, 39508, 39509, 39510, 39511, 39512, 39513, 39514, 39521, 39522, 48549, 39523, 39524, 39525, 39526, 39527, 39528, 39529, 48550, 48551, 39530, 39531, 48552, 39532, 39533, 39534, 48553, 39535, 39536, 39537, 39538, 39539, 39540, 39541, 48554, 39542, 39543, 39544, 39545, 48555, 39546, 39553, 39554, 39555, 39556, 39557, 48556, 48557, 39558, 39559, 48558, 39560, 39561, 39562, 48559, 39563, 39564, 39565, 39566, 39567, 39568, 39569, 48560, 48561, 39570, 48562, 39571, 48563, 39572, 39573, 39574, 39575, 39576, 39577, 48564, 48565, 39578, 39579, 39580, 39581, 39582, 39583, 48566, 39584, 39585, 39586, 39587, 39588, 39589, 39590, 48567, 39591, 39592, 48568, 39593, 48569, 39594, 39595, 39596, 39597, 39598, 39599, 48570, 48571, 39600, 39601, 48572, 39602, 39603, 39604, 48573, 48574, 39605, 39606, 39607, 39608, 39609, 39610, 48575, 48576, 39611, 48577, 39612, 48578, 39613, 39614, 39615, 39616, 39617, 39618, 39619, 39620, 39621, 39622, 39623, 39624, 39625, 39626, 39627, 39628, 39629, 39630, 39631, 39632, 39633, 39634, 39635, 39636, 39637, 39638, 39639, 39640, 39641, 39642, 39643, 39644, 39645, 39646, 48579, 48580, 39647, 39648, 48581, 39649, 39650, 48582, 48583, 39651, 39652, 39653, 39654, 39655, 39656, 48584, 48585, 48586, 39657, 48587, 39658, 48588, 39659, 39660, 39661, 39662, 48589, 39663, 48590, 48591, 39664, 48592, 48593, 39665, 39666, 39667, 48594, 39668, 39669, 39670, 39671, 39672, 39673, 39674, 48595, 48596, 39675, 39676, 48597, 48598, 39677, 39678, 39745, 39746, 39747, 48599, 48600, 48601, 39748, 39749, 48602, 39750, 39751, 39752, 48603, 39753, 39754, 39755, 39756, 39757, 39758, 39759, 48604, 48605, 39760, 39761, 48606, 48607, 39762, 39763, 39764, 39765, 39766, 39767, 39768, 39769, 39770, 39777, 39778, 39779, 39780, 39781, 39782, 39783, 39784, 39785, 39786, 39787, 39788, 39789, 39790, 39791, 39792, 39793, 39794, 48608, 39795, 39796, 39797, 39798, 39799, 39800, 39801, 39802, 39809, 39810, 39811, 39812, 39813, 39814, 39815, 39816, 39817, 39818, 39819, 39820, 39821, 39822, 39823, 39824, 39825, 39826, 39827, 39828, 39829, 39830, 39831, 39832, 39833, 39834, 48609, 48610, 39835, 39836, 48611, 39837, 39838, 39839, 48612, 39840, 48613, 39841, 39842, 39843, 39844, 39845, 48614, 48615, 39846, 39847, 48616, 48617, 39848, 39849, 39850, 39851, 39852, 39853, 48618, 39854, 39855, 39856, 48619, 39857, 39858, 39859, 48620, 39860, 39861, 39862, 39863, 39864, 39865, 39866, 39867, 39868, 39869, 39870, 39871, 39872, 39873, 39874, 39875, 39876, 39877, 39878, 39879, 39880, 39881, 39882, 39883, 39884, 39885, 39886, 39887, 39888, 39889, 39890, 39891, 39892, 39893, 39894, 39895, 39896, 39897, 39898, 39899, 39900, 39901, 39902, 39903, 39904, 39905, 39906, 39907, 39908, 39909, 39910, 48621, 39911, 39912, 39913, 39914, 39915, 39916, 39917, 39918, 39919, 39920, 39921, 39922, 39923, 39924, 39925, 39926, 39927, 39928, 39929, 39930, 39931, 39932, 39933, 48622, 48623, 39934, 40001, 48624, 40002, 40003, 48625, 48626, 40004, 48627, 40005, 40006, 40007, 40008, 40009, 48628, 48629, 40010, 40011, 40012, 48630, 40013, 40014, 40015, 40016, 40017, 40018, 48631, 48632, 40019, 40020, 48633, 40021, 40022, 40023, 40024, 40025, 40026, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041, 48634, 40042, 40043, 40044, 40045, 40046, 40047, 40048, 48635, 40049, 40050, 40051, 40052, 40053, 40054, 40055, 40056, 40057, 40058, 40065, 40066, 40067, 40068, 40069, 40070, 40071, 40072, 40073, 48636, 40074, 40075, 40076, 40077, 40078, 40079, 40080, 48637, 40081, 40082, 40083, 48638, 40084, 40085, 40086, 48801, 40087, 40088, 40089, 40090, 40091, 40092, 40093, 48802, 48803, 40094, 40095, 40096, 40097, 40098, 40099, 40100, 40101, 40102, 40103, 48804, 40104, 40105, 40106, 40107, 40108, 40109, 40110, 40111, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119, 40120, 40121, 40122, 40123, 40124, 40125, 40126, 40127, 40128, 40129, 40130, 48805, 48806, 40131, 40132, 48807, 40133, 40134, 40135, 48808, 40136, 40137, 40138, 40139, 40140, 40141, 40142, 48809, 48810, 40143, 40144, 40145, 48811, 40146, 40147, 40148, 40149, 40150, 40151, 48812, 40152, 40153, 40154, 40155, 40156, 40157, 40158, 40159, 40160, 40161, 40162, 40163, 40164, 40165, 40166, 40167, 40168, 40169, 40170, 48813, 40171, 40172, 40173, 40174, 40175, 40176, 40177, 48814, 40178, 40179, 40180, 40181, 40182, 40183, 40184, 40185, 40186, 40187, 40188, 40189, 40190, 40257, 40258, 40259, 40260, 40261, 40262, 40263, 40264, 40265, 40266, 40267, 40268, 40269, 40270, 48815, 40271, 40272, 40273, 48816, 40274, 40275, 40276, 40277, 40278, 40279, 40280, 40281, 40282, 40289, 40290, 40291, 40292, 40293, 40294, 40295, 40296, 40297, 40298, 40299, 40300, 40301, 40302, 40303, 40304, 40305, 40306, 40307, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 40321, 40322, 40323, 40324, 40325, 40326, 40327, 40328, 40329, 48817, 40330, 40331, 40332, 40333, 40334, 40335, 48818, 48819, 40336, 40337, 48820, 40338, 40339, 40340, 48821, 40341, 48822, 40342, 40343, 40344, 40345, 48823, 48824, 48825, 40346, 40347, 40348, 40349, 40350, 40351, 40352, 40353, 40354, 40355, 48826, 40356, 40357, 40358, 48827, 40359, 40360, 40361, 48828, 40362, 40363, 40364, 40365, 40366, 40367, 40368, 48829, 40369, 40370, 40371, 40372, 40373, 40374, 40375, 40376, 40377, 40378, 40379, 48830, 48831, 40380, 40381, 48832, 40382, 40383, 40384, 48833, 40385, 40386, 40387, 40388, 40389, 40390, 40391, 48834, 48835, 40392, 48836, 40393, 48837, 40394, 40395, 40396, 40397, 40398, 40399, 48838, 48839, 40400, 40401, 48840, 48841, 48842, 40402, 48843, 48844, 48845, 40403, 40404, 40405, 40406, 48846, 48847, 48848, 40407, 48849, 48850, 48851, 40408, 40409, 40410, 48852, 48853, 40411, 48854, 48855, 40412, 40413, 48856, 40414, 40415, 40416, 48857, 40417, 40418, 40419, 40420, 40421, 40422, 40423, 48858, 48859, 40424, 48860, 48861, 48862, 40425, 40426, 40427, 40428, 40429, 40430, 48863, 48864, 40431, 40432, 48865, 40433, 40434, 40435, 48866, 40436, 40437, 48867, 40438, 40439, 40440, 40441, 48868, 48869, 40442, 48870, 40443, 48871, 40444, 40445, 40446, 48872, 40513, 48873, 48874, 40514, 40515, 40516, 48875, 40517, 40518, 40519, 48876, 40520, 40521, 40522, 40523, 40524, 40525, 40526, 40527, 48877, 40528, 40529, 40530, 40531, 40532, 40533, 40534, 40535, 40536, 40537, 48878, 48879, 40538, 40545, 48880, 48881, 40546, 48882, 48883, 48884, 48885, 40547, 40548, 40549, 40550, 40551, 48886, 48887, 48888, 48889, 48890, 48891, 48892, 40552, 48893, 40553, 48894, 40554, 49057, 49058, 40555, 40556, 49059, 40557, 40558, 40559, 49060, 40560, 40561, 40562, 40563, 40564, 40565, 40566, 49061, 49062, 40567, 49063, 40568, 49064, 40569, 40570, 40577, 40578, 40579, 40580, 49065, 49066, 49067, 40581, 49068, 40582, 40583, 40584, 49069, 40585, 49070, 49071, 40586, 40587, 40588, 40589, 49072, 49073, 49074, 49075, 49076, 49077, 40590, 40591, 40592, 49078, 49079, 49080, 49081, 40593, 40594, 40595, 49082, 40596, 40597, 40598, 49083, 40599, 40600, 40601, 40602, 40603, 40604, 40605, 49084, 49085, 40606, 49086, 49087, 40607, 40608, 40609, 40610, 40611, 40612, 40613, 49088, 49089, 40614, 40615, 49090, 40616, 40617, 40618, 49091, 49092, 49093, 40619, 49094, 40620, 40621, 49095, 49096, 49097, 40622, 49098, 40623, 49099, 40624, 49100, 40625, 40626, 40627, 40628, 49101, 49102, 40629, 40630, 49103, 40631, 40632, 40633, 49104, 40634, 40635, 40636, 40637, 40638, 40639, 40640, 49105, 49106, 40641, 49107, 49108, 49109, 40642, 40643, 40644, 40645, 40646, 40647, 49110, 49111, 40648, 40649, 49112, 40650, 40651, 40652, 40653, 40654, 40655, 40656, 40657, 40658, 40659, 40660, 49113, 40661, 40662, 49114, 40663, 49115, 40664, 40665, 40666, 40667, 40668, 40669, 49116, 49117, 40670, 40671, 49118, 40672, 40673, 40674, 49119, 40675, 40676, 40677, 40678, 40679, 40680, 40681, 49120, 49121, 40682, 49122, 40683, 49123, 40684, 40685, 40686, 40687, 40688, 40689, 49124, 49125, 40690, 40691, 49126, 40692, 40693, 40694, 49127, 40695, 40696, 40697, 40698, 40699, 40700, 40701, 49128, 49129, 40702, 49130, 40769, 49131, 40770, 40771, 40772, 40773, 40774, 40775, 49132, 49133, 40776, 40777, 49134, 40778, 40779, 40780, 49135, 49136, 49137, 40781, 40782, 40783, 40784, 40785, 49138, 49139, 40786, 49140, 40787, 49141, 40788, 40789, 40790, 40791, 40792, 40793, 49142, 49143, 40794, 40801, 49144, 40802, 40803, 40804, 49145, 40805, 40806, 40807, 40808, 40809, 40810, 40811, 49146, 49147, 40812, 40813, 49148, 49149, 40814, 40815, 40816, 40817, 40818, 40819, 49150, 49313, 40820, 40821, 49314, 40822, 40823, 40824, 49315, 40825, 40826, 40833, 40834, 40835, 40836, 40837, 49316, 49317, 40838, 40839, 40840, 49318, 40841, 40842, 40843, 40844, 40845, 40846, 49319, 49320, 40847, 40848, 49321, 40849, 40850, 40851, 49322, 40852, 40853, 40854, 40855, 40856, 40857, 40858, 49323, 49324, 40859, 49325, 40860, 49326, 40861, 40862, 40863, 40864, 40865, 40866, 49327, 49328, 40867, 40868, 49329, 40869, 40870, 40871, 49330, 40872, 40873, 40874, 40875, 40876, 40877, 40878, 49331, 49332, 40879, 49333, 40880, 49334, 40881, 49335, 40882, 40883, 40884, 40885, 49336, 49337, 40886, 40887, 49338, 40888, 40889, 40890, 49339, 40891, 40892, 40893, 40894, 40895, 49340, 40896, 49341, 49342, 40897, 49343, 40898, 49344, 49345, 49346, 49347, 49348, 49349, 49350, 49351, 40899, 40900, 40901, 49352, 40902, 40903, 40904, 49353, 40905, 40906, 40907, 40908, 40909, 40910, 40911, 49354, 40912, 40913, 49355, 40914, 40915, 40916, 40917, 40918, 40919, 40920, 40921, 49356, 49357, 40922, 40923, 49358, 40924, 40925, 40926, 49359, 49360, 49361, 40927, 40928, 40929, 40930, 49362, 49363, 49364, 40931, 49365, 49366, 49367, 49368, 40932, 40933, 40934, 49369, 40935, 49370, 49371, 40936, 40937, 49372, 40938, 49373, 49374, 49375, 40939, 49376, 40940, 40941, 40942, 40943, 40944, 49377, 49378, 40945, 49379, 49380, 49381, 49382, 40946, 40947, 40948, 40949, 40950, 49383, 49384, 40951, 40952, 49385, 40953, 40954, 40955, 49386, 40956, 40957, 40958, 41025, 41026, 41027, 41028, 49387, 49388, 41029, 49389, 49390, 49391, 41030, 41031, 41032, 41033, 41034, 41035, 49392, 49393, 41036, 41037, 49394, 41038, 49395, 41039, 49396, 41040, 41041, 41042, 41043, 41044, 41045, 41046, 49397, 41047, 41048, 41049, 41050, 49398, 41057, 41058, 41059, 41060, 41061, 41062, 49399, 41063, 41064, 41065, 49400, 41066, 41067, 41068, 49401, 41069, 41070, 41071, 41072, 41073, 41074, 41075, 41076, 41077, 41078, 41079, 41080, 41081, 41082, 41089, 41090, 41091, 41092, 41093, 49402, 49403, 41094, 41095, 49404, 41096, 41097, 41098, 49405, 41099, 49406, 41100, 41101, 41102, 41103, 41104, 49569, 49570, 41105, 49571, 41106, 49572, 49573, 41107, 41108, 41109, 41110, 41111, 49574, 49575, 41112, 41113, 49576, 41114, 41115, 41116, 49577, 41117, 41118, 41119, 41120, 41121, 41122, 41123, 49578, 49579, 41124, 49580, 41125, 49581, 41126, 41127, 41128, 41129, 41130, 41131, 49582, 41132, 41133, 41134, 49583, 41135, 41136, 41137, 49584, 41138, 41139, 41140, 41141, 41142, 41143, 41144, 49585, 49586, 41145, 41146, 49587, 49588, 41147, 41148, 41149, 41150, 41151, 41152, 49589, 41153, 41154, 41155, 41156, 41157, 41158, 41159, 41160, 41161, 41162, 41163, 41164, 41165, 41166, 41167, 41168, 41169, 41170, 41171, 41172, 41173, 41174, 41175, 41176, 41177, 41178, 41179, 49590, 49591, 41180, 41181, 49592, 41182, 41183, 41184, 49593, 41185, 49594, 41186, 41187, 41188, 41189, 41190, 49595, 49596, 41191, 49597, 41192, 49598, 49599, 49600, 41193, 41194, 41195, 49601, 49602, 49603, 41196, 41197, 41198, 41199, 41200, 41201, 49604, 41202, 41203, 41204, 41205, 41206, 41207, 41208, 41209, 49605, 41210, 49606, 41211, 49607, 41212, 41213, 41214, 41281, 41282, 41283, 49608, 41284, 41285, 41286, 41287, 41288, 41289, 41290, 41291, 41292, 41293, 41294, 41295, 41296, 41297, 41298, 41299, 41300, 41301, 41302, 49609, 49610, 41303, 41304, 41305, 41306, 41313, 41314, 49611, 41315, 41316, 41317, 49612, 41318, 41319, 41320, 49613, 41321, 41322, 41323, 41324, 41325, 41326, 41327, 49614, 49615, 41328, 49616, 41329, 49617, 41330, 41331, 41332, 41333, 41334, 41335, 49618, 49619, 41336, 41337, 49620, 41338, 41345, 41346, 41347, 41348, 41349, 41350, 41351, 41352, 41353, 41354, 41355, 41356, 41357, 41358, 41359, 49621, 41360, 41361, 41362, 41363, 41364, 41365, 49622, 49623, 41366, 41367, 49624, 41368, 41369, 41370, 49625, 49626, 49627, 41371, 41372, 41373, 41374, 41375, 49628, 49629, 41376, 49630, 41537, 49631, 41538, 41539, 41540, 41541, 41542, 41543, 49632, 41544, 41545, 41546, 41547, 41548, 41549, 41550, 41551, 41552, 41553, 41554, 41555, 41556, 41557, 41558, 41559, 41560, 41561, 41562, 49633, 41569, 41570, 41571, 41572, 41573, 41574, 41575, 49634, 41576, 41577, 41578, 41579, 41580, 41581, 41582, 41583, 41584, 41585, 41586, 41587, 41588, 41589, 41590, 41591, 41592, 41593, 41594, 41601, 41602, 41603, 41604, 41605, 41606, 41607, 41608, 49635, 49636, 41609, 41610, 49637, 41611, 41612, 41613, 49638, 41614, 41615, 41616, 41617, 41618, 41619, 41620, 49639, 49640, 41621, 49641, 41622, 41623, 41624, 41625, 41626, 41627, 41628, 41629, 49642, 41630, 41631, 41632, 49643, 41793, 41794, 41795, 49644, 41796, 41797, 41798, 41799, 41800, 41801, 41802, 49645, 41803, 41804, 41805, 41806, 41807, 41808, 41809, 41810, 41811, 41812, 41813, 49646, 49647, 41814, 41815, 49648, 41816, 41817, 41818, 49649, 41825, 41826, 41827, 41828, 41829, 41830, 41831, 49650, 49651, 41832, 49652, 41833, 49653, 41834, 41835, 41836, 41837, 41838, 41839, 41840, 41841, 41842, 41843, 41844, 41845, 41846, 41847, 41848, 41849, 41850, 41857, 41858, 41859, 41860, 41861, 41862, 41863, 41864, 41865, 41866, 41867, 41868, 41869, 41870, 41871, 41872, 41873, 49654, 49655, 41874, 41875, 49656, 41876, 41877, 49657, 49658, 41878, 49659, 41879, 41880, 41881, 41882, 41883, 49660, 49661, 41884, 49662, 41885, 49825, 49826, 41886, 41887, 49827, 49828, 41888, 49829, 49830, 42049, 42050, 49831, 42051, 49832, 42052, 49833, 42053, 42054, 49834, 42055, 42056, 42057, 42058, 49835, 49836, 42059, 49837, 49838, 49839, 42060, 42061, 42062, 42063, 42064, 42065, 49840, 49841, 42066, 42067, 49842, 42068, 42069, 42070, 49843, 42071, 42072, 42073, 42074, 42081, 42082, 42083, 49844, 49845, 42084, 49846, 49847, 49848, 42085, 42086, 42087, 42088, 42089, 42090, 49849, 42091, 42092, 42093, 49850, 42094, 42095, 42096, 42097, 42098, 42099, 42100, 42101, 42102, 42103, 42104, 42105, 42106, 42113, 42114, 42115, 49851, 42116, 42117, 42118, 42119, 42120, 42121, 42122, 42123, 42124, 42125, 42126, 42127, 42128, 42129, 42130, 42131, 42132, 42133, 42134, 42135, 42136, 42137, 42138, 42139, 42140, 42141, 42142, 42143, 42144, 42305, 42306, 42307, 42308, 42309, 49852, 49853, 42310, 42311, 49854, 42312, 42313, 42314, 49855, 42315, 42316, 42317, 42318, 42319, 42320, 42321, 49856, 49857, 42322, 49858, 49859, 49860, 42323, 42324, 42325, 42326, 42327, 42328, 49861, 42329, 42330, 42337, 42338, 42339, 42340, 42341, 42342, 42343, 42344, 42345, 42346, 42347, 42348, 42349, 42350, 42351, 42352, 42353, 42354, 49862, 42355, 42356, 42357, 42358, 42359, 42360, 49863, 42361, 42362, 42369, 42370, 42371, 42372, 42373, 42374, 42375, 42376, 42377, 42378, 42379, 42380, 42381, 42382, 42383, 42384, 42385, 49864, 42386, 42387, 42388, 42389, 42390, 42391, 42392, 42393, 42394, 42395, 42396, 42397, 42398, 42399, 42400, 42561, 42562, 42563, 42564, 42565, 42566, 42567, 42568, 42569, 42570, 42571, 42572, 42573, 42574, 42575, 42576, 42577, 42578, 42579, 42580, 49865, 49866, 42581, 42582, 49867, 42583, 42584, 42585, 49868, 42586, 42593, 42594, 42595, 42596, 42597, 42598, 49869, 49870, 42599, 49871, 42600, 49872, 42601, 49873, 42602, 42603, 42604, 42605, 49874, 49875, 42606, 42607, 42608, 42609, 42610, 42611, 49876, 42612, 42613, 42614, 42615, 42616, 42617, 42618, 42625, 42626, 42627, 42628, 49877, 42629, 42630, 42631, 42632, 42633, 42634, 42635, 49878, 42636, 42637, 42638, 42639, 42640, 42641, 42642, 42643, 42644, 42645, 42646, 42647, 42648, 42649, 42650, 42651, 42652, 42653, 42654, 49879, 42655, 42656, 42817, 42818, 42819, 42820, 42821, 49880, 42822, 42823, 42824, 49881, 42825, 42826, 42827, 49882, 42828, 42829, 42830, 42831, 42832, 42833, 42834, 49883, 49884, 42835, 42836, 42837, 42838, 42839, 42840, 42841, 42842, 42849, 42850, 42851, 42852, 42853, 42854, 42855, 42856, 42857, 42858, 42859, 42860, 42861, 42862, 42863, 42864, 42865, 42866, 42867, 42868, 42869, 42870, 42871, 49885, 42872, 42873, 42874, 42881, 42882, 42883, 49886, 49887, 42884, 42885, 49888, 42886, 42887, 42888, 49889, 42889, 42890, 42891, 42892, 42893, 42894, 42895, 49890, 49891, 42896, 42897, 42898, 49892, 42899, 42900, 42901, 42902, 42903, 42904, 49893, 42905, 42906, 42907, 42908, 42909, 42910, 42911, 42912, 43073, 43074, 43075, 43076, 43077, 43078, 43079, 43080, 43081, 43082, 43083, 49894, 49895, 43084, 43085, 43086, 43087, 43088, 43089, 43090, 43091, 43092, 43093, 43094, 43095, 43096, 43097, 43098, 43105, 43106, 43107, 43108, 43109, 43110, 43111, 43112, 43113, 43114, 43115, 43116, 43117, 43118, 43119, 43120, 43121, 43122, 43123, 49896, 43124, 43125, 43126, 43127, 43128, 43129, 43130, 43137, 43138, 43139, 43140, 43141, 43142, 43143, 43144, 43145, 43146, 43147, 43148, 43149, 43150, 43151, 43152, 43153, 43154, 43155, 43156, 49897, 43157, 43158, 43159, 43160, 43161, 43162, 43163, 43164, 43165, 43166, 43167, 43168, 43329, 43330, 43331, 43332, 43333, 43334, 43335, 43336, 43337, 43338, 43339, 43340, 43341, 43342, 43343, 49898, 43344, 43345, 43346, 43347, 43348, 43349, 43350, 43351, 43352, 43353, 43354, 43361, 43362, 43363, 43364, 49899, 43365, 43366, 49900, 43367, 49901, 43368, 43369, 43370, 43371, 43372, 43373, 43374, 43375, 43376, 43377, 43378, 43379, 43380, 43381, 43382, 43383, 43384, 43385, 43386, 43393, 43394, 43395, 43396, 43397, 43398, 43399, 43400, 43401, 43402, 43403, 43404, 43405, 43406, 43407, 49902, 49903, 43408, 43409, 49904, 43410, 43411, 43412, 49905, 43413, 43414, 43415, 43416, 43417, 43418, 43419, 49906, 49907, 43420, 43421, 43422, 49908, 49909, 43423, 43424, 43585, 43586, 49910, 49911, 49912, 43587, 43588, 49913, 43589, 49914, 43590, 49915, 43591, 43592, 43593, 43594, 43595, 43596, 43597, 49916, 49917, 43598, 49918, 50081, 50082, 50083, 43599, 43600, 43601, 43602, 43603, 50084, 50085, 43604, 43605, 50086, 43606, 43607, 43608, 50087, 43609, 43610, 43617, 43618, 43619, 43620, 43621, 50088, 50089, 43622, 50090, 50091, 50092, 43623, 43624, 43625, 43626, 43627, 43628, 50093, 43629, 43630, 43631, 50094, 43632, 50095, 43633, 50096, 43634, 43635, 43636, 43637, 43638, 43639, 43640, 50097, 43641, 43642, 43649, 43650, 50098, 43651, 43652, 43653, 43654, 43655, 43656, 43657, 43658, 43659, 43660, 43661, 43662, 43663, 43664, 43665, 43666, 43667, 43668, 43669, 43670, 43671, 43672, 43673, 43674, 43675, 43676, 43677, 43678, 43679, 43680, 43841, 43842, 43843, 43844, 50099, 50100, 43845, 43846, 50101, 43847, 43848, 43849, 50102, 43850, 43851, 43852, 43853, 43854, 43855, 43856, 50103, 50104, 43857, 50105, 50106, 50107, 43858, 43859, 43860, 43861, 43862, 43863, 50108, 50109, 43864, 43865, 50110, 43866, 43873, 43874, 50111, 43875, 43876, 43877, 43878, 43879, 43880, 43881, 50112, 50113, 43882, 50114, 43883, 50115, 43884, 43885, 43886, 43887, 43888, 43889, 50116, 43890, 43891, 43892, 50117, 43893, 43894, 43895, 43896, 43897, 43898, 43905, 43906, 43907, 43908, 43909, 43910, 43911, 43912, 43913, 50118, 43914, 43915, 43916, 43917, 43918, 43919, 43920, 50119, 43921, 43922, 43923, 50120, 43924, 43925, 43926, 43927, 43928, 43929, 43930, 43931, 43932, 43933, 43934, 43935, 43936, 44097, 44098, 44099, 50121, 44100, 44101, 44102, 44103, 44104, 44105, 50122, 50123, 44106, 44107, 50124, 44108, 44109, 44110, 50125, 44111, 44112, 44113, 44114, 44115, 44116, 44117, 50126, 50127, 44118, 50128, 44119, 50129, 44120, 44121, 44122, 44129, 44130, 44131, 50130, 44132, 44133, 44134, 50131, 44135, 44136, 44137, 50132, 44138, 44139, 44140, 44141, 44142, 44143, 44144, 44145, 44146, 44147, 44148, 44149, 50133, 44150, 44151, 44152, 44153, 44154, 44161, 44162, 44163, 44164, 44165, 44166, 44167, 44168, 44169, 44170, 44171, 44172, 44173, 44174, 44175, 44176, 44177, 44178, 44179, 44180, 44181, 44182, 44183, 44184, 44185, 44186, 44187, 44188, 44189, 50134, 44190, 44191, 44192, 50135, 44353, 44354, 44355, 50136, 44356, 44357, 44358, 44359, 44360, 44361, 44362, 50137, 50138, 44363, 50139, 44364, 50140, 44365, 44366, 44367, 44368, 44369, 44370, 50141, 44371, 44372, 44373, 44374, 44375, 44376, 44377, 44378, 44385, 44386, 44387, 44388, 44389, 44390, 44391, 50142, 44392, 44393, 44394, 44395, 44396, 44397, 44398, 44399, 44400, 44401, 44402, 50143, 50144, 44403, 44404, 50145, 44405, 44406, 44407, 50146, 44408, 44409, 44410, 44417, 44418, 44419, 44420, 50147, 50148, 44421, 50149, 44422, 50150, 44423, 44424, 44425, 44426, 44427, 44428, 50151, 44429, 44430, 44431, 44432, 44433, 44434, 44435, 44436, 44437, 44438, 44439, 44440, 44441, 44442, 44443, 44444, 44445, 44446, 44447, 50152, 44448, 44609, 44610, 44611, 44612, 44613, 44614, 50153, 44615, 44616, 44617, 50154, 44618, 44619, 44620, 44621, 44622, 44623, 44624, 44625, 44626, 44627, 44628, 44629, 44630, 44631, 44632, 44633, 44634, 44641, 44642, 44643, 44644, 44645, 44646, 50155, 44647, 44648, 44649, 50156, 44650, 44651, 44652, 50157, 44653, 44654, 44655, 44656, 44657, 44658, 44659, 50158, 50159, 44660, 50160, 44661, 50161, 44662, 44663, 44664, 44665, 44666, 44673, 50162, 44674, 44675, 44676, 50163, 44677, 44678, 44679, 50164, 44680, 44681, 44682, 44683, 44684, 44685, 44686, 50165, 44687, 44688, 44689, 44690, 50166, 44691, 44692, 44693, 44694, 44695, 44696, 50167, 50168, 44697, 44698, 50169, 44699, 44700, 44701, 50170, 44702, 44703, 44704, 44865, 44866, 44867, 44868, 50171, 50172, 44869, 50173, 44870, 50174, 44871, 44872, 44873, 44874, 44875, 44876, 44877, 44878, 44879, 44880, 44881, 44882, 44883, 44884, 44885, 44886, 44887, 44888, 44889, 44890, 44897, 44898, 44899, 44900, 44901, 44902, 44903, 44904, 44905, 44906, 44907, 44908, 44909, 44910, 50337, 50338, 44911, 44912, 50339, 44913, 44914, 50340, 50341, 50342, 44915, 44916, 44917, 44918, 44919, 44920, 50343, 50344, 44921, 50345, 44922, 50346, 44929, 44930, 44931, 44932, 44933, 44934, 50347, 50348, 44935, 44936, 50349, 44937, 44938, 44939, 50350, 44940, 44941, 44942, 44943, 44944, 44945, 44946, 50351, 50352, 44947, 50353, 44948, 50354, 44949, 44950, 44951, 44952, 44953, 44954, 50355, 50356, 44955, 44956, 50357, 44957, 44958, 44959, 50358, 44960, 45121, 45122, 45123, 45124, 45125, 45126, 50359, 50360, 45127, 50361, 50362, 50363, 45128, 45129, 45130, 45131, 45132, 45133, 50364, 50365, 45134, 45135, 45136, 45137, 45138, 45139, 45140, 45141, 45142, 45143, 45144, 45145, 45146, 45153, 45154, 45155, 45156, 45157, 45158, 50366, 45159, 45160, 45161, 45162, 45163, 45164, 45165, 45166, 45167, 45168, 45169, 45170, 45171, 45172, 45173, 45174, 45175, 45176, 45177, 45178, 45185, 45186, 45187, 45188, 45189, 45190, 45191, 45192, 45193, 45194, 45195, 45196, 45197, 45198, 50367, 50368, 45199, 45200, 50369, 45201, 45202, 50370, 50371, 45203, 45204, 45205, 45206, 45207, 45208, 45209, 50372, 50373, 45210, 50374, 50375, 50376, 45211, 45212, 45213, 45214, 45215, 45216, 50377, 50378, 45377, 45378, 50379, 45379, 45380, 45381, 50380, 45382, 45383, 45384, 45385, 45386, 45387, 45388, 50381, 50382, 45389, 50383, 45390, 50384, 45391, 45392, 45393, 45394, 45395, 45396, 50385, 45397, 45398, 45399, 50386, 45400, 45401, 45402, 50387, 45409, 45410, 45411, 45412, 45413, 45414, 45415, 50388, 50389, 45416, 50390, 50391, 50392, 45417, 45418, 45419, 45420, 45421, 45422, 50393, 45423, 45424, 45425, 45426, 45427, 45428, 45429, 45430, 45431, 45432, 45433, 45434, 45441, 45442, 45443, 45444, 45445, 45446, 45447, 45448, 45449, 45450, 45451, 45452, 45453, 45454, 45455, 50394, 50395, 45456, 45457, 50396, 45458, 45459, 45460, 50397, 45461, 45462, 45463, 45464, 45465, 45466, 45467, 50398, 50399, 45468, 50400, 45469, 50401, 45470, 45471, 45472, 45633, 45634, 45635, 50402, 50403, 45636, 45637, 50404, 45638, 45639, 45640, 50405, 45641, 45642, 45643, 45644, 45645, 45646, 45647, 50406, 45648, 45649, 45650, 45651, 50407, 45652, 45653, 45654, 45655, 45656, 45657, 50408, 45658, 45665, 45666, 45667, 45668, 45669, 45670, 45671, 45672, 45673, 45674, 45675, 45676, 45677, 45678, 45679, 45680, 45681, 45682, 45683, 50409, 45684, 45685, 45686, 45687, 45688, 45689, 50410, 45690, 45697, 45698, 45699, 45700, 45701, 45702, 50411, 45703, 45704, 45705, 45706, 45707, 45708, 45709, 45710, 45711, 45712, 45713, 45714, 45715, 45716, 45717, 45718, 45719, 45720, 45721, 50412, 45722, 45723, 45724, 45725, 45726, 45727, 45728, 45889, 45890, 45891, 45892, 45893, 45894, 45895, 45896, 45897, 45898, 45899, 45900, 45901, 45902, 45903, 45904, 45905, 45906, 45907, 45908, 50413, 50414, 45909, 45910, 50415, 45911, 45912, 45913, 50416, 45914, 45921, 45922, 45923, 45924, 45925, 45926, 50417, 50418, 45927, 50419, 45928, 50420, 45929, 45930, 45931, 45932, 45933, 45934, 50421, 45935, 45936, 45937, 50422, 45938, 45939, 45940, 50423, 45941, 45942, 45943, 45944, 45945, 45946, 45953, 45954, 45955, 45956, 45957, 45958, 50424, 45959, 45960, 45961, 45962, 45963, 45964, 50425, 45965, 45966, 45967, 45968, 45969, 45970, 45971, 45972, 45973, 45974, 45975, 45976, 45977, 45978, 45979, 45980, 45981, 45982, 45983, 45984, 50426, 46145, 46146, 46147, 46148, 46149, 46150, 50427, 50428, 46151, 46152, 50429, 46153, 46154, 46155, 50430, 46156, 46157, 46158, 46159, 46160, 46161, 46162, 50593, 50594, 46163, 50595, 46164, 50596, 46165, 46166, 46167, 46168, 46169, 46170, 50597, 46177, 46178, 46179, 50598, 46180, 46181, 46182, 50599, 46183, 46184, 46185, 46186, 46187, 46188, 46189, 50600, 46190, 46191, 46192, 46193, 46194, 46195, 46196, 46197, 46198, 46199, 46200, 50601, 50602, 46201, 46202, 50603, 46209, 46210, 46211, 50604, 46212, 46213, 46214, 46215, 46216, 46217, 46218, 50605, 50606, 46219, 46220, 46221, 50607, 46222, 46223, 46224, 46225, 46226, 46227, 46228, 46229, 46230, 46231, 46232, 46233, 46234, 46235, 46236, 46237, 46238, 46239, 46240, 46401, 46402, 46403, 46404, 46405, 46406, 46407, 46408, 46409, 46410, 46411, 46412, 46413, 46414, 46415, 50608, 50609, 46416, 46417, 50610, 46418, 46419, 46420, 50611, 46421, 46422, 46423, 46424, 46425, 46426, 46433, 50612, 50613, 46434, 50614, 46435, 50615, 46436, 46437, 46438, 46439, 46440, 46441, 50616, 50617, 46442, 46443, 50618, 46444, 46445, 46446, 50619, 50620, 46447, 46448, 46449, 46450, 46451, 46452, 50621, 50622, 46453, 50623, 50624, 50625, 46454, 46455, 46456, 46457, 46458, 46465, 50626, 50627, 46466, 46467, 50628, 46468, 46469, 46470, 50629, 46471, 46472, 46473, 46474, 46475, 46476, 46477, 50630, 50631, 46478, 50632, 50633, 50634, 46479, 46480, 46481, 46482, 46483, 46484, 50635, 46485, 46486, 46487, 46488, 46489, 46490, 46491, 46492, 46493, 46494, 46495, 46496, 46657, 46658, 46659, 46660, 46661, 46662, 46663, 46664, 50636, 46665, 46666, 46667, 46668, 46669, 46670, 46671, 46672, 46673, 46674, 46675, 46676, 46677, 46678, 46679, 46680, 46681, 46682, 46689, 46690, 46691, 46692, 46693, 46694, 46695, 46696, 46697, 46698, 46699, 46700, 46701, 46702, 46703, 46704, 50637, 50638, 46705, 46706, 50639, 46707, 46708, 46709, 50640, 46710, 50641, 46711, 46712, 46713, 46714, 46721, 50642, 50643, 46722, 50644, 50645, 50646, 46723, 46724, 46725, 46726, 46727, 46728, 50647, 50648, 46729, 46730, 50649, 46731, 46732, 46733, 50650, 46734, 46735, 46736, 46737, 46738, 46739, 46740, 50651, 50652, 46741, 50653, 46742, 50654, 46743, 46744, 46745, 46746, 46747, 46748, 50655, 46749, 46750, 46751, 50656, 46752, 46913, 46914, 46915, 46916, 46917, 46918, 46919, 46920, 46921, 46922, 46923, 46924, 46925, 46926, 50657, 46927, 46928, 46929, 46930, 46931, 46932, 46933, 50658, 46934, 46935, 46936, 50659, 46937, 46938, 46945, 46946, 46947, 46948, 46949, 46950, 46951, 46952, 46953, 46954, 46955, 46956, 46957, 46958, 46959, 46960, 46961, 46962, 46963, 46964, 46965, 50660, 50661, 46966, 46967, 50662, 46968, 46969, 46970, 50663, 46977, 46978, 46979, 46980, 46981, 46982, 46983, 50664, 50665, 46984, 50666, 46985, 50667, 46986, 46987, 46988, 46989, 50668, 46990, 50669, 46991, 46992, 46993, 50670, 46994, 46995, 46996, 46997, 46998, 46999, 47000, 47001, 47002, 47003, 47004, 47005, 47006, 47007, 47008, 47169, 47170, 47171, 47172, 47173, 47174, 47175, 47176, 50671, 47177, 47178, 47179, 47180, 47181, 47182, 47183, 47184, 47185, 47186, 47187, 47188, 47189, 47190, 47191, 47192, 47193, 47194, 47201, 47202, 47203, 47204, 47205, 47206, 47207, 47208, 47209, 50672, 47210, 47211, 47212, 50673, 47213, 47214, 47215, 47216, 47217, 47218, 47219, 47220, 47221, 47222, 47223, 47224, 47225, 47226, 50674, 47233, 50675, 47234, 47235, 47236, 47237, 47238, 47239, 50676, 47240, 47241, 47242, 47243, 47244, 47245, 47246, 47247, 47248, 47249, 47250, 47251, 47252, 47253, 47254, 47255, 47256, 47257, 47258, 47259, 47260, 47261, 47262, 47263, 47264, 47425, 47426, 50677, 50678, 47427, 47428, 50679, 47429, 47430, 47431, 50680, 47432, 47433, 47434, 47435, 47436, 47437, 47438, 50681, 50682, 47439, 50683, 47440, 50684, 47441, 47442, 47443, 47444, 47445, 47446, 50685, 47447, 47448, 47449, 47450, 47457, 47458, 47459, 47460, 47461, 47462, 47463, 47464, 47465, 47466, 47467, 47468, 47469, 47470, 47471, 50686, 47472, 47473, 47474, 47475, 47476, 47477, 47478, 50849, 47479, 47480, 47481, 47482, 47489, 47490, 47491, 47492, 47493, 47494, 47495, 47496, 47497, 47498, 47499, 47500, 47501, 47502, 47503, 47504, 47505, 47506, 47507, 47508, 47509, 47510, 47511, 50850, 50851, 47512, 47513, 50852, 47514, 47515, 47516, 50853, 47517, 47518, 47519, 47520, 47681, 47682, 47683, 50854, 50855, 47684, 47685, 47686, 50856, 47687, 47688, 47689, 47690, 47691, 47692, 50857, 47693, 47694, 47695, 50858, 47696, 47697, 47698, 50859, 47699, 47700, 47701, 47702, 47703, 47704, 47705, 50860, 47706, 47713, 47714, 47715, 50861, 47716, 47717, 47718, 47719, 47720, 47721, 50862, 50863, 47722, 47723, 50864, 47724, 47725, 50865, 50866, 47726, 50867, 47727, 47728, 47729, 47730, 47731, 50868, 50869, 47732, 50870, 47733, 47734, 47735, 47736, 47737, 47738, 47745, 47746, 50871, 47747, 47748, 47749, 50872, 47750, 47751, 47752, 50873, 47753, 47754, 47755, 47756, 47757, 47758, 47759, 50874, 50875, 47760, 47761, 47762, 47763, 47764, 47765, 47766, 47767, 47768, 47769, 50876, 50877, 47770, 47771, 50878, 47772, 47773, 47774, 50879, 47775, 47776, 47937, 47938, 47939, 47940, 47941, 50880, 50881, 47942, 50882, 47943, 50883, 47944, 47945, 47946, 47947, 47948, 47949, 50884, 50885, 50886, 47950, 50887, 47951, 47952, 47953, 50888, 47954, 50889, 47955, 47956, 47957, 47958, 47959, 50890, 50891, 47960, 50892, 50893, 50894, 47961, 47962, 47969, 50895, 47970, 47971, 50896, 50897, 47972, 47973, 50898, 47974, 47975, 47976, 50899, 47977, 47978, 47979, 47980, 47981, 47982, 47983, 50900, 50901, 47984, 50902, 50903, 50904, 47985, 47986, 47987, 47988, 47989, 47990, 50905, 50906, 47991, 47992, 47993, 47994, 48001, 48002, 48003, 48004, 48005, 48006, 48007, 48008, 48009, 48010, 48011, 48012, 48013, 48014, 48015, 48016, 48017, 48018, 48019, 48020, 48021, 48022, 48023, 48024, 48025, 48026, 48027, 48028, 48029, 48030, 48031, 48032, 48193, 48194, 48195, 48196, 48197, 48198, 48199, 48200, 48201, 48202, 48203, 48204, 48205, 48206, 48207, 48208, 48209, 48210, 50907, 50908, 48211, 48212, 50909, 48213, 48214, 48215, 50910, 48216, 48217, 48218, 48225, 48226, 48227, 48228, 50911, 50912, 48229, 50913, 50914, 50915, 48230, 48231, 48232, 48233, 48234, 48235, 50916, 50917, 48236, 48237, 50918, 48238, 48239, 48240, 50919, 48241, 48242, 48243, 48244, 48245, 48246, 48247, 50920, 50921, 48248, 50922, 48249, 50923, 48250, 48257, 48258, 48259, 48260, 48261, 50924, 48262, 48263, 48264, 50925, 48265, 48266, 48267, 50926, 48268, 48269, 48270, 48271, 48272, 48273, 48274, 50927, 50928, 48275, 48276, 50929, 50930, 48277, 48278, 48279, 48280, 48281, 48282, 50931, 48283, 48284, 48285, 48286, 48287, 48288, 48449, 50932, 48450, 48451, 48452, 48453, 48454, 48455, 48456, 48457, 50933, 48458, 50934, 48459, 48460, 48461, 48462, 48463, 48464, 48465, 48466, 50935, 50936, 48467, 48468, 50937, 48469, 48470, 48471, 50938, 48472, 48473, 48474, 48481, 48482, 48483, 48484, 50939, 50940, 48485, 50941, 48486, 50942, 48487, 48488, 48489, 48490, 48491, 48492, 51105, 48493, 48494, 48495, 48496, 48497, 48498, 48499, 48500, 48501, 48502, 48503, 48504, 48505, 48506, 48513, 48514, 48515, 48516, 48517, 48518, 51106, 48519, 48520, 48521, 48522, 48523, 48524, 48525, 48526, 48527, 48528, 48529, 48530, 48531, 48532, 48533, 48534, 48535, 48536, 48537, 48538, 48539, 48540, 48541, 48542, 48543, 48544, 48705, 48706, 48707, 48708, 48709, 48710, 48711, 48712, 51107, 48713, 48714, 48715, 51108, 48716, 48717, 48718, 48719, 48720, 48721, 48722, 48723, 48724, 48725, 48726, 48727, 48728, 48729, 48730, 48737, 48738, 48739, 48740, 48741, 48742, 48743, 48744, 51109, 48745, 48746, 48747, 51110, 48748, 48749, 48750, 51111, 48751, 48752, 48753, 48754, 48755, 48756, 48757, 48758, 51112, 48759, 51113, 48760, 48761, 48762, 48769, 48770, 48771, 48772, 48773, 51114, 51115, 48774, 48775, 51116, 48776, 48777, 51117, 51118, 48778, 51119, 48779, 48780, 48781, 48782, 48783, 51120, 51121, 48784, 51122, 48785, 51123, 48786, 48787, 48788, 48789, 48790, 48791, 51124, 48792, 48793, 48794, 48795, 48796, 48797, 48798, 48799, 48800, 48961, 48962, 48963, 48964, 48965, 48966, 48967, 48968, 48969, 48970, 48971, 51125, 48972, 48973, 48974, 48975, 48976, 48977, 48978, 48979, 48980, 48981, 48982, 48983, 48984, 48985, 48986, 48993, 48994, 48995, 48996, 48997, 48998, 48999, 49000, 49001, 49002, 49003, 49004, 49005, 49006, 49007, 49008, 49009, 49010, 49011, 51126, 49012, 49013, 49014, 51127, 49015, 49016, 49017, 51128, 49018, 49025, 49026, 49027, 49028, 49029, 49030, 51129, 49031, 49032, 51130, 49033, 49034, 49035, 49036, 49037, 49038, 49039, 49040, 51131, 49041, 49042, 49043, 51132, 49044, 49045, 49046, 51133, 49047, 49048, 49049, 49050, 49051, 49052, 49053, 51134, 49054, 49055, 51135, 49056, 51136, 49217, 49218, 49219, 49220, 49221, 49222, 51137, 49223, 49224, 49225, 51138, 49226, 49227, 49228, 51139, 49229, 49230, 49231, 49232, 49233, 49234, 49235, 51140, 51141, 49236, 51142, 49237, 49238, 49239, 49240, 49241, 49242, 49249, 49250, 49251, 49252, 49253, 49254, 49255, 49256, 49257, 49258, 49259, 49260, 49261, 49262, 49263, 49264, 49265, 49266, 49267, 49268, 49269, 49270, 49271, 49272, 49273, 49274, 49281, 49282, 49283, 49284, 51143, 51144, 49285, 49286, 51145, 49287, 49288, 49289, 51146, 49290, 49291, 49292, 49293, 49294, 49295, 49296, 51147, 51148, 49297, 51149, 49298, 51150, 49299, 49300, 49301, 49302, 49303, 49304, 51151, 51152, 49305, 49306, 51153, 49307, 49308, 49309, 51154, 49310, 49311, 49312, 49473, 51155, 49474, 49475, 51156, 51157, 49476, 51158, 49477, 51159, 49478, 49479, 49480, 49481, 49482, 49483, 51160, 51161, 49484, 49485, 51162, 49486, 49487, 49488, 51163, 49489, 49490, 49491, 49492, 49493, 49494, 49495, 51164, 51165, 49496, 51166, 51167, 51168, 49497, 49498, 49505, 49506, 49507, 49508, 51169, 49509, 49510, 49511, 49512, 49513, 49514, 49515, 49516, 49517, 49518, 49519, 49520, 49521, 49522, 49523, 49524, 49525, 49526, 49527, 49528, 51170, 49529, 49530, 49537, 49538, 49539, 49540, 49541, 49542, 49543, 49544, 49545, 49546, 49547, 49548, 49549, 49550, 49551, 49552, 49553, 49554, 49555, 49556, 49557, 49558, 49559, 49560, 49561, 49562, 49563, 49564, 49565, 49566, 49567, 49568, 51171, 51172, 49729, 49730, 51173, 49731, 49732, 49733, 51174, 49734, 51175, 49735, 49736, 49737, 49738, 49739, 51176, 51177, 49740, 51178, 49741, 51179, 49742, 49743, 49744, 49745, 49746, 49747, 51180, 51181, 49748, 49749, 51182, 49750, 49751, 49752, 51183, 49753, 49754, 49761, 49762, 49763, 49764, 49765, 51184, 51185, 49766, 51186, 49767, 51187, 49768, 49769, 49770, 49771, 49772, 49773, 51188, 51189, 49774, 49775, 51190, 49776, 49777, 49778, 51191, 49779, 49780, 49781, 49782, 49783, 49784, 49785, 51192, 51193, 49786, 51194, 51195, 51196, 49793, 49794, 49795, 49796, 49797, 49798, 51197, 49799, 49800, 49801, 51198, 49802, 49803, 49804, 51361, 49805, 49806, 49807, 49808, 49809, 49810, 49811, 49812, 51362, 49813, 49814, 49815, 49816, 49817, 49818, 49819, 49820, 49821, 49822, 51363, 51364, 49823, 49824, 51365, 49985, 49986, 49987, 51366, 49988, 49989, 49990, 49991, 51367, 49992, 49993, 51368, 51369, 49994, 51370, 49995, 51371, 49996, 49997, 49998, 51372, 49999, 50000, 51373, 51374, 50001, 50002, 51375, 50003, 50004, 50005, 51376, 50006, 50007, 50008, 50009, 50010, 50017, 50018, 50019, 50020, 50021, 51377, 50022, 51378, 50023, 50024, 50025, 50026, 50027, 50028, 51379, 51380, 50029, 50030, 51381, 50031, 50032, 50033, 50034, 50035, 50036, 50037, 50038, 50039, 50040, 50041, 50042, 50049, 50050, 51382, 50051, 51383, 50052, 50053, 50054, 50055, 50056, 50057, 51384, 51385, 50058, 50059, 51386, 50060, 50061, 50062, 51387, 50063, 50064, 50065, 50066, 50067, 50068, 50069, 50070, 51388, 50071, 51389, 50072, 51390, 50073, 50074, 50075, 50076, 50077, 50078, 51391, 50079, 50080, 50241, 51392, 50242, 50243, 50244, 51393, 50245, 50246, 50247, 50248, 50249, 50250, 50251, 50252, 51394, 50253, 51395, 50254, 50255, 50256, 50257, 50258, 50259, 50260, 50261, 51396, 51397, 50262, 50263, 51398, 50264, 50265, 50266, 51399, 50273, 50274, 50275, 50276, 51400, 50277, 50278, 51401, 50279, 50280, 51402, 50281, 51403, 50282, 50283, 50284, 50285, 50286, 50287, 51404, 50288, 50289, 50290, 51405, 50291, 50292, 50293, 51406, 50294, 50295, 50296, 50297, 50298, 50305, 50306, 51407, 50307, 50308, 50309, 50310, 51408, 50311, 50312, 50313, 50314, 50315, 50316, 51409, 51410, 50317, 50318, 51411, 50319, 50320, 50321, 51412, 50322, 50323, 50324, 50325, 50326, 50327, 50328, 50329, 50330, 50331, 50332, 50333, 51413, 50334, 50335, 50336, 50497, 50498, 50499, 51414, 51415, 50500, 50501, 51416, 50502, 50503, 50504, 51417, 50505, 50506, 50507, 50508, 50509, 50510, 50511, 51418, 51419, 50512, 51420, 50513, 51421, 50514, 50515, 50516, 50517, 50518, 50519, 51422, 51423, 50520, 50521, 51424, 50522, 50529, 50530, 51425, 50531, 50532, 50533, 50534, 50535, 50536, 50537, 51426, 50538, 50539, 51427, 50540, 51428, 50541, 50542, 50543, 50544, 50545, 50546, 51429, 51430, 50547, 50548, 51431, 50549, 51432, 51433, 51434, 51435, 50550, 50551, 50552, 50553, 50554, 50561, 51436, 51437, 50562, 51438, 50563, 51439, 50564, 50565, 50566, 51440, 50567, 50568, 51441, 50569, 50570, 50571, 51442, 50572, 50573, 50574, 51443, 50575, 50576, 50577, 50578, 50579, 50580, 50581, 51444, 51445, 50582, 50583, 50584, 51446, 50585, 50586, 50587, 50588, 50589, 50590, 51447, 51448, 50591, 50592, 51449, 50753, 50754, 50755, 51450, 50756, 50757, 50758, 50759, 50760, 50761, 50762, 51451, 51452, 50763, 51453, 50764, 51454, 50765, 50766, 50767, 50768, 50769, 50770]);
		encode2 = $toNativeArray($kindUint16, [41386, 0, 0, 41390, 41391, 0, 0, 41392, 41393, 0, 0, 41683, 41684, 0, 0, 0, 41381, 41382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41654, 0, 41415, 41416, 0, 0, 0, 0, 0, 0, 0, 41432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43514, 0, 43515, 43516, 43517, 43518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41417, 0, 0, 0, 0, 0, 41653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42916, 0, 0, 41696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41701, 41698, 0, 0, 0, 42969, 0, 0, 0, 0, 41418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43255, 43256, 0, 0, 0, 0, 0, 0, 43259, 43260, 43261, 43262, 0, 42416, 42417, 42418, 42419, 42420, 42421, 42422, 42423, 42424, 42425, 0, 0, 0, 0, 0, 0, 42401, 42402, 42403, 42404, 42405, 42406, 42407, 42408, 42409, 42410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41447, 41448, 41446, 41449, 41450, 41685, 41688, 41686, 41689, 41687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41633, 0, 41634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41635, 0, 41427, 41636, 0, 0, 0, 41428, 41460, 0, 0, 41461, 0, 0, 0, 41651, 0, 41650, 0, 0, 0, 0, 0, 0, 0, 0, 41454, 0, 0, 41456, 41412, 0, 41424, 0, 0, 0, 0, 41387, 0, 41468, 41469, 41467, 41466, 41458, 41459, 0, 41649, 0, 0, 0, 0, 0, 41413, 41457, 0, 0, 0, 0, 0, 0, 41389, 41455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41409, 41429, 0, 0, 41410, 41411, 0, 0, 0, 0, 41452, 41453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41464, 41465, 0, 0, 41462, 41463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43239, 43240, 43241, 43242, 43243, 43244, 43245, 43246, 43247, 43248, 43249, 43250, 43251, 43252, 43253, 0, 0, 0, 0, 0, 43495, 43496, 43497, 43498, 43499, 43500, 43501, 43502, 43503, 43504, 43505, 43506, 43507, 43508, 43509, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43469, 43470, 43471, 43472, 43473, 43474, 43475, 43476, 43477, 43478, 43479, 43480, 43481, 43482, 43483, 43484, 43485, 43486, 43487, 43488, 43489, 43490, 43491, 43492, 43493, 43494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43213, 43214, 43215, 43216, 43217, 43218, 43219, 43220, 43221, 43222, 43223, 43224, 43225, 43226, 43227, 43228, 43229, 43230, 43231, 43232, 43233, 43234, 43235, 43236, 43237, 43238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42657, 42668, 42658, 42669, 0, 0, 0, 0, 0, 0, 0, 0, 42659, 42696, 42695, 42670, 42660, 42690, 42689, 42671, 42662, 42694, 42693, 42673, 42661, 42692, 42691, 42672, 42663, 42684, 42697, 42698, 42679, 42699, 42700, 42674, 42665, 42686, 42701, 42702, 42681, 42703, 42704, 42676, 42664, 42705, 42706, 42680, 42685, 42707, 42708, 42675, 42666, 42709, 42710, 42682, 42687, 42711, 42712, 42677, 42667, 42713, 42714, 42683, 42715, 42716, 42688, 42717, 42718, 42719, 42720, 42721, 42722, 42723, 42724, 42678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41441, 41440, 0, 41667, 41671, 41672, 41675, 41674, 41673, 41676, 0, 0, 0, 0, 0, 0, 0, 0, 41443, 41442, 0, 0, 41658, 41657, 0, 0, 0, 0, 41445, 41444, 0, 0, 41656, 41655, 0, 0, 0, 0, 41439, 41438, 41666, 0, 0, 41435, 0, 0, 41437, 41436, 41668, 41669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41434, 41433, 0, 0, 0, 0, 0, 0, 0, 41679, 41678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41680, 0, 41681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41423, 0, 41422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41660, 41661, 0, 41664, 41659, 41662, 0, 41663, 41677, 41691, 41692, 0, 41693, 41690]);
		encode3 = $toNativeArray($kindUint16, [41377, 41378, 41379, 41384, 0, 0, 0, 0, 41396, 41397, 41398, 41399, 41400, 41401, 41402, 41403, 41404, 41405, 0, 41451, 41394, 41395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43681, 43682, 43683, 43684, 43685, 43686, 43687, 43688, 43689, 43690, 43691, 43692, 43693, 43694, 43695, 43696, 43697, 43698, 43699, 43700, 43701, 43702, 43703, 43704, 43705, 43706, 43707, 43708, 43709, 43710, 43711, 43712, 43713, 43714, 43715, 43716, 43717, 43718, 43719, 43720, 43721, 43722, 43723, 43724, 43725, 43726, 43727, 43728, 43729, 43730, 43731, 43732, 43733, 43734, 43735, 43736, 43737, 43738, 43739, 43740, 43741, 43742, 43743, 43744, 43745, 43746, 43747, 43748, 43749, 43750, 43751, 43752, 43753, 43754, 43755, 43756, 43757, 43758, 43759, 43760, 43761, 43762, 43763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43937, 43938, 43939, 43940, 43941, 43942, 43943, 43944, 43945, 43946, 43947, 43948, 43949, 43950, 43951, 43952, 43953, 43954, 43955, 43956, 43957, 43958, 43959, 43960, 43961, 43962, 43963, 43964, 43965, 43966, 43967, 43968, 43969, 43970, 43971, 43972, 43973, 43974, 43975, 43976, 43977, 43978, 43979, 43980, 43981, 43982, 43983, 43984, 43985, 43986, 43987, 43988, 43989, 43990, 43991, 43992, 43993, 43994, 43995, 43996, 43997, 43998, 43999, 44000, 44001, 44002, 44003, 44004, 44005, 44006, 44007, 44008, 44009, 44010, 44011, 44012, 44013, 44014, 44015, 44016, 44017, 44018, 44019, 44020, 44021, 44022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42145, 42146, 42147, 42148, 42149, 42150, 42151, 42152, 42153, 42154, 42155, 42156, 42157, 42158, 42159, 42160, 42161, 42162, 42163, 42164, 42165, 42166, 42167, 42168, 42169, 42170, 42171, 42172, 42173, 42174, 42175, 42176, 42177, 42178, 42179, 42180, 42181, 42182, 42183, 42184, 42185, 42186, 42187, 42188, 42189, 42190, 42191, 42192, 42193, 42194, 42195, 42196, 42197, 42198, 42199, 42200, 42201, 42202, 42203, 42204, 42205, 42206, 42207, 42208, 42209, 42210, 42211, 42212, 42213, 42214, 42215, 42216, 42217, 42218, 42219, 42220, 42221, 42222, 42223, 42224, 42225, 42226, 42227, 42228, 42229, 42230, 42231, 42232, 42233, 42234, 42235, 42236, 42237, 42238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43441, 43442, 43443, 43444, 43445, 43446, 43447, 43448, 43449, 43450, 43451, 43452, 43453, 43454, 43455, 43456, 43457, 43458, 43459, 43460, 43461, 43462, 43463, 43464, 43465, 43466, 43467, 43468, 41695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43185, 43186, 43187, 43188, 43189, 43190, 43191, 43192, 43193, 43194, 43195, 43196, 43197, 43198, 43199, 43200, 43201, 43202, 43203, 43204, 43205, 43206, 43207, 43208, 43209, 43210, 43211, 43212, 0, 0, 0, 41694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42953, 42954, 42955, 42956, 42957, 0, 0, 0, 42938, 42939, 42972, 42973, 42974, 42934, 42935, 42936, 42964, 42965, 42966, 42967, 42968, 42913, 42914, 42915, 42917, 42923, 42924, 42925, 42926, 42927, 42928, 42929, 42930, 42931, 42932, 42919, 42920, 42921, 42922, 42941, 42942, 42981, 42982, 42983, 42984, 42977, 42978, 42979, 42943, 42944, 42945, 42946, 42947, 42948, 42949, 42950, 42951, 42952, 42958, 42959, 42960, 42961, 42962, 42963, 42970, 42971, 41699, 42988, 42918, 42976, 42991, 41697, 42940, 42989, 42933, 0, 0, 0, 0, 42937, 42986, 0, 0, 42987, 0, 0, 42975, 0, 41700, 0, 0, 42980, 42990, 42985]);
		encode4 = $toNativeArray($kindUint16, [41646, 0, 0, 41652, 0, 0, 41431, 41383, 0, 43171, 0, 0, 41385, 41703, 0, 41414, 41406, 43511, 43512, 41637, 0, 41682, 41380, 41644, 43510, 43180, 0, 43257, 43254, 43258, 41647, 0, 0, 0, 0, 0, 0, 43169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43170, 0, 0, 0, 0, 0, 0, 41407, 43178, 0, 0, 0, 0, 0, 43181, 43436, 0, 0, 0, 0, 0, 0, 43425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43427, 0, 0, 0, 0, 0, 0, 41408, 43434, 0, 0, 0, 0, 0, 43437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43172, 43428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43429, 43174, 43430, 0, 0, 0, 0, 43431, 0, 0, 0, 0, 0, 0, 43176, 43432, 43177, 43433, 0, 0, 0, 0, 0, 0, 43440, 43183, 43439, 0, 0, 0, 0, 0, 0, 43179, 43435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43182, 43438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41639, 0, 0, 0, 0, 0, 0, 0, 0, 41648, 0, 0, 0, 0, 0, 0, 0, 41640, 41643, 41642, 41645, 0, 41641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42433, 42434, 42435, 42436, 42437, 42438, 42439, 42440, 42441, 42442, 42443, 42444, 42445, 42446, 42447, 42448, 42449, 0, 42450, 42451, 42452, 42453, 42454, 42455, 42456, 0, 0, 0, 0, 0, 0, 0, 42465, 42466, 42467, 42468, 42469, 42470, 42471, 42472, 42473, 42474, 42475, 42476, 42477, 42478, 42479, 42480, 42481, 0, 42482, 42483, 42484, 42485, 42486, 42487, 42488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44193, 44194, 44195, 44196, 44197, 44198, 44200, 44201, 44202, 44203, 44204, 44205, 44206, 44207, 44208, 44209, 44210, 44211, 44212, 44213, 44214, 44215, 44216, 44217, 44218, 44219, 44220, 44221, 44222, 44223, 44224, 44225, 44241, 44242, 44243, 44244, 44245, 44246, 44248, 44249, 44250, 44251, 44252, 44253, 44254, 44255, 44256, 44257, 44258, 44259, 44260, 44261, 44262, 44263, 44264, 44265, 44266, 44267, 44268, 44269, 44270, 44271, 44272, 44273, 0, 44247]);
		encode5 = $toNativeArray($kindUint16, [52176, 52182, 52199, 52687, 52712, 52909, 53243, 53410, 53432, 53456, 53469, 53716, 53717, 53720, 53723, 53724, 53725, 53726, 53727, 53728, 53730, 53731, 53732, 53733, 53734, 53736, 53737, 53738, 53739, 53741, 53743, 53744, 53746, 53750, 53754, 53756, 53757, 53758, 53922, 53923, 53927, 53928, 53929, 53930, 53931, 53933, 53938, 53950, 53954, 53955, 53956, 53958, 53959, 53960, 53961, 53962, 53963, 53965, 53966, 53967, 53968, 53969, 53970, 53971, 53972, 53973, 53974, 53975, 53977, 53978, 53982, 53983, 53985, 53986, 53988, 53989, 53990, 53991, 53992, 53993, 53994, 53995, 54000, 54001, 54002, 54003, 54004, 54005, 54007, 54008, 54502, 54524, 54693, 54699, 54702, 54968, 54989, 55243, 55268, 56261, 56292, 56485, 56741, 56789, 56820, 57084, 57086, 57267, 57313, 57320, 57585, 57773, 57837, 58357, 58529, 58537, 58798, 58801, 58802, 58809, 58811, 58812, 58820, 58830, 58832, 58834, 58838, 58874, 58875, 58876, 58878, 59041, 59044, 59047, 59053, 59055, 59056, 59057, 59059, 59063, 59064, 59068, 59076, 59078, 59079, 59082, 59090, 59094, 59097, 59100, 59103, 59105, 59108, 59109, 59110, 59112, 59114, 59115, 59116, 59119, 59121, 59122, 59125, 59126, 59127, 59129, 59297, 59302, 59305, 59306, 59308, 59309, 59312, 59327, 59329, 59334, 59335, 59339, 59341, 59343, 59344, 59347, 59359, 59364, 59366, 59383, 59623, 59624, 59632, 59633, 59639, 59641, 59643, 59646, 59815, 59820, 59852, 59895, 60097, 60133, 60148, 60151, 60156, 60158, 60324, 60327, 60329, 60330, 60346, 60347, 60349, 60353, 60354, 60358, 60359, 60364, 60367, 60368, 60369, 60370, 60376, 60582, 60583, 60586, 60591, 60592, 60593, 60594, 60597, 60600, 60602, 60608, 60609, 60613, 60614, 60617, 60618, 60629, 60637, 60638, 60641, 60644, 60647, 60648, 60663, 60664, 60666, 60833, 60834, 60835, 60910, 61147, 62141, 62202, 62385, 62631, 62702, 63220, 63222, 63416, 63432, 63443, 63707, 63728, 64161, 64162, 64230, 64681]);
		encode6 = $toNativeArray($kindUint16, [41889, 41890, 41891, 41892, 41893, 41894, 41895, 41896, 41897, 41898, 41899, 41900, 41901, 41902, 41903, 41904, 41905, 41906, 41907, 41908, 41909, 41910, 41911, 41912, 41913, 41914, 41915, 41916, 41917, 41918, 41919, 41920, 41921, 41922, 41923, 41924, 41925, 41926, 41927, 41928, 41929, 41930, 41931, 41932, 41933, 41934, 41935, 41936, 41937, 41938, 41939, 41940, 41941, 41942, 41943, 41944, 41945, 41946, 41947, 41388, 41949, 41950, 41951, 41952, 41953, 41954, 41955, 41956, 41957, 41958, 41959, 41960, 41961, 41962, 41963, 41964, 41965, 41966, 41967, 41968, 41969, 41970, 41971, 41972, 41973, 41974, 41975, 41976, 41977, 41978, 41979, 41980, 41981, 41638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41419, 41420, 41470, 41982, 0, 41421, 41948]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/simplifiedchinese"] = (function() {
	var $pkg = {}, $init, errors, encoding, internal, identifier, transform, utf8, gbkDecoder, gbkEncoder, hzGB2312Decoder, hzGB2312Encoder, arrayType, ptrType, ptrType$1, sliceType$1, gbk, gbk_ptr, gbk18030, gbk18030_ptr, errInvalidGB18030, errInvalidGBK, hzGB2312, hzGB2312_ptr, errInvalidHZGB2312, gb18030, decode, encode0, encode1, encode2, encode3, encode4, x, x$1, x$2, x$3, x$4, init, hzGB2312NewDecoder, hzGB2312NewEncoder;
	errors = $packages["errors"];
	encoding = $packages["golang.org/x/text/encoding"];
	internal = $packages["golang.org/x/text/encoding/internal"];
	identifier = $packages["golang.org/x/text/encoding/internal/identifier"];
	transform = $packages["golang.org/x/text/transform"];
	utf8 = $packages["unicode/utf8"];
	gbkDecoder = $pkg.gbkDecoder = $newType(0, $kindStruct, "simplifiedchinese.gbkDecoder", "gbkDecoder", "golang.org/x/text/encoding/simplifiedchinese", function(NopResetter_, gb18030_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			this.gb18030 = false;
			return;
		}
		this.NopResetter = NopResetter_;
		this.gb18030 = gb18030_;
	});
	gbkEncoder = $pkg.gbkEncoder = $newType(0, $kindStruct, "simplifiedchinese.gbkEncoder", "gbkEncoder", "golang.org/x/text/encoding/simplifiedchinese", function(NopResetter_, gb18030_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			this.gb18030 = false;
			return;
		}
		this.NopResetter = NopResetter_;
		this.gb18030 = gb18030_;
	});
	hzGB2312Decoder = $pkg.hzGB2312Decoder = $newType(4, $kindInt, "simplifiedchinese.hzGB2312Decoder", "hzGB2312Decoder", "golang.org/x/text/encoding/simplifiedchinese", null);
	hzGB2312Encoder = $pkg.hzGB2312Encoder = $newType(4, $kindInt, "simplifiedchinese.hzGB2312Encoder", "hzGB2312Encoder", "golang.org/x/text/encoding/simplifiedchinese", null);
	arrayType = $arrayType($Uint16, 2);
	ptrType = $ptrType(hzGB2312Decoder);
	ptrType$1 = $ptrType(hzGB2312Encoder);
	sliceType$1 = $sliceType($Uint8);
	gbkDecoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, atEOF, c0, c1, c2, c3, d, dec, dst, err, h, i, i$1, j, nDst, nSrc, r, size, src, x$10, x$11, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		d = $clone(this, gbkDecoder);
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			/* */ if (c0 < 128) { $s = 3; continue; }
			/* */ if (c0 === 128) { $s = 4; continue; }
			/* */ if (c0 < 255) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (c0 < 128) { */ case 3:
				_tmp$2 = (c0 >> 0); _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
				$s = 7; continue;
			/* } else if (c0 === 128) { */ case 4:
				_tmp$4 = 8364; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
				$s = 7; continue;
			/* } else if (c0 < 255) { */ case 5:
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					/* break loop; */ $s = 2; continue s;
				}
				c1 = (x$5 = nSrc + 1 >> 0, ((x$5 < 0 || x$5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$5]));
				/* */ if (64 <= c1 && c1 < 127) { $s = 8; continue; }
				/* */ if (128 <= c1 && c1 < 255) { $s = 9; continue; }
				/* */ if (d.gb18030 && 48 <= c1 && c1 < 64) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (64 <= c1 && c1 < 127) { */ case 8:
					c1 = c1 - (64) << 24 >>> 24;
					$s = 12; continue;
				/* } else if (128 <= c1 && c1 < 255) { */ case 9:
					c1 = c1 - (65) << 24 >>> 24;
					$s = 12; continue;
				/* } else if (d.gb18030 && 48 <= c1 && c1 < 64) { */ case 10:
					if ((nSrc + 3 >> 0) >= src.$length) {
						err = transform.ErrShortSrc;
						/* break loop; */ $s = 2; continue s;
					}
					c2 = (x$6 = nSrc + 2 >> 0, ((x$6 < 0 || x$6 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$6]));
					if (c2 < 129 || 255 <= c2) {
						err = errInvalidGB18030;
						/* break loop; */ $s = 2; continue s;
					}
					c3 = (x$7 = nSrc + 3 >> 0, ((x$7 < 0 || x$7 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$7]));
					if (c3 < 48 || 58 <= c3) {
						err = errInvalidGB18030;
						/* break loop; */ $s = 2; continue s;
					}
					size = 4;
					r = (x$8 = ((x$9 = ((x$10 = ((c0 - 129 << 24 >>> 24) >> 0), (((x$10 >>> 16 << 16) * 10 >> 0) + (x$10 << 16 >>> 16) * 10) >> 0) + ((c1 - 48 << 24 >>> 24) >> 0) >> 0), (((x$9 >>> 16 << 16) * 126 >> 0) + (x$9 << 16 >>> 16) * 126) >> 0) + ((c2 - 129 << 24 >>> 24) >> 0) >> 0), (((x$8 >>> 16 << 16) * 10 >> 0) + (x$8 << 16 >>> 16) * 10) >> 0) + ((c3 - 48 << 24 >>> 24) >> 0) >> 0;
					/* */ if (r < 39420) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (r < 39420) { */ case 13:
						_tmp$6 = 0; _tmp$7 = 206; i = _tmp$6; j = _tmp$7;
						while (true) {
							if (!(i < j)) { break; }
							h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
							if (r >= (((h < 0 || h >= gb18030.length) ? $throwRuntimeError("index out of range") : gb18030[h])[0] >> 0)) {
								i = h + 1 >> 0;
							} else {
								j = h;
							}
						}
						dec = (x$11 = i - 1 >> 0, ((x$11 < 0 || x$11 >= gb18030.length) ? $throwRuntimeError("index out of range") : gb18030[x$11]));
						r = r + ((((dec.nilCheck, dec[1]) >> 0) - ((dec.nilCheck, dec[0]) >> 0) >> 0)) >> 0;
						/* goto write */ $s = 15; continue;
					/* } */ case 14:
					r = r - (189000) >> 0;
					/* */ if (0 <= r && r < 1048576) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (0 <= r && r < 1048576) { */ case 16:
						r = r + (65536) >> 0;
						/* goto write */ $s = 15; continue;
					/* } */ case 17:
					err = errInvalidGB18030;
					/* break loop; */ $s = 2; continue s;
					$s = 12; continue;
				/* } else { */ case 11:
					if (d.gb18030) {
						err = errInvalidGB18030;
					} else {
						err = errInvalidGBK;
					}
					/* break loop; */ $s = 2; continue s;
				/* } */ case 12:
				_tmp$8 = 65533; _tmp$9 = 2; r = _tmp$8; size = _tmp$9;
				i$1 = (((c0 - 129 << 24 >>> 24) >> 0) * 190 >> 0) + (c1 >> 0) >> 0;
				if (i$1 < 23845) {
					r = (((i$1 < 0 || i$1 >= decode.length) ? $throwRuntimeError("index out of range") : decode[i$1]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				}
				$s = 7; continue;
			/* } else { */ case 6:
				if (d.gb18030) {
					err = errInvalidGB18030;
				} else {
					err = errInvalidGBK;
				}
				/* break loop; */ $s = 2; continue s;
			/* } */ case 7:
			/* write: */ case 15:
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break loop; */ $s = 2; continue s;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			if (d.gb18030) {
				err = errInvalidGB18030;
			} else {
				err = errInvalidGBK;
			}
		}
		_tmp$10 = nDst; _tmp$11 = nSrc; _tmp$12 = err; nDst = _tmp$10; nSrc = _tmp$11; err = _tmp$12;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	gbkDecoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	gbkEncoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, atEOF, dec, dst, e, err, h, i, j, nDst, nSrc, r, r2, size, src, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		e = $clone(this, gbkEncoder);
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; r = _tmp; r2 = _tmp$1; size = _tmp$2;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			/* */ if (r < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r < 128) { */ case 3:
				size = 1;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break; */ $s = 2; continue;
					}
				}
				/* */ if (11905 <= r && r < 40870) { $s = 6; continue; }
				/* */ if (8208 <= r && r < 9795) { $s = 7; continue; }
				/* */ if (164 <= r && r < 1106) { $s = 8; continue; }
				/* */ if (65072 <= r && r < 65510) { $s = 9; continue; }
				/* */ if (63788 <= r && r < 64042) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (11905 <= r && r < 40870) { */ case 6:
					r2 = ((x$5 = r - 11905 >> 0, ((x$5 < 0 || x$5 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$5])) >> 0);
					/* */ if (!((r2 === 0))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!((r2 === 0))) { */ case 12:
						/* goto write2 */ $s = 14; continue;
					/* } */ case 13:
					$s = 11; continue;
				/* } else if (8208 <= r && r < 9795) { */ case 7:
					/* */ if (r === 8364) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (r === 8364) { */ case 15:
						r = 128;
						/* goto write1 */ $s = 17; continue;
					/* } */ case 16:
					r2 = ((x$6 = r - 8208 >> 0, ((x$6 < 0 || x$6 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$6])) >> 0);
					/* */ if (!((r2 === 0))) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!((r2 === 0))) { */ case 18:
						/* goto write2 */ $s = 14; continue;
					/* } */ case 19:
					$s = 11; continue;
				/* } else if (164 <= r && r < 1106) { */ case 8:
					r2 = ((x$7 = r - 164 >> 0, ((x$7 < 0 || x$7 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$7])) >> 0);
					/* */ if (!((r2 === 0))) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!((r2 === 0))) { */ case 20:
						/* goto write2 */ $s = 14; continue;
					/* } */ case 21:
					$s = 11; continue;
				/* } else if (65072 <= r && r < 65510) { */ case 9:
					r2 = ((x$8 = r - 65072 >> 0, ((x$8 < 0 || x$8 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$8])) >> 0);
					/* */ if (!((r2 === 0))) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!((r2 === 0))) { */ case 22:
						/* goto write2 */ $s = 14; continue;
					/* } */ case 23:
					$s = 11; continue;
				/* } else if (63788 <= r && r < 64042) { */ case 10:
					r2 = ((x$9 = r - 63788 >> 0, ((x$9 < 0 || x$9 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$9])) >> 0);
					/* */ if (!((r2 === 0))) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!((r2 === 0))) { */ case 24:
						/* goto write2 */ $s = 14; continue;
					/* } */ case 25:
				/* } */ case 11:
				/* */ if (e.gb18030) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (e.gb18030) { */ case 26:
					/* */ if (r < 65536) { $s = 28; continue; }
					/* */ if (r < 1114112) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (r < 65536) { */ case 28:
						_tmp$3 = 0; _tmp$4 = 206; i = _tmp$3; j = _tmp$4;
						while (true) {
							if (!(i < j)) { break; }
							h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
							if (r >= (((h < 0 || h >= gb18030.length) ? $throwRuntimeError("index out of range") : gb18030[h])[1] >> 0)) {
								i = h + 1 >> 0;
							} else {
								j = h;
							}
						}
						dec = (x$10 = i - 1 >> 0, ((x$10 < 0 || x$10 >= gb18030.length) ? $throwRuntimeError("index out of range") : gb18030[x$10]));
						r = r + ((((dec.nilCheck, dec[0]) >> 0) - ((dec.nilCheck, dec[1]) >> 0) >> 0)) >> 0;
						/* goto write4 */ $s = 31; continue;
						$s = 30; continue;
					/* } else if (r < 1114112) { */ case 29:
						r = r + (123464) >> 0;
						/* goto write4 */ $s = 31; continue;
					/* } */ case 30:
				/* } */ case 27:
				r = 26;
			/* } */ case 5:
			/* write1: */ case 17:
			if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write2: */ case 14:
			if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$11 = nDst + 0 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = ((r2 >> 8 >> 0) << 24 >>> 24)));
			(x$12 = nDst + 1 >> 0, ((x$12 < 0 || x$12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$12] = (r2 << 24 >>> 24)));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write4: */ case 31:
			if ((nDst + 4 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$13 = nDst + 3 >> 0, ((x$13 < 0 || x$13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$13] = (((_r = r % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24)));
			r = (_q$1 = r / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			(x$14 = nDst + 2 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = (((_r$1 = r % 126, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 129 >> 0) << 24 >>> 24)));
			r = (_q$2 = r / (126), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			(x$15 = nDst + 1 >> 0, ((x$15 < 0 || x$15 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$15] = (((_r$2 = r % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24)));
			r = (_q$3 = r / (10), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			(x$16 = nDst + 0 >> 0, ((x$16 < 0 || x$16 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$16] = ((r + 129 >> 0) << 24 >>> 24)));
			nDst = nDst + (4) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$5 = nDst; _tmp$6 = nSrc; _tmp$7 = err; nDst = _tmp$5; nSrc = _tmp$6; err = _tmp$7;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	gbkEncoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	init = function() {
		var $ptr;
	};
	hzGB2312NewDecoder = function() {
		var $ptr;
		return $newDataPointer(0, ptrType);
	};
	hzGB2312NewEncoder = function() {
		var $ptr;
		return $newDataPointer(0, ptrType$1);
	};
	$ptrType(hzGB2312Decoder).prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.$set(0);
	};
	$ptrType(hzGB2312Decoder).prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, atEOF, c0, c1, d, dst, err, i, nDst, nSrc, r, size, src, x$5, x$6;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		d = this;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		loop:
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			if (c0 >= 128) {
				err = errInvalidHZGB2312;
				break loop;
			}
			if (c0 === 126) {
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				size = 2;
				_ref = (x$5 = nSrc + 1 >> 0, ((x$5 < 0 || x$5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$5]));
				if (_ref === 123) {
					d.$set(1);
					nSrc = nSrc + (size) >> 0;
					continue;
				} else if (_ref === 125) {
					d.$set(0);
					nSrc = nSrc + (size) >> 0;
					continue;
				} else if (_ref === 126) {
					if (nDst >= dst.$length) {
						err = transform.ErrShortDst;
						break loop;
					}
					((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = 126);
					nDst = nDst + (1) >> 0;
					nSrc = nSrc + (size) >> 0;
					continue;
				} else if (_ref === 10) {
					nSrc = nSrc + (size) >> 0;
					continue;
				} else {
					err = errInvalidHZGB2312;
					break loop;
				}
			}
			if (d.$get() === 0) {
				_tmp$2 = (c0 >> 0); _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			} else {
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					break loop;
				}
				c1 = (x$6 = nSrc + 1 >> 0, ((x$6 < 0 || x$6 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$6]));
				if (c0 < 33 || 126 <= c0 || c1 < 33 || 127 <= c1) {
					err = errInvalidHZGB2312;
					break loop;
				}
				_tmp$4 = 65533; _tmp$5 = 2; r = _tmp$4; size = _tmp$5;
				i = (((c0 - 1 << 24 >>> 24) >> 0) * 190 >> 0) + ((c1 + 63 << 24 >>> 24) >> 0) >> 0;
				if (i < 23845) {
					r = (((i < 0 || i >= decode.length) ? $throwRuntimeError("index out of range") : decode[i]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				}
			}
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break loop;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
		}
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			err = errInvalidHZGB2312;
		}
		_tmp$6 = nDst; _tmp$7 = nSrc; _tmp$8 = err; nDst = _tmp$6; nSrc = _tmp$7; err = _tmp$8;
		return [nDst, nSrc, err];
	};
	$ptrType(hzGB2312Encoder).prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.$set(0);
	};
	$ptrType(hzGB2312Encoder).prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, c0, c1, dst, e, err, nDst, nSrc, r, size, src, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		e = this;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			/* */ if (r < 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r < 128) { */ case 3:
				size = 1;
				if (r === 126) {
					if ((nDst + 2 >> 0) > dst.$length) {
						err = transform.ErrShortDst;
						/* break; */ $s = 2; continue;
					}
					(x$5 = nDst + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$5] = 126));
					(x$6 = nDst + 1 >> 0, ((x$6 < 0 || x$6 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$6] = 126));
					nDst = nDst + (2) >> 0;
					nSrc = nSrc + (size) >> 0;
					/* continue; */ $s = 1; continue;
				}
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break; */ $s = 2; continue;
					}
				}
				/* */ if (11905 <= r && r < 40870) { $s = 6; continue; }
				/* */ if (8208 <= r && r < 9795) { $s = 7; continue; }
				/* */ if (164 <= r && r < 1106) { $s = 8; continue; }
				/* */ if (65072 <= r && r < 65510) { $s = 9; continue; }
				/* */ if (63788 <= r && r < 64042) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (11905 <= r && r < 40870) { */ case 6:
					r = ((x$7 = r - 11905 >> 0, ((x$7 < 0 || x$7 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$7])) >> 0);
					/* */ if (!((r === 0))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!((r === 0))) { */ case 12:
						/* goto writeGB */ $s = 14; continue;
					/* } */ case 13:
					$s = 11; continue;
				/* } else if (8208 <= r && r < 9795) { */ case 7:
					r = ((x$8 = r - 8208 >> 0, ((x$8 < 0 || x$8 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$8])) >> 0);
					/* */ if (!((r === 0))) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (!((r === 0))) { */ case 15:
						/* goto writeGB */ $s = 14; continue;
					/* } */ case 16:
					$s = 11; continue;
				/* } else if (164 <= r && r < 1106) { */ case 8:
					r = ((x$9 = r - 164 >> 0, ((x$9 < 0 || x$9 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$9])) >> 0);
					/* */ if (!((r === 0))) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!((r === 0))) { */ case 17:
						/* goto writeGB */ $s = 14; continue;
					/* } */ case 18:
					$s = 11; continue;
				/* } else if (65072 <= r && r < 65510) { */ case 9:
					r = ((x$10 = r - 65072 >> 0, ((x$10 < 0 || x$10 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$10])) >> 0);
					/* */ if (!((r === 0))) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!((r === 0))) { */ case 19:
						/* goto writeGB */ $s = 14; continue;
					/* } */ case 20:
					$s = 11; continue;
				/* } else if (63788 <= r && r < 64042) { */ case 10:
					r = ((x$11 = r - 63788 >> 0, ((x$11 < 0 || x$11 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$11])) >> 0);
					/* */ if (!((r === 0))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!((r === 0))) { */ case 21:
						/* goto writeGB */ $s = 14; continue;
					/* } */ case 22:
				/* } */ case 11:
				r = 26;
			/* } */ case 5:
			/* writeASCII: */ case 23:
			if (!((e.$get() === 0))) {
				if ((nDst + 3 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
				e.$set(0);
				(x$12 = nDst + 0 >> 0, ((x$12 < 0 || x$12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$12] = 126));
				(x$13 = nDst + 1 >> 0, ((x$13 < 0 || x$13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$13] = 125));
				nDst = nDst + (2) >> 0;
			} else if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* writeGB: */ case 14:
			c0 = ((r >> 8 >> 0) << 24 >>> 24) - 128 << 24 >>> 24;
			c1 = (r << 24 >>> 24) - 128 << 24 >>> 24;
			/* */ if (c0 < 33 || 126 <= c0 || c1 < 33 || 127 <= c1) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (c0 < 33 || 126 <= c0 || c1 < 33 || 127 <= c1) { */ case 24:
				r = 26;
				/* goto writeASCII */ $s = 23; continue;
			/* } */ case 25:
			if (e.$get() === 0) {
				if ((nDst + 4 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					/* break; */ $s = 2; continue;
				}
				e.$set(1);
				(x$14 = nDst + 0 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = 126));
				(x$15 = nDst + 1 >> 0, ((x$15 < 0 || x$15 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$15] = 123));
				nDst = nDst + (2) >> 0;
			} else if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$16 = nDst + 0 >> 0, ((x$16 < 0 || x$16 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$16] = c0));
			(x$17 = nDst + 1 >> 0, ((x$17 < 0 || x$17 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$17] = c1));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	gbkDecoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	gbkEncoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	gbkDecoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}, {prop: "gb18030", name: "gb18030", pkg: "golang.org/x/text/encoding/simplifiedchinese", typ: $Bool, tag: ""}]);
	gbkEncoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}, {prop: "gb18030", name: "gb18030", pkg: "golang.org/x/text/encoding/simplifiedchinese", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = internal.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = identifier.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		gbk = new internal.Encoding.ptr(new internal.SimpleEncoding.ptr((x = new gbkDecoder.ptr(new transform.NopResetter.ptr(), false), new x.constructor.elem(x)), (x$1 = new gbkEncoder.ptr(new transform.NopResetter.ptr(), false), new x$1.constructor.elem(x$1))), "GBK", 113);
		$pkg.GBK = gbk;
		gbk18030 = new internal.Encoding.ptr(new internal.SimpleEncoding.ptr((x$2 = new gbkDecoder.ptr(new transform.NopResetter.ptr(), true), new x$2.constructor.elem(x$2)), (x$3 = new gbkEncoder.ptr(new transform.NopResetter.ptr(), true), new x$3.constructor.elem(x$3))), "GB18030", 114);
		$pkg.GB18030 = gbk18030;
		errInvalidGB18030 = errors.New("simplifiedchinese: invalid GB18030 encoding");
		errInvalidGBK = errors.New("simplifiedchinese: invalid GBK encoding");
		hzGB2312 = new internal.Encoding.ptr((x$4 = new internal.FuncEncoding.ptr(hzGB2312NewDecoder, hzGB2312NewEncoder), new x$4.constructor.elem(x$4)), "HZ-GB2312", 2085);
		$pkg.HZGB2312 = hzGB2312;
		errInvalidHZGB2312 = errors.New("simplifiedchinese: invalid HZ-GB2312 encoding");
		gb18030 = $toNativeArray($kindArray, [$toNativeArray($kindUint16, [0, 128]), $toNativeArray($kindUint16, [36, 165]), $toNativeArray($kindUint16, [38, 169]), $toNativeArray($kindUint16, [45, 178]), $toNativeArray($kindUint16, [50, 184]), $toNativeArray($kindUint16, [81, 216]), $toNativeArray($kindUint16, [89, 226]), $toNativeArray($kindUint16, [95, 235]), $toNativeArray($kindUint16, [96, 238]), $toNativeArray($kindUint16, [100, 244]), $toNativeArray($kindUint16, [103, 248]), $toNativeArray($kindUint16, [104, 251]), $toNativeArray($kindUint16, [105, 253]), $toNativeArray($kindUint16, [109, 258]), $toNativeArray($kindUint16, [126, 276]), $toNativeArray($kindUint16, [133, 284]), $toNativeArray($kindUint16, [148, 300]), $toNativeArray($kindUint16, [172, 325]), $toNativeArray($kindUint16, [175, 329]), $toNativeArray($kindUint16, [179, 334]), $toNativeArray($kindUint16, [208, 364]), $toNativeArray($kindUint16, [306, 463]), $toNativeArray($kindUint16, [307, 465]), $toNativeArray($kindUint16, [308, 467]), $toNativeArray($kindUint16, [309, 469]), $toNativeArray($kindUint16, [310, 471]), $toNativeArray($kindUint16, [311, 473]), $toNativeArray($kindUint16, [312, 475]), $toNativeArray($kindUint16, [313, 477]), $toNativeArray($kindUint16, [341, 506]), $toNativeArray($kindUint16, [428, 594]), $toNativeArray($kindUint16, [443, 610]), $toNativeArray($kindUint16, [544, 712]), $toNativeArray($kindUint16, [545, 716]), $toNativeArray($kindUint16, [558, 730]), $toNativeArray($kindUint16, [741, 930]), $toNativeArray($kindUint16, [742, 938]), $toNativeArray($kindUint16, [749, 962]), $toNativeArray($kindUint16, [750, 970]), $toNativeArray($kindUint16, [805, 1026]), $toNativeArray($kindUint16, [819, 1104]), $toNativeArray($kindUint16, [820, 1106]), $toNativeArray($kindUint16, [7922, 8209]), $toNativeArray($kindUint16, [7924, 8215]), $toNativeArray($kindUint16, [7925, 8218]), $toNativeArray($kindUint16, [7927, 8222]), $toNativeArray($kindUint16, [7934, 8231]), $toNativeArray($kindUint16, [7943, 8241]), $toNativeArray($kindUint16, [7944, 8244]), $toNativeArray($kindUint16, [7945, 8246]), $toNativeArray($kindUint16, [7950, 8252]), $toNativeArray($kindUint16, [8062, 8365]), $toNativeArray($kindUint16, [8148, 8452]), $toNativeArray($kindUint16, [8149, 8454]), $toNativeArray($kindUint16, [8152, 8458]), $toNativeArray($kindUint16, [8164, 8471]), $toNativeArray($kindUint16, [8174, 8482]), $toNativeArray($kindUint16, [8236, 8556]), $toNativeArray($kindUint16, [8240, 8570]), $toNativeArray($kindUint16, [8262, 8596]), $toNativeArray($kindUint16, [8264, 8602]), $toNativeArray($kindUint16, [8374, 8713]), $toNativeArray($kindUint16, [8380, 8720]), $toNativeArray($kindUint16, [8381, 8722]), $toNativeArray($kindUint16, [8384, 8726]), $toNativeArray($kindUint16, [8388, 8731]), $toNativeArray($kindUint16, [8390, 8737]), $toNativeArray($kindUint16, [8392, 8740]), $toNativeArray($kindUint16, [8393, 8742]), $toNativeArray($kindUint16, [8394, 8748]), $toNativeArray($kindUint16, [8396, 8751]), $toNativeArray($kindUint16, [8401, 8760]), $toNativeArray($kindUint16, [8406, 8766]), $toNativeArray($kindUint16, [8416, 8777]), $toNativeArray($kindUint16, [8419, 8781]), $toNativeArray($kindUint16, [8424, 8787]), $toNativeArray($kindUint16, [8437, 8802]), $toNativeArray($kindUint16, [8439, 8808]), $toNativeArray($kindUint16, [8445, 8816]), $toNativeArray($kindUint16, [8482, 8854]), $toNativeArray($kindUint16, [8485, 8858]), $toNativeArray($kindUint16, [8496, 8870]), $toNativeArray($kindUint16, [8521, 8896]), $toNativeArray($kindUint16, [8603, 8979]), $toNativeArray($kindUint16, [8936, 9322]), $toNativeArray($kindUint16, [8946, 9372]), $toNativeArray($kindUint16, [9046, 9548]), $toNativeArray($kindUint16, [9050, 9588]), $toNativeArray($kindUint16, [9063, 9616]), $toNativeArray($kindUint16, [9066, 9622]), $toNativeArray($kindUint16, [9076, 9634]), $toNativeArray($kindUint16, [9092, 9652]), $toNativeArray($kindUint16, [9100, 9662]), $toNativeArray($kindUint16, [9108, 9672]), $toNativeArray($kindUint16, [9111, 9676]), $toNativeArray($kindUint16, [9113, 9680]), $toNativeArray($kindUint16, [9131, 9702]), $toNativeArray($kindUint16, [9162, 9735]), $toNativeArray($kindUint16, [9164, 9738]), $toNativeArray($kindUint16, [9218, 9793]), $toNativeArray($kindUint16, [9219, 9795]), $toNativeArray($kindUint16, [11329, 11906]), $toNativeArray($kindUint16, [11331, 11909]), $toNativeArray($kindUint16, [11334, 11913]), $toNativeArray($kindUint16, [11336, 11917]), $toNativeArray($kindUint16, [11346, 11928]), $toNativeArray($kindUint16, [11361, 11944]), $toNativeArray($kindUint16, [11363, 11947]), $toNativeArray($kindUint16, [11366, 11951]), $toNativeArray($kindUint16, [11370, 11956]), $toNativeArray($kindUint16, [11372, 11960]), $toNativeArray($kindUint16, [11375, 11964]), $toNativeArray($kindUint16, [11389, 11979]), $toNativeArray($kindUint16, [11682, 12284]), $toNativeArray($kindUint16, [11686, 12292]), $toNativeArray($kindUint16, [11687, 12312]), $toNativeArray($kindUint16, [11692, 12319]), $toNativeArray($kindUint16, [11694, 12330]), $toNativeArray($kindUint16, [11714, 12351]), $toNativeArray($kindUint16, [11716, 12436]), $toNativeArray($kindUint16, [11723, 12447]), $toNativeArray($kindUint16, [11725, 12535]), $toNativeArray($kindUint16, [11730, 12543]), $toNativeArray($kindUint16, [11736, 12586]), $toNativeArray($kindUint16, [11982, 12842]), $toNativeArray($kindUint16, [11989, 12850]), $toNativeArray($kindUint16, [12102, 12964]), $toNativeArray($kindUint16, [12336, 13200]), $toNativeArray($kindUint16, [12348, 13215]), $toNativeArray($kindUint16, [12350, 13218]), $toNativeArray($kindUint16, [12384, 13253]), $toNativeArray($kindUint16, [12393, 13263]), $toNativeArray($kindUint16, [12395, 13267]), $toNativeArray($kindUint16, [12397, 13270]), $toNativeArray($kindUint16, [12510, 13384]), $toNativeArray($kindUint16, [12553, 13428]), $toNativeArray($kindUint16, [12851, 13727]), $toNativeArray($kindUint16, [12962, 13839]), $toNativeArray($kindUint16, [12973, 13851]), $toNativeArray($kindUint16, [13738, 14617]), $toNativeArray($kindUint16, [13823, 14703]), $toNativeArray($kindUint16, [13919, 14801]), $toNativeArray($kindUint16, [13933, 14816]), $toNativeArray($kindUint16, [14080, 14964]), $toNativeArray($kindUint16, [14298, 15183]), $toNativeArray($kindUint16, [14585, 15471]), $toNativeArray($kindUint16, [14698, 15585]), $toNativeArray($kindUint16, [15583, 16471]), $toNativeArray($kindUint16, [15847, 16736]), $toNativeArray($kindUint16, [16318, 17208]), $toNativeArray($kindUint16, [16434, 17325]), $toNativeArray($kindUint16, [16438, 17330]), $toNativeArray($kindUint16, [16481, 17374]), $toNativeArray($kindUint16, [16729, 17623]), $toNativeArray($kindUint16, [17102, 17997]), $toNativeArray($kindUint16, [17122, 18018]), $toNativeArray($kindUint16, [17315, 18212]), $toNativeArray($kindUint16, [17320, 18218]), $toNativeArray($kindUint16, [17402, 18301]), $toNativeArray($kindUint16, [17418, 18318]), $toNativeArray($kindUint16, [17859, 18760]), $toNativeArray($kindUint16, [17909, 18811]), $toNativeArray($kindUint16, [17911, 18814]), $toNativeArray($kindUint16, [17915, 18820]), $toNativeArray($kindUint16, [17916, 18823]), $toNativeArray($kindUint16, [17936, 18844]), $toNativeArray($kindUint16, [17939, 18848]), $toNativeArray($kindUint16, [17961, 18872]), $toNativeArray($kindUint16, [18664, 19576]), $toNativeArray($kindUint16, [18703, 19620]), $toNativeArray($kindUint16, [18814, 19738]), $toNativeArray($kindUint16, [18962, 19887]), $toNativeArray($kindUint16, [19043, 40870]), $toNativeArray($kindUint16, [33469, 59244]), $toNativeArray($kindUint16, [33470, 59336]), $toNativeArray($kindUint16, [33471, 59367]), $toNativeArray($kindUint16, [33484, 59413]), $toNativeArray($kindUint16, [33485, 59417]), $toNativeArray($kindUint16, [33490, 59423]), $toNativeArray($kindUint16, [33497, 59431]), $toNativeArray($kindUint16, [33501, 59437]), $toNativeArray($kindUint16, [33505, 59443]), $toNativeArray($kindUint16, [33513, 59452]), $toNativeArray($kindUint16, [33520, 59460]), $toNativeArray($kindUint16, [33536, 59478]), $toNativeArray($kindUint16, [33550, 59493]), $toNativeArray($kindUint16, [37845, 63789]), $toNativeArray($kindUint16, [37921, 63866]), $toNativeArray($kindUint16, [37948, 63894]), $toNativeArray($kindUint16, [38029, 63976]), $toNativeArray($kindUint16, [38038, 63986]), $toNativeArray($kindUint16, [38064, 64016]), $toNativeArray($kindUint16, [38065, 64018]), $toNativeArray($kindUint16, [38066, 64021]), $toNativeArray($kindUint16, [38069, 64025]), $toNativeArray($kindUint16, [38075, 64034]), $toNativeArray($kindUint16, [38076, 64037]), $toNativeArray($kindUint16, [38078, 64042]), $toNativeArray($kindUint16, [39108, 65074]), $toNativeArray($kindUint16, [39109, 65093]), $toNativeArray($kindUint16, [39113, 65107]), $toNativeArray($kindUint16, [39114, 65112]), $toNativeArray($kindUint16, [39115, 65127]), $toNativeArray($kindUint16, [39116, 65132]), $toNativeArray($kindUint16, [39265, 65375]), $toNativeArray($kindUint16, [39394, 65510])]);
		decode = $toNativeArray($kindUint16, [19970, 19972, 19973, 19974, 19983, 19986, 19991, 19999, 20000, 20001, 20003, 20006, 20009, 20014, 20015, 20017, 20019, 20021, 20023, 20028, 20032, 20033, 20034, 20036, 20038, 20042, 20049, 20053, 20055, 20058, 20059, 20066, 20067, 20068, 20069, 20071, 20072, 20074, 20075, 20076, 20077, 20078, 20079, 20082, 20084, 20085, 20086, 20087, 20088, 20089, 20090, 20091, 20092, 20093, 20095, 20096, 20097, 20098, 20099, 20100, 20101, 20103, 20106, 20112, 20118, 20119, 20121, 20124, 20125, 20126, 20131, 20138, 20143, 20144, 20145, 20148, 20150, 20151, 20152, 20153, 20156, 20157, 20158, 20168, 20172, 20175, 20176, 20178, 20186, 20187, 20188, 20192, 20194, 20198, 20199, 20201, 20205, 20206, 20207, 20209, 20212, 20216, 20217, 20218, 20220, 20222, 20224, 20226, 20227, 20228, 20229, 20230, 20231, 20232, 20235, 20236, 20242, 20243, 20244, 20245, 20246, 20252, 20253, 20257, 20259, 20264, 20265, 20268, 20269, 20270, 20273, 20275, 20277, 20279, 20281, 20283, 20286, 20287, 20288, 20289, 20290, 20292, 20293, 20295, 20296, 20297, 20298, 20299, 20300, 20306, 20308, 20310, 20321, 20322, 20326, 20328, 20330, 20331, 20333, 20334, 20337, 20338, 20341, 20343, 20344, 20345, 20346, 20349, 20352, 20353, 20354, 20357, 20358, 20359, 20362, 20364, 20366, 20368, 20370, 20371, 20373, 20374, 20376, 20377, 20378, 20380, 20382, 20383, 20385, 20386, 20388, 20395, 20397, 20400, 20401, 20402, 20403, 20404, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20416, 20417, 20418, 20422, 20423, 20424, 20425, 20427, 20428, 20429, 20434, 20435, 20436, 20437, 20438, 20441, 20443, 20448, 20450, 20452, 20453, 20455, 20459, 20460, 20464, 20466, 20468, 20469, 20470, 20471, 20473, 20475, 20476, 20477, 20479, 20480, 20481, 20482, 20483, 20484, 20485, 20486, 20487, 20488, 20489, 20490, 20491, 20494, 20496, 20497, 20499, 20501, 20502, 20503, 20507, 20509, 20510, 20512, 20514, 20515, 20516, 20519, 20523, 20527, 20528, 20529, 20530, 20531, 20532, 20533, 20534, 20535, 20536, 20537, 20539, 20541, 20543, 20544, 20545, 20546, 20548, 20549, 20550, 20553, 20554, 20555, 20557, 20560, 20561, 20562, 20563, 20564, 20566, 20567, 20568, 20569, 20571, 20573, 20574, 20575, 20576, 20577, 20578, 20579, 20580, 20582, 20583, 20584, 20585, 20586, 20587, 20589, 20590, 20591, 20592, 20593, 20594, 20595, 20596, 20597, 20600, 20601, 20602, 20604, 20605, 20609, 20610, 20611, 20612, 20614, 20615, 20617, 20618, 20619, 20620, 20622, 20623, 20624, 20625, 20626, 20627, 20628, 20629, 20630, 20631, 20632, 20633, 20634, 20635, 20636, 20637, 20638, 20639, 20640, 20641, 20642, 20644, 20646, 20650, 20651, 20653, 20654, 20655, 20656, 20657, 20659, 20660, 20661, 20662, 20663, 20664, 20665, 20668, 20669, 20670, 20671, 20672, 20673, 20674, 20675, 20676, 20677, 20678, 20679, 20680, 20681, 20682, 20683, 20684, 20685, 20686, 20688, 20689, 20690, 20691, 20692, 20693, 20695, 20696, 20697, 20699, 20700, 20701, 20702, 20703, 20704, 20705, 20706, 20707, 20708, 20709, 20712, 20713, 20714, 20715, 20719, 20720, 20721, 20722, 20724, 20726, 20727, 20728, 20729, 20730, 20732, 20733, 20734, 20735, 20736, 20737, 20738, 20739, 20740, 20741, 20744, 20745, 20746, 20748, 20749, 20750, 20751, 20752, 20753, 20755, 20756, 20757, 20758, 20759, 20760, 20761, 20762, 20763, 20764, 20765, 20766, 20767, 20768, 20770, 20771, 20772, 20773, 20774, 20775, 20776, 20777, 20778, 20779, 20780, 20781, 20782, 20783, 20784, 20785, 20786, 20787, 20788, 20789, 20790, 20791, 20792, 20793, 20794, 20795, 20796, 20797, 20798, 20802, 20807, 20810, 20812, 20814, 20815, 20816, 20818, 20819, 20823, 20824, 20825, 20827, 20829, 20830, 20831, 20832, 20833, 20835, 20836, 20838, 20839, 20841, 20842, 20847, 20850, 20858, 20862, 20863, 20867, 20868, 20870, 20871, 20874, 20875, 20878, 20879, 20880, 20881, 20883, 20884, 20888, 20890, 20893, 20894, 20895, 20897, 20899, 20902, 20903, 20904, 20905, 20906, 20909, 20910, 20916, 20920, 20921, 20922, 20926, 20927, 20929, 20930, 20931, 20933, 20936, 20938, 20941, 20942, 20944, 20946, 20947, 20948, 20949, 20950, 20951, 20952, 20953, 20954, 20956, 20958, 20959, 20962, 20963, 20965, 20966, 20967, 20968, 20969, 20970, 20972, 20974, 20977, 20978, 20980, 20983, 20990, 20996, 20997, 21001, 21003, 21004, 21007, 21008, 21011, 21012, 21013, 21020, 21022, 21023, 21025, 21026, 21027, 21029, 21030, 21031, 21034, 21036, 21039, 21041, 21042, 21044, 21045, 21052, 21054, 21060, 21061, 21062, 21063, 21064, 21065, 21067, 21070, 21071, 21074, 21075, 21077, 21079, 21080, 21081, 21082, 21083, 21085, 21087, 21088, 21090, 21091, 21092, 21094, 21096, 21099, 21100, 21101, 21102, 21104, 21105, 21107, 21108, 21109, 21110, 21111, 21112, 21113, 21114, 21115, 21116, 21118, 21120, 21123, 21124, 21125, 21126, 21127, 21129, 21130, 21131, 21132, 21133, 21134, 21135, 21137, 21138, 21140, 21141, 21142, 21143, 21144, 21145, 21146, 21148, 21156, 21157, 21158, 21159, 21166, 21167, 21168, 21172, 21173, 21174, 21175, 21176, 21177, 21178, 21179, 21180, 21181, 21184, 21185, 21186, 21188, 21189, 21190, 21192, 21194, 21196, 21197, 21198, 21199, 21201, 21203, 21204, 21205, 21207, 21209, 21210, 21211, 21212, 21213, 21214, 21216, 21217, 21218, 21219, 21221, 21222, 21223, 21224, 21225, 21226, 21227, 21228, 21229, 21230, 21231, 21233, 21234, 21235, 21236, 21237, 21238, 21239, 21240, 21243, 21244, 21245, 21249, 21250, 21251, 21252, 21255, 21257, 21258, 21259, 21260, 21262, 21265, 21266, 21267, 21268, 21272, 21275, 21276, 21278, 21279, 21282, 21284, 21285, 21287, 21288, 21289, 21291, 21292, 21293, 21295, 21296, 21297, 21298, 21299, 21300, 21301, 21302, 21303, 21304, 21308, 21309, 21312, 21314, 21316, 21318, 21323, 21324, 21325, 21328, 21332, 21336, 21337, 21339, 21341, 21349, 21352, 21354, 21356, 21357, 21362, 21366, 21369, 21371, 21372, 21373, 21374, 21376, 21377, 21379, 21383, 21384, 21386, 21390, 21391, 21392, 21393, 21394, 21395, 21396, 21398, 21399, 21401, 21403, 21404, 21406, 21408, 21409, 21412, 21415, 21418, 21419, 21420, 21421, 21423, 21424, 21425, 21426, 21427, 21428, 21429, 21431, 21432, 21433, 21434, 21436, 21437, 21438, 21440, 21443, 21444, 21445, 21446, 21447, 21454, 21455, 21456, 21458, 21459, 21461, 21466, 21468, 21469, 21470, 21473, 21474, 21479, 21492, 21498, 21502, 21503, 21504, 21506, 21509, 21511, 21515, 21524, 21528, 21529, 21530, 21532, 21538, 21540, 21541, 21546, 21552, 21555, 21558, 21559, 21562, 21565, 21567, 21569, 21570, 21572, 21573, 21575, 21577, 21580, 21581, 21582, 21583, 21585, 21594, 21597, 21598, 21599, 21600, 21601, 21603, 21605, 21607, 21609, 21610, 21611, 21612, 21613, 21614, 21615, 21616, 21620, 21625, 21626, 21630, 21631, 21633, 21635, 21637, 21639, 21640, 21641, 21642, 21645, 21649, 21651, 21655, 21656, 21660, 21662, 21663, 21664, 21665, 21666, 21669, 21678, 21680, 21682, 21685, 21686, 21687, 21689, 21690, 21692, 21694, 21699, 21701, 21706, 21707, 21718, 21720, 21723, 21728, 21729, 21730, 21731, 21732, 21739, 21740, 21743, 21744, 21745, 21748, 21749, 21750, 21751, 21752, 21753, 21755, 21758, 21760, 21762, 21763, 21764, 21765, 21768, 21770, 21771, 21772, 21773, 21774, 21778, 21779, 21781, 21782, 21783, 21784, 21785, 21786, 21788, 21789, 21790, 21791, 21793, 21797, 21798, 21800, 21801, 21803, 21805, 21810, 21812, 21813, 21814, 21816, 21817, 21818, 21819, 21821, 21824, 21826, 21829, 21831, 21832, 21835, 21836, 21837, 21838, 21839, 21841, 21842, 21843, 21844, 21847, 21848, 21849, 21850, 21851, 21853, 21854, 21855, 21856, 21858, 21859, 21864, 21865, 21867, 21871, 21872, 21873, 21874, 21875, 21876, 21881, 21882, 21885, 21887, 21893, 21894, 21900, 21901, 21902, 21904, 21906, 21907, 21909, 21910, 21911, 21914, 21915, 21918, 21920, 21921, 21922, 21923, 21924, 21925, 21926, 21928, 21929, 21930, 21931, 21932, 21933, 21934, 21935, 21936, 21938, 21940, 21942, 21944, 21946, 21948, 21951, 21952, 21953, 21954, 21955, 21958, 21959, 21960, 21962, 21963, 21966, 21967, 21968, 21973, 21975, 21976, 21977, 21978, 21979, 21982, 21984, 21986, 21991, 21993, 21997, 21998, 22000, 22001, 22004, 22006, 22008, 22009, 22010, 22011, 22012, 22015, 22018, 22019, 22020, 22021, 22022, 22023, 22026, 22027, 22029, 22032, 22033, 22034, 22035, 22036, 22037, 22038, 22039, 22041, 22042, 22044, 22045, 22048, 22049, 22050, 22053, 22054, 22056, 22057, 22058, 22059, 22062, 22063, 22064, 22067, 22069, 22071, 22072, 22074, 22076, 22077, 22078, 22080, 22081, 22082, 22083, 22084, 22085, 22086, 22087, 22088, 22089, 22090, 22091, 22095, 22096, 22097, 22098, 22099, 22101, 22102, 22106, 22107, 22109, 22110, 22111, 22112, 22113, 22115, 22117, 22118, 22119, 22125, 22126, 22127, 22128, 22130, 22131, 22132, 22133, 22135, 22136, 22137, 22138, 22141, 22142, 22143, 22144, 22145, 22146, 22147, 22148, 22151, 22152, 22153, 22154, 22155, 22156, 22157, 22160, 22161, 22162, 22164, 22165, 22166, 22167, 22168, 22169, 22170, 22171, 22172, 22173, 22174, 22175, 22176, 22177, 22178, 22180, 22181, 22182, 22183, 22184, 22185, 22186, 22187, 22188, 22189, 22190, 22192, 22193, 22194, 22195, 22196, 22197, 22198, 22200, 22201, 22202, 22203, 22205, 22206, 22207, 22208, 22209, 22210, 22211, 22212, 22213, 22214, 22215, 22216, 22217, 22219, 22220, 22221, 22222, 22223, 22224, 22225, 22226, 22227, 22229, 22230, 22232, 22233, 22236, 22243, 22245, 22246, 22247, 22248, 22249, 22250, 22252, 22254, 22255, 22258, 22259, 22262, 22263, 22264, 22267, 22268, 22272, 22273, 22274, 22277, 22279, 22283, 22284, 22285, 22286, 22287, 22288, 22289, 22290, 22291, 22292, 22293, 22294, 22295, 22296, 22297, 22298, 22299, 22301, 22302, 22304, 22305, 22306, 22308, 22309, 22310, 22311, 22315, 22321, 22322, 22324, 22325, 22326, 22327, 22328, 22332, 22333, 22335, 22337, 22339, 22340, 22341, 22342, 22344, 22345, 22347, 22354, 22355, 22356, 22357, 22358, 22360, 22361, 22370, 22371, 22373, 22375, 22380, 22382, 22384, 22385, 22386, 22388, 22389, 22392, 22393, 22394, 22397, 22398, 22399, 22400, 22401, 22407, 22408, 22409, 22410, 22413, 22414, 22415, 22416, 22417, 22420, 22421, 22422, 22423, 22424, 22425, 22426, 22428, 22429, 22430, 22431, 22437, 22440, 22442, 22444, 22447, 22448, 22449, 22451, 22453, 22454, 22455, 22457, 22458, 22459, 22460, 22461, 22462, 22463, 22464, 22465, 22468, 22469, 22470, 22471, 22472, 22473, 22474, 22476, 22477, 22480, 22481, 22483, 22486, 22487, 22491, 22492, 22494, 22497, 22498, 22499, 22501, 22502, 22503, 22504, 22505, 22506, 22507, 22508, 22510, 22512, 22513, 22514, 22515, 22517, 22518, 22519, 22523, 22524, 22526, 22527, 22529, 22531, 22532, 22533, 22536, 22537, 22538, 22540, 22542, 22543, 22544, 22546, 22547, 22548, 22550, 22551, 22552, 22554, 22555, 22556, 22557, 22559, 22562, 22563, 22565, 22566, 22567, 22568, 22569, 22571, 22572, 22573, 22574, 22575, 22577, 22578, 22579, 22580, 22582, 22583, 22584, 22585, 22586, 22587, 22588, 22589, 22590, 22591, 22592, 22593, 22594, 22595, 22597, 22598, 22599, 22600, 22601, 22602, 22603, 22606, 22607, 22608, 22610, 22611, 22613, 22614, 22615, 22617, 22618, 22619, 22620, 22621, 22623, 22624, 22625, 22626, 22627, 22628, 22630, 22631, 22632, 22633, 22634, 22637, 22638, 22639, 22640, 22641, 22642, 22643, 22644, 22645, 22646, 22647, 22648, 22649, 22650, 22651, 22652, 22653, 22655, 22658, 22660, 22662, 22663, 22664, 22666, 22667, 22668, 22669, 22670, 22671, 22672, 22673, 22676, 22677, 22678, 22679, 22680, 22683, 22684, 22685, 22688, 22689, 22690, 22691, 22692, 22693, 22694, 22695, 22698, 22699, 22700, 22701, 22702, 22703, 22704, 22705, 22706, 22707, 22708, 22709, 22710, 22711, 22712, 22713, 22714, 22715, 22717, 22718, 22719, 22720, 22722, 22723, 22724, 22726, 22727, 22728, 22729, 22730, 22731, 22732, 22733, 22734, 22735, 22736, 22738, 22739, 22740, 22742, 22743, 22744, 22745, 22746, 22747, 22748, 22749, 22750, 22751, 22752, 22753, 22754, 22755, 22757, 22758, 22759, 22760, 22761, 22762, 22765, 22767, 22769, 22770, 22772, 22773, 22775, 22776, 22778, 22779, 22780, 22781, 22782, 22783, 22784, 22785, 22787, 22789, 22790, 22792, 22793, 22794, 22795, 22796, 22798, 22800, 22801, 22802, 22803, 22807, 22808, 22811, 22813, 22814, 22816, 22817, 22818, 22819, 22822, 22824, 22828, 22832, 22834, 22835, 22837, 22838, 22843, 22845, 22846, 22847, 22848, 22851, 22853, 22854, 22858, 22860, 22861, 22864, 22866, 22867, 22873, 22875, 22876, 22877, 22878, 22879, 22881, 22883, 22884, 22886, 22887, 22888, 22889, 22890, 22891, 22892, 22893, 22894, 22895, 22896, 22897, 22898, 22901, 22903, 22906, 22907, 22908, 22910, 22911, 22912, 22917, 22921, 22923, 22924, 22926, 22927, 22928, 22929, 22932, 22933, 22936, 22938, 22939, 22940, 22941, 22943, 22944, 22945, 22946, 22950, 22951, 22956, 22957, 22960, 22961, 22963, 22964, 22965, 22966, 22967, 22968, 22970, 22972, 22973, 22975, 22976, 22977, 22978, 22979, 22980, 22981, 22983, 22984, 22985, 22988, 22989, 22990, 22991, 22997, 22998, 23001, 23003, 23006, 23007, 23008, 23009, 23010, 23012, 23014, 23015, 23017, 23018, 23019, 23021, 23022, 23023, 23024, 23025, 23026, 23027, 23028, 23029, 23030, 23031, 23032, 23034, 23036, 23037, 23038, 23040, 23042, 23050, 23051, 23053, 23054, 23055, 23056, 23058, 23060, 23061, 23062, 23063, 23065, 23066, 23067, 23069, 23070, 23073, 23074, 23076, 23078, 23079, 23080, 23082, 23083, 23084, 23085, 23086, 23087, 23088, 23091, 23093, 23095, 23096, 23097, 23098, 23099, 23101, 23102, 23103, 23105, 23106, 23107, 23108, 23109, 23111, 23112, 23115, 23116, 23117, 23118, 23119, 23120, 23121, 23122, 23123, 23124, 23126, 23127, 23128, 23129, 23131, 23132, 23133, 23134, 23135, 23136, 23137, 23139, 23140, 23141, 23142, 23144, 23145, 23147, 23148, 23149, 23150, 23151, 23152, 23153, 23154, 23155, 23160, 23161, 23163, 23164, 23165, 23166, 23168, 23169, 23170, 23171, 23172, 23173, 23174, 23175, 23176, 23177, 23178, 23179, 23180, 23181, 23182, 23183, 23184, 23185, 23187, 23188, 23189, 23190, 23191, 23192, 23193, 23196, 23197, 23198, 23199, 23200, 23201, 23202, 23203, 23204, 23205, 23206, 23207, 23208, 23209, 23211, 23212, 23213, 23214, 23215, 23216, 23217, 23220, 23222, 23223, 23225, 23226, 23227, 23228, 23229, 23231, 23232, 23235, 23236, 23237, 23238, 23239, 23240, 23242, 23243, 23245, 23246, 23247, 23248, 23249, 23251, 23253, 23255, 23257, 23258, 23259, 23261, 23262, 23263, 23266, 23268, 23269, 23271, 23272, 23274, 23276, 23277, 23278, 23279, 23280, 23282, 23283, 23284, 23285, 23286, 23287, 23288, 23289, 23290, 23291, 23292, 23293, 23294, 23295, 23296, 23297, 23298, 23299, 23300, 23301, 23302, 23303, 23304, 23306, 23307, 23308, 23309, 23310, 23311, 23312, 23313, 23314, 23315, 23316, 23317, 23320, 23321, 23322, 23323, 23324, 23325, 23326, 23327, 23328, 23329, 23330, 23331, 23332, 23333, 23334, 23335, 23336, 23337, 23338, 23339, 23340, 23341, 23342, 23343, 23344, 23345, 23347, 23349, 23350, 23352, 23353, 23354, 23355, 23356, 23357, 23358, 23359, 23361, 23362, 23363, 23364, 23365, 23366, 23367, 23368, 23369, 23370, 23371, 23372, 23373, 23374, 23375, 23378, 23382, 23390, 23392, 23393, 23399, 23400, 23403, 23405, 23406, 23407, 23410, 23412, 23414, 23415, 23416, 23417, 23419, 23420, 23422, 23423, 23426, 23430, 23434, 23437, 23438, 23440, 23441, 23442, 23444, 23446, 23455, 23463, 23464, 23465, 23468, 23469, 23470, 23471, 23473, 23474, 23479, 23482, 23483, 23484, 23488, 23489, 23491, 23496, 23497, 23498, 23499, 23501, 23502, 23503, 23505, 23508, 23509, 23510, 23511, 23512, 23513, 23514, 23515, 23516, 23520, 23522, 23523, 23526, 23527, 23529, 23530, 23531, 23532, 23533, 23535, 23537, 23538, 23539, 23540, 23541, 23542, 23543, 23549, 23550, 23552, 23554, 23555, 23557, 23559, 23560, 23563, 23564, 23565, 23566, 23568, 23570, 23571, 23575, 23577, 23579, 23582, 23583, 23584, 23585, 23587, 23590, 23592, 23593, 23594, 23595, 23597, 23598, 23599, 23600, 23602, 23603, 23605, 23606, 23607, 23619, 23620, 23622, 23623, 23628, 23629, 23634, 23635, 23636, 23638, 23639, 23640, 23642, 23643, 23644, 23645, 23647, 23650, 23652, 23655, 23656, 23657, 23658, 23659, 23660, 23661, 23664, 23666, 23667, 23668, 23669, 23670, 23671, 23672, 23675, 23676, 23677, 23678, 23680, 23683, 23684, 23685, 23686, 23687, 23689, 23690, 23691, 23694, 23695, 23698, 23699, 23701, 23709, 23710, 23711, 23712, 23713, 23716, 23717, 23718, 23719, 23720, 23722, 23726, 23727, 23728, 23730, 23732, 23734, 23737, 23738, 23739, 23740, 23742, 23744, 23746, 23747, 23749, 23750, 23751, 23752, 23753, 23754, 23756, 23757, 23758, 23759, 23760, 23761, 23763, 23764, 23765, 23766, 23767, 23768, 23770, 23771, 23772, 23773, 23774, 23775, 23776, 23778, 23779, 23783, 23785, 23787, 23788, 23790, 23791, 23793, 23794, 23795, 23796, 23797, 23798, 23799, 23800, 23801, 23802, 23804, 23805, 23806, 23807, 23808, 23809, 23812, 23813, 23816, 23817, 23818, 23819, 23820, 23821, 23823, 23824, 23825, 23826, 23827, 23829, 23831, 23832, 23833, 23834, 23836, 23837, 23839, 23840, 23841, 23842, 23843, 23845, 23848, 23850, 23851, 23852, 23855, 23856, 23857, 23858, 23859, 23861, 23862, 23863, 23864, 23865, 23866, 23867, 23868, 23871, 23872, 23873, 23874, 23875, 23876, 23877, 23878, 23880, 23881, 23885, 23886, 23887, 23888, 23889, 23890, 23891, 23892, 23893, 23894, 23895, 23897, 23898, 23900, 23902, 23903, 23904, 23905, 23906, 23907, 23908, 23909, 23910, 23911, 23912, 23914, 23917, 23918, 23920, 23921, 23922, 23923, 23925, 23926, 23927, 23928, 23929, 23930, 23931, 23932, 23933, 23934, 23935, 23936, 23937, 23939, 23940, 23941, 23942, 23943, 23944, 23945, 23946, 23947, 23948, 23949, 23950, 23951, 23952, 23953, 23954, 23955, 23956, 23957, 23958, 23959, 23960, 23962, 23963, 23964, 23966, 23967, 23968, 23969, 23970, 23971, 23972, 23973, 23974, 23975, 23976, 23977, 23978, 23979, 23980, 23981, 23982, 23983, 23984, 23985, 23986, 23987, 23988, 23989, 23990, 23992, 23993, 23994, 23995, 23996, 23997, 23998, 23999, 24000, 24001, 24002, 24003, 24004, 24006, 24007, 24008, 24009, 24010, 24011, 24012, 24014, 24015, 24016, 24017, 24018, 24019, 24020, 24021, 24022, 24023, 24024, 24025, 24026, 24028, 24031, 24032, 24035, 24036, 24042, 24044, 24045, 24048, 24053, 24054, 24056, 24057, 24058, 24059, 24060, 24063, 24064, 24068, 24071, 24073, 24074, 24075, 24077, 24078, 24082, 24083, 24087, 24094, 24095, 24096, 24097, 24098, 24099, 24100, 24101, 24104, 24105, 24106, 24107, 24108, 24111, 24112, 24114, 24115, 24116, 24117, 24118, 24121, 24122, 24126, 24127, 24128, 24129, 24131, 24134, 24135, 24136, 24137, 24138, 24139, 24141, 24142, 24143, 24144, 24145, 24146, 24147, 24150, 24151, 24152, 24153, 24154, 24156, 24157, 24159, 24160, 24163, 24164, 24165, 24166, 24167, 24168, 24169, 24170, 24171, 24172, 24173, 24174, 24175, 24176, 24177, 24181, 24183, 24185, 24190, 24193, 24194, 24195, 24197, 24200, 24201, 24204, 24205, 24206, 24210, 24216, 24219, 24221, 24225, 24226, 24227, 24228, 24232, 24233, 24234, 24235, 24236, 24238, 24239, 24240, 24241, 24242, 24244, 24250, 24251, 24252, 24253, 24255, 24256, 24257, 24258, 24259, 24260, 24261, 24262, 24263, 24264, 24267, 24268, 24269, 24270, 24271, 24272, 24276, 24277, 24279, 24280, 24281, 24282, 24284, 24285, 24286, 24287, 24288, 24289, 24290, 24291, 24292, 24293, 24294, 24295, 24297, 24299, 24300, 24301, 24302, 24303, 24304, 24305, 24306, 24307, 24309, 24312, 24313, 24315, 24316, 24317, 24325, 24326, 24327, 24329, 24332, 24333, 24334, 24336, 24338, 24340, 24342, 24345, 24346, 24348, 24349, 24350, 24353, 24354, 24355, 24356, 24360, 24363, 24364, 24366, 24368, 24370, 24371, 24372, 24373, 24374, 24375, 24376, 24379, 24381, 24382, 24383, 24385, 24386, 24387, 24388, 24389, 24390, 24391, 24392, 24393, 24394, 24395, 24396, 24397, 24398, 24399, 24401, 24404, 24409, 24410, 24411, 24412, 24414, 24415, 24416, 24419, 24421, 24423, 24424, 24427, 24430, 24431, 24434, 24436, 24437, 24438, 24440, 24442, 24445, 24446, 24447, 24451, 24454, 24461, 24462, 24463, 24465, 24467, 24468, 24470, 24474, 24475, 24477, 24478, 24479, 24480, 24482, 24483, 24484, 24485, 24486, 24487, 24489, 24491, 24492, 24495, 24496, 24497, 24498, 24499, 24500, 24502, 24504, 24505, 24506, 24507, 24510, 24511, 24512, 24513, 24514, 24519, 24520, 24522, 24523, 24526, 24531, 24532, 24533, 24538, 24539, 24540, 24542, 24543, 24546, 24547, 24549, 24550, 24552, 24553, 24556, 24559, 24560, 24562, 24563, 24564, 24566, 24567, 24569, 24570, 24572, 24583, 24584, 24585, 24587, 24588, 24592, 24593, 24595, 24599, 24600, 24602, 24606, 24607, 24610, 24611, 24612, 24620, 24621, 24622, 24624, 24625, 24626, 24627, 24628, 24630, 24631, 24632, 24633, 24634, 24637, 24638, 24640, 24644, 24645, 24646, 24647, 24648, 24649, 24650, 24652, 24654, 24655, 24657, 24659, 24660, 24662, 24663, 24664, 24667, 24668, 24670, 24671, 24672, 24673, 24677, 24678, 24686, 24689, 24690, 24692, 24693, 24695, 24702, 24704, 24705, 24706, 24709, 24710, 24711, 24712, 24714, 24715, 24718, 24719, 24720, 24721, 24723, 24725, 24727, 24728, 24729, 24732, 24734, 24737, 24738, 24740, 24741, 24743, 24745, 24746, 24750, 24752, 24755, 24757, 24758, 24759, 24761, 24762, 24765, 24766, 24767, 24768, 24769, 24770, 24771, 24772, 24775, 24776, 24777, 24780, 24781, 24782, 24783, 24784, 24786, 24787, 24788, 24790, 24791, 24793, 24795, 24798, 24801, 24802, 24803, 24804, 24805, 24810, 24817, 24818, 24821, 24823, 24824, 24827, 24828, 24829, 24830, 24831, 24834, 24835, 24836, 24837, 24839, 24842, 24843, 24844, 24848, 24849, 24850, 24851, 24852, 24854, 24855, 24856, 24857, 24859, 24860, 24861, 24862, 24865, 24866, 24869, 24872, 24873, 24874, 24876, 24877, 24878, 24879, 24880, 24881, 24882, 24883, 24884, 24885, 24886, 24887, 24888, 24889, 24890, 24891, 24892, 24893, 24894, 24896, 24897, 24898, 24899, 24900, 24901, 24902, 24903, 24905, 24907, 24909, 24911, 24912, 24914, 24915, 24916, 24918, 24919, 24920, 24921, 24922, 24923, 24924, 24926, 24927, 24928, 24929, 24931, 24932, 24933, 24934, 24937, 24938, 24939, 24940, 24941, 24942, 24943, 24945, 24946, 24947, 24948, 24950, 24952, 24953, 24954, 24955, 24956, 24957, 24958, 24959, 24960, 24961, 24962, 24963, 24964, 24965, 24966, 24967, 24968, 24969, 24970, 24972, 24973, 24975, 24976, 24977, 24978, 24979, 24981, 24982, 24983, 24984, 24985, 24986, 24987, 24988, 24990, 24991, 24992, 24993, 24994, 24995, 24996, 24997, 24998, 25002, 25003, 25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25013, 25014, 25016, 25017, 25018, 25019, 25020, 25021, 25023, 25024, 25025, 25027, 25028, 25029, 25030, 25031, 25033, 25036, 25037, 25038, 25039, 25040, 25043, 25045, 25046, 25047, 25048, 25049, 25050, 25051, 25052, 25053, 25054, 25055, 25056, 25057, 25058, 25059, 25060, 25061, 25063, 25064, 25065, 25066, 25067, 25068, 25069, 25070, 25071, 25072, 25073, 25074, 25075, 25076, 25078, 25079, 25080, 25081, 25082, 25083, 25084, 25085, 25086, 25088, 25089, 25090, 25091, 25092, 25093, 25095, 25097, 25107, 25108, 25113, 25116, 25117, 25118, 25120, 25123, 25126, 25127, 25128, 25129, 25131, 25133, 25135, 25136, 25137, 25138, 25141, 25142, 25144, 25145, 25146, 25147, 25148, 25154, 25156, 25157, 25158, 25162, 25167, 25168, 25173, 25174, 25175, 25177, 25178, 25180, 25181, 25182, 25183, 25184, 25185, 25186, 25188, 25189, 25192, 25201, 25202, 25204, 25205, 25207, 25208, 25210, 25211, 25213, 25217, 25218, 25219, 25221, 25222, 25223, 25224, 25227, 25228, 25229, 25230, 25231, 25232, 25236, 25241, 25244, 25245, 25246, 25251, 25254, 25255, 25257, 25258, 25261, 25262, 25263, 25264, 25266, 25267, 25268, 25270, 25271, 25272, 25274, 25278, 25280, 25281, 25283, 25291, 25295, 25297, 25301, 25309, 25310, 25312, 25313, 25316, 25322, 25323, 25328, 25330, 25333, 25336, 25337, 25338, 25339, 25344, 25347, 25348, 25349, 25350, 25354, 25355, 25356, 25357, 25359, 25360, 25362, 25363, 25364, 25365, 25367, 25368, 25369, 25372, 25382, 25383, 25385, 25388, 25389, 25390, 25392, 25393, 25395, 25396, 25397, 25398, 25399, 25400, 25403, 25404, 25406, 25407, 25408, 25409, 25412, 25415, 25416, 25418, 25425, 25426, 25427, 25428, 25430, 25431, 25432, 25433, 25434, 25435, 25436, 25437, 25440, 25444, 25445, 25446, 25448, 25450, 25451, 25452, 25455, 25456, 25458, 25459, 25460, 25461, 25464, 25465, 25468, 25469, 25470, 25471, 25473, 25475, 25476, 25477, 25478, 25483, 25485, 25489, 25491, 25492, 25493, 25495, 25497, 25498, 25499, 25500, 25501, 25502, 25503, 25505, 25508, 25510, 25515, 25519, 25521, 25522, 25525, 25526, 25529, 25531, 25533, 25535, 25536, 25537, 25538, 25539, 25541, 25543, 25544, 25546, 25547, 25548, 25553, 25555, 25556, 25557, 25559, 25560, 25561, 25562, 25563, 25564, 25565, 25567, 25570, 25572, 25573, 25574, 25575, 25576, 25579, 25580, 25582, 25583, 25584, 25585, 25587, 25589, 25591, 25593, 25594, 25595, 25596, 25598, 25603, 25604, 25606, 25607, 25608, 25609, 25610, 25613, 25614, 25617, 25618, 25621, 25622, 25623, 25624, 25625, 25626, 25629, 25631, 25634, 25635, 25636, 25637, 25639, 25640, 25641, 25643, 25646, 25647, 25648, 25649, 25650, 25651, 25653, 25654, 25655, 25656, 25657, 25659, 25660, 25662, 25664, 25666, 25667, 25673, 25675, 25676, 25677, 25678, 25679, 25680, 25681, 25683, 25685, 25686, 25687, 25689, 25690, 25691, 25692, 25693, 25695, 25696, 25697, 25698, 25699, 25700, 25701, 25702, 25704, 25706, 25707, 25708, 25710, 25711, 25712, 25713, 25714, 25715, 25716, 25717, 25718, 25719, 25723, 25724, 25725, 25726, 25727, 25728, 25729, 25731, 25734, 25736, 25737, 25738, 25739, 25740, 25741, 25742, 25743, 25744, 25747, 25748, 25751, 25752, 25754, 25755, 25756, 25757, 25759, 25760, 25761, 25762, 25763, 25765, 25766, 25767, 25768, 25770, 25771, 25775, 25777, 25778, 25779, 25780, 25782, 25785, 25787, 25789, 25790, 25791, 25793, 25795, 25796, 25798, 25799, 25800, 25801, 25802, 25803, 25804, 25807, 25809, 25811, 25812, 25813, 25814, 25817, 25818, 25819, 25820, 25821, 25823, 25824, 25825, 25827, 25829, 25831, 25832, 25833, 25834, 25835, 25836, 25837, 25838, 25839, 25840, 25841, 25842, 25843, 25844, 25845, 25846, 25847, 25848, 25849, 25850, 25851, 25852, 25853, 25854, 25855, 25857, 25858, 25859, 25860, 25861, 25862, 25863, 25864, 25866, 25867, 25868, 25869, 25870, 25871, 25872, 25873, 25875, 25876, 25877, 25878, 25879, 25881, 25882, 25883, 25884, 25885, 25886, 25887, 25888, 25889, 25890, 25891, 25892, 25894, 25895, 25896, 25897, 25898, 25900, 25901, 25904, 25905, 25906, 25907, 25911, 25914, 25916, 25917, 25920, 25921, 25922, 25923, 25924, 25926, 25927, 25930, 25931, 25933, 25934, 25936, 25938, 25939, 25940, 25943, 25944, 25946, 25948, 25951, 25952, 25953, 25956, 25957, 25959, 25960, 25961, 25962, 25965, 25966, 25967, 25969, 25971, 25973, 25974, 25976, 25977, 25978, 25979, 25980, 25981, 25982, 25983, 25984, 25985, 25986, 25987, 25988, 25989, 25990, 25992, 25993, 25994, 25997, 25998, 25999, 26002, 26004, 26005, 26006, 26008, 26010, 26013, 26014, 26016, 26018, 26019, 26022, 26024, 26026, 26028, 26030, 26033, 26034, 26035, 26036, 26037, 26038, 26039, 26040, 26042, 26043, 26046, 26047, 26048, 26050, 26055, 26056, 26057, 26058, 26061, 26064, 26065, 26067, 26068, 26069, 26072, 26073, 26074, 26075, 26076, 26077, 26078, 26079, 26081, 26083, 26084, 26090, 26091, 26098, 26099, 26100, 26101, 26104, 26105, 26107, 26108, 26109, 26110, 26111, 26113, 26116, 26117, 26119, 26120, 26121, 26123, 26125, 26128, 26129, 26130, 26134, 26135, 26136, 26138, 26139, 26140, 26142, 26145, 26146, 26147, 26148, 26150, 26153, 26154, 26155, 26156, 26158, 26160, 26162, 26163, 26167, 26168, 26169, 26170, 26171, 26173, 26175, 26176, 26178, 26180, 26181, 26182, 26183, 26184, 26185, 26186, 26189, 26190, 26192, 26193, 26200, 26201, 26203, 26204, 26205, 26206, 26208, 26210, 26211, 26213, 26215, 26217, 26218, 26219, 26220, 26221, 26225, 26226, 26227, 26229, 26232, 26233, 26235, 26236, 26237, 26239, 26240, 26241, 26243, 26245, 26246, 26248, 26249, 26250, 26251, 26253, 26254, 26255, 26256, 26258, 26259, 26260, 26261, 26264, 26265, 26266, 26267, 26268, 26270, 26271, 26272, 26273, 26274, 26275, 26276, 26277, 26278, 26281, 26282, 26283, 26284, 26285, 26287, 26288, 26289, 26290, 26291, 26293, 26294, 26295, 26296, 26298, 26299, 26300, 26301, 26303, 26304, 26305, 26306, 26307, 26308, 26309, 26310, 26311, 26312, 26313, 26314, 26315, 26316, 26317, 26318, 26319, 26320, 26321, 26322, 26323, 26324, 26325, 26326, 26327, 26328, 26330, 26334, 26335, 26336, 26337, 26338, 26339, 26340, 26341, 26343, 26344, 26346, 26347, 26348, 26349, 26350, 26351, 26353, 26357, 26358, 26360, 26362, 26363, 26365, 26369, 26370, 26371, 26372, 26373, 26374, 26375, 26380, 26382, 26383, 26385, 26386, 26387, 26390, 26392, 26393, 26394, 26396, 26398, 26400, 26401, 26402, 26403, 26404, 26405, 26407, 26409, 26414, 26416, 26418, 26419, 26422, 26423, 26424, 26425, 26427, 26428, 26430, 26431, 26433, 26436, 26437, 26439, 26442, 26443, 26445, 26450, 26452, 26453, 26455, 26456, 26457, 26458, 26459, 26461, 26466, 26467, 26468, 26470, 26471, 26475, 26476, 26478, 26481, 26484, 26486, 26488, 26489, 26490, 26491, 26493, 26496, 26498, 26499, 26501, 26502, 26504, 26506, 26508, 26509, 26510, 26511, 26513, 26514, 26515, 26516, 26518, 26521, 26523, 26527, 26528, 26529, 26532, 26534, 26537, 26540, 26542, 26545, 26546, 26548, 26553, 26554, 26555, 26556, 26557, 26558, 26559, 26560, 26562, 26565, 26566, 26567, 26568, 26569, 26570, 26571, 26572, 26573, 26574, 26581, 26582, 26583, 26587, 26591, 26593, 26595, 26596, 26598, 26599, 26600, 26602, 26603, 26605, 26606, 26610, 26613, 26614, 26615, 26616, 26617, 26618, 26619, 26620, 26622, 26625, 26626, 26627, 26628, 26630, 26637, 26640, 26642, 26644, 26645, 26648, 26649, 26650, 26651, 26652, 26654, 26655, 26656, 26658, 26659, 26660, 26661, 26662, 26663, 26664, 26667, 26668, 26669, 26670, 26671, 26672, 26673, 26676, 26677, 26678, 26682, 26683, 26687, 26695, 26699, 26701, 26703, 26706, 26710, 26711, 26712, 26713, 26714, 26715, 26716, 26717, 26718, 26719, 26730, 26732, 26733, 26734, 26735, 26736, 26737, 26738, 26739, 26741, 26744, 26745, 26746, 26747, 26748, 26749, 26750, 26751, 26752, 26754, 26756, 26759, 26760, 26761, 26762, 26763, 26764, 26765, 26766, 26768, 26769, 26770, 26772, 26773, 26774, 26776, 26777, 26778, 26779, 26780, 26781, 26782, 26783, 26784, 26785, 26787, 26788, 26789, 26793, 26794, 26795, 26796, 26798, 26801, 26802, 26804, 26806, 26807, 26808, 26809, 26810, 26811, 26812, 26813, 26814, 26815, 26817, 26819, 26820, 26821, 26822, 26823, 26824, 26826, 26828, 26830, 26831, 26832, 26833, 26835, 26836, 26838, 26839, 26841, 26843, 26844, 26845, 26846, 26847, 26849, 26850, 26852, 26853, 26854, 26855, 26856, 26857, 26858, 26859, 26860, 26861, 26863, 26866, 26867, 26868, 26870, 26871, 26872, 26875, 26877, 26878, 26879, 26880, 26882, 26883, 26884, 26886, 26887, 26888, 26889, 26890, 26892, 26895, 26897, 26899, 26900, 26901, 26902, 26903, 26904, 26905, 26906, 26907, 26908, 26909, 26910, 26913, 26914, 26915, 26917, 26918, 26919, 26920, 26921, 26922, 26923, 26924, 26926, 26927, 26929, 26930, 26931, 26933, 26934, 26935, 26936, 26938, 26939, 26940, 26942, 26944, 26945, 26947, 26948, 26949, 26950, 26951, 26952, 26953, 26954, 26955, 26956, 26957, 26958, 26959, 26960, 26961, 26962, 26963, 26965, 26966, 26968, 26969, 26971, 26972, 26975, 26977, 26978, 26980, 26981, 26983, 26984, 26985, 26986, 26988, 26989, 26991, 26992, 26994, 26995, 26996, 26997, 26998, 27002, 27003, 27005, 27006, 27007, 27009, 27011, 27013, 27018, 27019, 27020, 27022, 27023, 27024, 27025, 27026, 27027, 27030, 27031, 27033, 27034, 27037, 27038, 27039, 27040, 27041, 27042, 27043, 27044, 27045, 27046, 27049, 27050, 27052, 27054, 27055, 27056, 27058, 27059, 27061, 27062, 27064, 27065, 27066, 27068, 27069, 27070, 27071, 27072, 27074, 27075, 27076, 27077, 27078, 27079, 27080, 27081, 27083, 27085, 27087, 27089, 27090, 27091, 27093, 27094, 27095, 27096, 27097, 27098, 27100, 27101, 27102, 27105, 27106, 27107, 27108, 27109, 27110, 27111, 27112, 27113, 27114, 27115, 27116, 27118, 27119, 27120, 27121, 27123, 27124, 27125, 27126, 27127, 27128, 27129, 27130, 27131, 27132, 27134, 27136, 27137, 27138, 27139, 27140, 27141, 27142, 27143, 27144, 27145, 27147, 27148, 27149, 27150, 27151, 27152, 27153, 27154, 27155, 27156, 27157, 27158, 27161, 27162, 27163, 27164, 27165, 27166, 27168, 27170, 27171, 27172, 27173, 27174, 27175, 27177, 27179, 27180, 27181, 27182, 27184, 27186, 27187, 27188, 27190, 27191, 27192, 27193, 27194, 27195, 27196, 27199, 27200, 27201, 27202, 27203, 27205, 27206, 27208, 27209, 27210, 27211, 27212, 27213, 27214, 27215, 27217, 27218, 27219, 27220, 27221, 27222, 27223, 27226, 27228, 27229, 27230, 27231, 27232, 27234, 27235, 27236, 27238, 27239, 27240, 27241, 27242, 27243, 27244, 27245, 27246, 27247, 27248, 27250, 27251, 27252, 27253, 27254, 27255, 27256, 27258, 27259, 27261, 27262, 27263, 27265, 27266, 27267, 27269, 27270, 27271, 27272, 27273, 27274, 27275, 27276, 27277, 27279, 27282, 27283, 27284, 27285, 27286, 27288, 27289, 27290, 27291, 27292, 27293, 27294, 27295, 27297, 27298, 27299, 27300, 27301, 27302, 27303, 27304, 27306, 27309, 27310, 27311, 27312, 27313, 27314, 27315, 27316, 27317, 27318, 27319, 27320, 27321, 27322, 27323, 27324, 27325, 27326, 27327, 27328, 27329, 27330, 27331, 27332, 27333, 27334, 27335, 27336, 27337, 27338, 27339, 27340, 27341, 27342, 27343, 27344, 27345, 27346, 27347, 27348, 27349, 27350, 27351, 27352, 27353, 27354, 27355, 27356, 27357, 27358, 27359, 27360, 27361, 27362, 27363, 27364, 27365, 27366, 27367, 27368, 27369, 27370, 27371, 27372, 27373, 27374, 27375, 27376, 27377, 27378, 27379, 27380, 27381, 27382, 27383, 27384, 27385, 27386, 27387, 27388, 27389, 27390, 27391, 27392, 27393, 27394, 27395, 27396, 27397, 27398, 27399, 27400, 27401, 27402, 27403, 27404, 27405, 27406, 27407, 27408, 27409, 27410, 27411, 27412, 27413, 27414, 27415, 27416, 27417, 27418, 27419, 27420, 27421, 27422, 27423, 27429, 27430, 27432, 27433, 27434, 27435, 27436, 27437, 27438, 27439, 27440, 27441, 27443, 27444, 27445, 27446, 27448, 27451, 27452, 27453, 27455, 27456, 27457, 27458, 27460, 27461, 27464, 27466, 27467, 27469, 27470, 27471, 27472, 27473, 27474, 27475, 27476, 27477, 27478, 27479, 27480, 27482, 27483, 27484, 27485, 27486, 27487, 27488, 27489, 27496, 27497, 27499, 27500, 27501, 27502, 27503, 27504, 27505, 27506, 27507, 27508, 27509, 27510, 27511, 27512, 27514, 27517, 27518, 27519, 27520, 27525, 27528, 27532, 27534, 27535, 27536, 27537, 27540, 27541, 27543, 27544, 27545, 27548, 27549, 27550, 27551, 27552, 27554, 27555, 27556, 27557, 27558, 27559, 27560, 27561, 27563, 27564, 27565, 27566, 27567, 27568, 27569, 27570, 27574, 27576, 27577, 27578, 27579, 27580, 27581, 27582, 27584, 27587, 27588, 27590, 27591, 27592, 27593, 27594, 27596, 27598, 27600, 27601, 27608, 27610, 27612, 27613, 27614, 27615, 27616, 27618, 27619, 27620, 27621, 27622, 27623, 27624, 27625, 27628, 27629, 27630, 27632, 27633, 27634, 27636, 27638, 27639, 27640, 27642, 27643, 27644, 27646, 27647, 27648, 27649, 27650, 27651, 27652, 27656, 27657, 27658, 27659, 27660, 27662, 27666, 27671, 27676, 27677, 27678, 27680, 27683, 27685, 27691, 27692, 27693, 27697, 27699, 27702, 27703, 27705, 27706, 27707, 27708, 27710, 27711, 27715, 27716, 27717, 27720, 27723, 27724, 27725, 27726, 27727, 27729, 27730, 27731, 27734, 27736, 27737, 27738, 27746, 27747, 27749, 27750, 27751, 27755, 27756, 27757, 27758, 27759, 27761, 27763, 27765, 27767, 27768, 27770, 27771, 27772, 27775, 27776, 27780, 27783, 27786, 27787, 27789, 27790, 27793, 27794, 27797, 27798, 27799, 27800, 27802, 27804, 27805, 27806, 27808, 27810, 27816, 27820, 27823, 27824, 27828, 27829, 27830, 27831, 27834, 27840, 27841, 27842, 27843, 27846, 27847, 27848, 27851, 27853, 27854, 27855, 27857, 27858, 27864, 27865, 27866, 27868, 27869, 27871, 27876, 27878, 27879, 27881, 27884, 27885, 27890, 27892, 27897, 27903, 27904, 27906, 27907, 27909, 27910, 27912, 27913, 27914, 27917, 27919, 27920, 27921, 27923, 27924, 27925, 27926, 27928, 27932, 27933, 27935, 27936, 27937, 27938, 27939, 27940, 27942, 27944, 27945, 27948, 27949, 27951, 27952, 27956, 27958, 27959, 27960, 27962, 27967, 27968, 27970, 27972, 27977, 27980, 27984, 27989, 27990, 27991, 27992, 27995, 27997, 27999, 28001, 28002, 28004, 28005, 28007, 28008, 28011, 28012, 28013, 28016, 28017, 28018, 28019, 28021, 28022, 28025, 28026, 28027, 28029, 28030, 28031, 28032, 28033, 28035, 28036, 28038, 28039, 28042, 28043, 28045, 28047, 28048, 28050, 28054, 28055, 28056, 28057, 28058, 28060, 28066, 28069, 28076, 28077, 28080, 28081, 28083, 28084, 28086, 28087, 28089, 28090, 28091, 28092, 28093, 28094, 28097, 28098, 28099, 28104, 28105, 28106, 28109, 28110, 28111, 28112, 28114, 28115, 28116, 28117, 28119, 28122, 28123, 28124, 28127, 28130, 28131, 28133, 28135, 28136, 28137, 28138, 28141, 28143, 28144, 28146, 28148, 28149, 28150, 28152, 28154, 28157, 28158, 28159, 28160, 28161, 28162, 28163, 28164, 28166, 28167, 28168, 28169, 28171, 28175, 28178, 28179, 28181, 28184, 28185, 28187, 28188, 28190, 28191, 28194, 28198, 28199, 28200, 28202, 28204, 28206, 28208, 28209, 28211, 28213, 28214, 28215, 28217, 28219, 28220, 28221, 28222, 28223, 28224, 28225, 28226, 28229, 28230, 28231, 28232, 28233, 28234, 28235, 28236, 28239, 28240, 28241, 28242, 28245, 28247, 28249, 28250, 28252, 28253, 28254, 28256, 28257, 28258, 28259, 28260, 28261, 28262, 28263, 28264, 28265, 28266, 28268, 28269, 28271, 28272, 28273, 28274, 28275, 28276, 28277, 28278, 28279, 28280, 28281, 28282, 28283, 28284, 28285, 28288, 28289, 28290, 28292, 28295, 28296, 28298, 28299, 28300, 28301, 28302, 28305, 28306, 28307, 28308, 28309, 28310, 28311, 28313, 28314, 28315, 28317, 28318, 28320, 28321, 28323, 28324, 28326, 28328, 28329, 28331, 28332, 28333, 28334, 28336, 28339, 28341, 28344, 28345, 28348, 28350, 28351, 28352, 28355, 28356, 28357, 28358, 28360, 28361, 28362, 28364, 28365, 28366, 28368, 28370, 28374, 28376, 28377, 28379, 28380, 28381, 28387, 28391, 28394, 28395, 28396, 28397, 28398, 28399, 28400, 28401, 28402, 28403, 28405, 28406, 28407, 28408, 28410, 28411, 28412, 28413, 28414, 28415, 28416, 28417, 28419, 28420, 28421, 28423, 28424, 28426, 28427, 28428, 28429, 28430, 28432, 28433, 28434, 28438, 28439, 28440, 28441, 28442, 28443, 28444, 28445, 28446, 28447, 28449, 28450, 28451, 28453, 28454, 28455, 28456, 28460, 28462, 28464, 28466, 28468, 28469, 28471, 28472, 28473, 28474, 28475, 28476, 28477, 28479, 28480, 28481, 28482, 28483, 28484, 28485, 28488, 28489, 28490, 28492, 28494, 28495, 28496, 28497, 28498, 28499, 28500, 28501, 28502, 28503, 28505, 28506, 28507, 28509, 28511, 28512, 28513, 28515, 28516, 28517, 28519, 28520, 28521, 28522, 28523, 28524, 28527, 28528, 28529, 28531, 28533, 28534, 28535, 28537, 28539, 28541, 28542, 28543, 28544, 28545, 28546, 28547, 28549, 28550, 28551, 28554, 28555, 28559, 28560, 28561, 28562, 28563, 28564, 28565, 28566, 28567, 28568, 28569, 28570, 28571, 28573, 28574, 28575, 28576, 28578, 28579, 28580, 28581, 28582, 28584, 28585, 28586, 28587, 28588, 28589, 28590, 28591, 28592, 28593, 28594, 28596, 28597, 28599, 28600, 28602, 28603, 28604, 28605, 28606, 28607, 28609, 28611, 28612, 28613, 28614, 28615, 28616, 28618, 28619, 28620, 28621, 28622, 28623, 28624, 28627, 28628, 28629, 28630, 28631, 28632, 28633, 28634, 28635, 28636, 28637, 28639, 28642, 28643, 28644, 28645, 28646, 28647, 28648, 28649, 28650, 28651, 28652, 28653, 28656, 28657, 28658, 28659, 28660, 28661, 28662, 28663, 28664, 28665, 28666, 28667, 28668, 28669, 28670, 28671, 28672, 28673, 28674, 28675, 28676, 28677, 28678, 28679, 28680, 28681, 28682, 28683, 28684, 28685, 28686, 28687, 28688, 28690, 28691, 28692, 28693, 28694, 28695, 28696, 28697, 28700, 28701, 28702, 28703, 28704, 28705, 28706, 28708, 28709, 28710, 28711, 28712, 28713, 28714, 28715, 28716, 28717, 28718, 28719, 28720, 28721, 28722, 28723, 28724, 28726, 28727, 28728, 28730, 28731, 28732, 28733, 28734, 28735, 28736, 28737, 28738, 28739, 28740, 28741, 28742, 28743, 28744, 28745, 28746, 28747, 28749, 28750, 28752, 28753, 28754, 28755, 28756, 28757, 28758, 28759, 28760, 28761, 28762, 28763, 28764, 28765, 28767, 28768, 28769, 28770, 28771, 28772, 28773, 28774, 28775, 28776, 28777, 28778, 28782, 28785, 28786, 28787, 28788, 28791, 28793, 28794, 28795, 28797, 28801, 28802, 28803, 28804, 28806, 28807, 28808, 28811, 28812, 28813, 28815, 28816, 28817, 28819, 28823, 28824, 28826, 28827, 28830, 28831, 28832, 28833, 28834, 28835, 28836, 28837, 28838, 28839, 28840, 28841, 28842, 28848, 28850, 28852, 28853, 28854, 28858, 28862, 28863, 28868, 28869, 28870, 28871, 28873, 28875, 28876, 28877, 28878, 28879, 28880, 28881, 28882, 28883, 28884, 28885, 28886, 28887, 28890, 28892, 28893, 28894, 28896, 28897, 28898, 28899, 28901, 28906, 28910, 28912, 28913, 28914, 28915, 28916, 28917, 28918, 28920, 28922, 28923, 28924, 28926, 28927, 28928, 28929, 28930, 28931, 28932, 28933, 28934, 28935, 28936, 28939, 28940, 28941, 28942, 28943, 28945, 28946, 28948, 28951, 28955, 28956, 28957, 28958, 28959, 28960, 28961, 28962, 28963, 28964, 28965, 28967, 28968, 28969, 28970, 28971, 28972, 28973, 28974, 28978, 28979, 28980, 28981, 28983, 28984, 28985, 28986, 28987, 28988, 28989, 28990, 28991, 28992, 28993, 28994, 28995, 28996, 28998, 28999, 29000, 29001, 29003, 29005, 29007, 29008, 29009, 29010, 29011, 29012, 29013, 29014, 29015, 29016, 29017, 29018, 29019, 29021, 29023, 29024, 29025, 29026, 29027, 29029, 29033, 29034, 29035, 29036, 29037, 29039, 29040, 29041, 29044, 29045, 29046, 29047, 29049, 29051, 29052, 29054, 29055, 29056, 29057, 29058, 29059, 29061, 29062, 29063, 29064, 29065, 29067, 29068, 29069, 29070, 29072, 29073, 29074, 29075, 29077, 29078, 29079, 29082, 29083, 29084, 29085, 29086, 29089, 29090, 29091, 29092, 29093, 29094, 29095, 29097, 29098, 29099, 29101, 29102, 29103, 29104, 29105, 29106, 29108, 29110, 29111, 29112, 29114, 29115, 29116, 29117, 29118, 29119, 29120, 29121, 29122, 29124, 29125, 29126, 29127, 29128, 29129, 29130, 29131, 29132, 29133, 29135, 29136, 29137, 29138, 29139, 29142, 29143, 29144, 29145, 29146, 29147, 29148, 29149, 29150, 29151, 29153, 29154, 29155, 29156, 29158, 29160, 29161, 29162, 29163, 29164, 29165, 29167, 29168, 29169, 29170, 29171, 29172, 29173, 29174, 29175, 29176, 29178, 29179, 29180, 29181, 29182, 29183, 29184, 29185, 29186, 29187, 29188, 29189, 29191, 29192, 29193, 29194, 29195, 29196, 29197, 29198, 29199, 29200, 29201, 29202, 29203, 29204, 29205, 29206, 29207, 29208, 29209, 29210, 29211, 29212, 29214, 29215, 29216, 29217, 29218, 29219, 29220, 29221, 29222, 29223, 29225, 29227, 29229, 29230, 29231, 29234, 29235, 29236, 29242, 29244, 29246, 29248, 29249, 29250, 29251, 29252, 29253, 29254, 29257, 29258, 29259, 29262, 29263, 29264, 29265, 29267, 29268, 29269, 29271, 29272, 29274, 29276, 29278, 29280, 29283, 29284, 29285, 29288, 29290, 29291, 29292, 29293, 29296, 29297, 29299, 29300, 29302, 29303, 29304, 29307, 29308, 29309, 29314, 29315, 29317, 29318, 29319, 29320, 29321, 29324, 29326, 29328, 29329, 29331, 29332, 29333, 29334, 29335, 29336, 29337, 29338, 29339, 29340, 29341, 29342, 29344, 29345, 29346, 29347, 29348, 29349, 29350, 29351, 29352, 29353, 29354, 29355, 29358, 29361, 29362, 29363, 29365, 29370, 29371, 29372, 29373, 29374, 29375, 29376, 29381, 29382, 29383, 29385, 29386, 29387, 29388, 29391, 29393, 29395, 29396, 29397, 29398, 29400, 29402, 29403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 12289, 12290, 183, 713, 711, 168, 12291, 12293, 8212, 65374, 8214, 8230, 8216, 8217, 8220, 8221, 12308, 12309, 12296, 12297, 12298, 12299, 12300, 12301, 12302, 12303, 12310, 12311, 12304, 12305, 177, 215, 247, 8758, 8743, 8744, 8721, 8719, 8746, 8745, 8712, 8759, 8730, 8869, 8741, 8736, 8978, 8857, 8747, 8750, 8801, 8780, 8776, 8765, 8733, 8800, 8814, 8815, 8804, 8805, 8734, 8757, 8756, 9794, 9792, 176, 8242, 8243, 8451, 65284, 164, 65504, 65505, 8240, 167, 8470, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 8251, 8594, 8592, 8593, 8595, 12307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 0, 0, 0, 0, 0, 0, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360, 9361, 9362, 9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370, 9371, 9332, 9333, 9334, 9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350, 9351, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9319, 9320, 9321, 8364, 0, 12832, 12833, 12834, 12835, 12836, 12837, 12838, 12839, 12840, 12841, 0, 0, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 8554, 8555, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 65281, 65282, 65283, 65509, 65285, 65286, 65287, 65288, 65289, 65290, 65291, 65292, 65293, 65294, 65295, 65296, 65297, 65298, 65299, 65300, 65301, 65302, 65303, 65304, 65305, 65306, 65307, 65308, 65309, 65310, 65311, 65312, 65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338, 65339, 65340, 65341, 65342, 65343, 65344, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 65371, 65372, 65373, 65507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 0, 0, 0, 0, 0, 0, 0, 0, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 0, 0, 0, 0, 0, 0, 0, 65077, 65078, 65081, 65082, 65087, 65088, 65085, 65086, 65089, 65090, 65091, 65092, 0, 0, 65083, 65084, 65079, 65080, 65073, 0, 65075, 65076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1072, 1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 714, 715, 729, 8211, 8213, 8229, 8245, 8453, 8457, 8598, 8599, 8600, 8601, 8725, 8735, 8739, 8786, 8806, 8807, 8895, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587, 9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608, 9609, 9610, 9611, 9612, 9613, 9614, 9615, 9619, 9620, 9621, 9660, 9661, 9698, 9699, 9700, 9701, 9737, 8853, 12306, 12317, 12318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 257, 225, 462, 224, 275, 233, 283, 232, 299, 237, 464, 236, 333, 243, 466, 242, 363, 250, 468, 249, 470, 472, 474, 476, 252, 234, 593, 0, 324, 328, 505, 609, 0, 0, 0, 0, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558, 12559, 12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568, 12569, 12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578, 12579, 12580, 12581, 12582, 12583, 12584, 12585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12321, 12322, 12323, 12324, 12325, 12326, 12327, 12328, 12329, 12963, 13198, 13199, 13212, 13213, 13214, 13217, 13252, 13262, 13265, 13266, 13269, 65072, 65506, 65508, 0, 8481, 12849, 0, 8208, 0, 0, 0, 12540, 12443, 12444, 12541, 12542, 12294, 12445, 12446, 65097, 65098, 65099, 65100, 65101, 65102, 65103, 65104, 65105, 65106, 65108, 65109, 65110, 65111, 65113, 65114, 65115, 65116, 65117, 65118, 65119, 65120, 65121, 65122, 65123, 65124, 65125, 65126, 65128, 65129, 65130, 65131, 12350, 12272, 12273, 12274, 12275, 12276, 12277, 12278, 12279, 12280, 12281, 12282, 12283, 12295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9472, 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491, 9492, 9493, 9494, 9495, 9496, 9497, 9498, 9499, 9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507, 9508, 9509, 9510, 9511, 9512, 9513, 9514, 9515, 9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536, 9537, 9538, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29404, 29405, 29407, 29410, 29411, 29412, 29413, 29414, 29415, 29418, 29419, 29429, 29430, 29433, 29437, 29438, 29439, 29440, 29442, 29444, 29445, 29446, 29447, 29448, 29449, 29451, 29452, 29453, 29455, 29456, 29457, 29458, 29460, 29464, 29465, 29466, 29471, 29472, 29475, 29476, 29478, 29479, 29480, 29485, 29487, 29488, 29490, 29491, 29493, 29494, 29498, 29499, 29500, 29501, 29504, 29505, 29506, 29507, 29508, 29509, 29510, 29511, 29512, 29513, 29514, 29515, 29516, 29518, 29519, 29521, 29523, 29524, 29525, 29526, 29528, 29529, 29530, 29531, 29532, 29533, 29534, 29535, 29537, 29538, 29539, 29540, 29541, 29542, 29543, 29544, 29545, 29546, 29547, 29550, 29552, 29553, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29554, 29555, 29556, 29557, 29558, 29559, 29560, 29561, 29562, 29563, 29564, 29565, 29567, 29568, 29569, 29570, 29571, 29573, 29574, 29576, 29578, 29580, 29581, 29583, 29584, 29586, 29587, 29588, 29589, 29591, 29592, 29593, 29594, 29596, 29597, 29598, 29600, 29601, 29603, 29604, 29605, 29606, 29607, 29608, 29610, 29612, 29613, 29617, 29620, 29621, 29622, 29624, 29625, 29628, 29629, 29630, 29631, 29633, 29635, 29636, 29637, 29638, 29639, 29643, 29644, 29646, 29650, 29651, 29652, 29653, 29654, 29655, 29656, 29658, 29659, 29660, 29661, 29663, 29665, 29666, 29667, 29668, 29670, 29672, 29674, 29675, 29676, 29678, 29679, 29680, 29681, 29683, 29684, 29685, 29686, 29687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29688, 29689, 29690, 29691, 29692, 29693, 29694, 29695, 29696, 29697, 29698, 29700, 29703, 29704, 29707, 29708, 29709, 29710, 29713, 29714, 29715, 29716, 29717, 29718, 29719, 29720, 29721, 29724, 29725, 29726, 29727, 29728, 29729, 29731, 29732, 29735, 29737, 29739, 29741, 29743, 29745, 29746, 29751, 29752, 29753, 29754, 29755, 29757, 29758, 29759, 29760, 29762, 29763, 29764, 29765, 29766, 29767, 29768, 29769, 29770, 29771, 29772, 29773, 29774, 29775, 29776, 29777, 29778, 29779, 29780, 29782, 29784, 29789, 29792, 29793, 29794, 29795, 29796, 29797, 29798, 29799, 29800, 29801, 29802, 29803, 29804, 29806, 29807, 29809, 29810, 29811, 29812, 29813, 29816, 29817, 29818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29819, 29820, 29821, 29823, 29826, 29828, 29829, 29830, 29832, 29833, 29834, 29836, 29837, 29839, 29841, 29842, 29843, 29844, 29845, 29846, 29847, 29848, 29849, 29850, 29851, 29853, 29855, 29856, 29857, 29858, 29859, 29860, 29861, 29862, 29866, 29867, 29868, 29869, 29870, 29871, 29872, 29873, 29874, 29875, 29876, 29877, 29878, 29879, 29880, 29881, 29883, 29884, 29885, 29886, 29887, 29888, 29889, 29890, 29891, 29892, 29893, 29894, 29895, 29896, 29897, 29898, 29899, 29900, 29901, 29902, 29903, 29904, 29905, 29907, 29908, 29909, 29910, 29911, 29912, 29913, 29914, 29915, 29917, 29919, 29921, 29925, 29927, 29928, 29929, 29930, 29931, 29932, 29933, 29936, 29937, 29938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29939, 29941, 29944, 29945, 29946, 29947, 29948, 29949, 29950, 29952, 29953, 29954, 29955, 29957, 29958, 29959, 29960, 29961, 29962, 29963, 29964, 29966, 29968, 29970, 29972, 29973, 29974, 29975, 29979, 29981, 29982, 29984, 29985, 29986, 29987, 29988, 29990, 29991, 29994, 29998, 30004, 30006, 30009, 30012, 30013, 30015, 30017, 30018, 30019, 30020, 30022, 30023, 30025, 30026, 30029, 30032, 30033, 30034, 30035, 30037, 30038, 30039, 30040, 30045, 30046, 30047, 30048, 30049, 30050, 30051, 30052, 30055, 30056, 30057, 30059, 30060, 30061, 30062, 30063, 30064, 30065, 30067, 30069, 30070, 30071, 30074, 30075, 30076, 30077, 30078, 30080, 30081, 30082, 30084, 30085, 30087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30088, 30089, 30090, 30092, 30093, 30094, 30096, 30099, 30101, 30104, 30107, 30108, 30110, 30114, 30118, 30119, 30120, 30121, 30122, 30125, 30134, 30135, 30138, 30139, 30143, 30144, 30145, 30150, 30155, 30156, 30158, 30159, 30160, 30161, 30163, 30167, 30169, 30170, 30172, 30173, 30175, 30176, 30177, 30181, 30185, 30188, 30189, 30190, 30191, 30194, 30195, 30197, 30198, 30199, 30200, 30202, 30203, 30205, 30206, 30210, 30212, 30214, 30215, 30216, 30217, 30219, 30221, 30222, 30223, 30225, 30226, 30227, 30228, 30230, 30234, 30236, 30237, 30238, 30241, 30243, 30247, 30248, 30252, 30254, 30255, 30257, 30258, 30262, 30263, 30265, 30266, 30267, 30269, 30273, 30274, 30276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30277, 30278, 30279, 30280, 30281, 30282, 30283, 30286, 30287, 30288, 30289, 30290, 30291, 30293, 30295, 30296, 30297, 30298, 30299, 30301, 30303, 30304, 30305, 30306, 30308, 30309, 30310, 30311, 30312, 30313, 30314, 30316, 30317, 30318, 30320, 30321, 30322, 30323, 30324, 30325, 30326, 30327, 30329, 30330, 30332, 30335, 30336, 30337, 30339, 30341, 30345, 30346, 30348, 30349, 30351, 30352, 30354, 30356, 30357, 30359, 30360, 30362, 30363, 30364, 30365, 30366, 30367, 30368, 30369, 30370, 30371, 30373, 30374, 30375, 30376, 30377, 30378, 30379, 30380, 30381, 30383, 30384, 30387, 30389, 30390, 30391, 30392, 30393, 30394, 30395, 30396, 30397, 30398, 30400, 30401, 30403, 21834, 38463, 22467, 25384, 21710, 21769, 21696, 30353, 30284, 34108, 30702, 33406, 30861, 29233, 38552, 38797, 27688, 23433, 20474, 25353, 26263, 23736, 33018, 26696, 32942, 26114, 30414, 20985, 25942, 29100, 32753, 34948, 20658, 22885, 25034, 28595, 33453, 25420, 25170, 21485, 21543, 31494, 20843, 30116, 24052, 25300, 36299, 38774, 25226, 32793, 22365, 38712, 32610, 29240, 30333, 26575, 30334, 25670, 20336, 36133, 25308, 31255, 26001, 29677, 25644, 25203, 33324, 39041, 26495, 29256, 25198, 25292, 20276, 29923, 21322, 21150, 32458, 37030, 24110, 26758, 27036, 33152, 32465, 26834, 30917, 34444, 38225, 20621, 35876, 33502, 32990, 21253, 35090, 21093, 30404, 30407, 30409, 30411, 30412, 30419, 30421, 30425, 30426, 30428, 30429, 30430, 30432, 30433, 30434, 30435, 30436, 30438, 30439, 30440, 30441, 30442, 30443, 30444, 30445, 30448, 30451, 30453, 30454, 30455, 30458, 30459, 30461, 30463, 30464, 30466, 30467, 30469, 30470, 30474, 30476, 30478, 30479, 30480, 30481, 30482, 30483, 30484, 30485, 30486, 30487, 30488, 30491, 30492, 30493, 30494, 30497, 30499, 30500, 30501, 30503, 30506, 30507, 30508, 30510, 30512, 30513, 30514, 30515, 30516, 30521, 30523, 30525, 30526, 30527, 30530, 30532, 30533, 30534, 30536, 30537, 30538, 30539, 30540, 30541, 30542, 30543, 30546, 30547, 30548, 30549, 30550, 30551, 30552, 30553, 30556, 34180, 38649, 20445, 22561, 39281, 23453, 25265, 25253, 26292, 35961, 40077, 29190, 26479, 30865, 24754, 21329, 21271, 36744, 32972, 36125, 38049, 20493, 29384, 22791, 24811, 28953, 34987, 22868, 33519, 26412, 31528, 23849, 32503, 29997, 27893, 36454, 36856, 36924, 40763, 27604, 37145, 31508, 24444, 30887, 34006, 34109, 27605, 27609, 27606, 24065, 24199, 30201, 38381, 25949, 24330, 24517, 36767, 22721, 33218, 36991, 38491, 38829, 36793, 32534, 36140, 25153, 20415, 21464, 21342, 36776, 36777, 36779, 36941, 26631, 24426, 33176, 34920, 40150, 24971, 21035, 30250, 24428, 25996, 28626, 28392, 23486, 25672, 20853, 20912, 26564, 19993, 31177, 39292, 28851, 30557, 30558, 30559, 30560, 30564, 30567, 30569, 30570, 30573, 30574, 30575, 30576, 30577, 30578, 30579, 30580, 30581, 30582, 30583, 30584, 30586, 30587, 30588, 30593, 30594, 30595, 30598, 30599, 30600, 30601, 30602, 30603, 30607, 30608, 30611, 30612, 30613, 30614, 30615, 30616, 30617, 30618, 30619, 30620, 30621, 30622, 30625, 30627, 30628, 30630, 30632, 30635, 30637, 30638, 30639, 30641, 30642, 30644, 30646, 30647, 30648, 30649, 30650, 30652, 30654, 30656, 30657, 30658, 30659, 30660, 30661, 30662, 30663, 30664, 30665, 30666, 30667, 30668, 30670, 30671, 30672, 30673, 30674, 30675, 30676, 30677, 30678, 30680, 30681, 30682, 30685, 30686, 30687, 30688, 30689, 30692, 30149, 24182, 29627, 33760, 25773, 25320, 38069, 27874, 21338, 21187, 25615, 38082, 31636, 20271, 24091, 33334, 33046, 33162, 28196, 27850, 39539, 25429, 21340, 21754, 34917, 22496, 19981, 24067, 27493, 31807, 37096, 24598, 25830, 29468, 35009, 26448, 25165, 36130, 30572, 36393, 37319, 24425, 33756, 34081, 39184, 21442, 34453, 27531, 24813, 24808, 28799, 33485, 33329, 20179, 27815, 34255, 25805, 31961, 27133, 26361, 33609, 21397, 31574, 20391, 20876, 27979, 23618, 36461, 25554, 21449, 33580, 33590, 26597, 30900, 25661, 23519, 23700, 24046, 35815, 25286, 26612, 35962, 25600, 25530, 34633, 39307, 35863, 32544, 38130, 20135, 38416, 39076, 26124, 29462, 30694, 30696, 30698, 30703, 30704, 30705, 30706, 30708, 30709, 30711, 30713, 30714, 30715, 30716, 30723, 30724, 30725, 30726, 30727, 30728, 30730, 30731, 30734, 30735, 30736, 30739, 30741, 30745, 30747, 30750, 30752, 30753, 30754, 30756, 30760, 30762, 30763, 30766, 30767, 30769, 30770, 30771, 30773, 30774, 30781, 30783, 30785, 30786, 30787, 30788, 30790, 30792, 30793, 30794, 30795, 30797, 30799, 30801, 30803, 30804, 30808, 30809, 30810, 30811, 30812, 30814, 30815, 30816, 30817, 30818, 30819, 30820, 30821, 30822, 30823, 30824, 30825, 30831, 30832, 30833, 30834, 30835, 30836, 30837, 30838, 30840, 30841, 30842, 30843, 30845, 30846, 30847, 30848, 30849, 30850, 30851, 22330, 23581, 24120, 38271, 20607, 32928, 21378, 25950, 30021, 21809, 20513, 36229, 25220, 38046, 26397, 22066, 28526, 24034, 21557, 28818, 36710, 25199, 25764, 25507, 24443, 28552, 37108, 33251, 36784, 23576, 26216, 24561, 27785, 38472, 36225, 34924, 25745, 31216, 22478, 27225, 25104, 21576, 20056, 31243, 24809, 28548, 35802, 25215, 36894, 39563, 31204, 21507, 30196, 25345, 21273, 27744, 36831, 24347, 39536, 32827, 40831, 20360, 23610, 36196, 32709, 26021, 28861, 20805, 20914, 34411, 23815, 23456, 25277, 37228, 30068, 36364, 31264, 24833, 31609, 20167, 32504, 30597, 19985, 33261, 21021, 20986, 27249, 21416, 36487, 38148, 38607, 28353, 38500, 26970, 30852, 30853, 30854, 30856, 30858, 30859, 30863, 30864, 30866, 30868, 30869, 30870, 30873, 30877, 30878, 30880, 30882, 30884, 30886, 30888, 30889, 30890, 30891, 30892, 30893, 30894, 30895, 30901, 30902, 30903, 30904, 30906, 30907, 30908, 30909, 30911, 30912, 30914, 30915, 30916, 30918, 30919, 30920, 30924, 30925, 30926, 30927, 30929, 30930, 30931, 30934, 30935, 30936, 30938, 30939, 30940, 30941, 30942, 30943, 30944, 30945, 30946, 30947, 30948, 30949, 30950, 30951, 30953, 30954, 30955, 30957, 30958, 30959, 30960, 30961, 30963, 30965, 30966, 30968, 30969, 30971, 30972, 30973, 30974, 30975, 30976, 30978, 30979, 30980, 30982, 30983, 30984, 30985, 30986, 30987, 30988, 30784, 20648, 30679, 25616, 35302, 22788, 25571, 24029, 31359, 26941, 20256, 33337, 21912, 20018, 30126, 31383, 24162, 24202, 38383, 21019, 21561, 28810, 25462, 38180, 22402, 26149, 26943, 37255, 21767, 28147, 32431, 34850, 25139, 32496, 30133, 33576, 30913, 38604, 36766, 24904, 29943, 35789, 27492, 21050, 36176, 27425, 32874, 33905, 22257, 21254, 20174, 19995, 20945, 31895, 37259, 31751, 20419, 36479, 31713, 31388, 25703, 23828, 20652, 33030, 30209, 31929, 28140, 32736, 26449, 23384, 23544, 30923, 25774, 25619, 25514, 25387, 38169, 25645, 36798, 31572, 30249, 25171, 22823, 21574, 27513, 20643, 25140, 24102, 27526, 20195, 36151, 34955, 24453, 36910, 30989, 30990, 30991, 30992, 30993, 30994, 30996, 30997, 30998, 30999, 31000, 31001, 31002, 31003, 31004, 31005, 31007, 31008, 31009, 31010, 31011, 31013, 31014, 31015, 31016, 31017, 31018, 31019, 31020, 31021, 31022, 31023, 31024, 31025, 31026, 31027, 31029, 31030, 31031, 31032, 31033, 31037, 31039, 31042, 31043, 31044, 31045, 31047, 31050, 31051, 31052, 31053, 31054, 31055, 31056, 31057, 31058, 31060, 31061, 31064, 31065, 31073, 31075, 31076, 31078, 31081, 31082, 31083, 31084, 31086, 31088, 31089, 31090, 31091, 31092, 31093, 31094, 31097, 31099, 31100, 31101, 31102, 31103, 31106, 31107, 31110, 31111, 31112, 31113, 31115, 31116, 31117, 31118, 31120, 31121, 31122, 24608, 32829, 25285, 20025, 21333, 37112, 25528, 32966, 26086, 27694, 20294, 24814, 28129, 35806, 24377, 34507, 24403, 25377, 20826, 33633, 26723, 20992, 25443, 36424, 20498, 23707, 31095, 23548, 21040, 31291, 24764, 36947, 30423, 24503, 24471, 30340, 36460, 28783, 30331, 31561, 30634, 20979, 37011, 22564, 20302, 28404, 36842, 25932, 31515, 29380, 28068, 32735, 23265, 25269, 24213, 22320, 33922, 31532, 24093, 24351, 36882, 32532, 39072, 25474, 28359, 30872, 28857, 20856, 38747, 22443, 30005, 20291, 30008, 24215, 24806, 22880, 28096, 27583, 30857, 21500, 38613, 20939, 20993, 25481, 21514, 38035, 35843, 36300, 29241, 30879, 34678, 36845, 35853, 21472, 31123, 31124, 31125, 31126, 31127, 31128, 31129, 31131, 31132, 31133, 31134, 31135, 31136, 31137, 31138, 31139, 31140, 31141, 31142, 31144, 31145, 31146, 31147, 31148, 31149, 31150, 31151, 31152, 31153, 31154, 31156, 31157, 31158, 31159, 31160, 31164, 31167, 31170, 31172, 31173, 31175, 31176, 31178, 31180, 31182, 31183, 31184, 31187, 31188, 31190, 31191, 31193, 31194, 31195, 31196, 31197, 31198, 31200, 31201, 31202, 31205, 31208, 31210, 31212, 31214, 31217, 31218, 31219, 31220, 31221, 31222, 31223, 31225, 31226, 31228, 31230, 31231, 31233, 31236, 31237, 31239, 31240, 31241, 31242, 31244, 31247, 31248, 31249, 31250, 31251, 31253, 31254, 31256, 31257, 31259, 31260, 19969, 30447, 21486, 38025, 39030, 40718, 38189, 23450, 35746, 20002, 19996, 20908, 33891, 25026, 21160, 26635, 20375, 24683, 20923, 27934, 20828, 25238, 26007, 38497, 35910, 36887, 30168, 37117, 30563, 27602, 29322, 29420, 35835, 22581, 30585, 36172, 26460, 38208, 32922, 24230, 28193, 22930, 31471, 30701, 38203, 27573, 26029, 32526, 22534, 20817, 38431, 23545, 22697, 21544, 36466, 25958, 39039, 22244, 38045, 30462, 36929, 25479, 21702, 22810, 22842, 22427, 36530, 26421, 36346, 33333, 21057, 24816, 22549, 34558, 23784, 40517, 20420, 39069, 35769, 23077, 24694, 21380, 25212, 36943, 37122, 39295, 24681, 32780, 20799, 32819, 23572, 39285, 27953, 20108, 31261, 31263, 31265, 31266, 31268, 31269, 31270, 31271, 31272, 31273, 31274, 31275, 31276, 31277, 31278, 31279, 31280, 31281, 31282, 31284, 31285, 31286, 31288, 31290, 31294, 31296, 31297, 31298, 31299, 31300, 31301, 31303, 31304, 31305, 31306, 31307, 31308, 31309, 31310, 31311, 31312, 31314, 31315, 31316, 31317, 31318, 31320, 31321, 31322, 31323, 31324, 31325, 31326, 31327, 31328, 31329, 31330, 31331, 31332, 31333, 31334, 31335, 31336, 31337, 31338, 31339, 31340, 31341, 31342, 31343, 31345, 31346, 31347, 31349, 31355, 31356, 31357, 31358, 31362, 31365, 31367, 31369, 31370, 31371, 31372, 31374, 31375, 31376, 31379, 31380, 31385, 31386, 31387, 31390, 31393, 31394, 36144, 21457, 32602, 31567, 20240, 20047, 38400, 27861, 29648, 34281, 24070, 30058, 32763, 27146, 30718, 38034, 32321, 20961, 28902, 21453, 36820, 33539, 36137, 29359, 39277, 27867, 22346, 33459, 26041, 32938, 25151, 38450, 22952, 20223, 35775, 32442, 25918, 33778, 38750, 21857, 39134, 32933, 21290, 35837, 21536, 32954, 24223, 27832, 36153, 33452, 37210, 21545, 27675, 20998, 32439, 22367, 28954, 27774, 31881, 22859, 20221, 24575, 24868, 31914, 20016, 23553, 26539, 34562, 23792, 38155, 39118, 30127, 28925, 36898, 20911, 32541, 35773, 22857, 20964, 20315, 21542, 22827, 25975, 32932, 23413, 25206, 25282, 36752, 24133, 27679, 31526, 20239, 20440, 26381, 31395, 31396, 31399, 31401, 31402, 31403, 31406, 31407, 31408, 31409, 31410, 31412, 31413, 31414, 31415, 31416, 31417, 31418, 31419, 31420, 31421, 31422, 31424, 31425, 31426, 31427, 31428, 31429, 31430, 31431, 31432, 31433, 31434, 31436, 31437, 31438, 31439, 31440, 31441, 31442, 31443, 31444, 31445, 31447, 31448, 31450, 31451, 31452, 31453, 31457, 31458, 31460, 31463, 31464, 31465, 31466, 31467, 31468, 31470, 31472, 31473, 31474, 31475, 31476, 31477, 31478, 31479, 31480, 31483, 31484, 31486, 31488, 31489, 31490, 31493, 31495, 31497, 31500, 31501, 31502, 31504, 31506, 31507, 31510, 31511, 31512, 31514, 31516, 31517, 31519, 31521, 31522, 31523, 31527, 31529, 31533, 28014, 28074, 31119, 34993, 24343, 29995, 25242, 36741, 20463, 37340, 26023, 33071, 33105, 24220, 33104, 36212, 21103, 35206, 36171, 22797, 20613, 20184, 38428, 29238, 33145, 36127, 23500, 35747, 38468, 22919, 32538, 21648, 22134, 22030, 35813, 25913, 27010, 38041, 30422, 28297, 24178, 29976, 26438, 26577, 31487, 32925, 36214, 24863, 31174, 25954, 36195, 20872, 21018, 38050, 32568, 32923, 32434, 23703, 28207, 26464, 31705, 30347, 39640, 33167, 32660, 31957, 25630, 38224, 31295, 21578, 21733, 27468, 25601, 25096, 40509, 33011, 30105, 21106, 38761, 33883, 26684, 34532, 38401, 38548, 38124, 20010, 21508, 32473, 26681, 36319, 32789, 26356, 24218, 32697, 31535, 31536, 31538, 31540, 31541, 31542, 31543, 31545, 31547, 31549, 31551, 31552, 31553, 31554, 31555, 31556, 31558, 31560, 31562, 31565, 31566, 31571, 31573, 31575, 31577, 31580, 31582, 31583, 31585, 31587, 31588, 31589, 31590, 31591, 31592, 31593, 31594, 31595, 31596, 31597, 31599, 31600, 31603, 31604, 31606, 31608, 31610, 31612, 31613, 31615, 31617, 31618, 31619, 31620, 31622, 31623, 31624, 31625, 31626, 31627, 31628, 31630, 31631, 31633, 31634, 31635, 31638, 31640, 31641, 31642, 31643, 31646, 31647, 31648, 31651, 31652, 31653, 31662, 31663, 31664, 31666, 31667, 31669, 31670, 31671, 31673, 31674, 31675, 31676, 31677, 31678, 31679, 31680, 31682, 31683, 31684, 22466, 32831, 26775, 24037, 25915, 21151, 24685, 40858, 20379, 36524, 20844, 23467, 24339, 24041, 27742, 25329, 36129, 20849, 38057, 21246, 27807, 33503, 29399, 22434, 26500, 36141, 22815, 36764, 33735, 21653, 31629, 20272, 27837, 23396, 22993, 40723, 21476, 34506, 39592, 35895, 32929, 25925, 39038, 22266, 38599, 21038, 29916, 21072, 23521, 25346, 35074, 20054, 25296, 24618, 26874, 20851, 23448, 20896, 35266, 31649, 39302, 32592, 24815, 28748, 36143, 20809, 24191, 36891, 29808, 35268, 22317, 30789, 24402, 40863, 38394, 36712, 39740, 35809, 30328, 26690, 26588, 36330, 36149, 21053, 36746, 28378, 26829, 38149, 37101, 22269, 26524, 35065, 36807, 21704, 31685, 31688, 31689, 31690, 31691, 31693, 31694, 31695, 31696, 31698, 31700, 31701, 31702, 31703, 31704, 31707, 31708, 31710, 31711, 31712, 31714, 31715, 31716, 31719, 31720, 31721, 31723, 31724, 31725, 31727, 31728, 31730, 31731, 31732, 31733, 31734, 31736, 31737, 31738, 31739, 31741, 31743, 31744, 31745, 31746, 31747, 31748, 31749, 31750, 31752, 31753, 31754, 31757, 31758, 31760, 31761, 31762, 31763, 31764, 31765, 31767, 31768, 31769, 31770, 31771, 31772, 31773, 31774, 31776, 31777, 31778, 31779, 31780, 31781, 31784, 31785, 31787, 31788, 31789, 31790, 31791, 31792, 31793, 31794, 31795, 31796, 31797, 31798, 31799, 31801, 31802, 31803, 31804, 31805, 31806, 31810, 39608, 23401, 28023, 27686, 20133, 23475, 39559, 37219, 25000, 37039, 38889, 21547, 28085, 23506, 20989, 21898, 32597, 32752, 25788, 25421, 26097, 25022, 24717, 28938, 27735, 27721, 22831, 26477, 33322, 22741, 22158, 35946, 27627, 37085, 22909, 32791, 21495, 28009, 21621, 21917, 33655, 33743, 26680, 31166, 21644, 20309, 21512, 30418, 35977, 38402, 27827, 28088, 36203, 35088, 40548, 36154, 22079, 40657, 30165, 24456, 29408, 24680, 21756, 20136, 27178, 34913, 24658, 36720, 21700, 28888, 34425, 40511, 27946, 23439, 24344, 32418, 21897, 20399, 29492, 21564, 21402, 20505, 21518, 21628, 20046, 24573, 29786, 22774, 33899, 32993, 34676, 29392, 31946, 28246, 31811, 31812, 31813, 31814, 31815, 31816, 31817, 31818, 31819, 31820, 31822, 31823, 31824, 31825, 31826, 31827, 31828, 31829, 31830, 31831, 31832, 31833, 31834, 31835, 31836, 31837, 31838, 31839, 31840, 31841, 31842, 31843, 31844, 31845, 31846, 31847, 31848, 31849, 31850, 31851, 31852, 31853, 31854, 31855, 31856, 31857, 31858, 31861, 31862, 31863, 31864, 31865, 31866, 31870, 31871, 31872, 31873, 31874, 31875, 31876, 31877, 31878, 31879, 31880, 31882, 31883, 31884, 31885, 31886, 31887, 31888, 31891, 31892, 31894, 31897, 31898, 31899, 31904, 31905, 31907, 31910, 31911, 31912, 31913, 31915, 31916, 31917, 31919, 31920, 31924, 31925, 31926, 31927, 31928, 31930, 31931, 24359, 34382, 21804, 25252, 20114, 27818, 25143, 33457, 21719, 21326, 29502, 28369, 30011, 21010, 21270, 35805, 27088, 24458, 24576, 28142, 22351, 27426, 29615, 26707, 36824, 32531, 25442, 24739, 21796, 30186, 35938, 28949, 28067, 23462, 24187, 33618, 24908, 40644, 30970, 34647, 31783, 30343, 20976, 24822, 29004, 26179, 24140, 24653, 35854, 28784, 25381, 36745, 24509, 24674, 34516, 22238, 27585, 24724, 24935, 21321, 24800, 26214, 36159, 31229, 20250, 28905, 27719, 35763, 35826, 32472, 33636, 26127, 23130, 39746, 27985, 28151, 35905, 27963, 20249, 28779, 33719, 25110, 24785, 38669, 36135, 31096, 20987, 22334, 22522, 26426, 30072, 31293, 31215, 31637, 31935, 31936, 31938, 31939, 31940, 31942, 31945, 31947, 31950, 31951, 31952, 31953, 31954, 31955, 31956, 31960, 31962, 31963, 31965, 31966, 31969, 31970, 31971, 31972, 31973, 31974, 31975, 31977, 31978, 31979, 31980, 31981, 31982, 31984, 31985, 31986, 31987, 31988, 31989, 31990, 31991, 31993, 31994, 31996, 31997, 31998, 31999, 32000, 32001, 32002, 32003, 32004, 32005, 32006, 32007, 32008, 32009, 32011, 32012, 32013, 32014, 32015, 32016, 32017, 32018, 32019, 32020, 32021, 32022, 32023, 32024, 32025, 32026, 32027, 32028, 32029, 32030, 32031, 32033, 32035, 32036, 32037, 32038, 32040, 32041, 32042, 32044, 32045, 32046, 32048, 32049, 32050, 32051, 32052, 32053, 32054, 32908, 39269, 36857, 28608, 35749, 40481, 23020, 32489, 32521, 21513, 26497, 26840, 36753, 31821, 38598, 21450, 24613, 30142, 27762, 21363, 23241, 32423, 25380, 20960, 33034, 24049, 34015, 25216, 20864, 23395, 20238, 31085, 21058, 24760, 27982, 23492, 23490, 35745, 35760, 26082, 24524, 38469, 22931, 32487, 32426, 22025, 26551, 22841, 20339, 23478, 21152, 33626, 39050, 36158, 30002, 38078, 20551, 31292, 20215, 26550, 39550, 23233, 27516, 30417, 22362, 23574, 31546, 38388, 29006, 20860, 32937, 33392, 22904, 32516, 33575, 26816, 26604, 30897, 30839, 25315, 25441, 31616, 20461, 21098, 20943, 33616, 27099, 37492, 36341, 36145, 35265, 38190, 31661, 20214, 32055, 32056, 32057, 32058, 32059, 32060, 32061, 32062, 32063, 32064, 32065, 32066, 32067, 32068, 32069, 32070, 32071, 32072, 32073, 32074, 32075, 32076, 32077, 32078, 32079, 32080, 32081, 32082, 32083, 32084, 32085, 32086, 32087, 32088, 32089, 32090, 32091, 32092, 32093, 32094, 32095, 32096, 32097, 32098, 32099, 32100, 32101, 32102, 32103, 32104, 32105, 32106, 32107, 32108, 32109, 32111, 32112, 32113, 32114, 32115, 32116, 32117, 32118, 32120, 32121, 32122, 32123, 32124, 32125, 32126, 32127, 32128, 32129, 32130, 32131, 32132, 32133, 32134, 32135, 32136, 32137, 32138, 32139, 32140, 32141, 32142, 32143, 32144, 32145, 32146, 32147, 32148, 32149, 32150, 32151, 32152, 20581, 33328, 21073, 39279, 28176, 28293, 28071, 24314, 20725, 23004, 23558, 27974, 27743, 30086, 33931, 26728, 22870, 35762, 21280, 37233, 38477, 34121, 26898, 30977, 28966, 33014, 20132, 37066, 27975, 39556, 23047, 22204, 25605, 38128, 30699, 20389, 33050, 29409, 35282, 39290, 32564, 32478, 21119, 25945, 37237, 36735, 36739, 21483, 31382, 25581, 25509, 30342, 31224, 34903, 38454, 25130, 21163, 33410, 26708, 26480, 25463, 30571, 31469, 27905, 32467, 35299, 22992, 25106, 34249, 33445, 30028, 20511, 20171, 30117, 35819, 23626, 24062, 31563, 26020, 37329, 20170, 27941, 35167, 32039, 38182, 20165, 35880, 36827, 38771, 26187, 31105, 36817, 28908, 28024, 32153, 32154, 32155, 32156, 32157, 32158, 32159, 32160, 32161, 32162, 32163, 32164, 32165, 32167, 32168, 32169, 32170, 32171, 32172, 32173, 32175, 32176, 32177, 32178, 32179, 32180, 32181, 32182, 32183, 32184, 32185, 32186, 32187, 32188, 32189, 32190, 32191, 32192, 32193, 32194, 32195, 32196, 32197, 32198, 32199, 32200, 32201, 32202, 32203, 32204, 32205, 32206, 32207, 32208, 32209, 32210, 32211, 32212, 32213, 32214, 32215, 32216, 32217, 32218, 32219, 32220, 32221, 32222, 32223, 32224, 32225, 32226, 32227, 32228, 32229, 32230, 32231, 32232, 32233, 32234, 32235, 32236, 32237, 32238, 32239, 32240, 32241, 32242, 32243, 32244, 32245, 32246, 32247, 32248, 32249, 32250, 23613, 21170, 33606, 20834, 33550, 30555, 26230, 40120, 20140, 24778, 31934, 31923, 32463, 20117, 35686, 26223, 39048, 38745, 22659, 25964, 38236, 24452, 30153, 38742, 31455, 31454, 20928, 28847, 31384, 25578, 31350, 32416, 29590, 38893, 20037, 28792, 20061, 37202, 21417, 25937, 26087, 33276, 33285, 21646, 23601, 30106, 38816, 25304, 29401, 30141, 23621, 39545, 33738, 23616, 21632, 30697, 20030, 27822, 32858, 25298, 25454, 24040, 20855, 36317, 36382, 38191, 20465, 21477, 24807, 28844, 21095, 25424, 40515, 23071, 20518, 30519, 21367, 32482, 25733, 25899, 25225, 25496, 20500, 29237, 35273, 20915, 35776, 32477, 22343, 33740, 38055, 20891, 21531, 23803, 32251, 32252, 32253, 32254, 32255, 32256, 32257, 32258, 32259, 32260, 32261, 32262, 32263, 32264, 32265, 32266, 32267, 32268, 32269, 32270, 32271, 32272, 32273, 32274, 32275, 32276, 32277, 32278, 32279, 32280, 32281, 32282, 32283, 32284, 32285, 32286, 32287, 32288, 32289, 32290, 32291, 32292, 32293, 32294, 32295, 32296, 32297, 32298, 32299, 32300, 32301, 32302, 32303, 32304, 32305, 32306, 32307, 32308, 32309, 32310, 32311, 32312, 32313, 32314, 32316, 32317, 32318, 32319, 32320, 32322, 32323, 32324, 32325, 32326, 32328, 32329, 32330, 32331, 32332, 32333, 32334, 32335, 32336, 32337, 32338, 32339, 32340, 32341, 32342, 32343, 32344, 32345, 32346, 32347, 32348, 32349, 20426, 31459, 27994, 37089, 39567, 21888, 21654, 21345, 21679, 24320, 25577, 26999, 20975, 24936, 21002, 22570, 21208, 22350, 30733, 30475, 24247, 24951, 31968, 25179, 25239, 20130, 28821, 32771, 25335, 28900, 38752, 22391, 33499, 26607, 26869, 30933, 39063, 31185, 22771, 21683, 21487, 28212, 20811, 21051, 23458, 35838, 32943, 21827, 22438, 24691, 22353, 21549, 31354, 24656, 23380, 25511, 25248, 21475, 25187, 23495, 26543, 21741, 31391, 33510, 37239, 24211, 35044, 22840, 22446, 25358, 36328, 33007, 22359, 31607, 20393, 24555, 23485, 27454, 21281, 31568, 29378, 26694, 30719, 30518, 26103, 20917, 20111, 30420, 23743, 31397, 33909, 22862, 39745, 20608, 32350, 32351, 32352, 32353, 32354, 32355, 32356, 32357, 32358, 32359, 32360, 32361, 32362, 32363, 32364, 32365, 32366, 32367, 32368, 32369, 32370, 32371, 32372, 32373, 32374, 32375, 32376, 32377, 32378, 32379, 32380, 32381, 32382, 32383, 32384, 32385, 32387, 32388, 32389, 32390, 32391, 32392, 32393, 32394, 32395, 32396, 32397, 32398, 32399, 32400, 32401, 32402, 32403, 32404, 32405, 32406, 32407, 32408, 32409, 32410, 32412, 32413, 32414, 32430, 32436, 32443, 32444, 32470, 32484, 32492, 32505, 32522, 32528, 32542, 32567, 32569, 32571, 32572, 32573, 32574, 32575, 32576, 32577, 32579, 32582, 32583, 32584, 32585, 32586, 32587, 32588, 32589, 32590, 32591, 32594, 32595, 39304, 24871, 28291, 22372, 26118, 25414, 22256, 25324, 25193, 24275, 38420, 22403, 25289, 21895, 34593, 33098, 36771, 21862, 33713, 26469, 36182, 34013, 23146, 26639, 25318, 31726, 38417, 20848, 28572, 35888, 25597, 35272, 25042, 32518, 28866, 28389, 29701, 27028, 29436, 24266, 37070, 26391, 28010, 25438, 21171, 29282, 32769, 20332, 23013, 37226, 28889, 28061, 21202, 20048, 38647, 38253, 34174, 30922, 32047, 20769, 22418, 25794, 32907, 31867, 27882, 26865, 26974, 20919, 21400, 26792, 29313, 40654, 31729, 29432, 31163, 28435, 29702, 26446, 37324, 40100, 31036, 33673, 33620, 21519, 26647, 20029, 21385, 21169, 30782, 21382, 21033, 20616, 20363, 20432, 32598, 32601, 32603, 32604, 32605, 32606, 32608, 32611, 32612, 32613, 32614, 32615, 32619, 32620, 32621, 32623, 32624, 32627, 32629, 32630, 32631, 32632, 32634, 32635, 32636, 32637, 32639, 32640, 32642, 32643, 32644, 32645, 32646, 32647, 32648, 32649, 32651, 32653, 32655, 32656, 32657, 32658, 32659, 32661, 32662, 32663, 32664, 32665, 32667, 32668, 32672, 32674, 32675, 32677, 32678, 32680, 32681, 32682, 32683, 32684, 32685, 32686, 32689, 32691, 32692, 32693, 32694, 32695, 32698, 32699, 32702, 32704, 32706, 32707, 32708, 32710, 32711, 32712, 32713, 32715, 32717, 32719, 32720, 32721, 32722, 32723, 32726, 32727, 32729, 32730, 32731, 32732, 32733, 32734, 32738, 32739, 30178, 31435, 31890, 27813, 38582, 21147, 29827, 21737, 20457, 32852, 33714, 36830, 38256, 24265, 24604, 28063, 24088, 25947, 33080, 38142, 24651, 28860, 32451, 31918, 20937, 26753, 31921, 33391, 20004, 36742, 37327, 26238, 20142, 35845, 25769, 32842, 20698, 30103, 29134, 23525, 36797, 28518, 20102, 25730, 38243, 24278, 26009, 21015, 35010, 28872, 21155, 29454, 29747, 26519, 30967, 38678, 20020, 37051, 40158, 28107, 20955, 36161, 21533, 25294, 29618, 33777, 38646, 40836, 38083, 20278, 32666, 20940, 28789, 38517, 23725, 39046, 21478, 20196, 28316, 29705, 27060, 30827, 39311, 30041, 21016, 30244, 27969, 26611, 20845, 40857, 32843, 21657, 31548, 31423, 32740, 32743, 32744, 32746, 32747, 32748, 32749, 32751, 32754, 32756, 32757, 32758, 32759, 32760, 32761, 32762, 32765, 32766, 32767, 32770, 32775, 32776, 32777, 32778, 32782, 32783, 32785, 32787, 32794, 32795, 32797, 32798, 32799, 32801, 32803, 32804, 32811, 32812, 32813, 32814, 32815, 32816, 32818, 32820, 32825, 32826, 32828, 32830, 32832, 32833, 32836, 32837, 32839, 32840, 32841, 32846, 32847, 32848, 32849, 32851, 32853, 32854, 32855, 32857, 32859, 32860, 32861, 32862, 32863, 32864, 32865, 32866, 32867, 32868, 32869, 32870, 32871, 32872, 32875, 32876, 32877, 32878, 32879, 32880, 32882, 32883, 32884, 32885, 32886, 32887, 32888, 32889, 32890, 32891, 32892, 32893, 38534, 22404, 25314, 38471, 27004, 23044, 25602, 31699, 28431, 38475, 33446, 21346, 39045, 24208, 28809, 25523, 21348, 34383, 40065, 40595, 30860, 38706, 36335, 36162, 40575, 28510, 31108, 24405, 38470, 25134, 39540, 21525, 38109, 20387, 26053, 23653, 23649, 32533, 34385, 27695, 24459, 29575, 28388, 32511, 23782, 25371, 23402, 28390, 21365, 20081, 25504, 30053, 25249, 36718, 20262, 20177, 27814, 32438, 35770, 33821, 34746, 32599, 36923, 38179, 31657, 39585, 35064, 33853, 27931, 39558, 32476, 22920, 40635, 29595, 30721, 34434, 39532, 39554, 22043, 21527, 22475, 20080, 40614, 21334, 36808, 33033, 30610, 39314, 34542, 28385, 34067, 26364, 24930, 28459, 32894, 32897, 32898, 32901, 32904, 32906, 32909, 32910, 32911, 32912, 32913, 32914, 32916, 32917, 32919, 32921, 32926, 32931, 32934, 32935, 32936, 32940, 32944, 32947, 32949, 32950, 32952, 32953, 32955, 32965, 32967, 32968, 32969, 32970, 32971, 32975, 32976, 32977, 32978, 32979, 32980, 32981, 32984, 32991, 32992, 32994, 32995, 32998, 33006, 33013, 33015, 33017, 33019, 33022, 33023, 33024, 33025, 33027, 33028, 33029, 33031, 33032, 33035, 33036, 33045, 33047, 33049, 33051, 33052, 33053, 33055, 33056, 33057, 33058, 33059, 33060, 33061, 33062, 33063, 33064, 33065, 33066, 33067, 33069, 33070, 33072, 33075, 33076, 33077, 33079, 33081, 33082, 33083, 33084, 33085, 33087, 35881, 33426, 33579, 30450, 27667, 24537, 33725, 29483, 33541, 38170, 27611, 30683, 38086, 21359, 33538, 20882, 24125, 35980, 36152, 20040, 29611, 26522, 26757, 37238, 38665, 29028, 27809, 30473, 23186, 38209, 27599, 32654, 26151, 23504, 22969, 23194, 38376, 38391, 20204, 33804, 33945, 27308, 30431, 38192, 29467, 26790, 23391, 30511, 37274, 38753, 31964, 36855, 35868, 24357, 31859, 31192, 35269, 27852, 34588, 23494, 24130, 26825, 30496, 32501, 20885, 20813, 21193, 23081, 32517, 38754, 33495, 25551, 30596, 34256, 31186, 28218, 24217, 22937, 34065, 28781, 27665, 25279, 30399, 25935, 24751, 38397, 26126, 34719, 40483, 38125, 21517, 21629, 35884, 25720, 33088, 33089, 33090, 33091, 33092, 33093, 33095, 33097, 33101, 33102, 33103, 33106, 33110, 33111, 33112, 33115, 33116, 33117, 33118, 33119, 33121, 33122, 33123, 33124, 33126, 33128, 33130, 33131, 33132, 33135, 33138, 33139, 33141, 33142, 33143, 33144, 33153, 33155, 33156, 33157, 33158, 33159, 33161, 33163, 33164, 33165, 33166, 33168, 33170, 33171, 33172, 33173, 33174, 33175, 33177, 33178, 33182, 33183, 33184, 33185, 33186, 33188, 33189, 33191, 33193, 33195, 33196, 33197, 33198, 33199, 33200, 33201, 33202, 33204, 33205, 33206, 33207, 33208, 33209, 33212, 33213, 33214, 33215, 33220, 33221, 33223, 33224, 33225, 33227, 33229, 33230, 33231, 33232, 33233, 33234, 33235, 25721, 34321, 27169, 33180, 30952, 25705, 39764, 25273, 26411, 33707, 22696, 40664, 27819, 28448, 23518, 38476, 35851, 29279, 26576, 25287, 29281, 20137, 22982, 27597, 22675, 26286, 24149, 21215, 24917, 26408, 30446, 30566, 29287, 31302, 25343, 21738, 21584, 38048, 37027, 23068, 32435, 27670, 20035, 22902, 32784, 22856, 21335, 30007, 38590, 22218, 25376, 33041, 24700, 38393, 28118, 21602, 39297, 20869, 23273, 33021, 22958, 38675, 20522, 27877, 23612, 25311, 20320, 21311, 33147, 36870, 28346, 34091, 25288, 24180, 30910, 25781, 25467, 24565, 23064, 37247, 40479, 23615, 25423, 32834, 23421, 21870, 38218, 38221, 28037, 24744, 26592, 29406, 20957, 23425, 33236, 33237, 33238, 33239, 33240, 33241, 33242, 33243, 33244, 33245, 33246, 33247, 33248, 33249, 33250, 33252, 33253, 33254, 33256, 33257, 33259, 33262, 33263, 33264, 33265, 33266, 33269, 33270, 33271, 33272, 33273, 33274, 33277, 33279, 33283, 33287, 33288, 33289, 33290, 33291, 33294, 33295, 33297, 33299, 33301, 33302, 33303, 33304, 33305, 33306, 33309, 33312, 33316, 33317, 33318, 33319, 33321, 33326, 33330, 33338, 33340, 33341, 33343, 33344, 33345, 33346, 33347, 33349, 33350, 33352, 33354, 33356, 33357, 33358, 33360, 33361, 33362, 33363, 33364, 33365, 33366, 33367, 33369, 33371, 33372, 33373, 33374, 33376, 33377, 33378, 33379, 33380, 33381, 33382, 33383, 33385, 25319, 27870, 29275, 25197, 38062, 32445, 33043, 27987, 20892, 24324, 22900, 21162, 24594, 22899, 26262, 34384, 30111, 25386, 25062, 31983, 35834, 21734, 27431, 40485, 27572, 34261, 21589, 20598, 27812, 21866, 36276, 29228, 24085, 24597, 29750, 25293, 25490, 29260, 24472, 28227, 27966, 25856, 28504, 30424, 30928, 30460, 30036, 21028, 21467, 20051, 24222, 26049, 32810, 32982, 25243, 21638, 21032, 28846, 34957, 36305, 27873, 21624, 32986, 22521, 35060, 36180, 38506, 37197, 20329, 27803, 21943, 30406, 30768, 25256, 28921, 28558, 24429, 34028, 26842, 30844, 31735, 33192, 26379, 40527, 25447, 30896, 22383, 30738, 38713, 25209, 25259, 21128, 29749, 27607, 33386, 33387, 33388, 33389, 33393, 33397, 33398, 33399, 33400, 33403, 33404, 33408, 33409, 33411, 33413, 33414, 33415, 33417, 33420, 33424, 33427, 33428, 33429, 33430, 33434, 33435, 33438, 33440, 33442, 33443, 33447, 33458, 33461, 33462, 33466, 33467, 33468, 33471, 33472, 33474, 33475, 33477, 33478, 33481, 33488, 33494, 33497, 33498, 33501, 33506, 33511, 33512, 33513, 33514, 33516, 33517, 33518, 33520, 33522, 33523, 33525, 33526, 33528, 33530, 33532, 33533, 33534, 33535, 33536, 33546, 33547, 33549, 33552, 33554, 33555, 33558, 33560, 33561, 33565, 33566, 33567, 33568, 33569, 33570, 33571, 33572, 33573, 33574, 33577, 33578, 33582, 33584, 33586, 33591, 33595, 33597, 21860, 33086, 30130, 30382, 21305, 30174, 20731, 23617, 35692, 31687, 20559, 29255, 39575, 39128, 28418, 29922, 31080, 25735, 30629, 25340, 39057, 36139, 21697, 32856, 20050, 22378, 33529, 33805, 24179, 20973, 29942, 35780, 23631, 22369, 27900, 39047, 23110, 30772, 39748, 36843, 31893, 21078, 25169, 38138, 20166, 33670, 33889, 33769, 33970, 22484, 26420, 22275, 26222, 28006, 35889, 26333, 28689, 26399, 27450, 26646, 25114, 22971, 19971, 20932, 28422, 26578, 27791, 20854, 26827, 22855, 27495, 30054, 23822, 33040, 40784, 26071, 31048, 31041, 39569, 36215, 23682, 20062, 20225, 21551, 22865, 30732, 22120, 27668, 36804, 24323, 27773, 27875, 35755, 25488, 33598, 33599, 33601, 33602, 33604, 33605, 33608, 33610, 33611, 33612, 33613, 33614, 33619, 33621, 33622, 33623, 33624, 33625, 33629, 33634, 33648, 33649, 33650, 33651, 33652, 33653, 33654, 33657, 33658, 33662, 33663, 33664, 33665, 33666, 33667, 33668, 33671, 33672, 33674, 33675, 33676, 33677, 33679, 33680, 33681, 33684, 33685, 33686, 33687, 33689, 33690, 33693, 33695, 33697, 33698, 33699, 33700, 33701, 33702, 33703, 33708, 33709, 33710, 33711, 33717, 33723, 33726, 33727, 33730, 33731, 33732, 33734, 33736, 33737, 33739, 33741, 33742, 33744, 33745, 33746, 33747, 33749, 33751, 33753, 33754, 33755, 33758, 33762, 33763, 33764, 33766, 33767, 33768, 33771, 33772, 33773, 24688, 27965, 29301, 25190, 38030, 38085, 21315, 36801, 31614, 20191, 35878, 20094, 40660, 38065, 38067, 21069, 28508, 36963, 27973, 35892, 22545, 23884, 27424, 27465, 26538, 21595, 33108, 32652, 22681, 34103, 24378, 25250, 27207, 38201, 25970, 24708, 26725, 30631, 20052, 20392, 24039, 38808, 25772, 32728, 23789, 20431, 31373, 20999, 33540, 19988, 24623, 31363, 38054, 20405, 20146, 31206, 29748, 21220, 33465, 25810, 31165, 23517, 27777, 38738, 36731, 27682, 20542, 21375, 28165, 25806, 26228, 27696, 24773, 39031, 35831, 24198, 29756, 31351, 31179, 19992, 37041, 29699, 27714, 22234, 37195, 27845, 36235, 21306, 34502, 26354, 36527, 23624, 39537, 28192, 33774, 33775, 33779, 33780, 33781, 33782, 33783, 33786, 33787, 33788, 33790, 33791, 33792, 33794, 33797, 33799, 33800, 33801, 33802, 33808, 33810, 33811, 33812, 33813, 33814, 33815, 33817, 33818, 33819, 33822, 33823, 33824, 33825, 33826, 33827, 33833, 33834, 33835, 33836, 33837, 33838, 33839, 33840, 33842, 33843, 33844, 33845, 33846, 33847, 33849, 33850, 33851, 33854, 33855, 33856, 33857, 33858, 33859, 33860, 33861, 33863, 33864, 33865, 33866, 33867, 33868, 33869, 33870, 33871, 33872, 33874, 33875, 33876, 33877, 33878, 33880, 33885, 33886, 33887, 33888, 33890, 33892, 33893, 33894, 33895, 33896, 33898, 33902, 33903, 33904, 33906, 33908, 33911, 33913, 33915, 33916, 21462, 23094, 40843, 36259, 21435, 22280, 39079, 26435, 37275, 27849, 20840, 30154, 25331, 29356, 21048, 21149, 32570, 28820, 30264, 21364, 40522, 27063, 30830, 38592, 35033, 32676, 28982, 29123, 20873, 26579, 29924, 22756, 25880, 22199, 35753, 39286, 25200, 32469, 24825, 28909, 22764, 20161, 20154, 24525, 38887, 20219, 35748, 20995, 22922, 32427, 25172, 20173, 26085, 25102, 33592, 33993, 33635, 34701, 29076, 28342, 23481, 32466, 20887, 25545, 26580, 32905, 33593, 34837, 20754, 23418, 22914, 36785, 20083, 27741, 20837, 35109, 36719, 38446, 34122, 29790, 38160, 38384, 28070, 33509, 24369, 25746, 27922, 33832, 33134, 40131, 22622, 36187, 19977, 21441, 33917, 33918, 33919, 33920, 33921, 33923, 33924, 33925, 33926, 33930, 33933, 33935, 33936, 33937, 33938, 33939, 33940, 33941, 33942, 33944, 33946, 33947, 33949, 33950, 33951, 33952, 33954, 33955, 33956, 33957, 33958, 33959, 33960, 33961, 33962, 33963, 33964, 33965, 33966, 33968, 33969, 33971, 33973, 33974, 33975, 33979, 33980, 33982, 33984, 33986, 33987, 33989, 33990, 33991, 33992, 33995, 33996, 33998, 33999, 34002, 34004, 34005, 34007, 34008, 34009, 34010, 34011, 34012, 34014, 34017, 34018, 34020, 34023, 34024, 34025, 34026, 34027, 34029, 34030, 34031, 34033, 34034, 34035, 34036, 34037, 34038, 34039, 34040, 34041, 34042, 34043, 34045, 34046, 34048, 34049, 34050, 20254, 25955, 26705, 21971, 20007, 25620, 39578, 25195, 23234, 29791, 33394, 28073, 26862, 20711, 33678, 30722, 26432, 21049, 27801, 32433, 20667, 21861, 29022, 31579, 26194, 29642, 33515, 26441, 23665, 21024, 29053, 34923, 38378, 38485, 25797, 36193, 33203, 21892, 27733, 25159, 32558, 22674, 20260, 21830, 36175, 26188, 19978, 23578, 35059, 26786, 25422, 31245, 28903, 33421, 21242, 38902, 23569, 21736, 37045, 32461, 22882, 36170, 34503, 33292, 33293, 36198, 25668, 23556, 24913, 28041, 31038, 35774, 30775, 30003, 21627, 20280, 36523, 28145, 23072, 32453, 31070, 27784, 23457, 23158, 29978, 32958, 24910, 28183, 22768, 29983, 29989, 29298, 21319, 32499, 34051, 34052, 34053, 34054, 34055, 34056, 34057, 34058, 34059, 34061, 34062, 34063, 34064, 34066, 34068, 34069, 34070, 34072, 34073, 34075, 34076, 34077, 34078, 34080, 34082, 34083, 34084, 34085, 34086, 34087, 34088, 34089, 34090, 34093, 34094, 34095, 34096, 34097, 34098, 34099, 34100, 34101, 34102, 34110, 34111, 34112, 34113, 34114, 34116, 34117, 34118, 34119, 34123, 34124, 34125, 34126, 34127, 34128, 34129, 34130, 34131, 34132, 34133, 34135, 34136, 34138, 34139, 34140, 34141, 34143, 34144, 34145, 34146, 34147, 34149, 34150, 34151, 34153, 34154, 34155, 34156, 34157, 34158, 34159, 34160, 34161, 34163, 34165, 34166, 34167, 34168, 34172, 34173, 34175, 34176, 34177, 30465, 30427, 21097, 32988, 22307, 24072, 22833, 29422, 26045, 28287, 35799, 23608, 34417, 21313, 30707, 25342, 26102, 20160, 39135, 34432, 23454, 35782, 21490, 30690, 20351, 23630, 39542, 22987, 24335, 31034, 22763, 19990, 26623, 20107, 25325, 35475, 36893, 21183, 26159, 21980, 22124, 36866, 20181, 20365, 37322, 39280, 27663, 24066, 24643, 23460, 35270, 35797, 25910, 25163, 39318, 23432, 23551, 25480, 21806, 21463, 30246, 20861, 34092, 26530, 26803, 27530, 25234, 36755, 21460, 33298, 28113, 30095, 20070, 36174, 23408, 29087, 34223, 26257, 26329, 32626, 34560, 40653, 40736, 23646, 26415, 36848, 26641, 26463, 25101, 31446, 22661, 24246, 25968, 28465, 34178, 34179, 34182, 34184, 34185, 34186, 34187, 34188, 34189, 34190, 34192, 34193, 34194, 34195, 34196, 34197, 34198, 34199, 34200, 34201, 34202, 34205, 34206, 34207, 34208, 34209, 34210, 34211, 34213, 34214, 34215, 34217, 34219, 34220, 34221, 34225, 34226, 34227, 34228, 34229, 34230, 34232, 34234, 34235, 34236, 34237, 34238, 34239, 34240, 34242, 34243, 34244, 34245, 34246, 34247, 34248, 34250, 34251, 34252, 34253, 34254, 34257, 34258, 34260, 34262, 34263, 34264, 34265, 34266, 34267, 34269, 34270, 34271, 34272, 34273, 34274, 34275, 34277, 34278, 34279, 34280, 34282, 34283, 34284, 34285, 34286, 34287, 34288, 34289, 34290, 34291, 34292, 34293, 34294, 34295, 34296, 24661, 21047, 32781, 25684, 34928, 29993, 24069, 26643, 25332, 38684, 21452, 29245, 35841, 27700, 30561, 31246, 21550, 30636, 39034, 33308, 35828, 30805, 26388, 28865, 26031, 25749, 22070, 24605, 31169, 21496, 19997, 27515, 32902, 23546, 21987, 22235, 20282, 20284, 39282, 24051, 26494, 32824, 24578, 39042, 36865, 23435, 35772, 35829, 25628, 33368, 25822, 22013, 33487, 37221, 20439, 32032, 36895, 31903, 20723, 22609, 28335, 23487, 35785, 32899, 37240, 33948, 31639, 34429, 38539, 38543, 32485, 39635, 30862, 23681, 31319, 36930, 38567, 31071, 23385, 25439, 31499, 34001, 26797, 21766, 32553, 29712, 32034, 38145, 25152, 22604, 20182, 23427, 22905, 22612, 34297, 34298, 34300, 34301, 34302, 34304, 34305, 34306, 34307, 34308, 34310, 34311, 34312, 34313, 34314, 34315, 34316, 34317, 34318, 34319, 34320, 34322, 34323, 34324, 34325, 34327, 34328, 34329, 34330, 34331, 34332, 34333, 34334, 34335, 34336, 34337, 34338, 34339, 34340, 34341, 34342, 34344, 34346, 34347, 34348, 34349, 34350, 34351, 34352, 34353, 34354, 34355, 34356, 34357, 34358, 34359, 34361, 34362, 34363, 34365, 34366, 34367, 34368, 34369, 34370, 34371, 34372, 34373, 34374, 34375, 34376, 34377, 34378, 34379, 34380, 34386, 34387, 34389, 34390, 34391, 34392, 34393, 34395, 34396, 34397, 34399, 34400, 34401, 34403, 34404, 34405, 34406, 34407, 34408, 34409, 34410, 29549, 25374, 36427, 36367, 32974, 33492, 25260, 21488, 27888, 37214, 22826, 24577, 27760, 22349, 25674, 36138, 30251, 28393, 22363, 27264, 30192, 28525, 35885, 35848, 22374, 27631, 34962, 30899, 25506, 21497, 28845, 27748, 22616, 25642, 22530, 26848, 33179, 21776, 31958, 20504, 36538, 28108, 36255, 28907, 25487, 28059, 28372, 32486, 33796, 26691, 36867, 28120, 38518, 35752, 22871, 29305, 34276, 33150, 30140, 35466, 26799, 21076, 36386, 38161, 25552, 39064, 36420, 21884, 20307, 26367, 22159, 24789, 28053, 21059, 23625, 22825, 28155, 22635, 30000, 29980, 24684, 33300, 33094, 25361, 26465, 36834, 30522, 36339, 36148, 38081, 24086, 21381, 21548, 28867, 34413, 34415, 34416, 34418, 34419, 34420, 34421, 34422, 34423, 34424, 34435, 34436, 34437, 34438, 34439, 34440, 34441, 34446, 34447, 34448, 34449, 34450, 34452, 34454, 34455, 34456, 34457, 34458, 34459, 34462, 34463, 34464, 34465, 34466, 34469, 34470, 34475, 34477, 34478, 34482, 34483, 34487, 34488, 34489, 34491, 34492, 34493, 34494, 34495, 34497, 34498, 34499, 34501, 34504, 34508, 34509, 34514, 34515, 34517, 34518, 34519, 34522, 34524, 34525, 34528, 34529, 34530, 34531, 34533, 34534, 34535, 34536, 34538, 34539, 34540, 34543, 34549, 34550, 34551, 34554, 34555, 34556, 34557, 34559, 34561, 34564, 34565, 34566, 34571, 34572, 34574, 34575, 34576, 34577, 34580, 34582, 27712, 24311, 20572, 20141, 24237, 25402, 33351, 36890, 26704, 37230, 30643, 21516, 38108, 24420, 31461, 26742, 25413, 31570, 32479, 30171, 20599, 25237, 22836, 36879, 20984, 31171, 31361, 22270, 24466, 36884, 28034, 23648, 22303, 21520, 20820, 28237, 22242, 25512, 39059, 33151, 34581, 35114, 36864, 21534, 23663, 33216, 25302, 25176, 33073, 40501, 38464, 39534, 39548, 26925, 22949, 25299, 21822, 25366, 21703, 34521, 27964, 23043, 29926, 34972, 27498, 22806, 35916, 24367, 28286, 29609, 39037, 20024, 28919, 23436, 30871, 25405, 26202, 30358, 24779, 23451, 23113, 19975, 33109, 27754, 29579, 20129, 26505, 32593, 24448, 26106, 26395, 24536, 22916, 23041, 34585, 34587, 34589, 34591, 34592, 34596, 34598, 34599, 34600, 34602, 34603, 34604, 34605, 34607, 34608, 34610, 34611, 34613, 34614, 34616, 34617, 34618, 34620, 34621, 34624, 34625, 34626, 34627, 34628, 34629, 34630, 34634, 34635, 34637, 34639, 34640, 34641, 34642, 34644, 34645, 34646, 34648, 34650, 34651, 34652, 34653, 34654, 34655, 34657, 34658, 34662, 34663, 34664, 34665, 34666, 34667, 34668, 34669, 34671, 34673, 34674, 34675, 34677, 34679, 34680, 34681, 34682, 34687, 34688, 34689, 34692, 34694, 34695, 34697, 34698, 34700, 34702, 34703, 34704, 34705, 34706, 34708, 34709, 34710, 34712, 34713, 34714, 34715, 34716, 34717, 34718, 34720, 34721, 34722, 34723, 34724, 24013, 24494, 21361, 38886, 36829, 26693, 22260, 21807, 24799, 20026, 28493, 32500, 33479, 33806, 22996, 20255, 20266, 23614, 32428, 26410, 34074, 21619, 30031, 32963, 21890, 39759, 20301, 28205, 35859, 23561, 24944, 21355, 30239, 28201, 34442, 25991, 38395, 32441, 21563, 31283, 32010, 38382, 21985, 32705, 29934, 25373, 34583, 28065, 31389, 25105, 26017, 21351, 25569, 27779, 24043, 21596, 38056, 20044, 27745, 35820, 23627, 26080, 33436, 26791, 21566, 21556, 27595, 27494, 20116, 25410, 21320, 33310, 20237, 20398, 22366, 25098, 38654, 26212, 29289, 21247, 21153, 24735, 35823, 26132, 29081, 26512, 35199, 30802, 30717, 26224, 22075, 21560, 38177, 29306, 34725, 34726, 34727, 34729, 34730, 34734, 34736, 34737, 34738, 34740, 34742, 34743, 34744, 34745, 34747, 34748, 34750, 34751, 34753, 34754, 34755, 34756, 34757, 34759, 34760, 34761, 34764, 34765, 34766, 34767, 34768, 34772, 34773, 34774, 34775, 34776, 34777, 34778, 34780, 34781, 34782, 34783, 34785, 34786, 34787, 34788, 34790, 34791, 34792, 34793, 34795, 34796, 34797, 34799, 34800, 34801, 34802, 34803, 34804, 34805, 34806, 34807, 34808, 34810, 34811, 34812, 34813, 34815, 34816, 34817, 34818, 34820, 34821, 34822, 34823, 34824, 34825, 34827, 34828, 34829, 34830, 34831, 34832, 34833, 34834, 34836, 34839, 34840, 34841, 34842, 34844, 34845, 34846, 34847, 34848, 34851, 31232, 24687, 24076, 24713, 33181, 22805, 24796, 29060, 28911, 28330, 27728, 29312, 27268, 34989, 24109, 20064, 23219, 21916, 38115, 27927, 31995, 38553, 25103, 32454, 30606, 34430, 21283, 38686, 36758, 26247, 23777, 20384, 29421, 19979, 21414, 22799, 21523, 25472, 38184, 20808, 20185, 40092, 32420, 21688, 36132, 34900, 33335, 38386, 28046, 24358, 23244, 26174, 38505, 29616, 29486, 21439, 33146, 39301, 32673, 23466, 38519, 38480, 32447, 30456, 21410, 38262, 39321, 31665, 35140, 28248, 20065, 32724, 31077, 35814, 24819, 21709, 20139, 39033, 24055, 27233, 20687, 21521, 35937, 33831, 30813, 38660, 21066, 21742, 22179, 38144, 28040, 23477, 28102, 26195, 34852, 34853, 34854, 34855, 34856, 34857, 34858, 34859, 34860, 34861, 34862, 34863, 34864, 34865, 34867, 34868, 34869, 34870, 34871, 34872, 34874, 34875, 34877, 34878, 34879, 34881, 34882, 34883, 34886, 34887, 34888, 34889, 34890, 34891, 34894, 34895, 34896, 34897, 34898, 34899, 34901, 34902, 34904, 34906, 34907, 34908, 34909, 34910, 34911, 34912, 34918, 34919, 34922, 34925, 34927, 34929, 34931, 34932, 34933, 34934, 34936, 34937, 34938, 34939, 34940, 34944, 34947, 34950, 34951, 34953, 34954, 34956, 34958, 34959, 34960, 34961, 34963, 34964, 34965, 34967, 34968, 34969, 34970, 34971, 34973, 34974, 34975, 34976, 34977, 34979, 34981, 34982, 34983, 34984, 34985, 34986, 23567, 23389, 26657, 32918, 21880, 31505, 25928, 26964, 20123, 27463, 34638, 38795, 21327, 25375, 25658, 37034, 26012, 32961, 35856, 20889, 26800, 21368, 34809, 25032, 27844, 27899, 35874, 23633, 34218, 33455, 38156, 27427, 36763, 26032, 24571, 24515, 20449, 34885, 26143, 33125, 29481, 24826, 20852, 21009, 22411, 24418, 37026, 34892, 37266, 24184, 26447, 24615, 22995, 20804, 20982, 33016, 21256, 27769, 38596, 29066, 20241, 20462, 32670, 26429, 21957, 38152, 31168, 34966, 32483, 22687, 25100, 38656, 34394, 22040, 39035, 24464, 35768, 33988, 37207, 21465, 26093, 24207, 30044, 24676, 32110, 23167, 32490, 32493, 36713, 21927, 23459, 24748, 26059, 29572, 34988, 34990, 34991, 34992, 34994, 34995, 34996, 34997, 34998, 35000, 35001, 35002, 35003, 35005, 35006, 35007, 35008, 35011, 35012, 35015, 35016, 35018, 35019, 35020, 35021, 35023, 35024, 35025, 35027, 35030, 35031, 35034, 35035, 35036, 35037, 35038, 35040, 35041, 35046, 35047, 35049, 35050, 35051, 35052, 35053, 35054, 35055, 35058, 35061, 35062, 35063, 35066, 35067, 35069, 35071, 35072, 35073, 35075, 35076, 35077, 35078, 35079, 35080, 35081, 35083, 35084, 35085, 35086, 35087, 35089, 35092, 35093, 35094, 35095, 35096, 35100, 35101, 35102, 35103, 35104, 35106, 35107, 35108, 35110, 35111, 35112, 35113, 35116, 35117, 35118, 35119, 35121, 35122, 35123, 35125, 35127, 36873, 30307, 30505, 32474, 38772, 34203, 23398, 31348, 38634, 34880, 21195, 29071, 24490, 26092, 35810, 23547, 39535, 24033, 27529, 27739, 35757, 35759, 36874, 36805, 21387, 25276, 40486, 40493, 21568, 20011, 33469, 29273, 34460, 23830, 34905, 28079, 38597, 21713, 20122, 35766, 28937, 21693, 38409, 28895, 28153, 30416, 20005, 30740, 34578, 23721, 24310, 35328, 39068, 38414, 28814, 27839, 22852, 25513, 30524, 34893, 28436, 33395, 22576, 29141, 21388, 30746, 38593, 21761, 24422, 28976, 23476, 35866, 39564, 27523, 22830, 40495, 31207, 26472, 25196, 20335, 30113, 32650, 27915, 38451, 27687, 20208, 30162, 20859, 26679, 28478, 36992, 33136, 22934, 29814, 35128, 35129, 35130, 35131, 35132, 35133, 35134, 35135, 35136, 35138, 35139, 35141, 35142, 35143, 35144, 35145, 35146, 35147, 35148, 35149, 35150, 35151, 35152, 35153, 35154, 35155, 35156, 35157, 35158, 35159, 35160, 35161, 35162, 35163, 35164, 35165, 35168, 35169, 35170, 35171, 35172, 35173, 35175, 35176, 35177, 35178, 35179, 35180, 35181, 35182, 35183, 35184, 35185, 35186, 35187, 35188, 35189, 35190, 35191, 35192, 35193, 35194, 35196, 35197, 35198, 35200, 35202, 35204, 35205, 35207, 35208, 35209, 35210, 35211, 35212, 35213, 35214, 35215, 35216, 35217, 35218, 35219, 35220, 35221, 35222, 35223, 35224, 35225, 35226, 35227, 35228, 35229, 35230, 35231, 35232, 35233, 25671, 23591, 36965, 31377, 35875, 23002, 21676, 33280, 33647, 35201, 32768, 26928, 22094, 32822, 29239, 37326, 20918, 20063, 39029, 25494, 19994, 21494, 26355, 33099, 22812, 28082, 19968, 22777, 21307, 25558, 38129, 20381, 20234, 34915, 39056, 22839, 36951, 31227, 20202, 33008, 30097, 27778, 23452, 23016, 24413, 26885, 34433, 20506, 24050, 20057, 30691, 20197, 33402, 25233, 26131, 37009, 23673, 20159, 24441, 33222, 36920, 32900, 30123, 20134, 35028, 24847, 27589, 24518, 20041, 30410, 28322, 35811, 35758, 35850, 35793, 24322, 32764, 32716, 32462, 33589, 33643, 22240, 27575, 38899, 38452, 23035, 21535, 38134, 28139, 23493, 39278, 23609, 24341, 38544, 35234, 35235, 35236, 35237, 35238, 35239, 35240, 35241, 35242, 35243, 35244, 35245, 35246, 35247, 35248, 35249, 35250, 35251, 35252, 35253, 35254, 35255, 35256, 35257, 35258, 35259, 35260, 35261, 35262, 35263, 35264, 35267, 35277, 35283, 35284, 35285, 35287, 35288, 35289, 35291, 35293, 35295, 35296, 35297, 35298, 35300, 35303, 35304, 35305, 35306, 35308, 35309, 35310, 35312, 35313, 35314, 35316, 35317, 35318, 35319, 35320, 35321, 35322, 35323, 35324, 35325, 35326, 35327, 35329, 35330, 35331, 35332, 35333, 35334, 35336, 35337, 35338, 35339, 35340, 35341, 35342, 35343, 35344, 35345, 35346, 35347, 35348, 35349, 35350, 35351, 35352, 35353, 35354, 35355, 35356, 35357, 21360, 33521, 27185, 23156, 40560, 24212, 32552, 33721, 33828, 33829, 33639, 34631, 36814, 36194, 30408, 24433, 39062, 30828, 26144, 21727, 25317, 20323, 33219, 30152, 24248, 38605, 36362, 34553, 21647, 27891, 28044, 27704, 24703, 21191, 29992, 24189, 20248, 24736, 24551, 23588, 30001, 37038, 38080, 29369, 27833, 28216, 37193, 26377, 21451, 21491, 20305, 37321, 35825, 21448, 24188, 36802, 28132, 20110, 30402, 27014, 34398, 24858, 33286, 20313, 20446, 36926, 40060, 24841, 28189, 28180, 38533, 20104, 23089, 38632, 19982, 23679, 31161, 23431, 35821, 32701, 29577, 22495, 33419, 37057, 21505, 36935, 21947, 23786, 24481, 24840, 27442, 29425, 32946, 35465, 35358, 35359, 35360, 35361, 35362, 35363, 35364, 35365, 35366, 35367, 35368, 35369, 35370, 35371, 35372, 35373, 35374, 35375, 35376, 35377, 35378, 35379, 35380, 35381, 35382, 35383, 35384, 35385, 35386, 35387, 35388, 35389, 35391, 35392, 35393, 35394, 35395, 35396, 35397, 35398, 35399, 35401, 35402, 35403, 35404, 35405, 35406, 35407, 35408, 35409, 35410, 35411, 35412, 35413, 35414, 35415, 35416, 35417, 35418, 35419, 35420, 35421, 35422, 35423, 35424, 35425, 35426, 35427, 35428, 35429, 35430, 35431, 35432, 35433, 35434, 35435, 35436, 35437, 35438, 35439, 35440, 35441, 35442, 35443, 35444, 35445, 35446, 35447, 35448, 35450, 35451, 35452, 35453, 35454, 35455, 35456, 28020, 23507, 35029, 39044, 35947, 39533, 40499, 28170, 20900, 20803, 22435, 34945, 21407, 25588, 36757, 22253, 21592, 22278, 29503, 28304, 32536, 36828, 33489, 24895, 24616, 38498, 26352, 32422, 36234, 36291, 38053, 23731, 31908, 26376, 24742, 38405, 32792, 20113, 37095, 21248, 38504, 20801, 36816, 34164, 37213, 26197, 38901, 23381, 21277, 30776, 26434, 26685, 21705, 28798, 23472, 36733, 20877, 22312, 21681, 25874, 26242, 36190, 36163, 33039, 33900, 36973, 31967, 20991, 34299, 26531, 26089, 28577, 34468, 36481, 22122, 36896, 30338, 28790, 29157, 36131, 25321, 21017, 27901, 36156, 24590, 22686, 24974, 26366, 36192, 25166, 21939, 28195, 26413, 36711, 35457, 35458, 35459, 35460, 35461, 35462, 35463, 35464, 35467, 35468, 35469, 35470, 35471, 35472, 35473, 35474, 35476, 35477, 35478, 35479, 35480, 35481, 35482, 35483, 35484, 35485, 35486, 35487, 35488, 35489, 35490, 35491, 35492, 35493, 35494, 35495, 35496, 35497, 35498, 35499, 35500, 35501, 35502, 35503, 35504, 35505, 35506, 35507, 35508, 35509, 35510, 35511, 35512, 35513, 35514, 35515, 35516, 35517, 35518, 35519, 35520, 35521, 35522, 35523, 35524, 35525, 35526, 35527, 35528, 35529, 35530, 35531, 35532, 35533, 35534, 35535, 35536, 35537, 35538, 35539, 35540, 35541, 35542, 35543, 35544, 35545, 35546, 35547, 35548, 35549, 35550, 35551, 35552, 35553, 35554, 35555, 38113, 38392, 30504, 26629, 27048, 21643, 20045, 28856, 35784, 25688, 25995, 23429, 31364, 20538, 23528, 30651, 27617, 35449, 31896, 27838, 30415, 26025, 36759, 23853, 23637, 34360, 26632, 21344, 25112, 31449, 28251, 32509, 27167, 31456, 24432, 28467, 24352, 25484, 28072, 26454, 19976, 24080, 36134, 20183, 32960, 30260, 38556, 25307, 26157, 25214, 27836, 36213, 29031, 32617, 20806, 32903, 21484, 36974, 25240, 21746, 34544, 36761, 32773, 38167, 34071, 36825, 27993, 29645, 26015, 30495, 29956, 30759, 33275, 36126, 38024, 20390, 26517, 30137, 35786, 38663, 25391, 38215, 38453, 33976, 25379, 30529, 24449, 29424, 20105, 24596, 25972, 25327, 27491, 25919, 35556, 35557, 35558, 35559, 35560, 35561, 35562, 35563, 35564, 35565, 35566, 35567, 35568, 35569, 35570, 35571, 35572, 35573, 35574, 35575, 35576, 35577, 35578, 35579, 35580, 35581, 35582, 35583, 35584, 35585, 35586, 35587, 35588, 35589, 35590, 35592, 35593, 35594, 35595, 35596, 35597, 35598, 35599, 35600, 35601, 35602, 35603, 35604, 35605, 35606, 35607, 35608, 35609, 35610, 35611, 35612, 35613, 35614, 35615, 35616, 35617, 35618, 35619, 35620, 35621, 35623, 35624, 35625, 35626, 35627, 35628, 35629, 35630, 35631, 35632, 35633, 35634, 35635, 35636, 35637, 35638, 35639, 35640, 35641, 35642, 35643, 35644, 35645, 35646, 35647, 35648, 35649, 35650, 35651, 35652, 35653, 24103, 30151, 37073, 35777, 33437, 26525, 25903, 21553, 34584, 30693, 32930, 33026, 27713, 20043, 32455, 32844, 30452, 26893, 27542, 25191, 20540, 20356, 22336, 25351, 27490, 36286, 21482, 26088, 32440, 24535, 25370, 25527, 33267, 33268, 32622, 24092, 23769, 21046, 26234, 31209, 31258, 36136, 28825, 30164, 28382, 27835, 31378, 20013, 30405, 24544, 38047, 34935, 32456, 31181, 32959, 37325, 20210, 20247, 33311, 21608, 24030, 27954, 35788, 31909, 36724, 32920, 24090, 21650, 30385, 23449, 26172, 39588, 29664, 26666, 34523, 26417, 29482, 35832, 35803, 36880, 31481, 28891, 29038, 25284, 30633, 22065, 20027, 33879, 26609, 21161, 34496, 36142, 38136, 31569, 35654, 35655, 35656, 35657, 35658, 35659, 35660, 35661, 35662, 35663, 35664, 35665, 35666, 35667, 35668, 35669, 35670, 35671, 35672, 35673, 35674, 35675, 35676, 35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35687, 35688, 35689, 35690, 35691, 35693, 35694, 35695, 35696, 35697, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705, 35706, 35707, 35708, 35709, 35710, 35711, 35712, 35713, 35714, 35715, 35716, 35717, 35718, 35719, 35720, 35721, 35722, 35723, 35724, 35725, 35726, 35727, 35728, 35729, 35730, 35731, 35732, 35733, 35734, 35735, 35736, 35737, 35738, 35739, 35740, 35741, 35742, 35743, 35756, 35761, 35771, 35783, 35792, 35818, 35849, 35870, 20303, 27880, 31069, 39547, 25235, 29226, 25341, 19987, 30742, 36716, 25776, 36186, 31686, 26729, 24196, 35013, 22918, 25758, 22766, 29366, 26894, 38181, 36861, 36184, 22368, 32512, 35846, 20934, 25417, 25305, 21331, 26700, 29730, 33537, 37196, 21828, 30528, 28796, 27978, 20857, 21672, 36164, 23039, 28363, 28100, 23388, 32043, 20180, 31869, 28371, 23376, 33258, 28173, 23383, 39683, 26837, 36394, 23447, 32508, 24635, 32437, 37049, 36208, 22863, 25549, 31199, 36275, 21330, 26063, 31062, 35781, 38459, 32452, 38075, 32386, 22068, 37257, 26368, 32618, 23562, 36981, 26152, 24038, 20304, 26590, 20570, 20316, 22352, 24231, 0, 0, 0, 0, 0, 35896, 35897, 35898, 35899, 35900, 35901, 35902, 35903, 35904, 35906, 35907, 35908, 35909, 35912, 35914, 35915, 35917, 35918, 35919, 35920, 35921, 35922, 35923, 35924, 35926, 35927, 35928, 35929, 35931, 35932, 35933, 35934, 35935, 35936, 35939, 35940, 35941, 35942, 35943, 35944, 35945, 35948, 35949, 35950, 35951, 35952, 35953, 35954, 35956, 35957, 35958, 35959, 35963, 35964, 35965, 35966, 35967, 35968, 35969, 35971, 35972, 35974, 35975, 35976, 35979, 35981, 35982, 35983, 35984, 35985, 35986, 35987, 35989, 35990, 35991, 35993, 35994, 35995, 35996, 35997, 35998, 35999, 36000, 36001, 36002, 36003, 36004, 36005, 36006, 36007, 36008, 36009, 36010, 36011, 36012, 36013, 20109, 19980, 20800, 19984, 24319, 21317, 19989, 20120, 19998, 39730, 23404, 22121, 20008, 31162, 20031, 21269, 20039, 22829, 29243, 21358, 27664, 22239, 32996, 39319, 27603, 30590, 40727, 20022, 20127, 40720, 20060, 20073, 20115, 33416, 23387, 21868, 22031, 20164, 21389, 21405, 21411, 21413, 21422, 38757, 36189, 21274, 21493, 21286, 21294, 21310, 36188, 21350, 21347, 20994, 21000, 21006, 21037, 21043, 21055, 21056, 21068, 21086, 21089, 21084, 33967, 21117, 21122, 21121, 21136, 21139, 20866, 32596, 20155, 20163, 20169, 20162, 20200, 20193, 20203, 20190, 20251, 20211, 20258, 20324, 20213, 20261, 20263, 20233, 20267, 20318, 20327, 25912, 20314, 20317, 36014, 36015, 36016, 36017, 36018, 36019, 36020, 36021, 36022, 36023, 36024, 36025, 36026, 36027, 36028, 36029, 36030, 36031, 36032, 36033, 36034, 36035, 36036, 36037, 36038, 36039, 36040, 36041, 36042, 36043, 36044, 36045, 36046, 36047, 36048, 36049, 36050, 36051, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 36059, 36060, 36061, 36062, 36063, 36064, 36065, 36066, 36067, 36068, 36069, 36070, 36071, 36072, 36073, 36074, 36075, 36076, 36077, 36078, 36079, 36080, 36081, 36082, 36083, 36084, 36085, 36086, 36087, 36088, 36089, 36090, 36091, 36092, 36093, 36094, 36095, 36096, 36097, 36098, 36099, 36100, 36101, 36102, 36103, 36104, 36105, 36106, 36107, 36108, 36109, 20319, 20311, 20274, 20285, 20342, 20340, 20369, 20361, 20355, 20367, 20350, 20347, 20394, 20348, 20396, 20372, 20454, 20456, 20458, 20421, 20442, 20451, 20444, 20433, 20447, 20472, 20521, 20556, 20467, 20524, 20495, 20526, 20525, 20478, 20508, 20492, 20517, 20520, 20606, 20547, 20565, 20552, 20558, 20588, 20603, 20645, 20647, 20649, 20666, 20694, 20742, 20717, 20716, 20710, 20718, 20743, 20747, 20189, 27709, 20312, 20325, 20430, 40864, 27718, 31860, 20846, 24061, 40649, 39320, 20865, 22804, 21241, 21261, 35335, 21264, 20971, 22809, 20821, 20128, 20822, 20147, 34926, 34980, 20149, 33044, 35026, 31104, 23348, 34819, 32696, 20907, 20913, 20925, 20924, 36110, 36111, 36112, 36113, 36114, 36115, 36116, 36117, 36118, 36119, 36120, 36121, 36122, 36123, 36124, 36128, 36177, 36178, 36183, 36191, 36197, 36200, 36201, 36202, 36204, 36206, 36207, 36209, 36210, 36216, 36217, 36218, 36219, 36220, 36221, 36222, 36223, 36224, 36226, 36227, 36230, 36231, 36232, 36233, 36236, 36237, 36238, 36239, 36240, 36242, 36243, 36245, 36246, 36247, 36248, 36249, 36250, 36251, 36252, 36253, 36254, 36256, 36257, 36258, 36260, 36261, 36262, 36263, 36264, 36265, 36266, 36267, 36268, 36269, 36270, 36271, 36272, 36274, 36278, 36279, 36281, 36283, 36285, 36288, 36289, 36290, 36293, 36295, 36296, 36297, 36298, 36301, 36304, 36306, 36307, 36308, 20935, 20886, 20898, 20901, 35744, 35750, 35751, 35754, 35764, 35765, 35767, 35778, 35779, 35787, 35791, 35790, 35794, 35795, 35796, 35798, 35800, 35801, 35804, 35807, 35808, 35812, 35816, 35817, 35822, 35824, 35827, 35830, 35833, 35836, 35839, 35840, 35842, 35844, 35847, 35852, 35855, 35857, 35858, 35860, 35861, 35862, 35865, 35867, 35864, 35869, 35871, 35872, 35873, 35877, 35879, 35882, 35883, 35886, 35887, 35890, 35891, 35893, 35894, 21353, 21370, 38429, 38434, 38433, 38449, 38442, 38461, 38460, 38466, 38473, 38484, 38495, 38503, 38508, 38514, 38516, 38536, 38541, 38551, 38576, 37015, 37019, 37021, 37017, 37036, 37025, 37044, 37043, 37046, 37050, 36309, 36312, 36313, 36316, 36320, 36321, 36322, 36325, 36326, 36327, 36329, 36333, 36334, 36336, 36337, 36338, 36340, 36342, 36348, 36350, 36351, 36352, 36353, 36354, 36355, 36356, 36358, 36359, 36360, 36363, 36365, 36366, 36368, 36369, 36370, 36371, 36373, 36374, 36375, 36376, 36377, 36378, 36379, 36380, 36384, 36385, 36388, 36389, 36390, 36391, 36392, 36395, 36397, 36400, 36402, 36403, 36404, 36406, 36407, 36408, 36411, 36412, 36414, 36415, 36419, 36421, 36422, 36428, 36429, 36430, 36431, 36432, 36435, 36436, 36437, 36438, 36439, 36440, 36442, 36443, 36444, 36445, 36446, 36447, 36448, 36449, 36450, 36451, 36452, 36453, 36455, 36456, 36458, 36459, 36462, 36465, 37048, 37040, 37071, 37061, 37054, 37072, 37060, 37063, 37075, 37094, 37090, 37084, 37079, 37083, 37099, 37103, 37118, 37124, 37154, 37150, 37155, 37169, 37167, 37177, 37187, 37190, 21005, 22850, 21154, 21164, 21165, 21182, 21759, 21200, 21206, 21232, 21471, 29166, 30669, 24308, 20981, 20988, 39727, 21430, 24321, 30042, 24047, 22348, 22441, 22433, 22654, 22716, 22725, 22737, 22313, 22316, 22314, 22323, 22329, 22318, 22319, 22364, 22331, 22338, 22377, 22405, 22379, 22406, 22396, 22395, 22376, 22381, 22390, 22387, 22445, 22436, 22412, 22450, 22479, 22439, 22452, 22419, 22432, 22485, 22488, 22490, 22489, 22482, 22456, 22516, 22511, 22520, 22500, 22493, 36467, 36469, 36471, 36472, 36473, 36474, 36475, 36477, 36478, 36480, 36482, 36483, 36484, 36486, 36488, 36489, 36490, 36491, 36492, 36493, 36494, 36497, 36498, 36499, 36501, 36502, 36503, 36504, 36505, 36506, 36507, 36509, 36511, 36512, 36513, 36514, 36515, 36516, 36517, 36518, 36519, 36520, 36521, 36522, 36525, 36526, 36528, 36529, 36531, 36532, 36533, 36534, 36535, 36536, 36537, 36539, 36540, 36541, 36542, 36543, 36544, 36545, 36546, 36547, 36548, 36549, 36550, 36551, 36552, 36553, 36554, 36555, 36556, 36557, 36559, 36560, 36561, 36562, 36563, 36564, 36565, 36566, 36567, 36568, 36569, 36570, 36571, 36572, 36573, 36574, 36575, 36576, 36577, 36578, 36579, 36580, 22539, 22541, 22525, 22509, 22528, 22558, 22553, 22596, 22560, 22629, 22636, 22657, 22665, 22682, 22656, 39336, 40729, 25087, 33401, 33405, 33407, 33423, 33418, 33448, 33412, 33422, 33425, 33431, 33433, 33451, 33464, 33470, 33456, 33480, 33482, 33507, 33432, 33463, 33454, 33483, 33484, 33473, 33449, 33460, 33441, 33450, 33439, 33476, 33486, 33444, 33505, 33545, 33527, 33508, 33551, 33543, 33500, 33524, 33490, 33496, 33548, 33531, 33491, 33553, 33562, 33542, 33556, 33557, 33504, 33493, 33564, 33617, 33627, 33628, 33544, 33682, 33596, 33588, 33585, 33691, 33630, 33583, 33615, 33607, 33603, 33631, 33600, 33559, 33632, 33581, 33594, 33587, 33638, 33637, 36581, 36582, 36583, 36584, 36585, 36586, 36587, 36588, 36589, 36590, 36591, 36592, 36593, 36594, 36595, 36596, 36597, 36598, 36599, 36600, 36601, 36602, 36603, 36604, 36605, 36606, 36607, 36608, 36609, 36610, 36611, 36612, 36613, 36614, 36615, 36616, 36617, 36618, 36619, 36620, 36621, 36622, 36623, 36624, 36625, 36626, 36627, 36628, 36629, 36630, 36631, 36632, 36633, 36634, 36635, 36636, 36637, 36638, 36639, 36640, 36641, 36642, 36643, 36644, 36645, 36646, 36647, 36648, 36649, 36650, 36651, 36652, 36653, 36654, 36655, 36656, 36657, 36658, 36659, 36660, 36661, 36662, 36663, 36664, 36665, 36666, 36667, 36668, 36669, 36670, 36671, 36672, 36673, 36674, 36675, 36676, 33640, 33563, 33641, 33644, 33642, 33645, 33646, 33712, 33656, 33715, 33716, 33696, 33706, 33683, 33692, 33669, 33660, 33718, 33705, 33661, 33720, 33659, 33688, 33694, 33704, 33722, 33724, 33729, 33793, 33765, 33752, 22535, 33816, 33803, 33757, 33789, 33750, 33820, 33848, 33809, 33798, 33748, 33759, 33807, 33795, 33784, 33785, 33770, 33733, 33728, 33830, 33776, 33761, 33884, 33873, 33882, 33881, 33907, 33927, 33928, 33914, 33929, 33912, 33852, 33862, 33897, 33910, 33932, 33934, 33841, 33901, 33985, 33997, 34000, 34022, 33981, 34003, 33994, 33983, 33978, 34016, 33953, 33977, 33972, 33943, 34021, 34019, 34060, 29965, 34104, 34032, 34105, 34079, 34106, 36677, 36678, 36679, 36680, 36681, 36682, 36683, 36684, 36685, 36686, 36687, 36688, 36689, 36690, 36691, 36692, 36693, 36694, 36695, 36696, 36697, 36698, 36699, 36700, 36701, 36702, 36703, 36704, 36705, 36706, 36707, 36708, 36709, 36714, 36736, 36748, 36754, 36765, 36768, 36769, 36770, 36772, 36773, 36774, 36775, 36778, 36780, 36781, 36782, 36783, 36786, 36787, 36788, 36789, 36791, 36792, 36794, 36795, 36796, 36799, 36800, 36803, 36806, 36809, 36810, 36811, 36812, 36813, 36815, 36818, 36822, 36823, 36826, 36832, 36833, 36835, 36839, 36844, 36847, 36849, 36850, 36852, 36853, 36854, 36858, 36859, 36860, 36862, 36863, 36871, 36872, 36876, 36878, 36883, 36885, 36888, 34134, 34107, 34047, 34044, 34137, 34120, 34152, 34148, 34142, 34170, 30626, 34115, 34162, 34171, 34212, 34216, 34183, 34191, 34169, 34222, 34204, 34181, 34233, 34231, 34224, 34259, 34241, 34268, 34303, 34343, 34309, 34345, 34326, 34364, 24318, 24328, 22844, 22849, 32823, 22869, 22874, 22872, 21263, 23586, 23589, 23596, 23604, 25164, 25194, 25247, 25275, 25290, 25306, 25303, 25326, 25378, 25334, 25401, 25419, 25411, 25517, 25590, 25457, 25466, 25486, 25524, 25453, 25516, 25482, 25449, 25518, 25532, 25586, 25592, 25568, 25599, 25540, 25566, 25550, 25682, 25542, 25534, 25669, 25665, 25611, 25627, 25632, 25612, 25638, 25633, 25694, 25732, 25709, 25750, 36889, 36892, 36899, 36900, 36901, 36903, 36904, 36905, 36906, 36907, 36908, 36912, 36913, 36914, 36915, 36916, 36919, 36921, 36922, 36925, 36927, 36928, 36931, 36933, 36934, 36936, 36937, 36938, 36939, 36940, 36942, 36948, 36949, 36950, 36953, 36954, 36956, 36957, 36958, 36959, 36960, 36961, 36964, 36966, 36967, 36969, 36970, 36971, 36972, 36975, 36976, 36977, 36978, 36979, 36982, 36983, 36984, 36985, 36986, 36987, 36988, 36990, 36993, 36996, 36997, 36998, 36999, 37001, 37002, 37004, 37005, 37006, 37007, 37008, 37010, 37012, 37014, 37016, 37018, 37020, 37022, 37023, 37024, 37028, 37029, 37031, 37032, 37033, 37035, 37037, 37042, 37047, 37052, 37053, 37055, 37056, 25722, 25783, 25784, 25753, 25786, 25792, 25808, 25815, 25828, 25826, 25865, 25893, 25902, 24331, 24530, 29977, 24337, 21343, 21489, 21501, 21481, 21480, 21499, 21522, 21526, 21510, 21579, 21586, 21587, 21588, 21590, 21571, 21537, 21591, 21593, 21539, 21554, 21634, 21652, 21623, 21617, 21604, 21658, 21659, 21636, 21622, 21606, 21661, 21712, 21677, 21698, 21684, 21714, 21671, 21670, 21715, 21716, 21618, 21667, 21717, 21691, 21695, 21708, 21721, 21722, 21724, 21673, 21674, 21668, 21725, 21711, 21726, 21787, 21735, 21792, 21757, 21780, 21747, 21794, 21795, 21775, 21777, 21799, 21802, 21863, 21903, 21941, 21833, 21869, 21825, 21845, 21823, 21840, 21820, 37058, 37059, 37062, 37064, 37065, 37067, 37068, 37069, 37074, 37076, 37077, 37078, 37080, 37081, 37082, 37086, 37087, 37088, 37091, 37092, 37093, 37097, 37098, 37100, 37102, 37104, 37105, 37106, 37107, 37109, 37110, 37111, 37113, 37114, 37115, 37116, 37119, 37120, 37121, 37123, 37125, 37126, 37127, 37128, 37129, 37130, 37131, 37132, 37133, 37134, 37135, 37136, 37137, 37138, 37139, 37140, 37141, 37142, 37143, 37144, 37146, 37147, 37148, 37149, 37151, 37152, 37153, 37156, 37157, 37158, 37159, 37160, 37161, 37162, 37163, 37164, 37165, 37166, 37168, 37170, 37171, 37172, 37173, 37174, 37175, 37176, 37178, 37179, 37180, 37181, 37182, 37183, 37184, 37185, 37186, 37188, 21815, 21846, 21877, 21878, 21879, 21811, 21808, 21852, 21899, 21970, 21891, 21937, 21945, 21896, 21889, 21919, 21886, 21974, 21905, 21883, 21983, 21949, 21950, 21908, 21913, 21994, 22007, 21961, 22047, 21969, 21995, 21996, 21972, 21990, 21981, 21956, 21999, 21989, 22002, 22003, 21964, 21965, 21992, 22005, 21988, 36756, 22046, 22024, 22028, 22017, 22052, 22051, 22014, 22016, 22055, 22061, 22104, 22073, 22103, 22060, 22093, 22114, 22105, 22108, 22092, 22100, 22150, 22116, 22129, 22123, 22139, 22140, 22149, 22163, 22191, 22228, 22231, 22237, 22241, 22261, 22251, 22265, 22271, 22276, 22282, 22281, 22300, 24079, 24089, 24084, 24081, 24113, 24123, 24124, 37189, 37191, 37192, 37201, 37203, 37204, 37205, 37206, 37208, 37209, 37211, 37212, 37215, 37216, 37222, 37223, 37224, 37227, 37229, 37235, 37242, 37243, 37244, 37248, 37249, 37250, 37251, 37252, 37254, 37256, 37258, 37262, 37263, 37267, 37268, 37269, 37270, 37271, 37272, 37273, 37276, 37277, 37278, 37279, 37280, 37281, 37284, 37285, 37286, 37287, 37288, 37289, 37291, 37292, 37296, 37297, 37298, 37299, 37302, 37303, 37304, 37305, 37307, 37308, 37309, 37310, 37311, 37312, 37313, 37314, 37315, 37316, 37317, 37318, 37320, 37323, 37328, 37330, 37331, 37332, 37333, 37334, 37335, 37336, 37337, 37338, 37339, 37341, 37342, 37343, 37344, 37345, 37346, 37347, 37348, 37349, 24119, 24132, 24148, 24155, 24158, 24161, 23692, 23674, 23693, 23696, 23702, 23688, 23704, 23705, 23697, 23706, 23708, 23733, 23714, 23741, 23724, 23723, 23729, 23715, 23745, 23735, 23748, 23762, 23780, 23755, 23781, 23810, 23811, 23847, 23846, 23854, 23844, 23838, 23814, 23835, 23896, 23870, 23860, 23869, 23916, 23899, 23919, 23901, 23915, 23883, 23882, 23913, 23924, 23938, 23961, 23965, 35955, 23991, 24005, 24435, 24439, 24450, 24455, 24457, 24460, 24469, 24473, 24476, 24488, 24493, 24501, 24508, 34914, 24417, 29357, 29360, 29364, 29367, 29368, 29379, 29377, 29390, 29389, 29394, 29416, 29423, 29417, 29426, 29428, 29431, 29441, 29427, 29443, 29434, 37350, 37351, 37352, 37353, 37354, 37355, 37356, 37357, 37358, 37359, 37360, 37361, 37362, 37363, 37364, 37365, 37366, 37367, 37368, 37369, 37370, 37371, 37372, 37373, 37374, 37375, 37376, 37377, 37378, 37379, 37380, 37381, 37382, 37383, 37384, 37385, 37386, 37387, 37388, 37389, 37390, 37391, 37392, 37393, 37394, 37395, 37396, 37397, 37398, 37399, 37400, 37401, 37402, 37403, 37404, 37405, 37406, 37407, 37408, 37409, 37410, 37411, 37412, 37413, 37414, 37415, 37416, 37417, 37418, 37419, 37420, 37421, 37422, 37423, 37424, 37425, 37426, 37427, 37428, 37429, 37430, 37431, 37432, 37433, 37434, 37435, 37436, 37437, 37438, 37439, 37440, 37441, 37442, 37443, 37444, 37445, 29435, 29463, 29459, 29473, 29450, 29470, 29469, 29461, 29474, 29497, 29477, 29484, 29496, 29489, 29520, 29517, 29527, 29536, 29548, 29551, 29566, 33307, 22821, 39143, 22820, 22786, 39267, 39271, 39272, 39273, 39274, 39275, 39276, 39284, 39287, 39293, 39296, 39300, 39303, 39306, 39309, 39312, 39313, 39315, 39316, 39317, 24192, 24209, 24203, 24214, 24229, 24224, 24249, 24245, 24254, 24243, 36179, 24274, 24273, 24283, 24296, 24298, 33210, 24516, 24521, 24534, 24527, 24579, 24558, 24580, 24545, 24548, 24574, 24581, 24582, 24554, 24557, 24568, 24601, 24629, 24614, 24603, 24591, 24589, 24617, 24619, 24586, 24639, 24609, 24696, 24697, 24699, 24698, 24642, 37446, 37447, 37448, 37449, 37450, 37451, 37452, 37453, 37454, 37455, 37456, 37457, 37458, 37459, 37460, 37461, 37462, 37463, 37464, 37465, 37466, 37467, 37468, 37469, 37470, 37471, 37472, 37473, 37474, 37475, 37476, 37477, 37478, 37479, 37480, 37481, 37482, 37483, 37484, 37485, 37486, 37487, 37488, 37489, 37490, 37491, 37493, 37494, 37495, 37496, 37497, 37498, 37499, 37500, 37501, 37502, 37503, 37504, 37505, 37506, 37507, 37508, 37509, 37510, 37511, 37512, 37513, 37514, 37515, 37516, 37517, 37519, 37520, 37521, 37522, 37523, 37524, 37525, 37526, 37527, 37528, 37529, 37530, 37531, 37532, 37533, 37534, 37535, 37536, 37537, 37538, 37539, 37540, 37541, 37542, 37543, 24682, 24701, 24726, 24730, 24749, 24733, 24707, 24722, 24716, 24731, 24812, 24763, 24753, 24797, 24792, 24774, 24794, 24756, 24864, 24870, 24853, 24867, 24820, 24832, 24846, 24875, 24906, 24949, 25004, 24980, 24999, 25015, 25044, 25077, 24541, 38579, 38377, 38379, 38385, 38387, 38389, 38390, 38396, 38398, 38403, 38404, 38406, 38408, 38410, 38411, 38412, 38413, 38415, 38418, 38421, 38422, 38423, 38425, 38426, 20012, 29247, 25109, 27701, 27732, 27740, 27722, 27811, 27781, 27792, 27796, 27788, 27752, 27753, 27764, 27766, 27782, 27817, 27856, 27860, 27821, 27895, 27896, 27889, 27863, 27826, 27872, 27862, 27898, 27883, 27886, 27825, 27859, 27887, 27902, 37544, 37545, 37546, 37547, 37548, 37549, 37551, 37552, 37553, 37554, 37555, 37556, 37557, 37558, 37559, 37560, 37561, 37562, 37563, 37564, 37565, 37566, 37567, 37568, 37569, 37570, 37571, 37572, 37573, 37574, 37575, 37577, 37578, 37579, 37580, 37581, 37582, 37583, 37584, 37585, 37586, 37587, 37588, 37589, 37590, 37591, 37592, 37593, 37594, 37595, 37596, 37597, 37598, 37599, 37600, 37601, 37602, 37603, 37604, 37605, 37606, 37607, 37608, 37609, 37610, 37611, 37612, 37613, 37614, 37615, 37616, 37617, 37618, 37619, 37620, 37621, 37622, 37623, 37624, 37625, 37626, 37627, 37628, 37629, 37630, 37631, 37632, 37633, 37634, 37635, 37636, 37637, 37638, 37639, 37640, 37641, 27961, 27943, 27916, 27971, 27976, 27911, 27908, 27929, 27918, 27947, 27981, 27950, 27957, 27930, 27983, 27986, 27988, 27955, 28049, 28015, 28062, 28064, 27998, 28051, 28052, 27996, 28000, 28028, 28003, 28186, 28103, 28101, 28126, 28174, 28095, 28128, 28177, 28134, 28125, 28121, 28182, 28075, 28172, 28078, 28203, 28270, 28238, 28267, 28338, 28255, 28294, 28243, 28244, 28210, 28197, 28228, 28383, 28337, 28312, 28384, 28461, 28386, 28325, 28327, 28349, 28347, 28343, 28375, 28340, 28367, 28303, 28354, 28319, 28514, 28486, 28487, 28452, 28437, 28409, 28463, 28470, 28491, 28532, 28458, 28425, 28457, 28553, 28557, 28556, 28536, 28530, 28540, 28538, 28625, 37642, 37643, 37644, 37645, 37646, 37647, 37648, 37649, 37650, 37651, 37652, 37653, 37654, 37655, 37656, 37657, 37658, 37659, 37660, 37661, 37662, 37663, 37664, 37665, 37666, 37667, 37668, 37669, 37670, 37671, 37672, 37673, 37674, 37675, 37676, 37677, 37678, 37679, 37680, 37681, 37682, 37683, 37684, 37685, 37686, 37687, 37688, 37689, 37690, 37691, 37692, 37693, 37695, 37696, 37697, 37698, 37699, 37700, 37701, 37702, 37703, 37704, 37705, 37706, 37707, 37708, 37709, 37710, 37711, 37712, 37713, 37714, 37715, 37716, 37717, 37718, 37719, 37720, 37721, 37722, 37723, 37724, 37725, 37726, 37727, 37728, 37729, 37730, 37731, 37732, 37733, 37734, 37735, 37736, 37737, 37739, 28617, 28583, 28601, 28598, 28610, 28641, 28654, 28638, 28640, 28655, 28698, 28707, 28699, 28729, 28725, 28751, 28766, 23424, 23428, 23445, 23443, 23461, 23480, 29999, 39582, 25652, 23524, 23534, 35120, 23536, 36423, 35591, 36790, 36819, 36821, 36837, 36846, 36836, 36841, 36838, 36851, 36840, 36869, 36868, 36875, 36902, 36881, 36877, 36886, 36897, 36917, 36918, 36909, 36911, 36932, 36945, 36946, 36944, 36968, 36952, 36962, 36955, 26297, 36980, 36989, 36994, 37000, 36995, 37003, 24400, 24407, 24406, 24408, 23611, 21675, 23632, 23641, 23409, 23651, 23654, 32700, 24362, 24361, 24365, 33396, 24380, 39739, 23662, 22913, 22915, 22925, 22953, 22954, 22947, 37740, 37741, 37742, 37743, 37744, 37745, 37746, 37747, 37748, 37749, 37750, 37751, 37752, 37753, 37754, 37755, 37756, 37757, 37758, 37759, 37760, 37761, 37762, 37763, 37764, 37765, 37766, 37767, 37768, 37769, 37770, 37771, 37772, 37773, 37774, 37776, 37777, 37778, 37779, 37780, 37781, 37782, 37783, 37784, 37785, 37786, 37787, 37788, 37789, 37790, 37791, 37792, 37793, 37794, 37795, 37796, 37797, 37798, 37799, 37800, 37801, 37802, 37803, 37804, 37805, 37806, 37807, 37808, 37809, 37810, 37811, 37812, 37813, 37814, 37815, 37816, 37817, 37818, 37819, 37820, 37821, 37822, 37823, 37824, 37825, 37826, 37827, 37828, 37829, 37830, 37831, 37832, 37833, 37835, 37836, 37837, 22935, 22986, 22955, 22942, 22948, 22994, 22962, 22959, 22999, 22974, 23045, 23046, 23005, 23048, 23011, 23000, 23033, 23052, 23049, 23090, 23092, 23057, 23075, 23059, 23104, 23143, 23114, 23125, 23100, 23138, 23157, 33004, 23210, 23195, 23159, 23162, 23230, 23275, 23218, 23250, 23252, 23224, 23264, 23267, 23281, 23254, 23270, 23256, 23260, 23305, 23319, 23318, 23346, 23351, 23360, 23573, 23580, 23386, 23397, 23411, 23377, 23379, 23394, 39541, 39543, 39544, 39546, 39551, 39549, 39552, 39553, 39557, 39560, 39562, 39568, 39570, 39571, 39574, 39576, 39579, 39580, 39581, 39583, 39584, 39586, 39587, 39589, 39591, 32415, 32417, 32419, 32421, 32424, 32425, 37838, 37839, 37840, 37841, 37842, 37843, 37844, 37845, 37847, 37848, 37849, 37850, 37851, 37852, 37853, 37854, 37855, 37856, 37857, 37858, 37859, 37860, 37861, 37862, 37863, 37864, 37865, 37866, 37867, 37868, 37869, 37870, 37871, 37872, 37873, 37874, 37875, 37876, 37877, 37878, 37879, 37880, 37881, 37882, 37883, 37884, 37885, 37886, 37887, 37888, 37889, 37890, 37891, 37892, 37893, 37894, 37895, 37896, 37897, 37898, 37899, 37900, 37901, 37902, 37903, 37904, 37905, 37906, 37907, 37908, 37909, 37910, 37911, 37912, 37913, 37914, 37915, 37916, 37917, 37918, 37919, 37920, 37921, 37922, 37923, 37924, 37925, 37926, 37927, 37928, 37929, 37930, 37931, 37932, 37933, 37934, 32429, 32432, 32446, 32448, 32449, 32450, 32457, 32459, 32460, 32464, 32468, 32471, 32475, 32480, 32481, 32488, 32491, 32494, 32495, 32497, 32498, 32525, 32502, 32506, 32507, 32510, 32513, 32514, 32515, 32519, 32520, 32523, 32524, 32527, 32529, 32530, 32535, 32537, 32540, 32539, 32543, 32545, 32546, 32547, 32548, 32549, 32550, 32551, 32554, 32555, 32556, 32557, 32559, 32560, 32561, 32562, 32563, 32565, 24186, 30079, 24027, 30014, 37013, 29582, 29585, 29614, 29602, 29599, 29647, 29634, 29649, 29623, 29619, 29632, 29641, 29640, 29669, 29657, 39036, 29706, 29673, 29671, 29662, 29626, 29682, 29711, 29738, 29787, 29734, 29733, 29736, 29744, 29742, 29740, 37935, 37936, 37937, 37938, 37939, 37940, 37941, 37942, 37943, 37944, 37945, 37946, 37947, 37948, 37949, 37951, 37952, 37953, 37954, 37955, 37956, 37957, 37958, 37959, 37960, 37961, 37962, 37963, 37964, 37965, 37966, 37967, 37968, 37969, 37970, 37971, 37972, 37973, 37974, 37975, 37976, 37977, 37978, 37979, 37980, 37981, 37982, 37983, 37984, 37985, 37986, 37987, 37988, 37989, 37990, 37991, 37992, 37993, 37994, 37996, 37997, 37998, 37999, 38000, 38001, 38002, 38003, 38004, 38005, 38006, 38007, 38008, 38009, 38010, 38011, 38012, 38013, 38014, 38015, 38016, 38017, 38018, 38019, 38020, 38033, 38038, 38040, 38087, 38095, 38099, 38100, 38106, 38118, 38139, 38172, 38176, 29723, 29722, 29761, 29788, 29783, 29781, 29785, 29815, 29805, 29822, 29852, 29838, 29824, 29825, 29831, 29835, 29854, 29864, 29865, 29840, 29863, 29906, 29882, 38890, 38891, 38892, 26444, 26451, 26462, 26440, 26473, 26533, 26503, 26474, 26483, 26520, 26535, 26485, 26536, 26526, 26541, 26507, 26487, 26492, 26608, 26633, 26584, 26634, 26601, 26544, 26636, 26585, 26549, 26586, 26547, 26589, 26624, 26563, 26552, 26594, 26638, 26561, 26621, 26674, 26675, 26720, 26721, 26702, 26722, 26692, 26724, 26755, 26653, 26709, 26726, 26689, 26727, 26688, 26686, 26698, 26697, 26665, 26805, 26767, 26740, 26743, 26771, 26731, 26818, 26990, 26876, 26911, 26912, 26873, 38183, 38195, 38205, 38211, 38216, 38219, 38229, 38234, 38240, 38254, 38260, 38261, 38263, 38264, 38265, 38266, 38267, 38268, 38269, 38270, 38272, 38273, 38274, 38275, 38276, 38277, 38278, 38279, 38280, 38281, 38282, 38283, 38284, 38285, 38286, 38287, 38288, 38289, 38290, 38291, 38292, 38293, 38294, 38295, 38296, 38297, 38298, 38299, 38300, 38301, 38302, 38303, 38304, 38305, 38306, 38307, 38308, 38309, 38310, 38311, 38312, 38313, 38314, 38315, 38316, 38317, 38318, 38319, 38320, 38321, 38322, 38323, 38324, 38325, 38326, 38327, 38328, 38329, 38330, 38331, 38332, 38333, 38334, 38335, 38336, 38337, 38338, 38339, 38340, 38341, 38342, 38343, 38344, 38345, 38346, 38347, 26916, 26864, 26891, 26881, 26967, 26851, 26896, 26993, 26937, 26976, 26946, 26973, 27012, 26987, 27008, 27032, 27000, 26932, 27084, 27015, 27016, 27086, 27017, 26982, 26979, 27001, 27035, 27047, 27067, 27051, 27053, 27092, 27057, 27073, 27082, 27103, 27029, 27104, 27021, 27135, 27183, 27117, 27159, 27160, 27237, 27122, 27204, 27198, 27296, 27216, 27227, 27189, 27278, 27257, 27197, 27176, 27224, 27260, 27281, 27280, 27305, 27287, 27307, 29495, 29522, 27521, 27522, 27527, 27524, 27538, 27539, 27533, 27546, 27547, 27553, 27562, 36715, 36717, 36721, 36722, 36723, 36725, 36726, 36728, 36727, 36729, 36730, 36732, 36734, 36737, 36738, 36740, 36743, 36747, 38348, 38349, 38350, 38351, 38352, 38353, 38354, 38355, 38356, 38357, 38358, 38359, 38360, 38361, 38362, 38363, 38364, 38365, 38366, 38367, 38368, 38369, 38370, 38371, 38372, 38373, 38374, 38375, 38380, 38399, 38407, 38419, 38424, 38427, 38430, 38432, 38435, 38436, 38437, 38438, 38439, 38440, 38441, 38443, 38444, 38445, 38447, 38448, 38455, 38456, 38457, 38458, 38462, 38465, 38467, 38474, 38478, 38479, 38481, 38482, 38483, 38486, 38487, 38488, 38489, 38490, 38492, 38493, 38494, 38496, 38499, 38501, 38502, 38507, 38509, 38510, 38511, 38512, 38513, 38515, 38520, 38521, 38522, 38523, 38524, 38525, 38526, 38527, 38528, 38529, 38530, 38531, 38532, 38535, 38537, 38538, 36749, 36750, 36751, 36760, 36762, 36558, 25099, 25111, 25115, 25119, 25122, 25121, 25125, 25124, 25132, 33255, 29935, 29940, 29951, 29967, 29969, 29971, 25908, 26094, 26095, 26096, 26122, 26137, 26482, 26115, 26133, 26112, 28805, 26359, 26141, 26164, 26161, 26166, 26165, 32774, 26207, 26196, 26177, 26191, 26198, 26209, 26199, 26231, 26244, 26252, 26279, 26269, 26302, 26331, 26332, 26342, 26345, 36146, 36147, 36150, 36155, 36157, 36160, 36165, 36166, 36168, 36169, 36167, 36173, 36181, 36185, 35271, 35274, 35275, 35276, 35278, 35279, 35280, 35281, 29294, 29343, 29277, 29286, 29295, 29310, 29311, 29316, 29323, 29325, 29327, 29330, 25352, 25394, 25520, 38540, 38542, 38545, 38546, 38547, 38549, 38550, 38554, 38555, 38557, 38558, 38559, 38560, 38561, 38562, 38563, 38564, 38565, 38566, 38568, 38569, 38570, 38571, 38572, 38573, 38574, 38575, 38577, 38578, 38580, 38581, 38583, 38584, 38586, 38587, 38591, 38594, 38595, 38600, 38602, 38603, 38608, 38609, 38611, 38612, 38614, 38615, 38616, 38617, 38618, 38619, 38620, 38621, 38622, 38623, 38625, 38626, 38627, 38628, 38629, 38630, 38631, 38635, 38636, 38637, 38638, 38640, 38641, 38642, 38644, 38645, 38648, 38650, 38651, 38652, 38653, 38655, 38658, 38659, 38661, 38666, 38667, 38668, 38672, 38673, 38674, 38676, 38677, 38679, 38680, 38681, 38682, 38683, 38685, 38687, 38688, 25663, 25816, 32772, 27626, 27635, 27645, 27637, 27641, 27653, 27655, 27654, 27661, 27669, 27672, 27673, 27674, 27681, 27689, 27684, 27690, 27698, 25909, 25941, 25963, 29261, 29266, 29270, 29232, 34402, 21014, 32927, 32924, 32915, 32956, 26378, 32957, 32945, 32939, 32941, 32948, 32951, 32999, 33000, 33001, 33002, 32987, 32962, 32964, 32985, 32973, 32983, 26384, 32989, 33003, 33009, 33012, 33005, 33037, 33038, 33010, 33020, 26389, 33042, 35930, 33078, 33054, 33068, 33048, 33074, 33096, 33100, 33107, 33140, 33113, 33114, 33137, 33120, 33129, 33148, 33149, 33133, 33127, 22605, 23221, 33160, 33154, 33169, 28373, 33187, 33194, 33228, 26406, 33226, 33211, 38689, 38690, 38691, 38692, 38693, 38694, 38695, 38696, 38697, 38699, 38700, 38702, 38703, 38705, 38707, 38708, 38709, 38710, 38711, 38714, 38715, 38716, 38717, 38719, 38720, 38721, 38722, 38723, 38724, 38725, 38726, 38727, 38728, 38729, 38730, 38731, 38732, 38733, 38734, 38735, 38736, 38737, 38740, 38741, 38743, 38744, 38746, 38748, 38749, 38751, 38755, 38756, 38758, 38759, 38760, 38762, 38763, 38764, 38765, 38766, 38767, 38768, 38769, 38770, 38773, 38775, 38776, 38777, 38778, 38779, 38781, 38782, 38783, 38784, 38785, 38786, 38787, 38788, 38790, 38791, 38792, 38793, 38794, 38796, 38798, 38799, 38800, 38803, 38805, 38806, 38807, 38809, 38810, 38811, 38812, 38813, 33217, 33190, 27428, 27447, 27449, 27459, 27462, 27481, 39121, 39122, 39123, 39125, 39129, 39130, 27571, 24384, 27586, 35315, 26000, 40785, 26003, 26044, 26054, 26052, 26051, 26060, 26062, 26066, 26070, 28800, 28828, 28822, 28829, 28859, 28864, 28855, 28843, 28849, 28904, 28874, 28944, 28947, 28950, 28975, 28977, 29043, 29020, 29032, 28997, 29042, 29002, 29048, 29050, 29080, 29107, 29109, 29096, 29088, 29152, 29140, 29159, 29177, 29213, 29224, 28780, 28952, 29030, 29113, 25150, 25149, 25155, 25160, 25161, 31035, 31040, 31046, 31049, 31067, 31068, 31059, 31066, 31074, 31063, 31072, 31087, 31079, 31098, 31109, 31114, 31130, 31143, 31155, 24529, 24528, 38814, 38815, 38817, 38818, 38820, 38821, 38822, 38823, 38824, 38825, 38826, 38828, 38830, 38832, 38833, 38835, 38837, 38838, 38839, 38840, 38841, 38842, 38843, 38844, 38845, 38846, 38847, 38848, 38849, 38850, 38851, 38852, 38853, 38854, 38855, 38856, 38857, 38858, 38859, 38860, 38861, 38862, 38863, 38864, 38865, 38866, 38867, 38868, 38869, 38870, 38871, 38872, 38873, 38874, 38875, 38876, 38877, 38878, 38879, 38880, 38881, 38882, 38883, 38884, 38885, 38888, 38894, 38895, 38896, 38897, 38898, 38900, 38903, 38904, 38905, 38906, 38907, 38908, 38909, 38910, 38911, 38912, 38913, 38914, 38915, 38916, 38917, 38918, 38919, 38920, 38921, 38922, 38923, 38924, 38925, 38926, 24636, 24669, 24666, 24679, 24641, 24665, 24675, 24747, 24838, 24845, 24925, 25001, 24989, 25035, 25041, 25094, 32896, 32895, 27795, 27894, 28156, 30710, 30712, 30720, 30729, 30743, 30744, 30737, 26027, 30765, 30748, 30749, 30777, 30778, 30779, 30751, 30780, 30757, 30764, 30755, 30761, 30798, 30829, 30806, 30807, 30758, 30800, 30791, 30796, 30826, 30875, 30867, 30874, 30855, 30876, 30881, 30883, 30898, 30905, 30885, 30932, 30937, 30921, 30956, 30962, 30981, 30964, 30995, 31012, 31006, 31028, 40859, 40697, 40699, 40700, 30449, 30468, 30477, 30457, 30471, 30472, 30490, 30498, 30489, 30509, 30502, 30517, 30520, 30544, 30545, 30535, 30531, 30554, 30568, 38927, 38928, 38929, 38930, 38931, 38932, 38933, 38934, 38935, 38936, 38937, 38938, 38939, 38940, 38941, 38942, 38943, 38944, 38945, 38946, 38947, 38948, 38949, 38950, 38951, 38952, 38953, 38954, 38955, 38956, 38957, 38958, 38959, 38960, 38961, 38962, 38963, 38964, 38965, 38966, 38967, 38968, 38969, 38970, 38971, 38972, 38973, 38974, 38975, 38976, 38977, 38978, 38979, 38980, 38981, 38982, 38983, 38984, 38985, 38986, 38987, 38988, 38989, 38990, 38991, 38992, 38993, 38994, 38995, 38996, 38997, 38998, 38999, 39000, 39001, 39002, 39003, 39004, 39005, 39006, 39007, 39008, 39009, 39010, 39011, 39012, 39013, 39014, 39015, 39016, 39017, 39018, 39019, 39020, 39021, 39022, 30562, 30565, 30591, 30605, 30589, 30592, 30604, 30609, 30623, 30624, 30640, 30645, 30653, 30010, 30016, 30030, 30027, 30024, 30043, 30066, 30073, 30083, 32600, 32609, 32607, 35400, 32616, 32628, 32625, 32633, 32641, 32638, 30413, 30437, 34866, 38021, 38022, 38023, 38027, 38026, 38028, 38029, 38031, 38032, 38036, 38039, 38037, 38042, 38043, 38044, 38051, 38052, 38059, 38058, 38061, 38060, 38063, 38064, 38066, 38068, 38070, 38071, 38072, 38073, 38074, 38076, 38077, 38079, 38084, 38088, 38089, 38090, 38091, 38092, 38093, 38094, 38096, 38097, 38098, 38101, 38102, 38103, 38105, 38104, 38107, 38110, 38111, 38112, 38114, 38116, 38117, 38119, 38120, 38122, 39023, 39024, 39025, 39026, 39027, 39028, 39051, 39054, 39058, 39061, 39065, 39075, 39080, 39081, 39082, 39083, 39084, 39085, 39086, 39087, 39088, 39089, 39090, 39091, 39092, 39093, 39094, 39095, 39096, 39097, 39098, 39099, 39100, 39101, 39102, 39103, 39104, 39105, 39106, 39107, 39108, 39109, 39110, 39111, 39112, 39113, 39114, 39115, 39116, 39117, 39119, 39120, 39124, 39126, 39127, 39131, 39132, 39133, 39136, 39137, 39138, 39139, 39140, 39141, 39142, 39145, 39146, 39147, 39148, 39149, 39150, 39151, 39152, 39153, 39154, 39155, 39156, 39157, 39158, 39159, 39160, 39161, 39162, 39163, 39164, 39165, 39166, 39167, 39168, 39169, 39170, 39171, 39172, 39173, 39174, 39175, 38121, 38123, 38126, 38127, 38131, 38132, 38133, 38135, 38137, 38140, 38141, 38143, 38147, 38146, 38150, 38151, 38153, 38154, 38157, 38158, 38159, 38162, 38163, 38164, 38165, 38166, 38168, 38171, 38173, 38174, 38175, 38178, 38186, 38187, 38185, 38188, 38193, 38194, 38196, 38198, 38199, 38200, 38204, 38206, 38207, 38210, 38197, 38212, 38213, 38214, 38217, 38220, 38222, 38223, 38226, 38227, 38228, 38230, 38231, 38232, 38233, 38235, 38238, 38239, 38237, 38241, 38242, 38244, 38245, 38246, 38247, 38248, 38249, 38250, 38251, 38252, 38255, 38257, 38258, 38259, 38202, 30695, 30700, 38601, 31189, 31213, 31203, 31211, 31238, 23879, 31235, 31234, 31262, 31252, 39176, 39177, 39178, 39179, 39180, 39182, 39183, 39185, 39186, 39187, 39188, 39189, 39190, 39191, 39192, 39193, 39194, 39195, 39196, 39197, 39198, 39199, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39207, 39208, 39209, 39210, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39220, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39232, 39233, 39234, 39235, 39236, 39237, 39238, 39239, 39240, 39241, 39242, 39243, 39244, 39245, 39246, 39247, 39248, 39249, 39250, 39251, 39254, 39255, 39256, 39257, 39258, 39259, 39260, 39261, 39262, 39263, 39264, 39265, 39266, 39268, 39270, 39283, 39288, 39289, 39291, 39294, 39298, 39299, 39305, 31289, 31287, 31313, 40655, 39333, 31344, 30344, 30350, 30355, 30361, 30372, 29918, 29920, 29996, 40480, 40482, 40488, 40489, 40490, 40491, 40492, 40498, 40497, 40502, 40504, 40503, 40505, 40506, 40510, 40513, 40514, 40516, 40518, 40519, 40520, 40521, 40523, 40524, 40526, 40529, 40533, 40535, 40538, 40539, 40540, 40542, 40547, 40550, 40551, 40552, 40553, 40554, 40555, 40556, 40561, 40557, 40563, 30098, 30100, 30102, 30112, 30109, 30124, 30115, 30131, 30132, 30136, 30148, 30129, 30128, 30147, 30146, 30166, 30157, 30179, 30184, 30182, 30180, 30187, 30183, 30211, 30193, 30204, 30207, 30224, 30208, 30213, 30220, 30231, 30218, 30245, 30232, 30229, 30233, 39308, 39310, 39322, 39323, 39324, 39325, 39326, 39327, 39328, 39329, 39330, 39331, 39332, 39334, 39335, 39337, 39338, 39339, 39340, 39341, 39342, 39343, 39344, 39345, 39346, 39347, 39348, 39349, 39350, 39351, 39352, 39353, 39354, 39355, 39356, 39357, 39358, 39359, 39360, 39361, 39362, 39363, 39364, 39365, 39366, 39367, 39368, 39369, 39370, 39371, 39372, 39373, 39374, 39375, 39376, 39377, 39378, 39379, 39380, 39381, 39382, 39383, 39384, 39385, 39386, 39387, 39388, 39389, 39390, 39391, 39392, 39393, 39394, 39395, 39396, 39397, 39398, 39399, 39400, 39401, 39402, 39403, 39404, 39405, 39406, 39407, 39408, 39409, 39410, 39411, 39412, 39413, 39414, 39415, 39416, 39417, 30235, 30268, 30242, 30240, 30272, 30253, 30256, 30271, 30261, 30275, 30270, 30259, 30285, 30302, 30292, 30300, 30294, 30315, 30319, 32714, 31462, 31352, 31353, 31360, 31366, 31368, 31381, 31398, 31392, 31404, 31400, 31405, 31411, 34916, 34921, 34930, 34941, 34943, 34946, 34978, 35014, 34999, 35004, 35017, 35042, 35022, 35043, 35045, 35057, 35098, 35068, 35048, 35070, 35056, 35105, 35097, 35091, 35099, 35082, 35124, 35115, 35126, 35137, 35174, 35195, 30091, 32997, 30386, 30388, 30684, 32786, 32788, 32790, 32796, 32800, 32802, 32805, 32806, 32807, 32809, 32808, 32817, 32779, 32821, 32835, 32838, 32845, 32850, 32873, 32881, 35203, 39032, 39040, 39043, 39418, 39419, 39420, 39421, 39422, 39423, 39424, 39425, 39426, 39427, 39428, 39429, 39430, 39431, 39432, 39433, 39434, 39435, 39436, 39437, 39438, 39439, 39440, 39441, 39442, 39443, 39444, 39445, 39446, 39447, 39448, 39449, 39450, 39451, 39452, 39453, 39454, 39455, 39456, 39457, 39458, 39459, 39460, 39461, 39462, 39463, 39464, 39465, 39466, 39467, 39468, 39469, 39470, 39471, 39472, 39473, 39474, 39475, 39476, 39477, 39478, 39479, 39480, 39481, 39482, 39483, 39484, 39485, 39486, 39487, 39488, 39489, 39490, 39491, 39492, 39493, 39494, 39495, 39496, 39497, 39498, 39499, 39500, 39501, 39502, 39503, 39504, 39505, 39506, 39507, 39508, 39509, 39510, 39511, 39512, 39513, 39049, 39052, 39053, 39055, 39060, 39066, 39067, 39070, 39071, 39073, 39074, 39077, 39078, 34381, 34388, 34412, 34414, 34431, 34426, 34428, 34427, 34472, 34445, 34443, 34476, 34461, 34471, 34467, 34474, 34451, 34473, 34486, 34500, 34485, 34510, 34480, 34490, 34481, 34479, 34505, 34511, 34484, 34537, 34545, 34546, 34541, 34547, 34512, 34579, 34526, 34548, 34527, 34520, 34513, 34563, 34567, 34552, 34568, 34570, 34573, 34569, 34595, 34619, 34590, 34597, 34606, 34586, 34622, 34632, 34612, 34609, 34601, 34615, 34623, 34690, 34594, 34685, 34686, 34683, 34656, 34672, 34636, 34670, 34699, 34643, 34659, 34684, 34660, 34649, 34661, 34707, 34735, 34728, 34770, 39514, 39515, 39516, 39517, 39518, 39519, 39520, 39521, 39522, 39523, 39524, 39525, 39526, 39527, 39528, 39529, 39530, 39531, 39538, 39555, 39561, 39565, 39566, 39572, 39573, 39577, 39590, 39593, 39594, 39595, 39596, 39597, 39598, 39599, 39602, 39603, 39604, 39605, 39609, 39611, 39613, 39614, 39615, 39619, 39620, 39622, 39623, 39624, 39625, 39626, 39629, 39630, 39631, 39632, 39634, 39636, 39637, 39638, 39639, 39641, 39642, 39643, 39644, 39645, 39646, 39648, 39650, 39651, 39652, 39653, 39655, 39656, 39657, 39658, 39660, 39662, 39664, 39665, 39666, 39667, 39668, 39669, 39670, 39671, 39672, 39674, 39676, 39677, 39678, 39679, 39680, 39681, 39682, 39684, 39685, 39686, 34758, 34696, 34693, 34733, 34711, 34691, 34731, 34789, 34732, 34741, 34739, 34763, 34771, 34749, 34769, 34752, 34762, 34779, 34794, 34784, 34798, 34838, 34835, 34814, 34826, 34843, 34849, 34873, 34876, 32566, 32578, 32580, 32581, 33296, 31482, 31485, 31496, 31491, 31492, 31509, 31498, 31531, 31503, 31559, 31544, 31530, 31513, 31534, 31537, 31520, 31525, 31524, 31539, 31550, 31518, 31576, 31578, 31557, 31605, 31564, 31581, 31584, 31598, 31611, 31586, 31602, 31601, 31632, 31654, 31655, 31672, 31660, 31645, 31656, 31621, 31658, 31644, 31650, 31659, 31668, 31697, 31681, 31692, 31709, 31706, 31717, 31718, 31722, 31756, 31742, 31740, 31759, 31766, 31755, 39687, 39689, 39690, 39691, 39692, 39693, 39694, 39696, 39697, 39698, 39700, 39701, 39702, 39703, 39704, 39705, 39706, 39707, 39708, 39709, 39710, 39712, 39713, 39714, 39716, 39717, 39718, 39719, 39720, 39721, 39722, 39723, 39724, 39725, 39726, 39728, 39729, 39731, 39732, 39733, 39734, 39735, 39736, 39737, 39738, 39741, 39742, 39743, 39744, 39750, 39754, 39755, 39756, 39758, 39760, 39762, 39763, 39765, 39766, 39767, 39768, 39769, 39770, 39771, 39772, 39773, 39774, 39775, 39776, 39777, 39778, 39779, 39780, 39781, 39782, 39783, 39784, 39785, 39786, 39787, 39788, 39789, 39790, 39791, 39792, 39793, 39794, 39795, 39796, 39797, 39798, 39799, 39800, 39801, 39802, 39803, 31775, 31786, 31782, 31800, 31809, 31808, 33278, 33281, 33282, 33284, 33260, 34884, 33313, 33314, 33315, 33325, 33327, 33320, 33323, 33336, 33339, 33331, 33332, 33342, 33348, 33353, 33355, 33359, 33370, 33375, 33384, 34942, 34949, 34952, 35032, 35039, 35166, 32669, 32671, 32679, 32687, 32688, 32690, 31868, 25929, 31889, 31901, 31900, 31902, 31906, 31922, 31932, 31933, 31937, 31943, 31948, 31949, 31944, 31941, 31959, 31976, 33390, 26280, 32703, 32718, 32725, 32741, 32737, 32742, 32745, 32750, 32755, 31992, 32119, 32166, 32174, 32327, 32411, 40632, 40628, 36211, 36228, 36244, 36241, 36273, 36199, 36205, 35911, 35913, 37194, 37200, 37198, 37199, 37220, 39804, 39805, 39806, 39807, 39808, 39809, 39810, 39811, 39812, 39813, 39814, 39815, 39816, 39817, 39818, 39819, 39820, 39821, 39822, 39823, 39824, 39825, 39826, 39827, 39828, 39829, 39830, 39831, 39832, 39833, 39834, 39835, 39836, 39837, 39838, 39839, 39840, 39841, 39842, 39843, 39844, 39845, 39846, 39847, 39848, 39849, 39850, 39851, 39852, 39853, 39854, 39855, 39856, 39857, 39858, 39859, 39860, 39861, 39862, 39863, 39864, 39865, 39866, 39867, 39868, 39869, 39870, 39871, 39872, 39873, 39874, 39875, 39876, 39877, 39878, 39879, 39880, 39881, 39882, 39883, 39884, 39885, 39886, 39887, 39888, 39889, 39890, 39891, 39892, 39893, 39894, 39895, 39896, 39897, 39898, 39899, 37218, 37217, 37232, 37225, 37231, 37245, 37246, 37234, 37236, 37241, 37260, 37253, 37264, 37261, 37265, 37282, 37283, 37290, 37293, 37294, 37295, 37301, 37300, 37306, 35925, 40574, 36280, 36331, 36357, 36441, 36457, 36277, 36287, 36284, 36282, 36292, 36310, 36311, 36314, 36318, 36302, 36303, 36315, 36294, 36332, 36343, 36344, 36323, 36345, 36347, 36324, 36361, 36349, 36372, 36381, 36383, 36396, 36398, 36387, 36399, 36410, 36416, 36409, 36405, 36413, 36401, 36425, 36417, 36418, 36433, 36434, 36426, 36464, 36470, 36476, 36463, 36468, 36485, 36495, 36500, 36496, 36508, 36510, 35960, 35970, 35978, 35973, 35992, 35988, 26011, 35286, 35294, 35290, 35292, 39900, 39901, 39902, 39903, 39904, 39905, 39906, 39907, 39908, 39909, 39910, 39911, 39912, 39913, 39914, 39915, 39916, 39917, 39918, 39919, 39920, 39921, 39922, 39923, 39924, 39925, 39926, 39927, 39928, 39929, 39930, 39931, 39932, 39933, 39934, 39935, 39936, 39937, 39938, 39939, 39940, 39941, 39942, 39943, 39944, 39945, 39946, 39947, 39948, 39949, 39950, 39951, 39952, 39953, 39954, 39955, 39956, 39957, 39958, 39959, 39960, 39961, 39962, 39963, 39964, 39965, 39966, 39967, 39968, 39969, 39970, 39971, 39972, 39973, 39974, 39975, 39976, 39977, 39978, 39979, 39980, 39981, 39982, 39983, 39984, 39985, 39986, 39987, 39988, 39989, 39990, 39991, 39992, 39993, 39994, 39995, 35301, 35307, 35311, 35390, 35622, 38739, 38633, 38643, 38639, 38662, 38657, 38664, 38671, 38670, 38698, 38701, 38704, 38718, 40832, 40835, 40837, 40838, 40839, 40840, 40841, 40842, 40844, 40702, 40715, 40717, 38585, 38588, 38589, 38606, 38610, 30655, 38624, 37518, 37550, 37576, 37694, 37738, 37834, 37775, 37950, 37995, 40063, 40066, 40069, 40070, 40071, 40072, 31267, 40075, 40078, 40080, 40081, 40082, 40084, 40085, 40090, 40091, 40094, 40095, 40096, 40097, 40098, 40099, 40101, 40102, 40103, 40104, 40105, 40107, 40109, 40110, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119, 40122, 40123, 40124, 40125, 40132, 40133, 40134, 40135, 40138, 40139, 39996, 39997, 39998, 39999, 40000, 40001, 40002, 40003, 40004, 40005, 40006, 40007, 40008, 40009, 40010, 40011, 40012, 40013, 40014, 40015, 40016, 40017, 40018, 40019, 40020, 40021, 40022, 40023, 40024, 40025, 40026, 40027, 40028, 40029, 40030, 40031, 40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041, 40042, 40043, 40044, 40045, 40046, 40047, 40048, 40049, 40050, 40051, 40052, 40053, 40054, 40055, 40056, 40057, 40058, 40059, 40061, 40062, 40064, 40067, 40068, 40073, 40074, 40076, 40079, 40083, 40086, 40087, 40088, 40089, 40093, 40106, 40108, 40111, 40121, 40126, 40127, 40128, 40129, 40130, 40136, 40137, 40145, 40146, 40154, 40155, 40160, 40161, 40140, 40141, 40142, 40143, 40144, 40147, 40148, 40149, 40151, 40152, 40153, 40156, 40157, 40159, 40162, 38780, 38789, 38801, 38802, 38804, 38831, 38827, 38819, 38834, 38836, 39601, 39600, 39607, 40536, 39606, 39610, 39612, 39617, 39616, 39621, 39618, 39627, 39628, 39633, 39749, 39747, 39751, 39753, 39752, 39757, 39761, 39144, 39181, 39214, 39253, 39252, 39647, 39649, 39654, 39663, 39659, 39675, 39661, 39673, 39688, 39695, 39699, 39711, 39715, 40637, 40638, 32315, 40578, 40583, 40584, 40587, 40594, 37846, 40605, 40607, 40667, 40668, 40669, 40672, 40671, 40674, 40681, 40679, 40677, 40682, 40687, 40738, 40748, 40751, 40761, 40759, 40765, 40766, 40772, 40163, 40164, 40165, 40166, 40167, 40168, 40169, 40170, 40171, 40172, 40173, 40174, 40175, 40176, 40177, 40178, 40179, 40180, 40181, 40182, 40183, 40184, 40185, 40186, 40187, 40188, 40189, 40190, 40191, 40192, 40193, 40194, 40195, 40196, 40197, 40198, 40199, 40200, 40201, 40202, 40203, 40204, 40205, 40206, 40207, 40208, 40209, 40210, 40211, 40212, 40213, 40214, 40215, 40216, 40217, 40218, 40219, 40220, 40221, 40222, 40223, 40224, 40225, 40226, 40227, 40228, 40229, 40230, 40231, 40232, 40233, 40234, 40235, 40236, 40237, 40238, 40239, 40240, 40241, 40242, 40243, 40244, 40245, 40246, 40247, 40248, 40249, 40250, 40251, 40252, 40253, 40254, 40255, 40256, 40257, 40258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40259, 40260, 40261, 40262, 40263, 40264, 40265, 40266, 40267, 40268, 40269, 40270, 40271, 40272, 40273, 40274, 40275, 40276, 40277, 40278, 40279, 40280, 40281, 40282, 40283, 40284, 40285, 40286, 40287, 40288, 40289, 40290, 40291, 40292, 40293, 40294, 40295, 40296, 40297, 40298, 40299, 40300, 40301, 40302, 40303, 40304, 40305, 40306, 40307, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 40315, 40316, 40317, 40318, 40319, 40320, 40321, 40322, 40323, 40324, 40325, 40326, 40327, 40328, 40329, 40330, 40331, 40332, 40333, 40334, 40335, 40336, 40337, 40338, 40339, 40340, 40341, 40342, 40343, 40344, 40345, 40346, 40347, 40348, 40349, 40350, 40351, 40352, 40353, 40354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40355, 40356, 40357, 40358, 40359, 40360, 40361, 40362, 40363, 40364, 40365, 40366, 40367, 40368, 40369, 40370, 40371, 40372, 40373, 40374, 40375, 40376, 40377, 40378, 40379, 40380, 40381, 40382, 40383, 40384, 40385, 40386, 40387, 40388, 40389, 40390, 40391, 40392, 40393, 40394, 40395, 40396, 40397, 40398, 40399, 40400, 40401, 40402, 40403, 40404, 40405, 40406, 40407, 40408, 40409, 40410, 40411, 40412, 40413, 40414, 40415, 40416, 40417, 40418, 40419, 40420, 40421, 40422, 40423, 40424, 40425, 40426, 40427, 40428, 40429, 40430, 40431, 40432, 40433, 40434, 40435, 40436, 40437, 40438, 40439, 40440, 40441, 40442, 40443, 40444, 40445, 40446, 40447, 40448, 40449, 40450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40451, 40452, 40453, 40454, 40455, 40456, 40457, 40458, 40459, 40460, 40461, 40462, 40463, 40464, 40465, 40466, 40467, 40468, 40469, 40470, 40471, 40472, 40473, 40474, 40475, 40476, 40477, 40478, 40484, 40487, 40494, 40496, 40500, 40507, 40508, 40512, 40525, 40528, 40530, 40531, 40532, 40534, 40537, 40541, 40543, 40544, 40545, 40546, 40549, 40558, 40559, 40562, 40564, 40565, 40566, 40567, 40568, 40569, 40570, 40571, 40572, 40573, 40576, 40577, 40579, 40580, 40581, 40582, 40585, 40586, 40588, 40589, 40590, 40591, 40592, 40593, 40596, 40597, 40598, 40599, 40600, 40601, 40602, 40603, 40604, 40606, 40608, 40609, 40610, 40611, 40612, 40613, 40615, 40616, 40617, 40618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40619, 40620, 40621, 40622, 40623, 40624, 40625, 40626, 40627, 40629, 40630, 40631, 40633, 40634, 40636, 40639, 40640, 40641, 40642, 40643, 40645, 40646, 40647, 40648, 40650, 40651, 40652, 40656, 40658, 40659, 40661, 40662, 40663, 40665, 40666, 40670, 40673, 40675, 40676, 40678, 40680, 40683, 40684, 40685, 40686, 40688, 40689, 40690, 40691, 40692, 40693, 40694, 40695, 40696, 40698, 40701, 40703, 40704, 40705, 40706, 40707, 40708, 40709, 40710, 40711, 40712, 40713, 40714, 40716, 40719, 40721, 40722, 40724, 40725, 40726, 40728, 40730, 40731, 40732, 40733, 40734, 40735, 40737, 40739, 40740, 40741, 40742, 40743, 40744, 40745, 40746, 40747, 40749, 40750, 40752, 40753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40754, 40755, 40756, 40757, 40758, 40760, 40762, 40764, 40767, 40768, 40769, 40770, 40771, 40773, 40774, 40775, 40776, 40777, 40778, 40779, 40780, 40781, 40782, 40783, 40786, 40787, 40788, 40789, 40790, 40791, 40792, 40793, 40794, 40795, 40796, 40797, 40798, 40799, 40800, 40801, 40802, 40803, 40804, 40805, 40806, 40807, 40808, 40809, 40810, 40811, 40812, 40813, 40814, 40815, 40816, 40817, 40818, 40819, 40820, 40821, 40822, 40823, 40824, 40825, 40826, 40827, 40828, 40829, 40830, 40833, 40834, 40845, 40846, 40847, 40848, 40849, 40850, 40851, 40852, 40853, 40854, 40855, 40856, 40860, 40861, 40862, 40865, 40866, 40867, 40868, 40869, 63788, 63865, 63893, 63975, 63985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64012, 64013, 64014, 64015, 64017, 64019, 64020, 64024, 64031, 64032, 64033, 64035, 64036, 64039, 64040, 64041, 11905, 0, 0, 0, 11908, 13427, 13383, 11912, 11915, 0, 13726, 13850, 13838, 11916, 11927, 14702, 14616, 0, 14799, 14815, 14963, 14800, 0, 0, 15182, 15470, 15584, 11943, 0, 0, 11946, 16470, 16735, 11950, 17207, 11955, 11958, 11959, 0, 17329, 17324, 11963, 17373, 17622, 18017, 17996, 0, 18211, 18217, 18300, 18317, 11978, 18759, 18810, 18813, 18818, 18819, 18821, 18822, 18847, 18843, 18871, 18870, 0, 0, 19619, 19615, 19616, 19617, 19575, 19618, 19731, 19732, 19733, 19734, 19735, 19736, 19737, 19886]);
		encode0 = $toNativeArray($kindUint16, [65104, 0, 0, 65108, 0, 0, 0, 65111, 0, 0, 65112, 65117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65131, 0, 0, 65134, 0, 0, 0, 65137, 0, 0, 0, 0, 65139, 0, 0, 65140, 65141, 0, 0, 0, 65145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43402, 43403, 43404, 43405, 43406, 43407, 43408, 43409, 43410, 43411, 43412, 43413, 0, 0, 0, 0, 41377, 41378, 41379, 41384, 0, 41385, 43365, 43414, 41396, 41397, 41398, 41399, 41400, 41401, 41402, 41403, 41406, 41407, 43155, 41470, 41394, 41395, 41404, 41405, 0, 0, 0, 0, 0, 43156, 43157, 0, 0, 43328, 43329, 43330, 43331, 43332, 43333, 43334, 43335, 43336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43401, 0, 0, 42145, 42146, 42147, 42148, 42149, 42150, 42151, 42152, 42153, 42154, 42155, 42156, 42157, 42158, 42159, 42160, 42161, 42162, 42163, 42164, 42165, 42166, 42167, 42168, 42169, 42170, 42171, 42172, 42173, 42174, 42175, 42176, 42177, 42178, 42179, 42180, 42181, 42182, 42183, 42184, 42185, 42186, 42187, 42188, 42189, 42190, 42191, 42192, 42193, 42194, 42195, 42196, 42197, 42198, 42199, 42200, 42201, 42202, 42203, 42204, 42205, 42206, 42207, 42208, 42209, 42210, 42211, 42212, 42213, 42214, 42215, 42216, 42217, 42218, 42219, 42220, 42221, 42222, 42223, 42224, 42225, 42226, 42227, 0, 0, 0, 0, 0, 0, 0, 43361, 43362, 43366, 43367, 0, 0, 42401, 42402, 42403, 42404, 42405, 42406, 42407, 42408, 42409, 42410, 42411, 42412, 42413, 42414, 42415, 42416, 42417, 42418, 42419, 42420, 42421, 42422, 42423, 42424, 42425, 42426, 42427, 42428, 42429, 42430, 42431, 42432, 42433, 42434, 42435, 42436, 42437, 42438, 42439, 42440, 42441, 42442, 42443, 42444, 42445, 42446, 42447, 42448, 42449, 42450, 42451, 42452, 42453, 42454, 42455, 42456, 42457, 42458, 42459, 42460, 42461, 42462, 42463, 42464, 42465, 42466, 42467, 42468, 42469, 42470, 42471, 42472, 42473, 42474, 42475, 42476, 42477, 42478, 42479, 42480, 42481, 42482, 42483, 42484, 42485, 42486, 0, 0, 0, 0, 0, 43360, 43363, 43364, 0, 0, 0, 0, 0, 0, 43205, 43206, 43207, 43208, 43209, 43210, 43211, 43212, 43213, 43214, 43215, 43216, 43217, 43218, 43219, 43220, 43221, 43222, 43223, 43224, 43225, 43226, 43227, 43228, 43229, 43230, 43231, 43232, 43233, 43234, 43235, 43236, 43237, 43238, 43239, 43240, 43241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41701, 41702, 41703, 41704, 41705, 41706, 41707, 41708, 41709, 41710, 0, 0, 0, 0, 0, 0, 0, 43354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43338, 43339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43340, 43341, 43342, 0, 0, 43343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43345, 0, 0, 43346, 43347, 0, 0, 43348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65122, 65125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65144, 0, 0, 0, 0, 65143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65152, 0, 0, 0, 0, 0, 65153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65158, 0, 0, 65159, 0, 0, 0, 0, 65160, 65161, 0, 65162, 65163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65165, 0, 0, 0, 65164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65167, 65166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65171, 65172, 65173, 65175, 65170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65176, 65177, 65178, 65179, 65180, 65181, 65182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53947, 46753, 33088, 50911, 33089, 33090, 33091, 52722, 54729, 51453, 51663, 53186, 55458, 45755, 54251, 33092, 55460, 46067, 33093, 55208, 51154, 55463, 51904, 33094, 51184, 45563, 53941, 46292, 46763, 52159, 55465, 33095, 33096, 33097, 46762, 33098, 49597, 53711, 33099, 51621, 55469, 33100, 47350, 53694, 58332, 54992, 33101, 33102, 47073, 33103, 46254, 33104, 49625, 33105, 55484, 33106, 52712, 46500, 52906, 55031, 33107, 49398, 48857, 55471, 33108, 33109, 33110, 50379, 33111, 48835, 33112, 55473, 50100, 53989, 33113, 54958, 52954, 54695, 47861, 47014, 49366, 33114, 50873, 50642, 51143, 33115, 47572, 33116, 46027, 53970, 33117, 33118, 55487, 48837, 50930, 53938, 53168, 53223, 33119, 33120, 33121, 33122, 51945, 33123, 33124, 55488, 33125, 33126, 33127, 33128, 33129, 33130, 49906, 49874, 33131, 51433, 33132, 33133, 33134, 33135, 33136, 33137, 33138, 33139, 33140, 33141, 51116, 33142, 33143, 33144, 33145, 33146, 33147, 33148, 49611, 33149, 54248, 54777, 33150, 51906, 46846, 55457, 54234, 49143, 33152, 54470, 48037, 55489, 52965, 48814, 33153, 33154, 55464, 33155, 53703, 53417, 33156, 33157, 33158, 55485, 55791, 52726, 49082, 33159, 48571, 47781, 53984, 45818, 47840, 50358, 33160, 53229, 48809, 52644, 49601, 33161, 33162, 33163, 51159, 55793, 33164, 55796, 33165, 33166, 33167, 33168, 51403, 55529, 33169, 33170, 33171, 53978, 51890, 51402, 55532, 55530, 55494, 48630, 50893, 46064, 33172, 55531, 48625, 48617, 33173, 51412, 46291, 33174, 33175, 49880, 33176, 45782, 55248, 51915, 52219, 54732, 47286, 53193, 33177, 33178, 33179, 55770, 55536, 51114, 33180, 55534, 33181, 46330, 49646, 53972, 33182, 33183, 55533, 33184, 53959, 55535, 50119, 33185, 33186, 33187, 53750, 33188, 55001, 55538, 33189, 55541, 48382, 48347, 33190, 33191, 33192, 51406, 33193, 47069, 33194, 47042, 33195, 50931, 33196, 33197, 33198, 33199, 33200, 33201, 33202, 55544, 53953, 33203, 33204, 52969, 48319, 47100, 47013, 53469, 33205, 33206, 33207, 33208, 33209, 55002, 54213, 48111, 48097, 55537, 33210, 33211, 51617, 52912, 46251, 33212, 55539, 33213, 51659, 55542, 49879, 55543, 33214, 33215, 52913, 55545, 33216, 33217, 33218, 45742, 47552, 33219, 55715, 33220, 45289, 33221, 49638, 33222, 51692, 33223, 52165, 33224, 52166, 55716, 33225, 33226, 33227, 33228, 33229, 46568, 33230, 33231, 46507, 33232, 33233, 33234, 33235, 33236, 33237, 52923, 46541, 55201, 55284, 54227, 33238, 52453, 33239, 47822, 33240, 55714, 55772, 54240, 55549, 47088, 55287, 55550, 55546, 55713, 50403, 33241, 33242, 54198, 55540, 55773, 33243, 55547, 33244, 50661, 33245, 33246, 49360, 33247, 33248, 53744, 45275, 33249, 33250, 48337, 55718, 33251, 55717, 33252, 33253, 33254, 33255, 55724, 55726, 33256, 55723, 51897, 33257, 33258, 33259, 55721, 54966, 33260, 33261, 33262, 46046, 55720, 33263, 49405, 33264, 51916, 33265, 55722, 33266, 55719, 33267, 33268, 55728, 33269, 33270, 46769, 33271, 33272, 33273, 47529, 33274, 53952, 33275, 33276, 53184, 33277, 33278, 49858, 33344, 48580, 54764, 45792, 51144, 49131, 55725, 33345, 55727, 33346, 52970, 47854, 33347, 33348, 33349, 33350, 33351, 51158, 33352, 33353, 33354, 33355, 33356, 33357, 33358, 33359, 33360, 45539, 33361, 33362, 33363, 46297, 46829, 55732, 33364, 33365, 33366, 33367, 49057, 33368, 33369, 33370, 55774, 51150, 49406, 55736, 33371, 33372, 33373, 33374, 33375, 52183, 47101, 33376, 55733, 33377, 55735, 45475, 54241, 55737, 33378, 53445, 33379, 55734, 33380, 33381, 55729, 33382, 55730, 49577, 55731, 33383, 33384, 48371, 53470, 47273, 33385, 48867, 33386, 55741, 33387, 33388, 33389, 33390, 55738, 33391, 45235, 33392, 33393, 33394, 55746, 33395, 33396, 33397, 33398, 33399, 33400, 33401, 33402, 33403, 33404, 33405, 33406, 33408, 55748, 45494, 33409, 55743, 33410, 33411, 46521, 33412, 48883, 33413, 33414, 33415, 52424, 47858, 53968, 33416, 55747, 33417, 33418, 48616, 33419, 45995, 33420, 33421, 33422, 55749, 48875, 33423, 55750, 55739, 50399, 33424, 55742, 55745, 55744, 33425, 33426, 33427, 33428, 33429, 33430, 33431, 33432, 33433, 33434, 33435, 54702, 33436, 54965, 33437, 51171, 33438, 33439, 33440, 33441, 55752, 33442, 33443, 33444, 48345, 55754, 33445, 33446, 33447, 55740, 33448, 55755, 50859, 33449, 33450, 33451, 33452, 33453, 55753, 33454, 33455, 33456, 33457, 55286, 33458, 52643, 33459, 33460, 33461, 33462, 33463, 33464, 33465, 33466, 48545, 33467, 33468, 33469, 33470, 33471, 33472, 55756, 33473, 33474, 33475, 33476, 33477, 33478, 33479, 33480, 33481, 50620, 52661, 33482, 33483, 33484, 55757, 33485, 33486, 55751, 45989, 49150, 33487, 33488, 33489, 33490, 47285, 33491, 33492, 49404, 33493, 33494, 33495, 33496, 45304, 33497, 33498, 33499, 33500, 33501, 33502, 33503, 33504, 33505, 33506, 33507, 33508, 33509, 33510, 33511, 33512, 33513, 33514, 33515, 33516, 33517, 46326, 33518, 55758, 33519, 55759, 46242, 55760, 33520, 33521, 46303, 33522, 33523, 33524, 33525, 33526, 45249, 33527, 33528, 33529, 33530, 33531, 33532, 33533, 55761, 51637, 33534, 33600, 33601, 33602, 33603, 33604, 33605, 33606, 33607, 33608, 33609, 33610, 33611, 33612, 33613, 33614, 33615, 33616, 33617, 53233, 33618, 33619, 33620, 33621, 33622, 33623, 55762, 33624, 33625, 33626, 49605, 33627, 33628, 33629, 33630, 33631, 33632, 33633, 33634, 33635, 33636, 33637, 55766, 51630, 33638, 33639, 33640, 33641, 55765, 55764, 55767, 33642, 33643, 33644, 33645, 52187, 33646, 48553, 33647, 33648, 33649, 33650, 33651, 50855, 33652, 33653, 33654, 33655, 33656, 33657, 33658, 33659, 33660, 33661, 55763, 55768, 33662, 33664, 33665, 55769, 33666, 33667, 33668, 33669, 33670, 33671, 51429, 33672, 33673, 33674, 33675, 33676, 33677, 33678, 33679, 33680, 33681, 33682, 33683, 33684, 33685, 49372, 33686, 33687, 33688, 33689, 33690, 33691, 33692, 33693, 33694, 33695, 33696, 33697, 33698, 33699, 33700, 33701, 33702, 33703, 33704, 33705, 33706, 33707, 33708, 33709, 33710, 33711, 33712, 33713, 33714, 46841, 55459, 54474, 33715, 54442, 53462, 46052, 54743, 33716, 53192, 47586, 33717, 49099, 33718, 50146, 33719, 33720, 33721, 46802, 33722, 33723, 52675, 55790, 55792, 33724, 33725, 33726, 46515, 33727, 46773, 33728, 33729, 33730, 33731, 33732, 48804, 33733, 33734, 51435, 33735, 33736, 51371, 33737, 33738, 45259, 47531, 49657, 55778, 33739, 49340, 47538, 33740, 47576, 53451, 45560, 50916, 48863, 46564, 55240, 33741, 53752, 48358, 51934, 33742, 33743, 48317, 55782, 55527, 33744, 33745, 50394, 33746, 33747, 47316, 51389, 33748, 33749, 45793, 54489, 33750, 33751, 33752, 33753, 50096, 33754, 33755, 50145, 55970, 51423, 33756, 53428, 33757, 48892, 50601, 33758, 33759, 33760, 47578, 33761, 55971, 33762, 54441, 55972, 33763, 33764, 33765, 33766, 33767, 55803, 46764, 33768, 33769, 47083, 45561, 55804, 46053, 48886, 33770, 49142, 53937, 49380, 33771, 33772, 33773, 46771, 55806, 55805, 33774, 33775, 48827, 33776, 33777, 33778, 50912, 33779, 55228, 55969, 33780, 49593, 33781, 46578, 49640, 33782, 33783, 48373, 33784, 46293, 33785, 33786, 33787, 33788, 33789, 33790, 33856, 33857, 33858, 49629, 33859, 50429, 33860, 33861, 48312, 47026, 33862, 33863, 47087, 33864, 33865, 33866, 33867, 33868, 33869, 55788, 33870, 50878, 33871, 49069, 48075, 33872, 33873, 46538, 33874, 56265, 53463, 33875, 52665, 45244, 46070, 48119, 56266, 47791, 33876, 54500, 46518, 46579, 55510, 51408, 33877, 33878, 47062, 51152, 55511, 33879, 49071, 33880, 33881, 56251, 55512, 33882, 33883, 53452, 48046, 33884, 33885, 33886, 60350, 49616, 49653, 54514, 47317, 46260, 33887, 46069, 33888, 33889, 51646, 33890, 33891, 33892, 50640, 33893, 33894, 33895, 50649, 49403, 33896, 45552, 33897, 55513, 47566, 33898, 46525, 33899, 33900, 55514, 33901, 33902, 54982, 52130, 51375, 51634, 46284, 49100, 33903, 47604, 33904, 55515, 55516, 46823, 48321, 52458, 33905, 33906, 33907, 33908, 33909, 33910, 53239, 33911, 55517, 51120, 33912, 33913, 47568, 48547, 33914, 33915, 52446, 33916, 50890, 33917, 33918, 33920, 33921, 33922, 55520, 33923, 55518, 33924, 33925, 55519, 33926, 33927, 33928, 45310, 33929, 48871, 33930, 51875, 48372, 33931, 33932, 33933, 33934, 47281, 33935, 33936, 47342, 33937, 33938, 33939, 33940, 33941, 33942, 33943, 33944, 33945, 33946, 55522, 33947, 48587, 33948, 55524, 55523, 33949, 33950, 33951, 33952, 33953, 50684, 33954, 33955, 33956, 33957, 33958, 33959, 33960, 55525, 33961, 33962, 55526, 33963, 33964, 33965, 33966, 33967, 33968, 33969, 49574, 33970, 51376, 45292, 47526, 48339, 52977, 56253, 49619, 33971, 33972, 33973, 33974, 46767, 55034, 50604, 48601, 56254, 56255, 33975, 33976, 33977, 49400, 48802, 49357, 33978, 33979, 33980, 33981, 33982, 33983, 33984, 33985, 33986, 33987, 56256, 51910, 33988, 33989, 33990, 45738, 33991, 33992, 33993, 54210, 33994, 50147, 33995, 53675, 33996, 33997, 33998, 33999, 56258, 34000, 49365, 34001, 34002, 34003, 56259, 34004, 49073, 34005, 34006, 34007, 34008, 34009, 34010, 50364, 34011, 34012, 34013, 34014, 51162, 34015, 34016, 34017, 34018, 34019, 34020, 34021, 34022, 34023, 34024, 34025, 56260, 34026, 34027, 34028, 34029, 34030, 34031, 34032, 34033, 55784, 51671, 34034, 34035, 34036, 47540, 52976, 54472, 34037, 34038, 34039, 34040, 45308, 46290, 34041, 53465, 34042, 34043, 34044, 34045, 55785, 34046, 57035, 55787, 34112, 34113, 34114, 34115, 55472, 48047, 45489, 34116, 46039, 55502, 34117, 34118, 54481, 34119, 34120, 48563, 49135, 34121, 53179, 34122, 34123, 55504, 34124, 34125, 34126, 47051, 34127, 34128, 34129, 55505, 34130, 34131, 34132, 34133, 34134, 34135, 34136, 34137, 34138, 34139, 50853, 51192, 53949, 34140, 34141, 55506, 50404, 34142, 51886, 34143, 51111, 34144, 55462, 34145, 51709, 52967, 48092, 45291, 34146, 34147, 34148, 48042, 53421, 34149, 45488, 55268, 55231, 34150, 46501, 49908, 50383, 34151, 34152, 45737, 34153, 45751, 34154, 45541, 57266, 54716, 49064, 49836, 55509, 49841, 34155, 55508, 52948, 34156, 56032, 34157, 52928, 34158, 34159, 55476, 50094, 54177, 52899, 34160, 48308, 51380, 49873, 34161, 48877, 53430, 34162, 56033, 34163, 34164, 34165, 34166, 51172, 34167, 34168, 45991, 34169, 46834, 52476, 49402, 34170, 34171, 49399, 34172, 53689, 53729, 55495, 34173, 34174, 34176, 34177, 34178, 34179, 34180, 45790, 34181, 34182, 49381, 34183, 47857, 34184, 34185, 55496, 34186, 54445, 34187, 34188, 53217, 55497, 34189, 55498, 53187, 34190, 46072, 48839, 34191, 34192, 34193, 34194, 55499, 34195, 34196, 34197, 34198, 34199, 34200, 34201, 56268, 34202, 34203, 34204, 34205, 51365, 34206, 34207, 34208, 53208, 34209, 51454, 45774, 34210, 34211, 34212, 34213, 34214, 54230, 45798, 48304, 54225, 52139, 47028, 34215, 34216, 34217, 47010, 34218, 34219, 51941, 34220, 51361, 51932, 45540, 53488, 34221, 50641, 34222, 34223, 34224, 56261, 46590, 34225, 34226, 49114, 47557, 48868, 49645, 34227, 57270, 57269, 54971, 48592, 54745, 45256, 46755, 49097, 52392, 57267, 51895, 54226, 34228, 55503, 53942, 47813, 52158, 52414, 34229, 57271, 46576, 57268, 34230, 34231, 34232, 54261, 34233, 46036, 47351, 34234, 57274, 34235, 47823, 48298, 46581, 34236, 52652, 50171, 47859, 49396, 52674, 53234, 57272, 53189, 34237, 49856, 57273, 49904, 34238, 34239, 34240, 48893, 34241, 49631, 52684, 54007, 47053, 57281, 34242, 57284, 34243, 34244, 47089, 45257, 46806, 47060, 34245, 47788, 52477, 49108, 52145, 50932, 34246, 54952, 57285, 34247, 52962, 46003, 34248, 34249, 52988, 46261, 34250, 52935, 47856, 34251, 52961, 34252, 53693, 34253, 34254, 57280, 34255, 34256, 46324, 34257, 46026, 34258, 47334, 57275, 34259, 34260, 34261, 34262, 50373, 34263, 57276, 57277, 57278, 50619, 57279, 57282, 54449, 57283, 34264, 51130, 52952, 34265, 34266, 34267, 34268, 34269, 50392, 34270, 57290, 34271, 57295, 34272, 55004, 34273, 34274, 34275, 34276, 34277, 34278, 34279, 34280, 57289, 57306, 52918, 34281, 47815, 57294, 57288, 50654, 34282, 34283, 51691, 47860, 50172, 34284, 34285, 48855, 34286, 57286, 34287, 57293, 34288, 50648, 34289, 34290, 34291, 34292, 54694, 47821, 34293, 48844, 54205, 47296, 34294, 55012, 34295, 57287, 47550, 49063, 34296, 34297, 49660, 57291, 57292, 34298, 57296, 34299, 34300, 34301, 34302, 34368, 57307, 57317, 34369, 57303, 57302, 55241, 57315, 57316, 58859, 53927, 57298, 34370, 49065, 34371, 54491, 34372, 49096, 57300, 34373, 34374, 34375, 53196, 34376, 34377, 57309, 34378, 53706, 34379, 57310, 45223, 50871, 57299, 34380, 47845, 34381, 46815, 52699, 47614, 54485, 34382, 34383, 57311, 53228, 45221, 57319, 57297, 53702, 57301, 57304, 57305, 57308, 34384, 48041, 34385, 57312, 57313, 34386, 57314, 57318, 57320, 54196, 34387, 34388, 34389, 34390, 34391, 47335, 50614, 57322, 51674, 49576, 50372, 34392, 34393, 49118, 53240, 34394, 34395, 34396, 54748, 57326, 34397, 34398, 34399, 34400, 34401, 34402, 45752, 34403, 47839, 57324, 34404, 56257, 34405, 53732, 34406, 34407, 34408, 34409, 52212, 46269, 34410, 45222, 34411, 34412, 34413, 34414, 34415, 57329, 52422, 57330, 34416, 34417, 57325, 34418, 34419, 34420, 34421, 34422, 34423, 57321, 34424, 34425, 34426, 34427, 57323, 34428, 57327, 57328, 48061, 34429, 34430, 57331, 34432, 34433, 57332, 34434, 48035, 34435, 51931, 52904, 57511, 45994, 34436, 57510, 34437, 34438, 34439, 57505, 34440, 34441, 34442, 34443, 57342, 34444, 52697, 57340, 34445, 57338, 34446, 49104, 55236, 34447, 51660, 34448, 34449, 57336, 45217, 34450, 34451, 34452, 34453, 34454, 57341, 34455, 34456, 34457, 34458, 57339, 57506, 34459, 34460, 34461, 34462, 34463, 57512, 34464, 34465, 34466, 34467, 47048, 34468, 34469, 50849, 51638, 49330, 57333, 34470, 34471, 50622, 34472, 55492, 57337, 50422, 34473, 34474, 34475, 34476, 34477, 34478, 57507, 57508, 57509, 53413, 34479, 34480, 57524, 52452, 34481, 57521, 34482, 49062, 57519, 52921, 57515, 51654, 34483, 34484, 49326, 57518, 47853, 47792, 57513, 34485, 34486, 34487, 57334, 34488, 57523, 34489, 34490, 57528, 34491, 34492, 34493, 46253, 57529, 34494, 34495, 53170, 47816, 34496, 57520, 34497, 34498, 34499, 34500, 34501, 34502, 34503, 53498, 34504, 34505, 34506, 34507, 34508, 34509, 34510, 34511, 34512, 57516, 34513, 54523, 34514, 57335, 34515, 50663, 34516, 57517, 34517, 54263, 34518, 57526, 57527, 34519, 34520, 34521, 34522, 34523, 57540, 53473, 34524, 34525, 34526, 57532, 34527, 34528, 57545, 57546, 34529, 34530, 34531, 57534, 57514, 51620, 57537, 34532, 57522, 34533, 34534, 34535, 34536, 34537, 51912, 57539, 34538, 57525, 34539, 52939, 34540, 52163, 57549, 57542, 57538, 34541, 57547, 34542, 57530, 57535, 57536, 34543, 34544, 57541, 34545, 34546, 57543, 57544, 34547, 57548, 34548, 57531, 34549, 34550, 34551, 34552, 34553, 52180, 57557, 34554, 57558, 57554, 34555, 34556, 34557, 34558, 34624, 34625, 57552, 48334, 34626, 34627, 57553, 34628, 47298, 55493, 34629, 34630, 34631, 34632, 34633, 34634, 34635, 34636, 53482, 34637, 34638, 49903, 34639, 34640, 57551, 57533, 34641, 34642, 34643, 57556, 57555, 34644, 34645, 57559, 34646, 34647, 34648, 34649, 57564, 57560, 34650, 34651, 34652, 55030, 46000, 34653, 55276, 34654, 52155, 34655, 34656, 57562, 34657, 52987, 34658, 34659, 34660, 47833, 34661, 34662, 34663, 34664, 34665, 34666, 34667, 34668, 34669, 34670, 34671, 34672, 57569, 57565, 53933, 34673, 34674, 34675, 34676, 34677, 57570, 34678, 34679, 57563, 57561, 57567, 34680, 34681, 57568, 34682, 34683, 34684, 34685, 34686, 57566, 34688, 57572, 34689, 34690, 34691, 50935, 55468, 54507, 57574, 51913, 34692, 34693, 34694, 34695, 57573, 34696, 34697, 34698, 34699, 47297, 34700, 34701, 34702, 34703, 57575, 57576, 34704, 34705, 34706, 34707, 34708, 34709, 34710, 34711, 57577, 57571, 34712, 34713, 34714, 34715, 34716, 34717, 34718, 47807, 52455, 34719, 34720, 34721, 57578, 34722, 34723, 34724, 34725, 34726, 34727, 34728, 34729, 34730, 34731, 34732, 34733, 34734, 34735, 34736, 53241, 34737, 34738, 34739, 34740, 34741, 34742, 34743, 34744, 34745, 34746, 34747, 57579, 34748, 34749, 34750, 34751, 34752, 34753, 34754, 51394, 34755, 34756, 34757, 34758, 48576, 34759, 34760, 34761, 34762, 34763, 34764, 34765, 34766, 34767, 34768, 34769, 34770, 34771, 50386, 34772, 34773, 34774, 34775, 34776, 34777, 34778, 34779, 34780, 57580, 34781, 34782, 57581, 34783, 34784, 51188, 52164, 34785, 57582, 48088, 55478, 54002, 57583, 52677, 34786, 46810, 34787, 34788, 34789, 34790, 34791, 34792, 57585, 34793, 54448, 34794, 34795, 49319, 46289, 34796, 34797, 52903, 57584, 34798, 34799, 34800, 57586, 47564, 34801, 34802, 47610, 52668, 57587, 34803, 34804, 34805, 50900, 57588, 34806, 54450, 34807, 51366, 57590, 57589, 34808, 34809, 34810, 34811, 34812, 34813, 34814, 34880, 34881, 34882, 34883, 34884, 34885, 34886, 34887, 34888, 34889, 57591, 34890, 34891, 52673, 34892, 34893, 34894, 51877, 34895, 34896, 34897, 34898, 54490, 56279, 56281, 34899, 56280, 47591, 56284, 56285, 46552, 34900, 34901, 56282, 34902, 34903, 34904, 34905, 34906, 56283, 45985, 56287, 34907, 34908, 48120, 34909, 54967, 34910, 56288, 34911, 34912, 34913, 34914, 48889, 34915, 34916, 47035, 34917, 56272, 52398, 49074, 48053, 55288, 49107, 34918, 34919, 34920, 34921, 34922, 49129, 34923, 34924, 48353, 52403, 56286, 45267, 52971, 47064, 55225, 50882, 34925, 34926, 49316, 34927, 52409, 34928, 56295, 56289, 50874, 56291, 34929, 56296, 34930, 50679, 34931, 34932, 34933, 56298, 34934, 34935, 56297, 49088, 34936, 34937, 34938, 56294, 56293, 34939, 34940, 34941, 34942, 34944, 46265, 49324, 49826, 56290, 56292, 34945, 34946, 34947, 34948, 53453, 56301, 34949, 34950, 34951, 34952, 34953, 49373, 56306, 34954, 34955, 34956, 34957, 34958, 34959, 34960, 46818, 34961, 34962, 34963, 34964, 56307, 56274, 47544, 54443, 56300, 34965, 49105, 56304, 34966, 56273, 34967, 46566, 34968, 56299, 49125, 34969, 34970, 34971, 56302, 34972, 56305, 34973, 34974, 34975, 56313, 34976, 34977, 34978, 34979, 34980, 34981, 34982, 34983, 34984, 47521, 45219, 34985, 34986, 34987, 34988, 34989, 34990, 34991, 49905, 34992, 34993, 46023, 56303, 34994, 34995, 56312, 34996, 50898, 56308, 34997, 34998, 56309, 56311, 56310, 34999, 35000, 56318, 35001, 54258, 45754, 35002, 35003, 35004, 56317, 35005, 35006, 35007, 35008, 35009, 35010, 35011, 35012, 56484, 35013, 56315, 35014, 35015, 35016, 35017, 56314, 35018, 35019, 35020, 56316, 50656, 48121, 35021, 35022, 56483, 35023, 35024, 56485, 35025, 52419, 35026, 35027, 35028, 46801, 56768, 35029, 35030, 35031, 56481, 35032, 56482, 35033, 35034, 35035, 51125, 35036, 35037, 35038, 46825, 35039, 35040, 35041, 56487, 35042, 35043, 35044, 35045, 56486, 35046, 56489, 45476, 35047, 35048, 46540, 35049, 35050, 35051, 35052, 35053, 49072, 35054, 35055, 35056, 35057, 35058, 53727, 35059, 35060, 35061, 35062, 46786, 35063, 35064, 35065, 35066, 35067, 35068, 35069, 35070, 35136, 35137, 35138, 35139, 35140, 35141, 56488, 35142, 35143, 35144, 35145, 35146, 35147, 35148, 52218, 60403, 35149, 35150, 35151, 52188, 35152, 35153, 52222, 35154, 35155, 35156, 52417, 35157, 35158, 35159, 35160, 35161, 51451, 35162, 35163, 35164, 35165, 35166, 35167, 56490, 35168, 35169, 35170, 35171, 35172, 52462, 56491, 35173, 35174, 35175, 35176, 35177, 35178, 35179, 35180, 35181, 35182, 35183, 35184, 35185, 35186, 35187, 35188, 35189, 56275, 35190, 56495, 56492, 35191, 48819, 35192, 51963, 35193, 35194, 35195, 56493, 35196, 35197, 35198, 35200, 35201, 35202, 35203, 35204, 51658, 50361, 35205, 35206, 35207, 35208, 35209, 51133, 56494, 35210, 35211, 35212, 54518, 53478, 35213, 35214, 35215, 35216, 35217, 35218, 35219, 35220, 50347, 46805, 35221, 35222, 35223, 35224, 35225, 35226, 35227, 35228, 35229, 35230, 35231, 35232, 35233, 35234, 35235, 35236, 35237, 35238, 56276, 35239, 35240, 35241, 35242, 45530, 35243, 35244, 35245, 56277, 35246, 35247, 35248, 35249, 35250, 35251, 35252, 35253, 35254, 35255, 35256, 56278, 35257, 35258, 35259, 47806, 35260, 35261, 35262, 35263, 35264, 35265, 35266, 35267, 35268, 35269, 35270, 35271, 35272, 35273, 51392, 35274, 35275, 35276, 35277, 35278, 35279, 51903, 51401, 35280, 55219, 35281, 51705, 35282, 35283, 49095, 35284, 35285, 47864, 35286, 35287, 53948, 35288, 35289, 35290, 35291, 35292, 35293, 35294, 35295, 58042, 35296, 46246, 35297, 35298, 45496, 35299, 35300, 35301, 35302, 35303, 47284, 35304, 53188, 35305, 35306, 35307, 35308, 55783, 53158, 52706, 35309, 35310, 55789, 46816, 35311, 53945, 35312, 35313, 47547, 35314, 35315, 35316, 35317, 58041, 58039, 35318, 46323, 35319, 52460, 52395, 47090, 35320, 55474, 53739, 47803, 35321, 51879, 35322, 35323, 52663, 35324, 35325, 53956, 49124, 48336, 46817, 35326, 57029, 35392, 35393, 35394, 35395, 57030, 56252, 35396, 53721, 35397, 35398, 50918, 50382, 47086, 35399, 47068, 35400, 35401, 49148, 55264, 35402, 50933, 35403, 35404, 45500, 57032, 48561, 52439, 57034, 35405, 57033, 35406, 35407, 35408, 35409, 35410, 46572, 35411, 51677, 35412, 35413, 45250, 35414, 35415, 35416, 35417, 35418, 35419, 35420, 35421, 35422, 35423, 35424, 35425, 35426, 50606, 50603, 35427, 50380, 35428, 48361, 52221, 35429, 35430, 35431, 47811, 35432, 35433, 35434, 58873, 51431, 58874, 52733, 35435, 55217, 47294, 49896, 35436, 51409, 35437, 35438, 58875, 35439, 35440, 35441, 35442, 46794, 48331, 35443, 35444, 53757, 59041, 35445, 50158, 35446, 35447, 35448, 35449, 59044, 35450, 35451, 35452, 35453, 58878, 59045, 52695, 35454, 35456, 47041, 58876, 58877, 59043, 35457, 35458, 50397, 59048, 35459, 35460, 59047, 35461, 35462, 35463, 35464, 35465, 35466, 50115, 35467, 50910, 35468, 35469, 59050, 35470, 35471, 35472, 35473, 35474, 35475, 35476, 50359, 35477, 35478, 35479, 59042, 51900, 35480, 35481, 35482, 35483, 48611, 47555, 59046, 53461, 52911, 35484, 35485, 59049, 59056, 35486, 53926, 35487, 48554, 59053, 35488, 35489, 35490, 35491, 35492, 59055, 35493, 49361, 35494, 35495, 53964, 35496, 35497, 35498, 48295, 35499, 35500, 35501, 35502, 35503, 35504, 35505, 35506, 35507, 35508, 35509, 35510, 59057, 35511, 54006, 35512, 35513, 35514, 55243, 35515, 52734, 35516, 52702, 49830, 59051, 59052, 48575, 59054, 59059, 35517, 35518, 59058, 35519, 35520, 35521, 35522, 59062, 35523, 59064, 35524, 35525, 35526, 35527, 50415, 35528, 35529, 35530, 50376, 35531, 35532, 48874, 51695, 35533, 35534, 59063, 35535, 46832, 35536, 35537, 35538, 50148, 35539, 35540, 35541, 35542, 35543, 35544, 35545, 54249, 59060, 35546, 59061, 35547, 51362, 35548, 35549, 35550, 35551, 35552, 59069, 35553, 35554, 35555, 59065, 35556, 35557, 35558, 35559, 35560, 50885, 35561, 35562, 52721, 59067, 35563, 35564, 35565, 35566, 35567, 35568, 35569, 35570, 35571, 35572, 59068, 35573, 35574, 35575, 35576, 48105, 35577, 35578, 35579, 35580, 35581, 35582, 35648, 59070, 35649, 35650, 35651, 35652, 59066, 35653, 35654, 49335, 35655, 35656, 35657, 35658, 35659, 35660, 35661, 35662, 35663, 54180, 59071, 51700, 59075, 35664, 35665, 59076, 35666, 35667, 35668, 35669, 53494, 35670, 35671, 35672, 35673, 35674, 35675, 35676, 35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35686, 35687, 50109, 35688, 35689, 35690, 35691, 35692, 35693, 35694, 50116, 59074, 35695, 35696, 35697, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705, 35706, 35707, 35708, 59073, 35709, 35710, 35712, 35713, 35714, 35715, 35716, 59079, 53169, 35717, 60404, 35718, 35719, 59082, 35720, 35721, 35722, 35723, 35724, 59077, 35725, 35726, 48350, 51625, 35727, 35728, 35729, 35730, 35731, 35732, 48309, 35733, 35734, 53203, 35735, 35736, 35737, 35738, 35739, 59080, 35740, 59081, 35741, 59086, 35742, 59088, 35743, 35744, 35745, 59089, 35746, 35747, 35748, 59083, 46549, 35749, 59084, 35750, 35751, 59087, 35752, 35753, 50395, 35754, 59078, 35755, 35756, 35757, 35758, 35759, 59085, 35760, 35761, 35762, 35763, 35764, 35765, 35766, 35767, 35768, 35769, 35770, 35771, 35772, 35773, 35774, 35775, 35776, 35777, 35778, 35779, 35780, 35781, 35782, 59090, 35783, 35784, 35785, 35786, 35787, 35788, 35789, 35790, 35791, 35792, 35793, 35794, 59092, 59091, 35795, 35796, 35797, 35798, 35799, 35800, 35801, 35802, 35803, 35804, 35805, 35806, 35807, 35808, 35809, 35810, 35811, 35812, 35813, 35814, 35815, 35816, 35817, 35818, 35819, 35820, 59093, 35821, 55800, 35822, 35823, 59094, 35824, 35825, 35826, 35827, 35828, 35829, 35830, 35831, 59095, 35832, 35833, 35834, 35835, 35836, 35837, 35838, 35904, 35905, 35906, 35907, 35908, 35909, 35910, 35911, 55251, 59101, 35912, 59102, 49111, 54480, 35913, 55254, 46310, 52207, 59098, 55491, 55246, 53410, 35914, 50127, 35915, 35916, 59103, 48318, 47554, 59099, 53671, 35917, 35918, 47778, 49871, 35919, 55467, 35920, 35921, 35922, 51947, 58862, 35923, 59100, 35924, 47093, 35925, 35926, 35927, 35928, 51430, 35929, 35930, 50421, 35931, 35932, 58802, 50430, 35933, 52220, 58803, 54700, 35934, 54254, 51928, 45234, 35935, 52174, 52714, 35936, 35937, 47850, 35938, 35939, 35940, 58805, 35941, 58804, 35942, 55258, 47577, 55014, 46760, 52720, 53963, 45478, 51893, 35943, 46056, 51699, 49101, 53499, 51922, 58806, 48066, 35944, 35945, 35946, 53212, 47532, 35947, 35948, 35949, 35950, 54487, 35951, 35952, 47782, 53735, 53244, 48338, 35953, 58807, 51421, 35954, 35955, 35956, 49133, 45558, 52190, 35957, 35958, 48325, 35959, 48324, 54010, 50140, 49116, 35960, 35961, 35962, 35963, 47291, 35964, 35965, 35966, 50114, 35968, 47790, 54434, 35969, 35970, 35971, 35972, 35973, 35974, 35975, 35976, 35977, 51166, 50351, 45804, 35978, 47569, 35979, 35980, 58811, 49608, 35981, 35982, 54703, 35983, 35984, 35985, 35986, 35987, 58812, 35988, 58814, 35989, 35990, 35991, 35992, 35993, 35994, 35995, 46311, 46804, 52162, 53680, 46524, 35996, 35997, 51929, 35998, 47074, 35999, 36000, 51684, 36001, 48555, 36002, 36003, 52926, 55280, 36004, 36005, 36006, 36007, 53409, 36008, 51673, 36009, 36010, 46843, 59096, 48354, 36011, 46014, 36012, 51664, 36013, 59097, 45986, 36014, 36015, 36016, 36017, 57036, 36018, 54216, 57037, 36019, 53922, 36020, 36021, 36022, 36023, 57038, 36024, 36025, 36026, 36027, 48845, 36028, 36029, 57039, 36030, 36031, 36032, 51884, 54012, 46047, 58858, 50401, 48801, 52914, 50418, 48854, 50856, 45795, 36033, 36034, 48851, 36035, 36036, 51196, 52459, 48620, 52957, 36037, 36038, 51898, 50881, 58860, 53436, 36039, 36040, 36041, 54713, 36042, 36043, 36044, 58861, 36045, 36046, 36047, 36048, 51956, 36049, 52672, 49861, 36050, 58863, 36051, 49860, 58864, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 58872, 52685, 36059, 51645, 36060, 36061, 36062, 36063, 36064, 36065, 36066, 53977, 57768, 36067, 36068, 36069, 36070, 54252, 36071, 52202, 50929, 36072, 36073, 36074, 36075, 36076, 57772, 36077, 36078, 36079, 57767, 57769, 36080, 36081, 57770, 57775, 36082, 36083, 45805, 36084, 57771, 47322, 57773, 57774, 57776, 46522, 57777, 36085, 36086, 36087, 36088, 36089, 57779, 57784, 36090, 36091, 36092, 36093, 36094, 53714, 36160, 57782, 57781, 49643, 36161, 36162, 36163, 57783, 36164, 54464, 36165, 57778, 36166, 57786, 45238, 36167, 36168, 36169, 36170, 57780, 36171, 49145, 36172, 57785, 36173, 36174, 57787, 36175, 36176, 36177, 36178, 36179, 36180, 57790, 36181, 36182, 36183, 36184, 36185, 36186, 57788, 36187, 36188, 36189, 36190, 36191, 36192, 54981, 36193, 36194, 36195, 36196, 36197, 36198, 36199, 53183, 36200, 36201, 57789, 57791, 49869, 36202, 46827, 36203, 54264, 36204, 36205, 51149, 36206, 36207, 47077, 36208, 36209, 36210, 36211, 36212, 36213, 36214, 36215, 36216, 36217, 48894, 36218, 36219, 36220, 36221, 36222, 36224, 57792, 57793, 36225, 36226, 57799, 46055, 36227, 36228, 36229, 36230, 36231, 36232, 50921, 36233, 36234, 36235, 36236, 36237, 46302, 36238, 53698, 36239, 36240, 36241, 36242, 57800, 36243, 36244, 57798, 36245, 36246, 36247, 36248, 36249, 57797, 36250, 57795, 57794, 36251, 45504, 36252, 36253, 36254, 54712, 57796, 36255, 36256, 36257, 36258, 36259, 57803, 36260, 36261, 36262, 36263, 36264, 36265, 36266, 36267, 57804, 57802, 36268, 36269, 36270, 36271, 36272, 36273, 36274, 36275, 61434, 36276, 36277, 57811, 57810, 51126, 36278, 36279, 36280, 36281, 36282, 36283, 36284, 36285, 36286, 36287, 36288, 57801, 36289, 36290, 57806, 36291, 57808, 36292, 36293, 36294, 36295, 36296, 36297, 36298, 36299, 36300, 36301, 36302, 57812, 36303, 57809, 57805, 36304, 36305, 57807, 36306, 36307, 36308, 36309, 57813, 36310, 36311, 36312, 36313, 36314, 36315, 36316, 36317, 36318, 36319, 36320, 36321, 36322, 57814, 36323, 36324, 36325, 36326, 36327, 36328, 36329, 36330, 36331, 36332, 36333, 36334, 36335, 36336, 36337, 36338, 36339, 36340, 36341, 36342, 36343, 36344, 57815, 36345, 36346, 36347, 57816, 36348, 36349, 36350, 36416, 36417, 36418, 36419, 36420, 36421, 36422, 36423, 36424, 36425, 36426, 36427, 36428, 36429, 36430, 36431, 36432, 36433, 36434, 36435, 36436, 36437, 57818, 36438, 36439, 36440, 36441, 36442, 36443, 36444, 36445, 36446, 36447, 36448, 36449, 36450, 57819, 36451, 36452, 36453, 36454, 36455, 36456, 36457, 52897, 36458, 36459, 36460, 36461, 36462, 36463, 36464, 36465, 36466, 36467, 36468, 36469, 36470, 59357, 36471, 46248, 55005, 36472, 36473, 53682, 46002, 36474, 36475, 47524, 55283, 51145, 48862, 47534, 36476, 52951, 36477, 36478, 45806, 56271, 36480, 48314, 53969, 52168, 45261, 36481, 36482, 53231, 36483, 36484, 36485, 36486, 36487, 55779, 48621, 36488, 36489, 45522, 51920, 45756, 36490, 52135, 47019, 36491, 51878, 36492, 36493, 36494, 53155, 36495, 36496, 57592, 54730, 57595, 36497, 36498, 57594, 50625, 52475, 36499, 49585, 57593, 55011, 45743, 54980, 46555, 36500, 36501, 36502, 36503, 36504, 36505, 36506, 36507, 46328, 54945, 36508, 36509, 36510, 36511, 36512, 53167, 45295, 36513, 36514, 57596, 36515, 36516, 36517, 36518, 36519, 57761, 45987, 36520, 36521, 57597, 57598, 50097, 36522, 36523, 36524, 36525, 50141, 36526, 57762, 47097, 36527, 36528, 36529, 36530, 36531, 36532, 48079, 36533, 36534, 36535, 36536, 36537, 36538, 36539, 57763, 50363, 36540, 36541, 36542, 36543, 36544, 57764, 36545, 36546, 57765, 36547, 36548, 57766, 46257, 36549, 36550, 36551, 36552, 36553, 36554, 36555, 36556, 36557, 36558, 36559, 36560, 36561, 36562, 36563, 47305, 50877, 50410, 36564, 45730, 36565, 53458, 36566, 59355, 48067, 54231, 54212, 36567, 47587, 58063, 36568, 36569, 36570, 55215, 36571, 51180, 45523, 36572, 36573, 46258, 58065, 36574, 36575, 36576, 53490, 49838, 58064, 36577, 49122, 54182, 46551, 58066, 46570, 36578, 50157, 47357, 36579, 47278, 36580, 50643, 47055, 58068, 36581, 36582, 36583, 36584, 58067, 46792, 55289, 36585, 36586, 36587, 36588, 36589, 52645, 36590, 36591, 36592, 36593, 36594, 58072, 36595, 58070, 51964, 49077, 54201, 58069, 36596, 36597, 36598, 36599, 58071, 36600, 36601, 36602, 36603, 36604, 36605, 36606, 36672, 36673, 36674, 49582, 49352, 36675, 36676, 36677, 36678, 36679, 36680, 58075, 58074, 49322, 36681, 36682, 49614, 36683, 36684, 36685, 36686, 58076, 36687, 36688, 36689, 36690, 36691, 36692, 36693, 36694, 36695, 36696, 36697, 36698, 58077, 36699, 58078, 36700, 36701, 36702, 36703, 36704, 36705, 36706, 36707, 36708, 56264, 36709, 53715, 52642, 36710, 36711, 48552, 36712, 36713, 36714, 57027, 55461, 49066, 56269, 53996, 50938, 50602, 36715, 36716, 36717, 57028, 36718, 45527, 57262, 36719, 36720, 36721, 51901, 36722, 57265, 36723, 47533, 36724, 54013, 36725, 47269, 47851, 36726, 36727, 46042, 36728, 36729, 36730, 46556, 54725, 36731, 36732, 36733, 36734, 50134, 53202, 48033, 36736, 58867, 58866, 36737, 36738, 58868, 36739, 52708, 36740, 51445, 36741, 36742, 36743, 36744, 36745, 36746, 36747, 46511, 51135, 36748, 58870, 36749, 36750, 36751, 60592, 36752, 36753, 36754, 36755, 36756, 36757, 36758, 36759, 36760, 36761, 36762, 36763, 36764, 36765, 36766, 58854, 36767, 47593, 46513, 36768, 49852, 58856, 58855, 58857, 36769, 36770, 36771, 36772, 53965, 36773, 36774, 36775, 57834, 53454, 36776, 52654, 36777, 53733, 36778, 36779, 45770, 45547, 36780, 45554, 50669, 36781, 36782, 54723, 54192, 36783, 57820, 36784, 36785, 36786, 57821, 36787, 53979, 36788, 46009, 45515, 36789, 36790, 36791, 52729, 54775, 57822, 36792, 48822, 46333, 36793, 57823, 47836, 57824, 48050, 49865, 57825, 36794, 36795, 36796, 53484, 36797, 52669, 36798, 36799, 57826, 36800, 46531, 50631, 57827, 36801, 36802, 57828, 36803, 36804, 36805, 36806, 54265, 36807, 36808, 36809, 36810, 36811, 36812, 57829, 36813, 53677, 36814, 36815, 57830, 52898, 36816, 36817, 36818, 36819, 36820, 36821, 57831, 36822, 46530, 36823, 36824, 36825, 36826, 57832, 48085, 36827, 36828, 36829, 36830, 36831, 53444, 58080, 45528, 53988, 36832, 36833, 58081, 36834, 36835, 48329, 51404, 36836, 58083, 60670, 60669, 57263, 36837, 36838, 36839, 58082, 54974, 52732, 50086, 36840, 36841, 36842, 58307, 36843, 36844, 54994, 58087, 36845, 36846, 58088, 36847, 36848, 54215, 36849, 36850, 58092, 49132, 36851, 58093, 58085, 36852, 36853, 46016, 36854, 36855, 36856, 50414, 36857, 36858, 58094, 36859, 36860, 53443, 36861, 47862, 58089, 47070, 48051, 52396, 52171, 58084, 58086, 58090, 58091, 36862, 36928, 36929, 58103, 36930, 36931, 58100, 54517, 58099, 36932, 36933, 50605, 36934, 54778, 50626, 45760, 36935, 36936, 58095, 36937, 58098, 49583, 52156, 36938, 36939, 46497, 58105, 36940, 36941, 36942, 48305, 58097, 53460, 54457, 58101, 47574, 58102, 36943, 36944, 36945, 51155, 36946, 36947, 36948, 36949, 36950, 58096, 36951, 36952, 36953, 36954, 36955, 55260, 60833, 36956, 36957, 58104, 36958, 60837, 58110, 51921, 36959, 36960, 36961, 36962, 36963, 36964, 36965, 49589, 36966, 48080, 36967, 36968, 49110, 36969, 47843, 36970, 36971, 52129, 36972, 36973, 36974, 60838, 60835, 36975, 36976, 60834, 36977, 36978, 36979, 36980, 48086, 60839, 53492, 36981, 36982, 60836, 47838, 46839, 58273, 46770, 52465, 47527, 36983, 53154, 51105, 36984, 36985, 49106, 36986, 36987, 46833, 36988, 58106, 58107, 58109, 58108, 50389, 58274, 36989, 54209, 36990, 36992, 36993, 58279, 51140, 36994, 36995, 36996, 36997, 53156, 36998, 36999, 58281, 47799, 37000, 37001, 37002, 37003, 58280, 37004, 48090, 37005, 58275, 37006, 37007, 37008, 58276, 58282, 37009, 58278, 37010, 52978, 54214, 37011, 37012, 48060, 37013, 37014, 54467, 37015, 50426, 37016, 37017, 60840, 53500, 58277, 37018, 50165, 37019, 58285, 45487, 37020, 58290, 37021, 37022, 37023, 48322, 37024, 37025, 58284, 46527, 37026, 37027, 37028, 37029, 37030, 37031, 37032, 37033, 51177, 58288, 37034, 37035, 37036, 48810, 52719, 37037, 37038, 37039, 37040, 37041, 48115, 37042, 37043, 37044, 52456, 37045, 37046, 58287, 37047, 58289, 37048, 53159, 58286, 37049, 52905, 48093, 37050, 37051, 37052, 37053, 37054, 46571, 48869, 45778, 46029, 37055, 45497, 58283, 45777, 46508, 47583, 46824, 37056, 37057, 53227, 58295, 37058, 48076, 37059, 37060, 51399, 53450, 37061, 37062, 37063, 37064, 37065, 58296, 46062, 37066, 37067, 37068, 37069, 60841, 37070, 54266, 54244, 37071, 37072, 37073, 60842, 58297, 53986, 37074, 37075, 37076, 37077, 37078, 58293, 37079, 37080, 37081, 37082, 54238, 37083, 37084, 37085, 37086, 47312, 58291, 37087, 37088, 58294, 47071, 37089, 58292, 49314, 37090, 37091, 37092, 58298, 37093, 37094, 37095, 37096, 37097, 37098, 37099, 37100, 37101, 37102, 37103, 37104, 37105, 37106, 37107, 37108, 37109, 37110, 37111, 54456, 37112, 37113, 37114, 37115, 37116, 37117, 37118, 37184, 46280, 37185, 58299, 37186, 48069, 37187, 51703, 37188, 37189, 51685, 37190, 37191, 37192, 50365, 37193, 37194, 37195, 37196, 37197, 37198, 37199, 60843, 37200, 37201, 37202, 37203, 49917, 37204, 37205, 37206, 37207, 48091, 49070, 37208, 37209, 37210, 37211, 37212, 37213, 37214, 52927, 37215, 37216, 37217, 37218, 58300, 37219, 49078, 37220, 37221, 37222, 37223, 37224, 37225, 37226, 37227, 37228, 37229, 37230, 37231, 37232, 37233, 37234, 37235, 37236, 37237, 37238, 45551, 37239, 37240, 54519, 37241, 37242, 37243, 37244, 37245, 58302, 37246, 37248, 37249, 37250, 37251, 37252, 37253, 37254, 60845, 37255, 37256, 37257, 37258, 37259, 37260, 37261, 37262, 37263, 58303, 47785, 60844, 37264, 37265, 58301, 37266, 37267, 37268, 37269, 37270, 37271, 37272, 37273, 37274, 37275, 58304, 37276, 37277, 37278, 37279, 37280, 37281, 47798, 37282, 37283, 37284, 46766, 37285, 37286, 37287, 37288, 37289, 53432, 37290, 45251, 60846, 37291, 37292, 37293, 37294, 37295, 60847, 49345, 37296, 58305, 37297, 37298, 37299, 37300, 37301, 37302, 37303, 37304, 37305, 37306, 37307, 37308, 37309, 37310, 37311, 37312, 37313, 50611, 37314, 37315, 37316, 37317, 37318, 37319, 37320, 37321, 37322, 37323, 37324, 37325, 37326, 37327, 58306, 37328, 37329, 37330, 37331, 37332, 37333, 37334, 37335, 37336, 56498, 37337, 37338, 37339, 37340, 37341, 37342, 60848, 37343, 47338, 37344, 52972, 60071, 53479, 51961, 51414, 53175, 46025, 52946, 48612, 37345, 37346, 58334, 48114, 60072, 54717, 37347, 50909, 60073, 37348, 37349, 37350, 60074, 37351, 60076, 60075, 37352, 60078, 60077, 37353, 37354, 37355, 37356, 48600, 37357, 60079, 37358, 49854, 37359, 37360, 37361, 37362, 46273, 46327, 37363, 37364, 48039, 37365, 37366, 37367, 37368, 37369, 60646, 60645, 47039, 52217, 45538, 37370, 60647, 37371, 37372, 37373, 51656, 60648, 60649, 37374, 51926, 57040, 45765, 54522, 37440, 37441, 50891, 45255, 46322, 51411, 37442, 37443, 37444, 52688, 37445, 37446, 49080, 37447, 37448, 37449, 37450, 37451, 37452, 37453, 49115, 37454, 37455, 51108, 54964, 37456, 49321, 57041, 51624, 53743, 50596, 45287, 46006, 51397, 37457, 37458, 45282, 37459, 37460, 47094, 37461, 37462, 50682, 37463, 37464, 46835, 37465, 54738, 46032, 48316, 37466, 37467, 37468, 45997, 37469, 37470, 37471, 37472, 48881, 45265, 37473, 37474, 37475, 37476, 37477, 37478, 53974, 51939, 55205, 37479, 52662, 46774, 49081, 54747, 37480, 47271, 50647, 37481, 37482, 37483, 57042, 49113, 49877, 51136, 37484, 48036, 45480, 37485, 37486, 50666, 37487, 37488, 50683, 52391, 37489, 37490, 37491, 37492, 45479, 37493, 37494, 37495, 46550, 37496, 37497, 37498, 50344, 37499, 57043, 53690, 46057, 37500, 50162, 37501, 37502, 47095, 37504, 55028, 46499, 45808, 50356, 50409, 49325, 57044, 37505, 45288, 50628, 49632, 37506, 47573, 37507, 48860, 52696, 45262, 37508, 52687, 57046, 48848, 55230, 57045, 54736, 45277, 37509, 37510, 50402, 37511, 37512, 49827, 48368, 37513, 54197, 49337, 50593, 45734, 54513, 37514, 37515, 49320, 51907, 57047, 54780, 37516, 47536, 37517, 51373, 52137, 37518, 57049, 49085, 37519, 37520, 37521, 37522, 50868, 55207, 51888, 50371, 37523, 46038, 47570, 37524, 37525, 37526, 37527, 54968, 60156, 45236, 37528, 37529, 37530, 37531, 49126, 37532, 37533, 52468, 37534, 37535, 37536, 37537, 52698, 37538, 37539, 37540, 54975, 49870, 37541, 52942, 52386, 53422, 50387, 46514, 57048, 54773, 48311, 48083, 37542, 37543, 45220, 37544, 50610, 46316, 37545, 37546, 37547, 54769, 37548, 37549, 60157, 37550, 37551, 37552, 37553, 37554, 37555, 57050, 52646, 37556, 37557, 52716, 37558, 37559, 37560, 37561, 52966, 57052, 37562, 52657, 49318, 37563, 37564, 55229, 37565, 57051, 45254, 47796, 51667, 50419, 48872, 37566, 37567, 37568, 37569, 45750, 37570, 37571, 37572, 37573, 37574, 37575, 37576, 37577, 49356, 52208, 37578, 48369, 48059, 46519, 37579, 37580, 37581, 50677, 37582, 57062, 37583, 37584, 37585, 57059, 48861, 37586, 37587, 57055, 37588, 37589, 37590, 37591, 46263, 48605, 37592, 37593, 57056, 50413, 37594, 37595, 37596, 37597, 53190, 37598, 46560, 37599, 37600, 37601, 37602, 46814, 51930, 46580, 57061, 37603, 54726, 37604, 57057, 52429, 50942, 37605, 50629, 37606, 37607, 37608, 53940, 37609, 48882, 37610, 37611, 37612, 37613, 37614, 37615, 37616, 49875, 37617, 52413, 46008, 37618, 48595, 37619, 49112, 52678, 53722, 46315, 37620, 57060, 57053, 57063, 37621, 60158, 37622, 37623, 49840, 57058, 37624, 37625, 54976, 46503, 37626, 45812, 37627, 57064, 37628, 57074, 37629, 37630, 37696, 37697, 37698, 57069, 37699, 57073, 37700, 37701, 51424, 37702, 37703, 37704, 55265, 57071, 50152, 52449, 37705, 45797, 37706, 37707, 37708, 53950, 37709, 37710, 37711, 37712, 37713, 37714, 37715, 57070, 37716, 57067, 52949, 37717, 46247, 37718, 37719, 37720, 37721, 37722, 49067, 48830, 37723, 37724, 48594, 37725, 37726, 37727, 37728, 57065, 37729, 54446, 37730, 57054, 37731, 57066, 37732, 37733, 37734, 37735, 49343, 37736, 57068, 45811, 47337, 49831, 37737, 37738, 48577, 37739, 37740, 37741, 37742, 37743, 57077, 57080, 37744, 37745, 45739, 46244, 37746, 37747, 46314, 51622, 37748, 37749, 37750, 37751, 37752, 37753, 57078, 52177, 37754, 47331, 37755, 57079, 57082, 37756, 37757, 37758, 37760, 57081, 37761, 37762, 37763, 52418, 37764, 45281, 46318, 37765, 37766, 37767, 37768, 37769, 37770, 58810, 37771, 37772, 37773, 37774, 37775, 53423, 37776, 37777, 45803, 37778, 60321, 37779, 57076, 37780, 37781, 51683, 57075, 45274, 53921, 45559, 37782, 52399, 37783, 37784, 37785, 37786, 37787, 37788, 37789, 57072, 37790, 52132, 37791, 37792, 37793, 54698, 37794, 37795, 37796, 37797, 37798, 57083, 37799, 37800, 37801, 37802, 37803, 37804, 37805, 37806, 46301, 37807, 50342, 37808, 37809, 37810, 57085, 37811, 37812, 37813, 37814, 37815, 37816, 37817, 37818, 37819, 37820, 50174, 50337, 57249, 37821, 37822, 37823, 37824, 37825, 37826, 37827, 49612, 37828, 57084, 48879, 37829, 50866, 37830, 37831, 37832, 37833, 37834, 37835, 37836, 37837, 37838, 46021, 51446, 37839, 37840, 52154, 57086, 37841, 37842, 57252, 37843, 37844, 37845, 37846, 55218, 37847, 37848, 37849, 37850, 37851, 46007, 37852, 37853, 37854, 37855, 49603, 37856, 37857, 51147, 45733, 46313, 37858, 55211, 37859, 37860, 37861, 37862, 50412, 37863, 57250, 57251, 37864, 57253, 37865, 47795, 37866, 37867, 37868, 57254, 37869, 49374, 37870, 37871, 51651, 37872, 37873, 37874, 37875, 37876, 37877, 37878, 45785, 51174, 37879, 57255, 37880, 51164, 37881, 37882, 37883, 37884, 57256, 60322, 37885, 37886, 37952, 37953, 37954, 52179, 37955, 37956, 37957, 57258, 37958, 57257, 37959, 45761, 37960, 37961, 37962, 37963, 37964, 37965, 37966, 37967, 37968, 37969, 37970, 37971, 37972, 37973, 37974, 37975, 37976, 37977, 37978, 37979, 37980, 37981, 37982, 37983, 37984, 50634, 37985, 37986, 37987, 37988, 37989, 37990, 37991, 37992, 57259, 37993, 37994, 37995, 37996, 37997, 37998, 37999, 38000, 54492, 38001, 38002, 38003, 38004, 38005, 51393, 38006, 38007, 38008, 38009, 38010, 38011, 38012, 38013, 38014, 38016, 38017, 38018, 57260, 38019, 38020, 38021, 38022, 38023, 48880, 38024, 38025, 57261, 54951, 38026, 38027, 38028, 38029, 60087, 60342, 51925, 38030, 55548, 47300, 38031, 47525, 38032, 38033, 47045, 54782, 38034, 38035, 38036, 38037, 38038, 47562, 38039, 38040, 53415, 62669, 38041, 38042, 46544, 38043, 38044, 50164, 38045, 48840, 38046, 38047, 38048, 60343, 45245, 38049, 38050, 48588, 38051, 49586, 38052, 45526, 45992, 38053, 38054, 38055, 47314, 51618, 38056, 38057, 46808, 38058, 38059, 38060, 38061, 60344, 48820, 38062, 38063, 38064, 51965, 38065, 51139, 38066, 54779, 38067, 38068, 47091, 38069, 38070, 38071, 38072, 38073, 38074, 38075, 38076, 38077, 38078, 38079, 38080, 38081, 38082, 38083, 52932, 38084, 38085, 38086, 54699, 45555, 38087, 38088, 38089, 60595, 45279, 38090, 60597, 38091, 38092, 38093, 46775, 38094, 49615, 38095, 62970, 53425, 38096, 38097, 54757, 38098, 52947, 38099, 38100, 48623, 46050, 38101, 47275, 38102, 54710, 38103, 60861, 38104, 46799, 38105, 52153, 53442, 38106, 38107, 38108, 38109, 38110, 38111, 38112, 38113, 47037, 38114, 38115, 60598, 51881, 38116, 38117, 38118, 50644, 38119, 60601, 60600, 49859, 60599, 38120, 38121, 38122, 38123, 53501, 60602, 38124, 60603, 55269, 38125, 38126, 60604, 38127, 38128, 38129, 60605, 50924, 38130, 38131, 38132, 38133, 38134, 38135, 38136, 38137, 52958, 38138, 48328, 38139, 38140, 51413, 46505, 48841, 54972, 54503, 38141, 38142, 53678, 53489, 60088, 60089, 60090, 47797, 38208, 38209, 38210, 38211, 51889, 49141, 38212, 38213, 52730, 38214, 38215, 38216, 38217, 38218, 60096, 38219, 45242, 60094, 38220, 38221, 49317, 38222, 38223, 38224, 60091, 38225, 45821, 38226, 50167, 48104, 38227, 38228, 38229, 53975, 52980, 60095, 38230, 38231, 38232, 60092, 38233, 38234, 38235, 60099, 38236, 53447, 54195, 38237, 38238, 38239, 38240, 46266, 38241, 50113, 55282, 38242, 38243, 38244, 38245, 54737, 38246, 51911, 38247, 60101, 38248, 38249, 60100, 60103, 60102, 38250, 38251, 38252, 38253, 38254, 55015, 38255, 53204, 38256, 38257, 60107, 38258, 48078, 38259, 38260, 38261, 38262, 38263, 38264, 38265, 48634, 51662, 38266, 38267, 60108, 38268, 38269, 51641, 53246, 60106, 54478, 60109, 60111, 38270, 38272, 52717, 38273, 38274, 38275, 38276, 60105, 38277, 60110, 38278, 38279, 52974, 38280, 48094, 38281, 46015, 38282, 38283, 38284, 38285, 38286, 50901, 48816, 52986, 38287, 38288, 38289, 51175, 38290, 48807, 60112, 38291, 38292, 54983, 38293, 38294, 38295, 49600, 38296, 38297, 38298, 54493, 38299, 60113, 38300, 38301, 53182, 38302, 38303, 38304, 38305, 60114, 38306, 38307, 38308, 38309, 51950, 38310, 38311, 38312, 38313, 50607, 45237, 38314, 38315, 38316, 38317, 38318, 60116, 38319, 38320, 38321, 38322, 38323, 38324, 38325, 38326, 38327, 60115, 62687, 38328, 38329, 38330, 38331, 38332, 50362, 38333, 38334, 38335, 38336, 38337, 45481, 38338, 38339, 38340, 38341, 58847, 38342, 38343, 38344, 38345, 60117, 38346, 38347, 38348, 38349, 38350, 38351, 38352, 38353, 38354, 38355, 38356, 38357, 38358, 38359, 38360, 38361, 38362, 38363, 38364, 38365, 38366, 38367, 38368, 38369, 38370, 38371, 51951, 38372, 60118, 60119, 50904, 38373, 38374, 38375, 38376, 38377, 38378, 38379, 38380, 60120, 38381, 38382, 60121, 38383, 38384, 38385, 38386, 38387, 38388, 54459, 38389, 51194, 53943, 47356, 38390, 38391, 60098, 38392, 45788, 38393, 38394, 49916, 38395, 54520, 52454, 55278, 38396, 38397, 38398, 38464, 38465, 38466, 38467, 54466, 54224, 60355, 50675, 38468, 47102, 38469, 38470, 60372, 38471, 38472, 38473, 52151, 60382, 38474, 49354, 38475, 38476, 38477, 52731, 38478, 45999, 38479, 50906, 38480, 38481, 38482, 38483, 38484, 38485, 60412, 38486, 50366, 38487, 52916, 50345, 45502, 54525, 38488, 51957, 38489, 55020, 38490, 38491, 50899, 46820, 38492, 38493, 38494, 38495, 48122, 38496, 38497, 53472, 38498, 38499, 51633, 38500, 54483, 51368, 38501, 38502, 47307, 38503, 59582, 51644, 38504, 38505, 59579, 38506, 49390, 53459, 45764, 46309, 38507, 59580, 38508, 38509, 54728, 38510, 38511, 38512, 38513, 38514, 46789, 38515, 59581, 51960, 47324, 52469, 38516, 38517, 38518, 49332, 38519, 38520, 53742, 59583, 59586, 38521, 38522, 47804, 38523, 45485, 48604, 38524, 60093, 59587, 38525, 59590, 38526, 59595, 38528, 38529, 38530, 38531, 59596, 38532, 52169, 45285, 38533, 48299, 38534, 38535, 47545, 38536, 38537, 59585, 38538, 52727, 38539, 59594, 38540, 38541, 38542, 38543, 52982, 38544, 38545, 38546, 38547, 54765, 38548, 49622, 59588, 38549, 50102, 38550, 47611, 54950, 59592, 38551, 38552, 38553, 51936, 54502, 38554, 59584, 38555, 59589, 59591, 38556, 51129, 47075, 38557, 59593, 38558, 49117, 59602, 38559, 38560, 59607, 38561, 59605, 48348, 48335, 59611, 38562, 38563, 38564, 38565, 38566, 38567, 38568, 38569, 59614, 38570, 59610, 45562, 38571, 38572, 38573, 38574, 38575, 38576, 38577, 38578, 38579, 38580, 45272, 50355, 47308, 50914, 51390, 51425, 38581, 38582, 38583, 59599, 59604, 59606, 38584, 47601, 59608, 55285, 38585, 50427, 38586, 59612, 38587, 38588, 45801, 38589, 38590, 38591, 59601, 38592, 38593, 48365, 38594, 38595, 49090, 59597, 55033, 38596, 49656, 45809, 38597, 38598, 38599, 38600, 38601, 38602, 38603, 38604, 59615, 38605, 51905, 59609, 38606, 38607, 38608, 38609, 54692, 38610, 45546, 54715, 59598, 59600, 46768, 59603, 38611, 59613, 49336, 38612, 51959, 38613, 52136, 38614, 38615, 50908, 49397, 38616, 38617, 38618, 38619, 38620, 59625, 38621, 38622, 38623, 53411, 38624, 38625, 38626, 38627, 38628, 38629, 38630, 59634, 55018, 38631, 38632, 38633, 38634, 38635, 38636, 38637, 59616, 59617, 38638, 38639, 38640, 53753, 47819, 47353, 38641, 38642, 47345, 54484, 59631, 38643, 59630, 59628, 47600, 52434, 59622, 52902, 49138, 38644, 45240, 59633, 59632, 38645, 55232, 38646, 59620, 38647, 52649, 51619, 38648, 48056, 48603, 59626, 38649, 38650, 38651, 38652, 38653, 38654, 38720, 38721, 38722, 38723, 59618, 59619, 59621, 46517, 59623, 51141, 59627, 59629, 48560, 55214, 38724, 59640, 38725, 38726, 38727, 38728, 38729, 38730, 38731, 38732, 59637, 38733, 52656, 59638, 38734, 38735, 38736, 38737, 38738, 38739, 38740, 38741, 38742, 49594, 38743, 59624, 38744, 50103, 45296, 38745, 38746, 38747, 38748, 38749, 38750, 38751, 38752, 59636, 38753, 38754, 38755, 59639, 38756, 38757, 38758, 47523, 38759, 38760, 38761, 38762, 38763, 38764, 38765, 38766, 38767, 38768, 51666, 38769, 38770, 38771, 50126, 52960, 49382, 38772, 38773, 38774, 38775, 52211, 38776, 52445, 53429, 38777, 38778, 51937, 38779, 59635, 38780, 38781, 38782, 38784, 38785, 38786, 38787, 38788, 38789, 38790, 48364, 38791, 59641, 38792, 38793, 38794, 38795, 38796, 38797, 50142, 38798, 50917, 38799, 47607, 38800, 38801, 38802, 38803, 45300, 38804, 38805, 55256, 38806, 38807, 48300, 38808, 50671, 38809, 38810, 38811, 38812, 38813, 52420, 38814, 38815, 59814, 38816, 38817, 38818, 38819, 38820, 38821, 38822, 38823, 38824, 38825, 51629, 38826, 59810, 49378, 38827, 38828, 38829, 49091, 38830, 38831, 38832, 59646, 47575, 38833, 59643, 38834, 38835, 38836, 38837, 59812, 38838, 38839, 38840, 53966, 38841, 38842, 38843, 38844, 38845, 59811, 38846, 54962, 55221, 38847, 59815, 38848, 48567, 38849, 38850, 38851, 38852, 38853, 38854, 38855, 38856, 38857, 38858, 38859, 38860, 59644, 59645, 38861, 38862, 38863, 59809, 38864, 38865, 38866, 38867, 38868, 38869, 38870, 38871, 52694, 38872, 38873, 53932, 38874, 38875, 38876, 59826, 38877, 38878, 38879, 38880, 59817, 38881, 38882, 38883, 46250, 38884, 46267, 38885, 38886, 59819, 38887, 38888, 38889, 38890, 38891, 38892, 38893, 38894, 38895, 38896, 38897, 38898, 38899, 38900, 38901, 38902, 38903, 53416, 38904, 38905, 59813, 38906, 38907, 46078, 38908, 38909, 59820, 49379, 38910, 59818, 38976, 38977, 59833, 38978, 38979, 59832, 38980, 38981, 38982, 38983, 59822, 38984, 38985, 59642, 38986, 38987, 59816, 38988, 38989, 38990, 38991, 38992, 49068, 59825, 59834, 38993, 38994, 49829, 38995, 38996, 38997, 59823, 38998, 47301, 38999, 59821, 39000, 54236, 59828, 59829, 59831, 39001, 39002, 39003, 59847, 39004, 39005, 39006, 39007, 39008, 39009, 49350, 59845, 39010, 39011, 59824, 39012, 39013, 59835, 45297, 39014, 39015, 39016, 39017, 39018, 39019, 39020, 39021, 39022, 39023, 59836, 54693, 39024, 39025, 59838, 39026, 59839, 39027, 39028, 39029, 59841, 39030, 39031, 49649, 39032, 39033, 51382, 39034, 39035, 39036, 59837, 39037, 39038, 39040, 39041, 39042, 59842, 39043, 39044, 39045, 39046, 39047, 39048, 39049, 39050, 59843, 39051, 59827, 39052, 59830, 39053, 48049, 39054, 39055, 39056, 59840, 39057, 39058, 39059, 39060, 39061, 39062, 48375, 39063, 39064, 39065, 59844, 59846, 39066, 39067, 39068, 39069, 39070, 39071, 39072, 39073, 39074, 39075, 39076, 39077, 59850, 39078, 39079, 39080, 39081, 59854, 39082, 39083, 39084, 39085, 39086, 39087, 39088, 39089, 39090, 39091, 45787, 39092, 59848, 39093, 39094, 39095, 39096, 39097, 39098, 39099, 39100, 39101, 39102, 47022, 39103, 39104, 39105, 39106, 39107, 39108, 39109, 39110, 39111, 39112, 39113, 39114, 59851, 59852, 39115, 39116, 39117, 39118, 39119, 39120, 54721, 39121, 50339, 39122, 39123, 39124, 39125, 39126, 39127, 59864, 39128, 47841, 39129, 39130, 39131, 39132, 59849, 39133, 54179, 39134, 39135, 39136, 59860, 39137, 39138, 39139, 39140, 39141, 39142, 39143, 59863, 59856, 39144, 39145, 39146, 39147, 39148, 59855, 39149, 39150, 51137, 39151, 39152, 39153, 39154, 39155, 39156, 39157, 39158, 59858, 39159, 39160, 39161, 39162, 39163, 39164, 39165, 59865, 46024, 39166, 59859, 39232, 39233, 39234, 39235, 39236, 53232, 39237, 39238, 39239, 59853, 39240, 39241, 39242, 39243, 39244, 39245, 39246, 39247, 39248, 39249, 39250, 46071, 39251, 39252, 39253, 39254, 39255, 39256, 39257, 59862, 39258, 39259, 59866, 39260, 39261, 39262, 52404, 39263, 39264, 39265, 53165, 39266, 39267, 39268, 39269, 39270, 39271, 39272, 39273, 39274, 59861, 39275, 59868, 59867, 39276, 39277, 39278, 39279, 39280, 59870, 39281, 39282, 39283, 39284, 39285, 39286, 39287, 39288, 59857, 39289, 39290, 39291, 39292, 39293, 39294, 39296, 39297, 59869, 39298, 59871, 50122, 39299, 39300, 39301, 39302, 39303, 39304, 39305, 39306, 39307, 39308, 39309, 39310, 39311, 39312, 39313, 39314, 39315, 39316, 39317, 39318, 39319, 39320, 39321, 39322, 39323, 39324, 39325, 39326, 39327, 39328, 39329, 39330, 39331, 39332, 39333, 39334, 39335, 39336, 39337, 39338, 39339, 39340, 39341, 39342, 39343, 39344, 39345, 39346, 39347, 39348, 39349, 39350, 39351, 39352, 39353, 39354, 39355, 39356, 39357, 39358, 39359, 39360, 39361, 39362, 39363, 39364, 39365, 39366, 39367, 39368, 39369, 39370, 39371, 39372, 39373, 39374, 39375, 39376, 39377, 39378, 39379, 39380, 39381, 39382, 39383, 39384, 39385, 39386, 39387, 39388, 39389, 39390, 39391, 39392, 39393, 39394, 39395, 39396, 39397, 39398, 39399, 39400, 39401, 39402, 39403, 39404, 39405, 39406, 39407, 39408, 39409, 39410, 39411, 39412, 39413, 51127, 46286, 48054, 53440, 60579, 39414, 39415, 50615, 39416, 39417, 39418, 39419, 39420, 39421, 39422, 39488, 39489, 39490, 54267, 39491, 39492, 39493, 39494, 60580, 39495, 60581, 50907, 39496, 39497, 39498, 49134, 39499, 39500, 39501, 39502, 60582, 39503, 39504, 60583, 53418, 39505, 51128, 39506, 39507, 47336, 39508, 39509, 39510, 39511, 39512, 39513, 39514, 39515, 39516, 39517, 39518, 39519, 60584, 39520, 39521, 39522, 39523, 39524, 39525, 39526, 39527, 54969, 54781, 46283, 45757, 52964, 50919, 39528, 39529, 52705, 39530, 39531, 39532, 39533, 39534, 39535, 39536, 39537, 39538, 39539, 39540, 39541, 39542, 39543, 46325, 39544, 52160, 48351, 39545, 39546, 39547, 39548, 59874, 59875, 53738, 59877, 39549, 46329, 59876, 39550, 53683, 51938, 45776, 39552, 59880, 39553, 39554, 39555, 39556, 59878, 59879, 39557, 39558, 54963, 39559, 39560, 39561, 59881, 59882, 39562, 39563, 39564, 39565, 39566, 59883, 39567, 39568, 39569, 39570, 39571, 39572, 39573, 39574, 59884, 39575, 39576, 39577, 39578, 39579, 39580, 39581, 39582, 60591, 50617, 46798, 39583, 54003, 39584, 39585, 39586, 39587, 39588, 39589, 39590, 46574, 39591, 48089, 60593, 39592, 39593, 53987, 39594, 39595, 39596, 39597, 39598, 52963, 39599, 50360, 39600, 50111, 39601, 39602, 46782, 55481, 45512, 45519, 45521, 50686, 39603, 45520, 39604, 50091, 39605, 39606, 39607, 39608, 39609, 54705, 39610, 39611, 39612, 39613, 39614, 39615, 39616, 39617, 60324, 47809, 39618, 39619, 39620, 52410, 39621, 39622, 39623, 60325, 39624, 60327, 39625, 39626, 39627, 60328, 39628, 39629, 39630, 60326, 39631, 39632, 39633, 39634, 39635, 39636, 39637, 60329, 60331, 60330, 39638, 39639, 39640, 39641, 39642, 60332, 39643, 51919, 55477, 50161, 39644, 50085, 50936, 60333, 50378, 39645, 60334, 60335, 60336, 47061, 39646, 39647, 39648, 47098, 39649, 60337, 51170, 39650, 60339, 39651, 47780, 53749, 45233, 60338, 60340, 39652, 39653, 39654, 46506, 49864, 51176, 39655, 60341, 39656, 52142, 58335, 39657, 39658, 54208, 39659, 39660, 39661, 39662, 55771, 39663, 39664, 52641, 54957, 51187, 39665, 39666, 39667, 55776, 48099, 39668, 47802, 58338, 39669, 39670, 39671, 39672, 39673, 53163, 39674, 39675, 39676, 58336, 51655, 39677, 47801, 39678, 39744, 39745, 53684, 58337, 51434, 47535, 48557, 46040, 52955, 39746, 39747, 52416, 39748, 39749, 39750, 58344, 58345, 52724, 39751, 39752, 39753, 39754, 39755, 52397, 39756, 48307, 39757, 58346, 39758, 58347, 39759, 39760, 53466, 39761, 39762, 39763, 50939, 47066, 39764, 39765, 51167, 53962, 52950, 39766, 58340, 58348, 39767, 51698, 46017, 39768, 39769, 58343, 39770, 39771, 50915, 58341, 39772, 39773, 60851, 58342, 39774, 39775, 39776, 39777, 51635, 39778, 50662, 39779, 39780, 39781, 47541, 39782, 50107, 39783, 58339, 50621, 49572, 49881, 45783, 39784, 58349, 48038, 50349, 39785, 58352, 48858, 39786, 39787, 58363, 58357, 47827, 39788, 39789, 39790, 39791, 47056, 54221, 39792, 54990, 54739, 47553, 54708, 53720, 39793, 39794, 39795, 39796, 53433, 51190, 39797, 39798, 39799, 51370, 45748, 39800, 50138, 39801, 39802, 39803, 58350, 39804, 39805, 58364, 58351, 47016, 58359, 58356, 39806, 39808, 39809, 47034, 39810, 39811, 50594, 39812, 58358, 50653, 45736, 50940, 39813, 50400, 39814, 39815, 55202, 39816, 49377, 58361, 39817, 39818, 58362, 58365, 52393, 58355, 39819, 54206, 39820, 45507, 60852, 58353, 58354, 39821, 58360, 53434, 50883, 54515, 58366, 39822, 39823, 48608, 39824, 39825, 58535, 39826, 39827, 58534, 39828, 39829, 39830, 53747, 58531, 39831, 58537, 39832, 39833, 39834, 51447, 39835, 39836, 39837, 39838, 53172, 39839, 58536, 58542, 49893, 39840, 39841, 46772, 39842, 39843, 39844, 39845, 39846, 39847, 48626, 39848, 58530, 39849, 39850, 47849, 58538, 39851, 39852, 58540, 39853, 39854, 46845, 55006, 58546, 39855, 58541, 39856, 39857, 39858, 58529, 39859, 48110, 52701, 51106, 50633, 39860, 39861, 49655, 39862, 58532, 39863, 51123, 48556, 48573, 58533, 39864, 55239, 45794, 39865, 58539, 48323, 58543, 39866, 48107, 58544, 50600, 58545, 39867, 39868, 39869, 39870, 54755, 49059, 39871, 58554, 39872, 58551, 39873, 58555, 39874, 39875, 58557, 39876, 39877, 50902, 39878, 39879, 47814, 49355, 39880, 39881, 39882, 47265, 58548, 39883, 39884, 39885, 39886, 54433, 39887, 39888, 47779, 48638, 39889, 39890, 39891, 58556, 39892, 39893, 39894, 39895, 39896, 52671, 39897, 39898, 50425, 39899, 39900, 53243, 51686, 39901, 39902, 54207, 39903, 53201, 39904, 39905, 58547, 39906, 58552, 58553, 52457, 39907, 39908, 39909, 39910, 39911, 52430, 39912, 49364, 58549, 49584, 58550, 52944, 39913, 48065, 46547, 39914, 51443, 48551, 54727, 51628, 47266, 58570, 39915, 39916, 58572, 53700, 39917, 39918, 53946, 39919, 39920, 47789, 39921, 39922, 47828, 39923, 39924, 39925, 39926, 39927, 39928, 58563, 46573, 39929, 39930, 39931, 55245, 58560, 53245, 58559, 39932, 39933, 39934, 49628, 52426, 40000, 40001, 40002, 40003, 51943, 40004, 40005, 40006, 40007, 50391, 40008, 52436, 58568, 40009, 40010, 40011, 58567, 58561, 40012, 58564, 46509, 40013, 40014, 54233, 40015, 58566, 40016, 40017, 40018, 40019, 54009, 46307, 40020, 48052, 40021, 40022, 51694, 40023, 46270, 40024, 40025, 40026, 48108, 40027, 53709, 40028, 52461, 60853, 40029, 40030, 40031, 40032, 40033, 40034, 40035, 40036, 51173, 40037, 40038, 40039, 40040, 54440, 40041, 58571, 55253, 58562, 40042, 48549, 58565, 40043, 40044, 54246, 40045, 58569, 51704, 40046, 40047, 58558, 40048, 40049, 54245, 40050, 40051, 51198, 46793, 40052, 54524, 45747, 58583, 40053, 40054, 40055, 52930, 40056, 58573, 40057, 52924, 40058, 47323, 40059, 40060, 58582, 40061, 49098, 40062, 40064, 40065, 54222, 40066, 50156, 40067, 40068, 40069, 40070, 40071, 40072, 40073, 40074, 50632, 58584, 40075, 40076, 40077, 40078, 40079, 40080, 40081, 40082, 52676, 58575, 40083, 40084, 40085, 40086, 58580, 58581, 40087, 47870, 40088, 53222, 40089, 40090, 54719, 40091, 40092, 40093, 58578, 40094, 40095, 40096, 40097, 40098, 40099, 40100, 40101, 40102, 40103, 40104, 58576, 40105, 40106, 58574, 40107, 40108, 40109, 40110, 40111, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119, 40120, 40121, 52709, 51882, 40122, 40123, 40124, 49315, 40125, 48550, 58579, 40126, 40127, 47304, 40128, 40129, 40130, 40131, 40132, 58599, 54452, 40133, 40134, 40135, 40136, 40137, 40138, 40139, 58587, 40140, 40141, 40142, 49647, 40143, 40144, 58601, 40145, 40146, 53991, 40147, 40148, 58591, 40149, 58592, 40150, 40151, 53162, 40152, 40153, 40154, 40155, 52189, 40156, 58586, 58577, 40157, 58597, 40158, 51420, 58595, 40159, 40160, 50407, 58594, 40161, 58593, 40162, 40163, 40164, 46076, 58600, 40165, 40166, 40167, 40168, 46561, 40169, 40170, 40171, 55244, 40172, 40173, 40174, 58598, 40175, 48044, 40176, 55250, 52431, 60408, 40177, 58596, 40178, 40179, 47606, 40180, 40181, 40182, 54989, 58585, 58588, 49914, 58590, 40183, 49867, 49348, 49872, 40184, 45557, 52402, 40185, 40186, 40187, 40188, 40189, 40190, 40256, 40257, 40258, 40259, 46542, 40260, 40261, 40262, 40263, 58607, 40264, 40265, 40266, 40267, 40268, 40269, 40270, 40271, 50863, 40272, 40273, 40274, 50913, 40275, 40276, 58613, 40277, 40278, 40279, 40280, 40281, 49833, 40282, 40283, 40284, 49388, 53725, 58606, 40285, 40286, 40287, 40288, 40289, 40290, 40291, 40292, 40293, 40294, 50350, 40295, 40296, 40297, 58605, 40298, 40299, 40300, 40301, 58614, 58612, 49918, 40302, 58589, 40303, 58608, 40304, 51966, 40305, 54724, 40306, 40307, 58609, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 53754, 40315, 40316, 40317, 40318, 40320, 40321, 40322, 58603, 58604, 40323, 40324, 40325, 58610, 40326, 52907, 40327, 40328, 40329, 40330, 40331, 40332, 40333, 40334, 40335, 40336, 50635, 40337, 40338, 40339, 51121, 40340, 49850, 40341, 40342, 40343, 58602, 40344, 40345, 40346, 49610, 40347, 40348, 40349, 40350, 40351, 40352, 52406, 46001, 40353, 40354, 40355, 58619, 40356, 58611, 40357, 40358, 40359, 58618, 40360, 58621, 40361, 58620, 40362, 40363, 40364, 40365, 40366, 40367, 40368, 46030, 40369, 40370, 40371, 46010, 58615, 40372, 40373, 58617, 58616, 50668, 40374, 40375, 40376, 40377, 40378, 40379, 40380, 40381, 40382, 40383, 40384, 40385, 40386, 49341, 40387, 40388, 40389, 40390, 54504, 40391, 40392, 40393, 40394, 40395, 58786, 40396, 40397, 40398, 40399, 40400, 40401, 40402, 40403, 40404, 40405, 40406, 45252, 40407, 40408, 58788, 40409, 40410, 58787, 40411, 40412, 40413, 40414, 40415, 40416, 48292, 40417, 58789, 40418, 40419, 40420, 40421, 40422, 40423, 58785, 40424, 40425, 40426, 40427, 40428, 40429, 40430, 58622, 45556, 40431, 40432, 40433, 40434, 40435, 40436, 40437, 40438, 40439, 40440, 40441, 58792, 40442, 58793, 58790, 40443, 40444, 40445, 40446, 40512, 40513, 40514, 40515, 40516, 40517, 40518, 40519, 58791, 58794, 40520, 40521, 40522, 40523, 40524, 40525, 40526, 40527, 40528, 40529, 40530, 40531, 40532, 40533, 40534, 40535, 40536, 40537, 40538, 40539, 40540, 40541, 40542, 40543, 40544, 40545, 40546, 40547, 40548, 40549, 40550, 40551, 40552, 50905, 40553, 40554, 40555, 40556, 40557, 40558, 40559, 40560, 58795, 58797, 40561, 40562, 40563, 40564, 40565, 40566, 40567, 58796, 40568, 40569, 40570, 40571, 40572, 40573, 40574, 40576, 40577, 40578, 40579, 40580, 40581, 40582, 40583, 40584, 40585, 58799, 40586, 40587, 40588, 58798, 40589, 40590, 40591, 40592, 40593, 40594, 40595, 40596, 40597, 40598, 40599, 40600, 40601, 40602, 40603, 40604, 40605, 40606, 47584, 40607, 40608, 58800, 40609, 40610, 40611, 40612, 40613, 40614, 40615, 40616, 40617, 40618, 40619, 40620, 40621, 40622, 58801, 40623, 40624, 40625, 40626, 40627, 40628, 40629, 40630, 40631, 40632, 40633, 40634, 48112, 60641, 50160, 40635, 46534, 48082, 40636, 40637, 40638, 40639, 49641, 54510, 40640, 48836, 40641, 40642, 40643, 55238, 40644, 54486, 45779, 60606, 40645, 40646, 40647, 40648, 60097, 40649, 40650, 40651, 49839, 46262, 40652, 40653, 40654, 53719, 40655, 40656, 40657, 46004, 40658, 51378, 49083, 60608, 40659, 40660, 54987, 40661, 40662, 60607, 60609, 40663, 40664, 40665, 40666, 40667, 40668, 40669, 40670, 40671, 40672, 40673, 40674, 40675, 60613, 48870, 52415, 50650, 48828, 40676, 60614, 40677, 45566, 40678, 40679, 40680, 60612, 54696, 46563, 40681, 60610, 49590, 46051, 40682, 40683, 60611, 52152, 49347, 52478, 40684, 40685, 40686, 40687, 49618, 40688, 60616, 40689, 40690, 40691, 40692, 40693, 40694, 40695, 40696, 40697, 40698, 40699, 40700, 40701, 47846, 49363, 40702, 55026, 40768, 40769, 40770, 53708, 40771, 40772, 40773, 40774, 49086, 40775, 47027, 51669, 60615, 48098, 40776, 52428, 48637, 51400, 40777, 53161, 40778, 40779, 40780, 40781, 40782, 40783, 40784, 52713, 40785, 50667, 40786, 40787, 40788, 47081, 40789, 40790, 40791, 40792, 40793, 40794, 40795, 40796, 40797, 40798, 40799, 53705, 47800, 40800, 40801, 40802, 40803, 40804, 60617, 40805, 40806, 60618, 40807, 48064, 60619, 40808, 60642, 45498, 47065, 40809, 40810, 40811, 40812, 40813, 40814, 40815, 40816, 40817, 40818, 40819, 48569, 40820, 40821, 40822, 40823, 40824, 40825, 40826, 40827, 60620, 53734, 60621, 40828, 40829, 40830, 40832, 51387, 40833, 40834, 40835, 40836, 40837, 40838, 40839, 40840, 40841, 40842, 40843, 40844, 40845, 40846, 60625, 40847, 40848, 40849, 40850, 60627, 40851, 48077, 40852, 48357, 40853, 40854, 40855, 40856, 40857, 40858, 40859, 40860, 40861, 40862, 40863, 40864, 40865, 60623, 40866, 51639, 40867, 40868, 40869, 40870, 40871, 50106, 40872, 60643, 54741, 60624, 40873, 40874, 40875, 40876, 40877, 55027, 40878, 40879, 40880, 60626, 60622, 40881, 40882, 40883, 40884, 60628, 40885, 60629, 40886, 40887, 51647, 40888, 40889, 40890, 40891, 40892, 40893, 53160, 40894, 40895, 40896, 40897, 40898, 53468, 40899, 40900, 40901, 40902, 53676, 40903, 40904, 40905, 40906, 51419, 40907, 40908, 40909, 60630, 52981, 40910, 40911, 40912, 40913, 40914, 51948, 60634, 40915, 40916, 40917, 40918, 40919, 40920, 40921, 60633, 40922, 40923, 40924, 45246, 40925, 40926, 40927, 40928, 40929, 40930, 60631, 40931, 60632, 40932, 40933, 40934, 60644, 40935, 40936, 40937, 40938, 40939, 40940, 40941, 40942, 40943, 51388, 40944, 40945, 40946, 40947, 40948, 40949, 40950, 40951, 40952, 40953, 49607, 40954, 40955, 40956, 40957, 40958, 60636, 53728, 41024, 41025, 41026, 41027, 41028, 41029, 41030, 41031, 41032, 41033, 60635, 41034, 41035, 41036, 41037, 54511, 41038, 60637, 41039, 41040, 41041, 41042, 41043, 41044, 56262, 41045, 41046, 41047, 41048, 41049, 41050, 41051, 41052, 41053, 41054, 60638, 41055, 41056, 41057, 41058, 41059, 41060, 41061, 41062, 41063, 41064, 41065, 41066, 45484, 41067, 41068, 41069, 41070, 41071, 41072, 41073, 41074, 41075, 41076, 41077, 41078, 41079, 41080, 41081, 41082, 41083, 41084, 41085, 41086, 41088, 41089, 60639, 41090, 41091, 41092, 41093, 41094, 41095, 41096, 41097, 41098, 41099, 60640, 41100, 55206, 41101, 50624, 41102, 41103, 41104, 60348, 45230, 41105, 41106, 41107, 48884, 47288, 53935, 45270, 46585, 41108, 55475, 41109, 52140, 41110, 58333, 41111, 41112, 41113, 41114, 41115, 41116, 41117, 50860, 45286, 41118, 41119, 41120, 50630, 60345, 41121, 41122, 41123, 41124, 60346, 41125, 41126, 41127, 60347, 41128, 41129, 53696, 41130, 50595, 41131, 60146, 41132, 50354, 41133, 50357, 49358, 41134, 41135, 41136, 60147, 50369, 41137, 52975, 41138, 41139, 41140, 41141, 60144, 60148, 41142, 41143, 51708, 41144, 41145, 51107, 41146, 41147, 41148, 52440, 52990, 41149, 41150, 41151, 60149, 60150, 53164, 49383, 41152, 41153, 60151, 41154, 41155, 41156, 41157, 41158, 46783, 60152, 41159, 60153, 41160, 60154, 41161, 41162, 60155, 41163, 41164, 41165, 41166, 41167, 41168, 41169, 41170, 41171, 41172, 41173, 41174, 60145, 41175, 41176, 41177, 41178, 41179, 41180, 41181, 41182, 41183, 41184, 41185, 41186, 51374, 57835, 41187, 47032, 57836, 41188, 41189, 41190, 57837, 41191, 55220, 57838, 57839, 54220, 41192, 41193, 41194, 41195, 41196, 41197, 41198, 57841, 49137, 57840, 46546, 41199, 41200, 41201, 45495, 41202, 41203, 41204, 41205, 57843, 57842, 41206, 47868, 41207, 57844, 41208, 41209, 41210, 41211, 47543, 41212, 48849, 41213, 41214, 43584, 43585, 50428, 43586, 47837, 48582, 43587, 43588, 43589, 43590, 43591, 43592, 57845, 57847, 43593, 43594, 46784, 53185, 51880, 57846, 54776, 54268, 57848, 57852, 57849, 43595, 43596, 57850, 49386, 43597, 57854, 58017, 49351, 43598, 43599, 43600, 43601, 57851, 43602, 57853, 43603, 43604, 43605, 43606, 43607, 43608, 58021, 43609, 43610, 43611, 49620, 43612, 43613, 43614, 43615, 58019, 43616, 58024, 45822, 58018, 43617, 43618, 43619, 50125, 45762, 58023, 58022, 43620, 43621, 58020, 58025, 43622, 43623, 58027, 43624, 43625, 43626, 53449, 55021, 50088, 58028, 43627, 53207, 43628, 43629, 58030, 43630, 43631, 47855, 43632, 43633, 59872, 58029, 58026, 43634, 43635, 43636, 43637, 48043, 54451, 43638, 43639, 43640, 43641, 43642, 43643, 43644, 43645, 43646, 43648, 43649, 43650, 43651, 58032, 43652, 43653, 58031, 43654, 59873, 43655, 43656, 43657, 43658, 58033, 43659, 43660, 43661, 43662, 43663, 43664, 43665, 43666, 58034, 43667, 43668, 43669, 43670, 43671, 43672, 43673, 43674, 43675, 43676, 43677, 58035, 52385, 43678, 58036, 43679, 43680, 43840, 43841, 43842, 43843, 43844, 43845, 43846, 43847, 43848, 43849, 43850, 43851, 58037, 43852, 43853, 43854, 43855, 43856, 53502, 43857, 43858, 49866, 43859, 54257, 43860, 52725, 43861, 43862, 59360, 43863, 43864, 59361, 43865, 43866, 43867, 43868, 48833, 43869, 43870, 43871, 43872, 49898, 43873, 43874, 43875, 59364, 43876, 43877, 59363, 43878, 43879, 43880, 43881, 43882, 43883, 52710, 43884, 50101, 43885, 43886, 59362, 48055, 53206, 43887, 49633, 59369, 43888, 43889, 43890, 59368, 43891, 43892, 59380, 45731, 43893, 43894, 43895, 43896, 59370, 43897, 59366, 43898, 43899, 43900, 43901, 43902, 59372, 59371, 51642, 43904, 43905, 54756, 43906, 59365, 47017, 59367, 43907, 43908, 43909, 43910, 43911, 43912, 43913, 59374, 43914, 43915, 43916, 43917, 59379, 43918, 55017, 43919, 43920, 43921, 43922, 59373, 43923, 59378, 43924, 59377, 43925, 43926, 43927, 45280, 43928, 43929, 43930, 43931, 59381, 43932, 43933, 43934, 43935, 43936, 44096, 44097, 44098, 44099, 44100, 44101, 44102, 44103, 44104, 44105, 44106, 51186, 44107, 49349, 49389, 44108, 44109, 49648, 59376, 44110, 44111, 44112, 44113, 59382, 52214, 44114, 44115, 44116, 44117, 44118, 44119, 44120, 44121, 44122, 59554, 59553, 44123, 44124, 44125, 44126, 44127, 44128, 55233, 44129, 44130, 59386, 59385, 44131, 59387, 44132, 59383, 44133, 59390, 44134, 59389, 44135, 59388, 44136, 44137, 49621, 51161, 50685, 50627, 44138, 44139, 44140, 44141, 44142, 51181, 44143, 44144, 44145, 44146, 59555, 44147, 44148, 44149, 44150, 44151, 44152, 44153, 44154, 44155, 44156, 44157, 44158, 44160, 44161, 44162, 44163, 44164, 44165, 44166, 59558, 44167, 59557, 44168, 59559, 47863, 59384, 59556, 44169, 51440, 51626, 44170, 44171, 44172, 44173, 44174, 44175, 44176, 44177, 44178, 44179, 44180, 44181, 44182, 59561, 44183, 44184, 47589, 44185, 44186, 44187, 44188, 44189, 53758, 59560, 44190, 44191, 44192, 44352, 44353, 44354, 59562, 44355, 59565, 59566, 44356, 49575, 44357, 44358, 44359, 59567, 44360, 44361, 44362, 59568, 44363, 44364, 59564, 44365, 59572, 44366, 44367, 44368, 44369, 44370, 44371, 44372, 44373, 44374, 44375, 44376, 59563, 44377, 59569, 44378, 44379, 44380, 44381, 44382, 44383, 44384, 44385, 59573, 59570, 59571, 44386, 44387, 44388, 44389, 44390, 44391, 44392, 44393, 44394, 44395, 44396, 44397, 44398, 44399, 44400, 44401, 59575, 44402, 44403, 44404, 44405, 44406, 44407, 44408, 44409, 44410, 44411, 44412, 44413, 44414, 44416, 44417, 44418, 44419, 44420, 44421, 44422, 44423, 44424, 44425, 59574, 44426, 44427, 44428, 44429, 44430, 44431, 44432, 44433, 44434, 47567, 44435, 61612, 44436, 61613, 44437, 50864, 45290, 51391, 44438, 52703, 44439, 44440, 44441, 44442, 44443, 44444, 44445, 52941, 60081, 44446, 44447, 44448, 44608, 60082, 44609, 50879, 46281, 44610, 44611, 44612, 44613, 44614, 44615, 44616, 60083, 44617, 44618, 44619, 44620, 54759, 44621, 44622, 44623, 44624, 44625, 44626, 44627, 44628, 56825, 44629, 60084, 44630, 60085, 44631, 60086, 44632, 44633, 44634, 44635, 47306, 57264, 51701, 44636, 52464, 44637, 44638, 51706, 44639, 44640, 44641, 44642, 44643, 51707, 44644, 44645, 54211, 52134, 44646, 47270, 61614, 45506, 44647, 58808, 52463, 54217, 48343, 51690, 44648, 46567, 44649, 50384, 46569, 44650, 61102, 48045, 44651, 44652, 59358, 44653, 61103, 44654, 44655, 44656, 44657, 45993, 44658, 44659, 61106, 44660, 44661, 61105, 48615, 44662, 61104, 52919, 44663, 44664, 44665, 44666, 50639, 44667, 44668, 44669, 44670, 49652, 56270, 61107, 53491, 44672, 44673, 44674, 44675, 44676, 44677, 44678, 44679, 49876, 50920, 44680, 44681, 44682, 47020, 44683, 44684, 44685, 44686, 44687, 44688, 44689, 61108, 44690, 46059, 44691, 44692, 44693, 48123, 61109, 44694, 44695, 44696, 44697, 44698, 59356, 44699, 44700, 44701, 61110, 44702, 44703, 48558, 44704, 44864, 44865, 44866, 61922, 44867, 44868, 44869, 51944, 44870, 53961, 61658, 44871, 61659, 44872, 61660, 49606, 44873, 47341, 48846, 44874, 44875, 61662, 44876, 50609, 61661, 53745, 44877, 61664, 45260, 48618, 44878, 44879, 44880, 44881, 44882, 53983, 61663, 44883, 46255, 47080, 61670, 61669, 50851, 61665, 61666, 46275, 44884, 44885, 61667, 54766, 44886, 44887, 52443, 48850, 48306, 44888, 44889, 44890, 61672, 61671, 61668, 45729, 44891, 54946, 54200, 48823, 51372, 44892, 44893, 61674, 44894, 44895, 44896, 44897, 53751, 44898, 54988, 47835, 61673, 44899, 46779, 44900, 44901, 52660, 44902, 44903, 50854, 44904, 44905, 44906, 49569, 61675, 61678, 44907, 61677, 61680, 61676, 44908, 48062, 61679, 44909, 44910, 44911, 44912, 52405, 61682, 44913, 44914, 46037, 44915, 44916, 44917, 44918, 45524, 44919, 44920, 61683, 44921, 44922, 61684, 61686, 46305, 44923, 61681, 44924, 61687, 44925, 44926, 44928, 44929, 61690, 44930, 61688, 44931, 44932, 44933, 61685, 44934, 44935, 44936, 44937, 61693, 44938, 61689, 61692, 61694, 44939, 61857, 44940, 44941, 44942, 52929, 61860, 44943, 61859, 44944, 49654, 61691, 51933, 44945, 44946, 46321, 45553, 52401, 44947, 61862, 44948, 44949, 61863, 44950, 44951, 61868, 54734, 61865, 44952, 44953, 51379, 44954, 44955, 44956, 61858, 44957, 61867, 61864, 61861, 44958, 44959, 61866, 44960, 45120, 45121, 45122, 45123, 45124, 45125, 45126, 45225, 61869, 45127, 45128, 45129, 45130, 45131, 45132, 61871, 45133, 61873, 45134, 45135, 45136, 45137, 45138, 61872, 45139, 61870, 45140, 45141, 45142, 45143, 53666, 45144, 45145, 45146, 45147, 45148, 45149, 45150, 61874, 45151, 45152, 45153, 61875, 45154, 45155, 45156, 45157, 45158, 45159, 45160, 45161, 47599, 45162, 45163, 46535, 45164, 45271, 45273, 45165, 45166, 45167, 54509, 45168, 46532, 45169, 48596, 48074, 61607, 45170, 45171, 47326, 45172, 45173, 61608, 45174, 45175, 45224, 45176, 61609, 45177, 45178, 52718, 45179, 45180, 61610, 45181, 45182, 45184, 45185, 45186, 45187, 45188, 45189, 45190, 45191, 61611, 45192, 45193, 45194, 45195, 45196, 45197, 45198, 45199, 45200, 50852, 45201, 45202, 55013, 61924, 45203, 61925, 45204, 45205, 45206, 45207, 45208, 45209, 45210, 45211, 45212, 45213, 50163, 45214, 45215, 54235, 45216, 45376, 54993, 50664, 45377, 54191, 45378, 53990, 45379, 45380, 61121, 45243, 54709, 53710, 48352, 47824, 45381, 49144, 45382, 47303, 46529, 50636, 45383, 45384, 51874, 45385, 45386, 45387, 50123, 45388, 45389, 45390, 45391, 45392, 61122, 45393, 45394, 45395, 45396, 45397, 45398, 45399, 45400, 50367, 46754, 45401, 60908, 50084, 45402, 54961, 45403, 45404, 45405, 53216, 60911, 45406, 45407, 50638, 45408, 46812, 45409, 45410, 51873, 45411, 45412, 60909, 45413, 45414, 60912, 60913, 50108, 45415, 49076, 45416, 60910, 45417, 45418, 45419, 45420, 45421, 45422, 45423, 45424, 45425, 45426, 45427, 60916, 60914, 45428, 45429, 45430, 45431, 54758, 50143, 45432, 60915, 45433, 45434, 45435, 60918, 45436, 54691, 53667, 45437, 45438, 45440, 60917, 45441, 50128, 45442, 45443, 45444, 45445, 45446, 60919, 49140, 48876, 60920, 45447, 52471, 45448, 53723, 45449, 45450, 45451, 55237, 54774, 45452, 60924, 45453, 45454, 45455, 60923, 45456, 45457, 45458, 45459, 45460, 45461, 45462, 45463, 60921, 60922, 45464, 45465, 45466, 45467, 45468, 45469, 45470, 45471, 60925, 48806, 45472, 45632, 45633, 45634, 45635, 52143, 61089, 46781, 45636, 61090, 50368, 45637, 60926, 45638, 45639, 48606, 45767, 45640, 45641, 45642, 45643, 45644, 45645, 45646, 45647, 45648, 45649, 45650, 45651, 46787, 45652, 45653, 45654, 61093, 55482, 61091, 61094, 45655, 45656, 45657, 50153, 46066, 45658, 45659, 45660, 45661, 45662, 45663, 61095, 61092, 53177, 45664, 45665, 61096, 49911, 45666, 45667, 45668, 45669, 45670, 45671, 45672, 45673, 45674, 45675, 45676, 45677, 61097, 61098, 45678, 57003, 45679, 45680, 50867, 45681, 51142, 45682, 55029, 46537, 45683, 52146, 45684, 45685, 45686, 61099, 45687, 45688, 52651, 45689, 61100, 45690, 45691, 45692, 45693, 45694, 54704, 45696, 61101, 45697, 63172, 45698, 45699, 45700, 45701, 45702, 45703, 45704, 45705, 45706, 45707, 45708, 45709, 45710, 56263, 45711, 45712, 45713, 45714, 45715, 45716, 45717, 45718, 45719, 46243, 45720, 45721, 45722, 50092, 61926, 45723, 45724, 45725, 45726, 45727, 51896, 53971, 45728, 54954, 45888, 61426, 45889, 48856, 45890, 48579, 61427, 46796, 45227, 45891, 45892, 45893, 45894, 51887, 45895, 45896, 60854, 45897, 60855, 45898, 45899, 45900, 45901, 52985, 47023, 49139, 60856, 49899, 51632, 45902, 45903, 45904, 45905, 45906, 45907, 60857, 45908, 45909, 50934, 49075, 45910, 45911, 45912, 60860, 50680, 45913, 53712, 45914, 55209, 60858, 60859, 45915, 53730, 45916, 60863, 60864, 45917, 60868, 45918, 45919, 45920, 60872, 45921, 60870, 60878, 54760, 45922, 60873, 45923, 45924, 60871, 60862, 45925, 45926, 50665, 45927, 45928, 45929, 50886, 45930, 45931, 51689, 54482, 60865, 60866, 60867, 60869, 45932, 49401, 45933, 46241, 45934, 45935, 45936, 45937, 47592, 45938, 60880, 45939, 45940, 45941, 45942, 60881, 45943, 60874, 45944, 60879, 45945, 52984, 45946, 45947, 52150, 60876, 60877, 45948, 45949, 45950, 45952, 45953, 53237, 45954, 45955, 45956, 45957, 45958, 45959, 45960, 45961, 45962, 45963, 45964, 45965, 60882, 49650, 54194, 60875, 51383, 45966, 45967, 45968, 45969, 45970, 45971, 45972, 45973, 48367, 45974, 45975, 45976, 45977, 50672, 45978, 45979, 45980, 45981, 45982, 45983, 45984, 46144, 46145, 46146, 60886, 46147, 46575, 46148, 46149, 49845, 45229, 52201, 46150, 46151, 45486, 46152, 60884, 46153, 46154, 46155, 52715, 46562, 46156, 60885, 60883, 60887, 46157, 46158, 46586, 46159, 60888, 46160, 60889, 46161, 60892, 46162, 45516, 46163, 46164, 46165, 46166, 46167, 46168, 46169, 46170, 50678, 48366, 60890, 52412, 45802, 46171, 46172, 46173, 46174, 60891, 46175, 46176, 46177, 46178, 50411, 46179, 46180, 46277, 46181, 46182, 46183, 45301, 46184, 46185, 46186, 60895, 49370, 46312, 46187, 46188, 46189, 46190, 50637, 46191, 46192, 46193, 60893, 49092, 46194, 46195, 46196, 60894, 46197, 46198, 46199, 46200, 46201, 46202, 46203, 46204, 46205, 46206, 46208, 46209, 46210, 46211, 50341, 46212, 46213, 46214, 60896, 46215, 46216, 46217, 46218, 46219, 60897, 46220, 60899, 46221, 46222, 49623, 46223, 46224, 48071, 46225, 46226, 46227, 46228, 46229, 46230, 48568, 46231, 46232, 46233, 60898, 46234, 46235, 46236, 46237, 46238, 46239, 46240, 46400, 46401, 46402, 46403, 46404, 46405, 60900, 46406, 46407, 46408, 46409, 46410, 46411, 46412, 46413, 46414, 46415, 60902, 46416, 46417, 46418, 46419, 46420, 60901, 46421, 46422, 46423, 46424, 46425, 46426, 46427, 46428, 46429, 46430, 46431, 46432, 46433, 46434, 46435, 60903, 46436, 46437, 46438, 46439, 46440, 51902, 60650, 49393, 46441, 51687, 46442, 60651, 50926, 46443, 46444, 46445, 46446, 60652, 46447, 50925, 60653, 46448, 46449, 46450, 46451, 46452, 46453, 46454, 46455, 46456, 60656, 46457, 46458, 55270, 60659, 46459, 46460, 60657, 60654, 60655, 55203, 51697, 52206, 60660, 46461, 60658, 46462, 46464, 53225, 46465, 60662, 50865, 46466, 46467, 46468, 46469, 48320, 46470, 60661, 46471, 46472, 46473, 46474, 46475, 46476, 46477, 46523, 48118, 46478, 60663, 46479, 46480, 46481, 46482, 46483, 55799, 48635, 46484, 46485, 49851, 60664, 46486, 46487, 46488, 46489, 60665, 46490, 46491, 46492, 46493, 47267, 46494, 46495, 46496, 46656, 46657, 46658, 46659, 46660, 46661, 46662, 60666, 46663, 46664, 46665, 46666, 46667, 46668, 46669, 46670, 46671, 46672, 46673, 46674, 60667, 46675, 46676, 46677, 46678, 46679, 46680, 46681, 46682, 46683, 46684, 46685, 60668, 46686, 46687, 46688, 46689, 46690, 54253, 55470, 49387, 46691, 51165, 47820, 46692, 53475, 52157, 46693, 52666, 46694, 46695, 47313, 46696, 46697, 45564, 46698, 51183, 46699, 54998, 46700, 46701, 46702, 49094, 50155, 46703, 46704, 61429, 46705, 46706, 50136, 46707, 46708, 46709, 46710, 46711, 46712, 55266, 46713, 46714, 46715, 61431, 46035, 46716, 51160, 53741, 46717, 54984, 46718, 61432, 46720, 61430, 46721, 48125, 46022, 46722, 46723, 46724, 46725, 46726, 46727, 46728, 48597, 46729, 46730, 53958, 46731, 48096, 46732, 46733, 53153, 46734, 61436, 61435, 46735, 46736, 61433, 46737, 46738, 46739, 46740, 46028, 46741, 51668, 52144, 46742, 46743, 46744, 46745, 46746, 61438, 46747, 46748, 45278, 46749, 46750, 54985, 46751, 46752, 46912, 61437, 46913, 46061, 46914, 46915, 63189, 46916, 46917, 46918, 46919, 46920, 46921, 46922, 46923, 46924, 46925, 46926, 46927, 46928, 46929, 46930, 52936, 46931, 46932, 46933, 61602, 46934, 61601, 46935, 46526, 48346, 48124, 46936, 47333, 46937, 46938, 46939, 46940, 46941, 46942, 50370, 46943, 46944, 46945, 46946, 46947, 46948, 46949, 46950, 46951, 46952, 61603, 46953, 46954, 46955, 46956, 46957, 52203, 46958, 46959, 46960, 46961, 46962, 46963, 46964, 46965, 46966, 46967, 46968, 46969, 46970, 46971, 46972, 46973, 46974, 46976, 46977, 46978, 46979, 46980, 46981, 46982, 61606, 46983, 46984, 46985, 53672, 46986, 48831, 51182, 61878, 61879, 49109, 46987, 46988, 46989, 46990, 46249, 61880, 52667, 46991, 51156, 54701, 46992, 61881, 46993, 61882, 46994, 46995, 46996, 46997, 51151, 46998, 46999, 47000, 53924, 54991, 47001, 47002, 61883, 48593, 46256, 48829, 47003, 47004, 47005, 46300, 52945, 47006, 49119, 61885, 47007, 47008, 47168, 47169, 49146, 61884, 47170, 61887, 47171, 47172, 47173, 61886, 61888, 47174, 47175, 47176, 47177, 47178, 61889, 47179, 47180, 47181, 47182, 47183, 47184, 47185, 47186, 47187, 47188, 47189, 49662, 47190, 47191, 47192, 47193, 47194, 47195, 47196, 47197, 47198, 47199, 47200, 49570, 47201, 47202, 47203, 47204, 47205, 47206, 47207, 47208, 47209, 47210, 51962, 47211, 47212, 54718, 47213, 47214, 47215, 47216, 48826, 48825, 54722, 47217, 47218, 49058, 47219, 52655, 61877, 47220, 47221, 47222, 47223, 47224, 47225, 48607, 47226, 46795, 47227, 47228, 47229, 47230, 47232, 47233, 47234, 47235, 47236, 55025, 62403, 47237, 47238, 62404, 47239, 47309, 47240, 47241, 47242, 62406, 62407, 47243, 45258, 47244, 62405, 47245, 62409, 52209, 47246, 47247, 47248, 62411, 47249, 53414, 47250, 47251, 45514, 62408, 47252, 47253, 47254, 62415, 47255, 46545, 47256, 47257, 62423, 47258, 62418, 47259, 47260, 47261, 62420, 62419, 47099, 47262, 45503, 47263, 62414, 62410, 46554, 47264, 62416, 47424, 47425, 62417, 47426, 62421, 47427, 47428, 47429, 47430, 62413, 47431, 48355, 47432, 49661, 47433, 62422, 47434, 47435, 47436, 47437, 47438, 47439, 62426, 47440, 62412, 47441, 46536, 47442, 48622, 62428, 47443, 47444, 47012, 49136, 55038, 52658, 47445, 46320, 47446, 45791, 47447, 62424, 47448, 62425, 51640, 47449, 62429, 47450, 47451, 62430, 47452, 62433, 47453, 47454, 47455, 47456, 47457, 47458, 47459, 47460, 47461, 47462, 47463, 62431, 47464, 47465, 62435, 62434, 47466, 47467, 62427, 47468, 49130, 47469, 46063, 47470, 62432, 47471, 47472, 51113, 47473, 48370, 47474, 47475, 47476, 47477, 62443, 47478, 47479, 47480, 47481, 47482, 47483, 47484, 47551, 47485, 47486, 62436, 47488, 47489, 47490, 45741, 48126, 47491, 52195, 47492, 47493, 47494, 47495, 62445, 62441, 47496, 47497, 47498, 47580, 62446, 47499, 47500, 47501, 62437, 62438, 62442, 49889, 62444, 62447, 62440, 48381, 47502, 47503, 47504, 53220, 47505, 47506, 62448, 47507, 47508, 47509, 62439, 47510, 47511, 47512, 47513, 47514, 47515, 47516, 47517, 62450, 47518, 47519, 47520, 47680, 55213, 50858, 47681, 47682, 47683, 47684, 62451, 47685, 47686, 47687, 47688, 62449, 47689, 49832, 47690, 47691, 47692, 47693, 47694, 47325, 62453, 47695, 47696, 62452, 47697, 47698, 47699, 46299, 47700, 47701, 47702, 62454, 62455, 47703, 47704, 47705, 62456, 47706, 47707, 47708, 49338, 47709, 47710, 49385, 47711, 47712, 47713, 47714, 47715, 50673, 47716, 47717, 47718, 47719, 62459, 47720, 62458, 47721, 47722, 47723, 47724, 47725, 47726, 47727, 47728, 46296, 47729, 47730, 47731, 62462, 62457, 47732, 47733, 62460, 47734, 47735, 47736, 47737, 47738, 47739, 62461, 47740, 47741, 47742, 47744, 47745, 47746, 47747, 47748, 62625, 47749, 47750, 47751, 47752, 47753, 47754, 62627, 48073, 47755, 47756, 62626, 47757, 47758, 47759, 47760, 47761, 47762, 47763, 47764, 47765, 47766, 47767, 47768, 47769, 62628, 47770, 47771, 47772, 47773, 47774, 47775, 45758, 62630, 62629, 47776, 47936, 47937, 47938, 47939, 47940, 47941, 47942, 47943, 47944, 47945, 48302, 47946, 47947, 47948, 47949, 47950, 47951, 47952, 47953, 47954, 47955, 47956, 47957, 47958, 47959, 47960, 47961, 47962, 47963, 47964, 47965, 47966, 47967, 47968, 47969, 47970, 47971, 47972, 47973, 47974, 47975, 47976, 47977, 47978, 47979, 47980, 47981, 47982, 50135, 55777, 47983, 47984, 47985, 47986, 47987, 47988, 49376, 62668, 55249, 47989, 47990, 47991, 47992, 47993, 47994, 47995, 47996, 47997, 47998, 48000, 47067, 48001, 48002, 48003, 48004, 48005, 48006, 48007, 62670, 49571, 48008, 48009, 50889, 48010, 46294, 54707, 48011, 48012, 48013, 62672, 62671, 62673, 52186, 48014, 48015, 62674, 48016, 54465, 55008, 48017, 48018, 48019, 48020, 47072, 48021, 48022, 48023, 49592, 48024, 48025, 49595, 62675, 48812, 48026, 48027, 48028, 48029, 48030, 46306, 48031, 48032, 62676, 62677, 48811, 48192, 48193, 62678, 48194, 48195, 48196, 62683, 48197, 62679, 62682, 48198, 47869, 48199, 62680, 62681, 48200, 48201, 48202, 48203, 48204, 48205, 48206, 47330, 52423, 62684, 48207, 45786, 48208, 48209, 50131, 48210, 48211, 54499, 49079, 48212, 48213, 48214, 48215, 48216, 48217, 48218, 62685, 48219, 48220, 48221, 48222, 48223, 48224, 50612, 48225, 48226, 48227, 48228, 48229, 48230, 48231, 48232, 62697, 48233, 48234, 53173, 48235, 48236, 48237, 48238, 48239, 48240, 48241, 48242, 48243, 48244, 48245, 48246, 48247, 48248, 52937, 48249, 48250, 48251, 48252, 48253, 48254, 48256, 48257, 48258, 48259, 48260, 48261, 48262, 48263, 48264, 48265, 48266, 48267, 48268, 48269, 48270, 52184, 48271, 52215, 48272, 48273, 48274, 48275, 48628, 48276, 48277, 48278, 55247, 48279, 48280, 48281, 49371, 48282, 48283, 48284, 48285, 48286, 48287, 48288, 48448, 48449, 48450, 48451, 48452, 48453, 48454, 48455, 48456, 48457, 48458, 48459, 48460, 48461, 48462, 48463, 48464, 48465, 48466, 48467, 48468, 48469, 48470, 48471, 48472, 48473, 48474, 48475, 48476, 48477, 48478, 48479, 48480, 48481, 48482, 48483, 48484, 48485, 48486, 48487, 48488, 48489, 48490, 48491, 48492, 48493, 48494, 48495, 48496, 48497, 48498, 48499, 48500, 48501, 48502, 53493, 48503, 48504, 48505, 48506, 48507, 48508, 48509, 48510, 62698, 48512, 48513, 48514, 48515, 48516, 48517, 48518, 48519, 48520, 48521, 48522, 48523, 48524, 48525, 48526, 48527, 48528, 48529, 48530, 48531, 48532, 48533, 48534, 48535, 48536, 48537, 48538, 48539, 48540, 48541, 48542, 48543, 48544, 48704, 48705, 48706, 48707, 48708, 48709, 48710, 48711, 48712, 48713, 48714, 48715, 48716, 62699, 48717, 48718, 48719, 48720, 48721, 48722, 48723, 62700, 48724, 48725, 48726, 48727, 48728, 48729, 48730, 48731, 48732, 48733, 48734, 48735, 48736, 48737, 48738, 48739, 48740, 48741, 48742, 48743, 48744, 48745, 48746, 48747, 48748, 48749, 48750, 48751, 48752, 48753, 48754, 48755, 48756, 48757, 48758, 48759, 48760, 48761, 48762, 48763, 48764, 48765, 48766, 48768, 48769, 48770, 48771, 48772, 48773, 48774, 48775, 48776, 48777, 48778, 48779, 48780, 48781, 48782, 48783, 48784, 48785, 48786, 48787, 48788, 48789, 48790, 48791, 48792, 48793, 48794, 48795, 48796, 48797, 48798, 48799, 48800, 48960, 48961, 48962, 48963, 48964, 48965, 48966, 48967, 48968, 48969, 48970, 48971, 48972, 48973, 48974, 48975, 48976, 48977, 48978, 48979, 48980, 48981, 48982, 48983, 48984, 48985, 48986, 48987, 48988, 48989, 48990, 48991, 48992, 48993, 48994, 48995, 48996, 48997, 48998, 48999, 49000, 49001, 49002, 49003, 49004, 49005, 49006, 49007, 49008, 49009, 49010, 49011, 49012, 49013, 49014, 49015, 49016, 49017, 49018, 49019, 49020, 49021, 49022, 49024, 63459, 49025, 49026, 49027, 49028, 49029, 47025, 49030, 49031, 49032, 49033, 49034, 62701, 49035, 49036, 49037, 49038, 49039, 49040, 49041, 49042, 49043, 49044, 49045, 49046, 49047, 49048, 49049, 49050, 49051, 49052, 49053, 49054, 49055, 49056, 49216, 49217, 49218, 49219, 49220, 49221, 49222, 49223, 49224, 49225, 49226, 49227, 49228, 49229, 49230, 49231, 49232, 49233, 49234, 49235, 49236, 49237, 49238, 49239, 49240, 49241, 49242, 49243, 49244, 49245, 49246, 49247, 49248, 49249, 49250, 49251, 55275, 49252, 49253, 49254, 49255, 49256, 49257, 49258, 49259, 49260, 49261, 49262, 49263, 49264, 49265, 49266, 49267, 49268, 49269, 49270, 49271, 49272, 49273, 49274, 49275, 62702, 49276, 49277, 49278, 59129, 48832, 59130, 47852, 59131, 53195, 59132, 54460, 48310, 59133, 59134, 48333, 51410, 52915, 59297, 49280, 46271, 59298, 51636, 47321, 50377, 49281, 55261, 49882, 47063, 54973, 52934, 47044, 49282, 49283, 50598, 59299, 53215, 59300, 59301, 59302, 49591, 55273, 51696, 53176, 54959, 54997, 59303, 45293, 59304, 59305, 51676, 53999, 48813, 59306, 45299, 51422, 48609, 59307, 51398, 49284, 59308, 48102, 47352, 53668, 59309, 49895, 48888, 48586, 52659, 59310, 59311, 48878, 53477, 49285, 52199, 52432, 48332, 59312, 48296, 53495, 59313, 49286, 53496, 59314, 59315, 46274, 59316, 59317, 51710, 52908, 50144, 59319, 45505, 46065, 49287, 59320, 59321, 55259, 54720, 59322, 49868, 55226, 59323, 59324, 59325, 48362, 50149, 49346, 59326, 59327, 48297, 49288, 59328, 59329, 59318, 46800, 59330, 49289, 59331, 59332, 48058, 46558, 49862, 45536, 59333, 54453, 59334, 47295, 59336, 59335, 47084, 49290, 59337, 45816, 59338, 59339, 59340, 59341, 59342, 59343, 59344, 54183, 52213, 59345, 59346, 59347, 59348, 51657, 59349, 59350, 59351, 59352, 59353, 48585, 59354, 62398, 49291, 47319, 49292, 51377, 49293, 49294, 49295, 49296, 49297, 49298, 49299, 62399, 49300, 62400, 62401, 49301, 49302, 49303, 49304, 49305, 49306, 49307, 49308, 49309, 49310, 47582, 52728, 49311, 49312, 55528, 47793, 49472, 49886, 61111, 49473, 47011, 49474, 49475, 49476, 49477, 61113, 49478, 61112, 45269, 49479, 49480, 49481, 49482, 49483, 61115, 54742, 55279, 49484, 49485, 49486, 54979, 49487, 49488, 61117, 51952, 49489, 61116, 49490, 49491, 49492, 49493, 61118, 49494, 49495, 49496, 49497, 61120, 49498, 49499, 61119, 49500, 49501, 49502, 49503, 49504, 49505, 49506, 49507, 53746, 49508, 51132, 49509, 50112, 49510, 49511, 49512, 49513, 49514, 47329, 49515, 49516, 49517, 49518, 49519, 49639, 49520, 49521, 62662, 53471, 62663, 49522, 53211, 49523, 49524, 51386, 49525, 49526, 62664, 49527, 49528, 49529, 49530, 49531, 49532, 49533, 62665, 62666, 49534, 62667, 49536, 49537, 49538, 49539, 49540, 55802, 47358, 49541, 49542, 58865, 54256, 49543, 62688, 49544, 52940, 49545, 49546, 49547, 46049, 49548, 49549, 49550, 49551, 61876, 49552, 53998, 49553, 62689, 49554, 49555, 49556, 49557, 49558, 53224, 62690, 49559, 49560, 51148, 49561, 49562, 49563, 49564, 49565, 49566, 46548, 46308, 62692, 49567, 49568, 49728, 62691, 62693, 49729, 49730, 62694, 49731, 49732, 49733, 49734, 62695, 49735, 47794, 45247, 49736, 62696, 49737, 49738, 49739, 49740, 49741, 49742, 49743, 47021, 53997, 49744, 49745, 49746, 53931, 49359, 49747, 49084, 60323, 54751, 60104, 49748, 49749, 49750, 49751, 61939, 46840, 52131, 49752, 49753, 50381, 49754, 61927, 49755, 61928, 47355, 61929, 47812, 54469, 45266, 49756, 49757, 61930, 49758, 49759, 49760, 61931, 49761, 61932, 49762, 49763, 61933, 61934, 61935, 61937, 61936, 50645, 49764, 49765, 49766, 49767, 49768, 49769, 61938, 49770, 46842, 49771, 61940, 53934, 57031, 52170, 49772, 49773, 46044, 49774, 46498, 49775, 47522, 49776, 49777, 50420, 61941, 49778, 49779, 61942, 49780, 49781, 49782, 49604, 49659, 54960, 61943, 49783, 49784, 49785, 49786, 61944, 49787, 49578, 49788, 49789, 49790, 50872, 49792, 48859, 49793, 49794, 49795, 49796, 49797, 49798, 49799, 49800, 49801, 49802, 49803, 49804, 49805, 49806, 61945, 46287, 49807, 49808, 49809, 49810, 49811, 49812, 61946, 49813, 49814, 49815, 49816, 49817, 49818, 49819, 49820, 49821, 49822, 49823, 49824, 49984, 60850, 60849, 49985, 49986, 52192, 53982, 49987, 52161, 54744, 49988, 51426, 49989, 49375, 48289, 49990, 49991, 49992, 49993, 49994, 49995, 60353, 49996, 49997, 53412, 49998, 55010, 49999, 46791, 47320, 60352, 47310, 50000, 60351, 45990, 47561, 54955, 50001, 47092, 47050, 50002, 50003, 50004, 48359, 47038, 60358, 50005, 60359, 45241, 49103, 50006, 60357, 54269, 50007, 60360, 50008, 50009, 60361, 50010, 50011, 47054, 50012, 60354, 60356, 51702, 54999, 54733, 53426, 60367, 52920, 60368, 50013, 46504, 50014, 50015, 50016, 50017, 50018, 45491, 60370, 52389, 50019, 50020, 50021, 50022, 50023, 50024, 50025, 50646, 60371, 50026, 60369, 50655, 60366, 51876, 60373, 45307, 50027, 50028, 47866, 50029, 50030, 55479, 61923, 50031, 60362, 60363, 60364, 60365, 60374, 59072, 60377, 50032, 49128, 53960, 60375, 60380, 47340, 60376, 50033, 48570, 50034, 53464, 50035, 45239, 50036, 60381, 50396, 50037, 50038, 50039, 50040, 54956, 50041, 50042, 50043, 46304, 50044, 50045, 49910, 48313, 50046, 50048, 60378, 60379, 54496, 50922, 50388, 60383, 50599, 55797, 50049, 45745, 50050, 60388, 50051, 48581, 50052, 50053, 50054, 60386, 50055, 50056, 50057, 50058, 50059, 50060, 50061, 50062, 50063, 50064, 50065, 50066, 50067, 60387, 50068, 50069, 47276, 50070, 52689, 60389, 50071, 50072, 50073, 60385, 50074, 49587, 50075, 50076, 50077, 50078, 50079, 50850, 50080, 50240, 50241, 50242, 50243, 50244, 50245, 52467, 50246, 60390, 50247, 49328, 53944, 60391, 50248, 50249, 50250, 47279, 47277, 50251, 60392, 51131, 52723, 50252, 50253, 50254, 60394, 60395, 50255, 50256, 50257, 50258, 50259, 60397, 50260, 50261, 50262, 50263, 53448, 50264, 60402, 50265, 60398, 50266, 50267, 50268, 60401, 51449, 50269, 53756, 60396, 50270, 50271, 60393, 50272, 50273, 50274, 50275, 47289, 53209, 50405, 60399, 60400, 52442, 52680, 45298, 50276, 60406, 50277, 50278, 50279, 50280, 50281, 60405, 50282, 45746, 50283, 50284, 50285, 50286, 47328, 50287, 60407, 50288, 50289, 50290, 50291, 50292, 50293, 45548, 50294, 50295, 52421, 50340, 53157, 50296, 50297, 50298, 50299, 50300, 60409, 50301, 50302, 60578, 50304, 50674, 50305, 60410, 50306, 50307, 50308, 50309, 50310, 50311, 50312, 50313, 51653, 50314, 50315, 50316, 50317, 50318, 50319, 58079, 60414, 50320, 50321, 50322, 50323, 52686, 60577, 45531, 54199, 50324, 50325, 53980, 50326, 50327, 50328, 60413, 50329, 60411, 50330, 50331, 50332, 50333, 50334, 50335, 50336, 50496, 50497, 50498, 50499, 50500, 50501, 50502, 50503, 50504, 50505, 50506, 50507, 50508, 50509, 50510, 46012, 50511, 50512, 50513, 60080, 50514, 50515, 55252, 50516, 62635, 46068, 50517, 50518, 50519, 50520, 50521, 54977, 54978, 50522, 50523, 50524, 50525, 50526, 50527, 54761, 48842, 50528, 62631, 50529, 53928, 62632, 62633, 50530, 62634, 48843, 54239, 50531, 50532, 50533, 50534, 50535, 51680, 51681, 50536, 50537, 62402, 50538, 51942, 50539, 52466, 50540, 50541, 50542, 50543, 50544, 50545, 58038, 52148, 50546, 52968, 55003, 50547, 62637, 62638, 62639, 50548, 50549, 50550, 50551, 62642, 50552, 47805, 62643, 45283, 62640, 50553, 62641, 48546, 45781, 50554, 62646, 62647, 46822, 45744, 53199, 62644, 46252, 50555, 62645, 50556, 50557, 62648, 50558, 50560, 50561, 50562, 50563, 62649, 50564, 50565, 52647, 50566, 62650, 50567, 62651, 50568, 50569, 50570, 62652, 50571, 50572, 50573, 50574, 50575, 50576, 50577, 50578, 52178, 50579, 62653, 50580, 50581, 50582, 50583, 62654, 50584, 50585, 50586, 50587, 50588, 50589, 50590, 50591, 62655, 50592, 50752, 50753, 50754, 50755, 62686, 49596, 48360, 50756, 51627, 53726, 58869, 50757, 50758, 50759, 50760, 56499, 53973, 50761, 50762, 56500, 45228, 56501, 50763, 50764, 48602, 50765, 56505, 50766, 50767, 50768, 55490, 50769, 56503, 54259, 50770, 51670, 56506, 56502, 50771, 56507, 50082, 50772, 50773, 50774, 50775, 56508, 56517, 56509, 50776, 50777, 52959, 54949, 50778, 56527, 50779, 56525, 50780, 50781, 56530, 48614, 49835, 50782, 56504, 56523, 56526, 56510, 47058, 45253, 56519, 53438, 56513, 48040, 50783, 47036, 56524, 50784, 50785, 56518, 56511, 51163, 50786, 50787, 50788, 53695, 56512, 50789, 50790, 56522, 50791, 50792, 56528, 50793, 50794, 52909, 56514, 50795, 56515, 56520, 56521, 45780, 56529, 52181, 50796, 54455, 56539, 56543, 52390, 56550, 50797, 50151, 56540, 50798, 50799, 49089, 56537, 50800, 45306, 47542, 56549, 56531, 50801, 56516, 56534, 51444, 49120, 50802, 50803, 50804, 50805, 51643, 50806, 50807, 50808, 45501, 50809, 54178, 50810, 50811, 56538, 50812, 50813, 56533, 50814, 50875, 50816, 56542, 50817, 50818, 50819, 50820, 50821, 55234, 50095, 47030, 51153, 50089, 56546, 56536, 56555, 56532, 50822, 50823, 56541, 50824, 48805, 56535, 50825, 56544, 50826, 50827, 56547, 56548, 50828, 56568, 50829, 50830, 56545, 56738, 56551, 50831, 50832, 50833, 50834, 50835, 50836, 50837, 50838, 50839, 50840, 48363, 46276, 50841, 50842, 50083, 45799, 56570, 50843, 56562, 50844, 56559, 50845, 56572, 56558, 54000, 45800, 50846, 51415, 51427, 56571, 50847, 56557, 50848, 51008, 51009, 56567, 51010, 51011, 56565, 51012, 51013, 48803, 56564, 51014, 45789, 51015, 51016, 51017, 51018, 51019, 56563, 48374, 56552, 48068, 51020, 49395, 51021, 51022, 51023, 51024, 51025, 48340, 56553, 56554, 51026, 56561, 56566, 56569, 46516, 51027, 51417, 48103, 56574, 56573, 54187, 56737, 56739, 56741, 54001, 56740, 56742, 56743, 53929, 51028, 51029, 51030, 51031, 51032, 51033, 51034, 47817, 56745, 51035, 51036, 56758, 56753, 56756, 51037, 51038, 51039, 51040, 51041, 51042, 51043, 56752, 50894, 51044, 51045, 49394, 51046, 51047, 51048, 51049, 51631, 51050, 51051, 51052, 56556, 56750, 51053, 51054, 51055, 51056, 56759, 51057, 51058, 56560, 56751, 51059, 56760, 51060, 56748, 51061, 51062, 51063, 51064, 51065, 51066, 51067, 56761, 56755, 56749, 50346, 51068, 51069, 51070, 51072, 56744, 49331, 49579, 56746, 56747, 51073, 56754, 48113, 56757, 54184, 56762, 51074, 56763, 50087, 51075, 51076, 56786, 56764, 51077, 51078, 51079, 56785, 51080, 47549, 51081, 51082, 48853, 51083, 48890, 51084, 51085, 47818, 51086, 51087, 51088, 51089, 56778, 51090, 56773, 51091, 56767, 51092, 51093, 51094, 45771, 56771, 51095, 56779, 45732, 56789, 51096, 51097, 51098, 56766, 51099, 51100, 51101, 50896, 56784, 51102, 51103, 51104, 51264, 51265, 56788, 49634, 47046, 51266, 51267, 51268, 51269, 51270, 56782, 56783, 51271, 51272, 51273, 56772, 51274, 51275, 51276, 56765, 51277, 56781, 52433, 51278, 56777, 51279, 51280, 51281, 51282, 56770, 50120, 50876, 52910, 56780, 51283, 56776, 51284, 51285, 51286, 51287, 51288, 51289, 56769, 51290, 51291, 51292, 56774, 49884, 51293, 51294, 51295, 51296, 51297, 51298, 54185, 54186, 56787, 53236, 51448, 51299, 51300, 51301, 51302, 51303, 51304, 51305, 51306, 56806, 51307, 51308, 51309, 51310, 51311, 51312, 56775, 51313, 51314, 51315, 56800, 49892, 51316, 51317, 51318, 51319, 51320, 51321, 51322, 51323, 56801, 51324, 51325, 51326, 51328, 51329, 51330, 51331, 51332, 51333, 51334, 56791, 51335, 51336, 51337, 51338, 51339, 55032, 51340, 56793, 56792, 47344, 56790, 51341, 51342, 51343, 51344, 50895, 51345, 46765, 51346, 51347, 51348, 51349, 51350, 56802, 51351, 47865, 54497, 56807, 51352, 51353, 51354, 46288, 51355, 56794, 51356, 49147, 56803, 51357, 56799, 51358, 56797, 51359, 51360, 51520, 51521, 51522, 51523, 51524, 46553, 51525, 51526, 51527, 51528, 56795, 56796, 56798, 51529, 48559, 56804, 51530, 56805, 51531, 51532, 51533, 51534, 51535, 51536, 51537, 51538, 56821, 51539, 50121, 51540, 51541, 52194, 51542, 51543, 51544, 51545, 56818, 51546, 51547, 51548, 51549, 51550, 51551, 51552, 51553, 51554, 51555, 51556, 51557, 51558, 55521, 51559, 51560, 50897, 51561, 56820, 51562, 51563, 51564, 54772, 56819, 56816, 51565, 51566, 56812, 51567, 56815, 51568, 56808, 51569, 51570, 53486, 51571, 51572, 51573, 51574, 51416, 56814, 51575, 51576, 56809, 51577, 51578, 56810, 52210, 51579, 56813, 51580, 51581, 45517, 51582, 51584, 51585, 51586, 51587, 51588, 49334, 51589, 48315, 56817, 51590, 51591, 56823, 51592, 56822, 56811, 51593, 51594, 51595, 51596, 51597, 50670, 51598, 51599, 51600, 56827, 51601, 51602, 51603, 51604, 51605, 51606, 51607, 51608, 51609, 51610, 51611, 56996, 51612, 51613, 56995, 51614, 51615, 51616, 51776, 51777, 51778, 51779, 51780, 51781, 51782, 51783, 51784, 56824, 51785, 51786, 51787, 51788, 50159, 51789, 49915, 51790, 51791, 51792, 54753, 51793, 51794, 52917, 51795, 51796, 51797, 51798, 56829, 51799, 45772, 51800, 51801, 51802, 51803, 51804, 51805, 51806, 51807, 51808, 50408, 51935, 51809, 51810, 51811, 51812, 51813, 51814, 51815, 51816, 51817, 51818, 51134, 56826, 56828, 56830, 56994, 45226, 45518, 51819, 51820, 51821, 51822, 51823, 57004, 51824, 51825, 51826, 51827, 56998, 48566, 51439, 51828, 51829, 51830, 51831, 51832, 51833, 51834, 51835, 51836, 51837, 51838, 56993, 51840, 51841, 56997, 51842, 51843, 51844, 51845, 57001, 51846, 51847, 51848, 51849, 51850, 57000, 51851, 51852, 51853, 56999, 51854, 51855, 51856, 51857, 51858, 51859, 51860, 51861, 51862, 57005, 51863, 54476, 51864, 51865, 51866, 51867, 57011, 57002, 57006, 51868, 51869, 49369, 51870, 51871, 51872, 52032, 52033, 45473, 57014, 52034, 57009, 52035, 52036, 52037, 52038, 52039, 52040, 52041, 57010, 52042, 52043, 52044, 52045, 52046, 52047, 52048, 52049, 52050, 52051, 52052, 53670, 57013, 52053, 52054, 52055, 52056, 52057, 52058, 52059, 57007, 52060, 52061, 52062, 57008, 52063, 53437, 52064, 52065, 52066, 57012, 51949, 57017, 52067, 52068, 52069, 52070, 52071, 52072, 57016, 52073, 57015, 52074, 52075, 52076, 52077, 52078, 52079, 52080, 57019, 52081, 52082, 52083, 52084, 52085, 52086, 52087, 48613, 52088, 52089, 52090, 52091, 52092, 45784, 50154, 52093, 52094, 57018, 52096, 50618, 52097, 52098, 52099, 52100, 52101, 52102, 57020, 52103, 52104, 52105, 52106, 52107, 52108, 52109, 52441, 52110, 52111, 52112, 52113, 47018, 52114, 52115, 52116, 52117, 52118, 52119, 52120, 52121, 52122, 52123, 52124, 52125, 52126, 52127, 52128, 52288, 52289, 54501, 52290, 52291, 52292, 57021, 52293, 52294, 52295, 52296, 52297, 57023, 52298, 52299, 52300, 52301, 52302, 52303, 52304, 52305, 52306, 52307, 52308, 50338, 52309, 52310, 52311, 52312, 57025, 52313, 52314, 52315, 52316, 52317, 52318, 52319, 52320, 52321, 52322, 52323, 52324, 52325, 52326, 52327, 52328, 57022, 52329, 57024, 52330, 52331, 52332, 52333, 52334, 52335, 52336, 52337, 52338, 52339, 52340, 52341, 52342, 52343, 54714, 52344, 52345, 52346, 57026, 52347, 52348, 52349, 52350, 52352, 52353, 52354, 52355, 52356, 52357, 52358, 52359, 52360, 52361, 52362, 52363, 62126, 48034, 49842, 50608, 49863, 52364, 52365, 62127, 52366, 52367, 52368, 52369, 52370, 53481, 52371, 52372, 52373, 54237, 52374, 52375, 52376, 60349, 52377, 52378, 52379, 52380, 52381, 52382, 52383, 52384, 46054, 62128, 52544, 62129, 52545, 52546, 51885, 52547, 52548, 52549, 52550, 52551, 52552, 52553, 47847, 62131, 62133, 62132, 52196, 53178, 62130, 51892, 53967, 49900, 52554, 52555, 52556, 52557, 52558, 52559, 52560, 52931, 62136, 45302, 62135, 52561, 52562, 52563, 52564, 52565, 62142, 52566, 45775, 52567, 52568, 52569, 52570, 52571, 52572, 53697, 62138, 52573, 52574, 52575, 52576, 52577, 62140, 54505, 52578, 52579, 62139, 62134, 62143, 62141, 52580, 62137, 52581, 52582, 62151, 62148, 62150, 52583, 52584, 62154, 62146, 62144, 52585, 52586, 52587, 62149, 52588, 52589, 52590, 52591, 52592, 55035, 52593, 52594, 52595, 62145, 52596, 51193, 51679, 52597, 62152, 47558, 46512, 52598, 52599, 62147, 62153, 62160, 62166, 52600, 52601, 48087, 52602, 52603, 52604, 62165, 52700, 52605, 55019, 52606, 52608, 62162, 62164, 52609, 52610, 52611, 52612, 47346, 52613, 52614, 52615, 52616, 62155, 52617, 52618, 52619, 62158, 49913, 52620, 54749, 62156, 62157, 62159, 62163, 52621, 52622, 52623, 62169, 54204, 52624, 52625, 52626, 52627, 46826, 52628, 51953, 52629, 47076, 62167, 52630, 52631, 52632, 62168, 62170, 62173, 62171, 52633, 52634, 62172, 52635, 52636, 52637, 52638, 53713, 62161, 52639, 52681, 52640, 52943, 54953, 52800, 62179, 52801, 50139, 52802, 62176, 52803, 52804, 49327, 62188, 62174, 52805, 62177, 52806, 52807, 52808, 62184, 52809, 52810, 52811, 52812, 62178, 52813, 52814, 62183, 52815, 52816, 62182, 52817, 52818, 62185, 52819, 52820, 52821, 62175, 52822, 52823, 62180, 62186, 52824, 52825, 52826, 52827, 52828, 52829, 52830, 54188, 62181, 45813, 52831, 52832, 62194, 52833, 53419, 52834, 52835, 52836, 52837, 62197, 52838, 52839, 52840, 48072, 52841, 62201, 52842, 52843, 52844, 52845, 52846, 52847, 62192, 52848, 52849, 62198, 62200, 62202, 52850, 52851, 52852, 52853, 52854, 52855, 52856, 52857, 62195, 52858, 62193, 52859, 52860, 52861, 47867, 52862, 46587, 52864, 52865, 52866, 52867, 62191, 62199, 62189, 62190, 52868, 52869, 52870, 62187, 62374, 52871, 62371, 52872, 52873, 62370, 52874, 52875, 62196, 52876, 51418, 52877, 52878, 52879, 52880, 52881, 62203, 52882, 52883, 52884, 62373, 52885, 52886, 52887, 52888, 52889, 52890, 52891, 50168, 52892, 52893, 52894, 52895, 52896, 53056, 53057, 53058, 62205, 53059, 53060, 62375, 62377, 62372, 53061, 62204, 53062, 53063, 53064, 62379, 53065, 62378, 53066, 53067, 53068, 53069, 49885, 53070, 53071, 62382, 53072, 53073, 62384, 53074, 53075, 53076, 53077, 53078, 62369, 53079, 53080, 53081, 62385, 62380, 53082, 53083, 53084, 53085, 53086, 62383, 62206, 62381, 53087, 53088, 53089, 53090, 53091, 53092, 53093, 62386, 53094, 53095, 53096, 53097, 62388, 53098, 53099, 53100, 53101, 62376, 53102, 53103, 53104, 53105, 62387, 53106, 53107, 53108, 62389, 53109, 53110, 53111, 53112, 53113, 53114, 53115, 53116, 53117, 53118, 53431, 53120, 53121, 53122, 53123, 62392, 53124, 53125, 53126, 53127, 55801, 53128, 53129, 53130, 53131, 53132, 53133, 62393, 53134, 53135, 53136, 53137, 53138, 53139, 53140, 53141, 62391, 53142, 51428, 62390, 53143, 53144, 53145, 53146, 62394, 53147, 53148, 53149, 53150, 53151, 62395, 46272, 53152, 53312, 53313, 53314, 53315, 53316, 53317, 53318, 53319, 53320, 53321, 53322, 53323, 53324, 53325, 61123, 53326, 53327, 53328, 53329, 53330, 53331, 62396, 53332, 53333, 62397, 53334, 53335, 53336, 53674, 53337, 53338, 53339, 62636, 53446, 53340, 53341, 53342, 53343, 53344, 53345, 53456, 53724, 53346, 53347, 53348, 53349, 53350, 53351, 53198, 53352, 53353, 48598, 53354, 53699, 53355, 53356, 53357, 53358, 53359, 53360, 53361, 47842, 57833, 53954, 61890, 45753, 53362, 53363, 45549, 61891, 53364, 51648, 46020, 53365, 55794, 53366, 52133, 53367, 61892, 53368, 53369, 53370, 53371, 54996, 53372, 53373, 53374, 53376, 53377, 61893, 62656, 61894, 53378, 54444, 61895, 53379, 45248, 62657, 53380, 53381, 62658, 53382, 53383, 46332, 53384, 50651, 53385, 53386, 53387, 53388, 52411, 53389, 53390, 53391, 53476, 53392, 53393, 53394, 53395, 53396, 52704, 53397, 53398, 53399, 53400, 53401, 61896, 53402, 55795, 53403, 53404, 53405, 53406, 53407, 53408, 45499, 53568, 53166, 53569, 53570, 53571, 47268, 53572, 53573, 53574, 53575, 53576, 61898, 53577, 53578, 53579, 53580, 61899, 53581, 53582, 53583, 53584, 45763, 49617, 53585, 53586, 55216, 61897, 53587, 53588, 61900, 53589, 53590, 53591, 53592, 61902, 53593, 53594, 53595, 55798, 53596, 53985, 54435, 53597, 53598, 62659, 51385, 53599, 53600, 53601, 53602, 53603, 62660, 53604, 53605, 61901, 61903, 49123, 61904, 53606, 53607, 61908, 53608, 53609, 53610, 53611, 53612, 53613, 53614, 61910, 61905, 53615, 51665, 50657, 53616, 53617, 53618, 49891, 47612, 53619, 53620, 61907, 53621, 61909, 53622, 53623, 53624, 47571, 53625, 53626, 53627, 53628, 53629, 53630, 53632, 61915, 53633, 53634, 53635, 53636, 53637, 47830, 53638, 45309, 61913, 53639, 53640, 53641, 53642, 53643, 61912, 61906, 61914, 53644, 53645, 53646, 53647, 53648, 61911, 53649, 53650, 53651, 51436, 53652, 53653, 53654, 53655, 52682, 61917, 53656, 53657, 53658, 53659, 58813, 53660, 53661, 53662, 61916, 53663, 61918, 53664, 53824, 53825, 53826, 53827, 53828, 53829, 53830, 53831, 53832, 61919, 53833, 53834, 53221, 53835, 53836, 53837, 53838, 53839, 53840, 53841, 53842, 53843, 53844, 53845, 53846, 53847, 53848, 53849, 53850, 53851, 53852, 53853, 53854, 53855, 53856, 53857, 53858, 53859, 62661, 48627, 53860, 53861, 53862, 53863, 53864, 53865, 61920, 53866, 53867, 53868, 53869, 53870, 53871, 53872, 53873, 53874, 53875, 53876, 53877, 53878, 53879, 53880, 53881, 53882, 53883, 53884, 53885, 61921, 53886, 53888, 53889, 52983, 53890, 53930, 53891, 61947, 53892, 53893, 47282, 53894, 53895, 53896, 53897, 53898, 53899, 53900, 53901, 53902, 53903, 53904, 53905, 53906, 53907, 53908, 53909, 53910, 53911, 53912, 53913, 53914, 53915, 53916, 53917, 53918, 53919, 53920, 54080, 54081, 54082, 54083, 54084, 54085, 54086, 54087, 54088, 54089, 54090, 54091, 54092, 54093, 54094, 54095, 54096, 54097, 54098, 54099, 54100, 54101, 54102, 54103, 54104, 54105, 54106, 54107, 54108, 54109, 54110, 48379, 47579, 54111, 47590, 50137, 51923, 60136, 49344, 48885, 60137, 60138, 60139, 54112, 60140, 60141, 60142, 60143, 48583, 54113, 54114, 54115, 62971, 54116, 54117, 54118, 62973, 54119, 62974, 54120, 62972, 54121, 54122, 54123, 54124, 48610, 54125, 63137, 46245, 54126, 54127, 54128, 54129, 63138, 54130, 54131, 54132, 63139, 54133, 54134, 54135, 60594, 54136, 54137, 54138, 54139, 54140, 54141, 54142, 54144, 54145, 54146, 54147, 54148, 53716, 54149, 54150, 54151, 54152, 54153, 54154, 55786, 54155, 54156, 54157, 54158, 54159, 54160, 54161, 54162, 54163, 54164, 54165, 54166, 54167, 54168, 54169, 54170, 54171, 54172, 54173, 54174, 54175, 54176, 54336, 54337, 54338, 54339, 54340, 54341, 54342, 54343, 54344, 54345, 54346, 54347, 54348, 54349, 54350, 54351, 54352, 54353, 54354, 54355, 54356, 54357, 54358, 54359, 54360, 54361, 54362, 54363, 54364, 54365, 54366, 54367, 63140, 54368, 54369, 54370, 54371, 54372, 54373, 54374, 54375, 54376, 61114, 54377, 54378, 54379, 54380, 54381, 54382, 54383, 54384, 54385, 54386, 54387, 54388, 54389, 54390, 54391, 54392, 54393, 54394, 54395, 54396, 54397, 54398, 54400, 54401, 54402, 54403, 54404, 54405, 54406, 54407, 54408, 54409, 54410, 54411, 54412, 54413, 54414, 54415, 54416, 54417, 54418, 54419, 54420, 54421, 54422, 54423, 54424, 54425, 54706, 54426, 54427, 54428, 54429, 54430, 54431, 54432, 54592, 54593, 54594, 54595, 54596, 54597, 54598, 54599, 54270, 52444, 54600, 54601, 54602, 54603, 54604, 54605, 54606, 54607, 51908, 54608, 54609, 54610, 54611, 54612, 54613, 54614, 54615, 54616, 54617, 54618, 54619, 54620, 54621, 54622, 54623, 54624, 54625, 54626, 54627, 54628, 54629, 54630, 54631, 54632, 54633, 54634, 54635, 54636, 54637, 54638, 54639, 54640, 54641, 54642, 54643, 54644, 54645, 54646, 54647, 54648, 54649, 54650, 54651, 54652, 54653, 54654, 54656, 54657, 54658, 54659, 54660, 54661, 54662, 54663, 54664, 54665, 54666, 54667, 54668, 54669, 54670, 54671, 54672, 54673, 54674, 54675, 54676, 54677, 54678, 54679, 54680, 54681, 54682, 54683, 54684, 54685, 54686, 54687, 54688, 54848, 54849, 54850, 54851, 54852, 54853, 54854, 54855, 54856, 54857, 54858, 54859, 54860, 54861, 54862, 54863, 54864, 54865, 54866, 54867, 54868, 54869, 54870, 54871, 54872, 54873, 54874, 54875, 54876, 54877, 54878, 54879, 54880, 54881, 54882, 58816, 54883, 54884, 54885, 54886, 54887, 54888, 54889, 54890, 54891, 54892, 54893, 54894, 54895, 54896, 54897, 54898, 54899, 54900, 54901, 54902, 54903, 54904, 54905, 54906, 54907, 54908, 54909, 54910, 54912, 54913, 63141, 54914, 54915, 54916, 54917, 54918, 54919, 54920, 54921, 54922, 54923, 54924, 54925, 54926, 54927, 54928, 54929, 54930, 54931, 54932, 54933, 54934, 54935, 54936, 54937, 54938, 54939, 54940, 54941, 54942, 54943, 54944, 55104, 55105, 55106, 55107, 55108, 55109, 55110, 55111, 55112, 55113, 55114, 55115, 55116, 55117, 55118, 55119, 55120, 55121, 55122, 55123, 55124, 55125, 55126, 55127, 55128, 55129, 55130, 55131, 55132, 55133, 55134, 55135, 48815, 55136, 55137, 55138, 55139, 55140, 50857, 55141, 55142, 55143, 55144, 55145, 55146, 55147, 55148, 55149, 55150, 55151, 55152, 55153, 55154, 55155, 55156, 55157, 55158, 55159, 55160, 55161, 55162, 55163, 55164, 55165, 55166, 55168, 55169, 55170, 55171, 55172, 55173, 55174, 55175, 55176, 55177, 55178, 55179, 55180, 55181, 55182, 55183, 55184, 55185, 55186, 55187, 55188, 55189, 55190, 55191, 55192, 55973, 48326, 46761, 47292, 51407, 48293, 55974, 55975, 52438, 51395, 55976, 50941, 55193, 53685, 53993, 53686, 48327, 55194, 48562, 48100, 55977, 55978, 53704, 55979, 53485, 46831, 49883, 55195, 52175, 47085, 51688, 47043, 48887, 54948, 55980, 55981, 50880, 55271, 51894, 55196, 54697, 52191, 54767, 55982, 55007, 46282, 55984, 55983, 55197, 53995, 55985, 55986, 55987, 51924, 55988, 51883, 55989, 55990, 46031, 55023, 55991, 48048, 46510, 55992, 55993, 47598, 53679, 53992, 55994, 47299, 53226, 45807, 55995, 55996, 55198, 48619, 52956, 54255, 55997, 52979, 55998, 54229, 48101, 55999, 52149, 52176, 56000, 51179, 55022, 56001, 50613, 46785, 56002, 47052, 49102, 56003, 56004, 52141, 56005, 46583, 56006, 49602, 55227, 56007, 52408, 55199, 53994, 50353, 56008, 46589, 48081, 56009, 53427, 56010, 56011, 52925, 56012, 56013, 56014, 45815, 56017, 56015, 53736, 56016, 50133, 56018, 55200, 56019, 56020, 56021, 53435, 53925, 45305, 56022, 51115, 56023, 48631, 50081, 56024, 56025, 50173, 52407, 56026, 56027, 49342, 50903, 56028, 56029, 51124, 56030, 56031, 47560, 55360, 55361, 55362, 55363, 55364, 55365, 55366, 55367, 55368, 48109, 55369, 55370, 55371, 55372, 46777, 62712, 55373, 62713, 55374, 55375, 52707, 55376, 55377, 55378, 55379, 55380, 55381, 55382, 55383, 62905, 55384, 55385, 55386, 55387, 60384, 55388, 55389, 55390, 55391, 55392, 55393, 53235, 48063, 55394, 55395, 55396, 55397, 55398, 55399, 55400, 47808, 54437, 55401, 55402, 55403, 55404, 55405, 55406, 55407, 57817, 55408, 55409, 55410, 55411, 62964, 45482, 45810, 55412, 55413, 55414, 55415, 55416, 55417, 55418, 62965, 55419, 55420, 62967, 55421, 55422, 55424, 47825, 62966, 55425, 50098, 55426, 55427, 55428, 55429, 55430, 55431, 55432, 62969, 55433, 55434, 55435, 62968, 55436, 55437, 55438, 55439, 55440, 55441, 55442, 55443, 55444, 55445, 55446, 55447, 55448, 55449, 55450, 55451, 55452, 55453, 55454, 55455, 55456, 55616, 55617, 55618, 55619, 55620, 55621, 55622, 55623, 55624, 55625, 55626, 55627, 55628, 55629, 55630, 55631, 55632, 55633, 55634, 55635, 55636, 55637, 55638, 55639, 55640, 55641, 55642, 55643, 55644, 55645, 55646, 55647, 55648, 55649, 55650, 55651, 55652, 55653, 55654, 55655, 55656, 55657, 55658, 55659, 55660, 55661, 55662, 55663, 55664, 55665, 55666, 55667, 55668, 55669, 55670, 55671, 55672, 55673, 55674, 55675, 55676, 55677, 55678, 55680, 55681, 55682, 55683, 55684, 55685, 55686, 55687, 55688, 55689, 55690, 55691, 55692, 55693, 55694, 55695, 55696, 55697, 55698, 55699, 55700, 55701, 55702, 55703, 55704, 55705, 55706, 55707, 55708, 55709, 55710, 55711, 55712, 55872, 55873, 55874, 55875, 55876, 55877, 55878, 55879, 55880, 55881, 55882, 55883, 55884, 55885, 55886, 45492, 54762, 47290, 55887, 47537, 45766, 54512, 53197, 45276, 54731, 48117, 54986, 47031, 52400, 50870, 45537, 47546, 55036, 47585, 47009, 48378, 60122, 60123, 52473, 47603, 60124, 46331, 50099, 47057, 47832, 60125, 54516, 60126, 48342, 48095, 60127, 49630, 49848, 54495, 55242, 60128, 60129, 60132, 60130, 60131, 51678, 47283, 46788, 60133, 51946, 51661, 46285, 55888, 55889, 58073, 50658, 60134, 49333, 55890, 55224, 60135, 55212, 51452, 55507, 55501, 54494, 55891, 54521, 51652, 54190, 47315, 46048, 55892, 51682, 62710, 55893, 55894, 55895, 47829, 55896, 62711, 55897, 55898, 55263, 55899, 55900, 62705, 47280, 54740, 47311, 50928, 55901, 55902, 55903, 55904, 55905, 55906, 55907, 55908, 55909, 46019, 55910, 55911, 62706, 45996, 55912, 55913, 55914, 55915, 54461, 51191, 55916, 55917, 55918, 55919, 55920, 62708, 55921, 55922, 62707, 55923, 55924, 55925, 55926, 55927, 55928, 55929, 55930, 55931, 55932, 52427, 55933, 55934, 55936, 51364, 55937, 55938, 55939, 55940, 55941, 55942, 55943, 55944, 55945, 55946, 55947, 55948, 55949, 62709, 55950, 55267, 50623, 62912, 55951, 55952, 62907, 55953, 62915, 55954, 62914, 55955, 54970, 62913, 55956, 55957, 55958, 54462, 62916, 55959, 62924, 55960, 55961, 55962, 55963, 45263, 46584, 55964, 62921, 62922, 55965, 50652, 55966, 55967, 55968, 56128, 62917, 62918, 56129, 56130, 62919, 62923, 56131, 48864, 62920, 47354, 56132, 56133, 56134, 62928, 62931, 56135, 56136, 56137, 49127, 56138, 47602, 62908, 62925, 56139, 56140, 49847, 56141, 56142, 56143, 52472, 56144, 48377, 56145, 62926, 62927, 62929, 46821, 62930, 56146, 62933, 56147, 56148, 56149, 56150, 56151, 56152, 56153, 62909, 56154, 56155, 56156, 62932, 54203, 56157, 46060, 56158, 56159, 52388, 56160, 56161, 56162, 56163, 62934, 56164, 56165, 56166, 56167, 56168, 56169, 56170, 56171, 62935, 48865, 62936, 56172, 56173, 52447, 62939, 56174, 56175, 56176, 56177, 56178, 45768, 55257, 56179, 62937, 56180, 62938, 62940, 56181, 62946, 56182, 56183, 56184, 62944, 56185, 56186, 56187, 62943, 62941, 56188, 56189, 62945, 56190, 56192, 62942, 62948, 62949, 56193, 52451, 56194, 56195, 58815, 46520, 62947, 62952, 52387, 56196, 56197, 56198, 56199, 56200, 62950, 62951, 56201, 56202, 56203, 56204, 56205, 56206, 62910, 56207, 56208, 56209, 56210, 56211, 56212, 56213, 56214, 56215, 56216, 56217, 56218, 45508, 56219, 56220, 62911, 56221, 56222, 46533, 45796, 56223, 62956, 62953, 56224, 46807, 56384, 62957, 56385, 62954, 56386, 56387, 56388, 56389, 56390, 62955, 56391, 56392, 46298, 56393, 54506, 56394, 56395, 56396, 62958, 56397, 46073, 56398, 56399, 56400, 56401, 56402, 56403, 56404, 62959, 62961, 56405, 56406, 56407, 62960, 56408, 56409, 56410, 56411, 56412, 56413, 56414, 62962, 56415, 62963, 56416, 56417, 56418, 56419, 56420, 56421, 56422, 56423, 56424, 56425, 56426, 56427, 51693, 47530, 56428, 56429, 51195, 56430, 56431, 46819, 56432, 56433, 56434, 56435, 56436, 56437, 56438, 52425, 56439, 56440, 56441, 56442, 56443, 56444, 56445, 56446, 56448, 56449, 56450, 56451, 56452, 56453, 56454, 56455, 56456, 56457, 56458, 60070, 56459, 56460, 56461, 56462, 56463, 56464, 56465, 56466, 56467, 56468, 56469, 56470, 56471, 56472, 56473, 56474, 56475, 56476, 56477, 56478, 56479, 56480, 56640, 56641, 56642, 56643, 56644, 56645, 56646, 56647, 56648, 56649, 56650, 56651, 56652, 56653, 56654, 56655, 56656, 56657, 56658, 56659, 56660, 56661, 56662, 56663, 56664, 56665, 56666, 56667, 56668, 56669, 56670, 56671, 56672, 56673, 56674, 56675, 56676, 56677, 56678, 56679, 56680, 56681, 56682, 56683, 56684, 56685, 56686, 56687, 56688, 56689, 56690, 56691, 56692, 56693, 56694, 56695, 56696, 56697, 56698, 56699, 56700, 56701, 56702, 56704, 56705, 56706, 56707, 56708, 56709, 56710, 56711, 56712, 56713, 56714, 56715, 56716, 56717, 56718, 56719, 56720, 56721, 56722, 56723, 56724, 56725, 56726, 56727, 56728, 56729, 56730, 56731, 56732, 56733, 56734, 56735, 56736, 56896, 56897, 56898, 56899, 56900, 56901, 56902, 56903, 56904, 56905, 56906, 56907, 56908, 56909, 56910, 56911, 56912, 56913, 56914, 56915, 56916, 56917, 56918, 56919, 56920, 56921, 56922, 56923, 56924, 56925, 56926, 56927, 56928, 46005, 54526, 47596, 53497, 56929, 59885, 55210, 59886, 49878, 51437, 47844, 59887, 59888, 59889, 55009, 59890, 59891, 59893, 59892, 59894, 59895, 51169, 59896, 54488, 59897, 48590, 56930, 59898, 59899, 48591, 59900, 47272, 49598, 59901, 45490, 48084, 47605, 59902, 56931, 60065, 60066, 60067, 47096, 48301, 56932, 51940, 57550, 54447, 53181, 54711, 60068, 54750, 60069, 53441, 47548, 56933, 46279, 45529, 56934, 56935, 56936, 49329, 56937, 56938, 56939, 56940, 45542, 45543, 56941, 45544, 56942, 56943, 56944, 56945, 46013, 51432, 56946, 56947, 56948, 56949, 58817, 56950, 56951, 45535, 56952, 56953, 56954, 49609, 46319, 56955, 56956, 51112, 54232, 56957, 50937, 53688, 56958, 47613, 49909, 56960, 56961, 56962, 56963, 56964, 54189, 56965, 54475, 48636, 56966, 58818, 47029, 58819, 56967, 56968, 48057, 54754, 56969, 48632, 54454, 52901, 49580, 46041, 56970, 56971, 52470, 56972, 58822, 58820, 58824, 56973, 58826, 58823, 46543, 50888, 56974, 46588, 58821, 56975, 51958, 56976, 56977, 58825, 56978, 56979, 56980, 50132, 45509, 48291, 56981, 56982, 56983, 55223, 56984, 56985, 52683, 52173, 51914, 52435, 58828, 58827, 50406, 56986, 56987, 53665, 53687, 58829, 56988, 58832, 56989, 52664, 55024, 58831, 46557, 56990, 52670, 56991, 58833, 46778, 56992, 57152, 52648, 47588, 57153, 51909, 46033, 52185, 54508, 58834, 47082, 57154, 57155, 57156, 58830, 57157, 57158, 57159, 57160, 57161, 57162, 58837, 46334, 58838, 57163, 57164, 57165, 57166, 57167, 58835, 58836, 57168, 53981, 57169, 57170, 49887, 45510, 57171, 54242, 57172, 57173, 46813, 52204, 57174, 58839, 57175, 57176, 54262, 57177, 57178, 57179, 57180, 57181, 45545, 57182, 46836, 58842, 58840, 58841, 46528, 57183, 57184, 57185, 53957, 58844, 57186, 57187, 58846, 57188, 57189, 57190, 57191, 57192, 57193, 58845, 51122, 57194, 53923, 57195, 57196, 58843, 57197, 57198, 57199, 57200, 54498, 54746, 57201, 57202, 57203, 57204, 57205, 58848, 55281, 57206, 57207, 57208, 57209, 57210, 57211, 57212, 58849, 57213, 45532, 53755, 57214, 58850, 58852, 57216, 57217, 57218, 57219, 58851, 57220, 57221, 58853, 57222, 57223, 57224, 57225, 57226, 53976, 57227, 46539, 57228, 59359, 57229, 56053, 57230, 56056, 57231, 56054, 57232, 56055, 57233, 57234, 57235, 56058, 53455, 50375, 57236, 57237, 45294, 57238, 57239, 57240, 53424, 57241, 56057, 57242, 54218, 47786, 56226, 51185, 57243, 56060, 56059, 51675, 56061, 57244, 56225, 55262, 56062, 49626, 57245, 57246, 56229, 57247, 57248, 54260, 57408, 57409, 56231, 56228, 57410, 56232, 57411, 57412, 48572, 57413, 57414, 57415, 49353, 56227, 56230, 54947, 57416, 56233, 57417, 57418, 57419, 56237, 57420, 57421, 57422, 56238, 56236, 47810, 57423, 57424, 57425, 49060, 56235, 57426, 57427, 57428, 56234, 54471, 45759, 57429, 57430, 56239, 57431, 47609, 57432, 56240, 57433, 57434, 57435, 57436, 46011, 57437, 57438, 57439, 46502, 57440, 57441, 57442, 57443, 46780, 56241, 57444, 57445, 57446, 46837, 57447, 56242, 57448, 57449, 57450, 57451, 57452, 57453, 57454, 57455, 57456, 57457, 57458, 57459, 57460, 57461, 57462, 57463, 57464, 57465, 57466, 57467, 45513, 57468, 57469, 57470, 57472, 56244, 57473, 57474, 57475, 56243, 56245, 57476, 57477, 57478, 57479, 57480, 57481, 57482, 57483, 57484, 57485, 57486, 56247, 57487, 56246, 57488, 57489, 57490, 57491, 57492, 57493, 57494, 56248, 57495, 57496, 57497, 57498, 57499, 57500, 57501, 57502, 57503, 56249, 57504, 57664, 56250, 57665, 57666, 54223, 62714, 51189, 55235, 50660, 62716, 62717, 62715, 57667, 48838, 57668, 57669, 57670, 57671, 53487, 57672, 57673, 47059, 57674, 57675, 54477, 52394, 57676, 57677, 62882, 62881, 47784, 62718, 52182, 57678, 57679, 57680, 62884, 49362, 57681, 46058, 57682, 52650, 62885, 62883, 48564, 62888, 57683, 62889, 48589, 50104, 49121, 52193, 62890, 57684, 57685, 57686, 62886, 62887, 50416, 57687, 57688, 57689, 57690, 57691, 62892, 57692, 46268, 57693, 55277, 57694, 46295, 62891, 62894, 57695, 57696, 62893, 62895, 53457, 57697, 57698, 57699, 57700, 57701, 57702, 57703, 50129, 51369, 57704, 57705, 57706, 57707, 57708, 57709, 62896, 62897, 57710, 57711, 57712, 57713, 57714, 57715, 62898, 57716, 57717, 62899, 62900, 62901, 57718, 57719, 57720, 57721, 62903, 62902, 57722, 57723, 57724, 57725, 62904, 57726, 57728, 57729, 57730, 57731, 57732, 57733, 57734, 57735, 57736, 57737, 57738, 45769, 57739, 54228, 51917, 57740, 49391, 55000, 53936, 49599, 57741, 48624, 57742, 57743, 57744, 57745, 57746, 57747, 57748, 57749, 57750, 57751, 47274, 57752, 57753, 57754, 57755, 57756, 57757, 57758, 57759, 57760, 57920, 57921, 57922, 57923, 57924, 57925, 57926, 57927, 57928, 57929, 57930, 57931, 57932, 57933, 57934, 57935, 57936, 57937, 57938, 57939, 57940, 57941, 57942, 57943, 57944, 57945, 57946, 57947, 57948, 57949, 57950, 57951, 57952, 57953, 57954, 57955, 57956, 57957, 57958, 57959, 57960, 57961, 57962, 57963, 57964, 57965, 57966, 57967, 57968, 57969, 57970, 57971, 57972, 57973, 57974, 57975, 57976, 57977, 57978, 57979, 57980, 57981, 57982, 57984, 57985, 57986, 57987, 57988, 57989, 57990, 57991, 57992, 57993, 57994, 57995, 57996, 57997, 57998, 57999, 58000, 58001, 58002, 58003, 58004, 58005, 58006, 58007, 58008, 58009, 58010, 58011, 58012, 58013, 58014, 58015, 58016, 58176, 58177, 58178, 58179, 58180, 58181, 58182, 58183, 58184, 58185, 58186, 58187, 58188, 58189, 58190, 58191, 58192, 58193, 58194, 58195, 58196, 58197, 58198, 58199, 58200, 58201, 58202, 58203, 58204, 58205, 58206, 58207, 58208, 58209, 58210, 58211, 58212, 58213, 58214, 58215, 58216, 58217, 58218, 58219, 58220, 58221, 48376, 58222, 58223, 58224, 58225, 58226, 58227, 58228, 58229, 58230, 58231, 58232, 58233, 58234, 58235, 58236, 58237, 58238, 58240, 58241, 58242, 58243, 58244, 58245, 58246, 58247, 63174, 58248, 58249, 58250, 58251, 58252, 58253, 58254, 58255, 58256, 58257, 58258, 58259, 58260, 58261, 58262, 58263, 58264, 58265, 58266, 58267, 58268, 58269, 58270, 58271, 58272, 58432, 58433, 58434, 58435, 58436, 58437, 63175, 58438, 58439, 58440, 58441, 58442, 58443, 58444, 58445, 58446, 58447, 58448, 58449, 58450, 58451, 58452, 58453, 58454, 58455, 58456, 58457, 58458, 58459, 58460, 58461, 58462, 63176, 58463, 58464, 58465, 58466, 58467, 58468, 58469, 58470, 58471, 58472, 58473, 58474, 58475, 58476, 58477, 58478, 58479, 58480, 58481, 58482, 58483, 58484, 58485, 58486, 58487, 58488, 58489, 58490, 58491, 58492, 58493, 58494, 58496, 58497, 58498, 58499, 58500, 58501, 58502, 58503, 58504, 58505, 58506, 58507, 58508, 58509, 58510, 58511, 58512, 58513, 58514, 58515, 58516, 58517, 58518, 58519, 58520, 58521, 58522, 58523, 58524, 58525, 58526, 58527, 58528, 58688, 58689, 58690, 58691, 58692, 58693, 58694, 58695, 58696, 58697, 58698, 58699, 58700, 58701, 58702, 58703, 58704, 58705, 58706, 58707, 58708, 58709, 58710, 58711, 58712, 58713, 58714, 58715, 58716, 58717, 58718, 58719, 58720, 58721, 58722, 58723, 58724, 58725, 58726, 58727, 58728, 58729, 58730, 58731, 58732, 58733, 58734, 58735, 58736, 58737, 58738, 58739, 63177, 58740, 58741, 58742, 58743, 58744, 58745, 58746, 58747, 58748, 58749, 58750, 58752, 58753, 58754, 58755, 58756, 58757, 58758, 58759, 58760, 58761, 58762, 58763, 58764, 58765, 58766, 58767, 58768, 58769, 58770, 58771, 58772, 58773, 58774, 58775, 58776, 58777, 58778, 58779, 58780, 58781, 58782, 58783, 63178, 58784, 58944, 58945, 58946, 58947, 58948, 58949, 58950, 58951, 58952, 58953, 58954, 58955, 58956, 58957, 58958, 58959, 58960, 58961, 58962, 58963, 58964, 58965, 58966, 58967, 58968, 58969, 58970, 58971, 58972, 58973, 58974, 58975, 58976, 58977, 58978, 63180, 58979, 58980, 58981, 58982, 58983, 58984, 58985, 58986, 58987, 58988, 58989, 58990, 58991, 58992, 58993, 58994, 58995, 58996, 58997, 58998, 58999, 59000, 59001, 59002, 59003, 59004, 59005, 59006, 59008, 59009, 59010, 59011, 59012, 59013, 59014, 59015, 59016, 59017, 59018, 59019, 59020, 59021, 59022, 59023, 59024, 59025, 59026, 59027, 59028, 59029, 59030, 59031, 59032, 59033, 59034, 59035, 59036, 59037, 63179, 59038, 59039, 59040, 59200, 59201, 59202, 59203, 59204, 59205, 59206, 59207, 63465, 59208, 59209, 59210, 59211, 59212, 59213, 59214, 59215, 59216, 59217, 59218, 59219, 59220, 59221, 59222, 59223, 59224, 59225, 59226, 59227, 59228, 59229, 59230, 59231, 59232, 59233, 59234, 59235, 59236, 59237, 59238, 59239, 59240, 59241, 59242, 59243, 59244, 59245, 59246, 59247, 59248, 59249, 59250, 59251, 59252, 59253, 59254, 59255, 59256, 59257, 59258, 59259, 59260, 59261, 59262, 59264, 59265, 59266, 59267, 59268, 59269, 59270, 59271, 59272, 59273, 59274, 59275, 59276, 59277, 59278, 59279, 59280, 59281, 59282, 59283, 59284, 59285, 59286, 59287, 59288, 59289, 59290, 59291, 59292, 59293, 59294, 59295, 59296, 59456, 59457, 59458, 59459, 59460, 59461, 59462, 59463, 59464, 59465, 59466, 59467, 59468, 59469, 59470, 63181, 59471, 59472, 59473, 59474, 59475, 59476, 59477, 59478, 59479, 59480, 59481, 59482, 59483, 59484, 59485, 59486, 59487, 59488, 59489, 59490, 59491, 59492, 59493, 59494, 59495, 59496, 59497, 59498, 59499, 59500, 59501, 59502, 59503, 59504, 59505, 59506, 59507, 59508, 59509, 59510, 59511, 59512, 59513, 59514, 63182, 59515, 59516, 59517, 59518, 59520, 59521, 59522, 59523, 59524, 59525, 59526, 59527, 59528, 59529, 59530, 59531, 59532, 59533, 59534, 59535, 59536, 59537, 59538, 59539, 59540, 61124, 61125, 61126, 54763, 46756, 61128, 61127, 61129, 61130, 51109, 61131, 61132, 59541, 47024, 46582, 61133, 61135, 59542, 61134, 59543, 47302, 61136, 61137, 61138, 46811, 45998, 54995, 50374, 45493, 47318, 61139, 61140, 54463, 51157, 48891, 52953, 47539, 61142, 61141, 61144, 61143, 50597, 61145, 61146, 51118, 61147, 51119, 61148, 45735, 61149, 61150, 61151, 61152, 61153, 55274, 61154, 61155, 48344, 61156, 54219, 52474, 45740, 49637, 61157, 51110, 50093, 59544, 61158, 61159, 61160, 61161, 61162, 61163, 61164, 59545, 61165, 61166, 61167, 59546, 59547, 61168, 61169, 61170, 61172, 61171, 59548, 61173, 52653, 49857, 61174, 61175, 61176, 54689, 61177, 53171, 61178, 61179, 59549, 61180, 61181, 61345, 61182, 61346, 47349, 50170, 61347, 61348, 48578, 53951, 45817, 61349, 61350, 61351, 54008, 61352, 55037, 61353, 50892, 59550, 61354, 61355, 49588, 61356, 53242, 52216, 61358, 61357, 46074, 47608, 61359, 61360, 53474, 61361, 61362, 47078, 53439, 61363, 61364, 61365, 51441, 52448, 61366, 61367, 61368, 61369, 61370, 54752, 61371, 46317, 50090, 61372, 59551, 61373, 61374, 61375, 59552, 52989, 61376, 49888, 46264, 55222, 48629, 59712, 53191, 61379, 61377, 61378, 61380, 46759, 48380, 48866, 50124, 61381, 61382, 59713, 61383, 61391, 61384, 61385, 61386, 51138, 61425, 46797, 61387, 59714, 61388, 61389, 46790, 50110, 61390, 59715, 61392, 61393, 61394, 54770, 59716, 61395, 50423, 59717, 61396, 50424, 61397, 61398, 47332, 45303, 61399, 61400, 61401, 59718, 61402, 61403, 61404, 61405, 59719, 61406, 48821, 61409, 61407, 61408, 59720, 61410, 61411, 49613, 61412, 61413, 61414, 61415, 61416, 61417, 61418, 61419, 61420, 49368, 59721, 61421, 49581, 61422, 61423, 61424, 59722, 59723, 53218, 59724, 59725, 59726, 59727, 59728, 59729, 59730, 59731, 45988, 59732, 59733, 59734, 59735, 59736, 59737, 59738, 59739, 59740, 59741, 59742, 59743, 59744, 59745, 59746, 59747, 59748, 59749, 59750, 59751, 59752, 59753, 59754, 59755, 59756, 59757, 59758, 59759, 59760, 59761, 59762, 59763, 59764, 59765, 59766, 59767, 59768, 59769, 59770, 59771, 59772, 59773, 59774, 59776, 59777, 59778, 59779, 59780, 59781, 59782, 59783, 59784, 59785, 59786, 59787, 59788, 59789, 59790, 59791, 59792, 59793, 59794, 59795, 59796, 59797, 59798, 59799, 59800, 59801, 59802, 59803, 59804, 59805, 59806, 59807, 59808, 59968, 59969, 59970, 59971, 59972, 59973, 59974, 59975, 59976, 59977, 59978, 59979, 59980, 59981, 59982, 59983, 59984, 59985, 59986, 59987, 59988, 59989, 59990, 59991, 59992, 59993, 59994, 59995, 50117, 58309, 51649, 58310, 59996, 45525, 52938, 46259, 51442, 58311, 53200, 58312, 48356, 58313, 58314, 50118, 54690, 50390, 47595, 52933, 58315, 50166, 58316, 59997, 47015, 47347, 47826, 58317, 58318, 54468, 58319, 59998, 58320, 53707, 58321, 58322, 58323, 58324, 53718, 58325, 45819, 49339, 58326, 59999, 49323, 58327, 58328, 58329, 60000, 58330, 58331, 60001, 47287, 56034, 60002, 46803, 60003, 56036, 56035, 60004, 60005, 60006, 60007, 60008, 60009, 60010, 56038, 60011, 60012, 60013, 51438, 60014, 60015, 56037, 47040, 53748, 54005, 54771, 48599, 60016, 60017, 60018, 60019, 55272, 56040, 56039, 60020, 45218, 52691, 60021, 56041, 60022, 47293, 48330, 49853, 49828, 46018, 56042, 60023, 49834, 50352, 48565, 60024, 60025, 53214, 60026, 60027, 60028, 56043, 51650, 60029, 60030, 60032, 60033, 60034, 45533, 60035, 60036, 60037, 56044, 60038, 46776, 54458, 60039, 46077, 60040, 60041, 56045, 54473, 53205, 50659, 60042, 56046, 60043, 60044, 60045, 60046, 60047, 56047, 60048, 56048, 49642, 52437, 53213, 60049, 60050, 60051, 60052, 60053, 60054, 60055, 60056, 60057, 60058, 60059, 60060, 60061, 54247, 49825, 60062, 56049, 60063, 60064, 52197, 60224, 56050, 60225, 52198, 54014, 60226, 60227, 60228, 47348, 60229, 60230, 56051, 45231, 53174, 60231, 60232, 54735, 60233, 60234, 60235, 60236, 60237, 60238, 60239, 60240, 60241, 60242, 52205, 60243, 60244, 60245, 60246, 60247, 60248, 60249, 60250, 56052, 60251, 60252, 58308, 60253, 60254, 49573, 60255, 60256, 63167, 60257, 60258, 63168, 63169, 50385, 60259, 51384, 53731, 60260, 60261, 53467, 53701, 48303, 47565, 60262, 61428, 60263, 60264, 46278, 54202, 63170, 46075, 60265, 60266, 63171, 60267, 60268, 46577, 60269, 60270, 60271, 60272, 60273, 60274, 60275, 60276, 60277, 60278, 63173, 60279, 60280, 60281, 60282, 60283, 60284, 60285, 54250, 63143, 53673, 60286, 60288, 60289, 60290, 63145, 60291, 60292, 60293, 63144, 60294, 60295, 49635, 49367, 60296, 45474, 60297, 60298, 60299, 60300, 52973, 60301, 53480, 63147, 60302, 60303, 53238, 60304, 63146, 54768, 63148, 50105, 60305, 60306, 60307, 48116, 63150, 63149, 60308, 60309, 60310, 50398, 60311, 60312, 49624, 60313, 60314, 60315, 60316, 60317, 52138, 60318, 53180, 60319, 60320, 60480, 60481, 60482, 60483, 60484, 60485, 60486, 60487, 60488, 63151, 60489, 60490, 63152, 60491, 60492, 63153, 60493, 49846, 60494, 60495, 60496, 60497, 60498, 45268, 50681, 60499, 60500, 60501, 60502, 63154, 60503, 60504, 60505, 60506, 60507, 60508, 60509, 60510, 60511, 60512, 60513, 60514, 60515, 60516, 60517, 60518, 60519, 60520, 60521, 51168, 63142, 60522, 60523, 48824, 60524, 60525, 48818, 60526, 46565, 60527, 60528, 47047, 60529, 49087, 50130, 50150, 60530, 60531, 55500, 60532, 60533, 60534, 47343, 60535, 60536, 60537, 60538, 60539, 60540, 60541, 60542, 60544, 48633, 53669, 60545, 45264, 60546, 60547, 60548, 60549, 60550, 63408, 60551, 60552, 60553, 60554, 60555, 60556, 60557, 60558, 63409, 60559, 60560, 60561, 60562, 60563, 53420, 60564, 45232, 60565, 60566, 60567, 63410, 63411, 60568, 63412, 60569, 60570, 60571, 51146, 60572, 60573, 60574, 60575, 60576, 60736, 60737, 48847, 60738, 60739, 63415, 60740, 60741, 60742, 60743, 60744, 60745, 60746, 63414, 60747, 45534, 60748, 63413, 60749, 60750, 63416, 60751, 63417, 60752, 60753, 60754, 60755, 60756, 60757, 60758, 60759, 60760, 60761, 60762, 60763, 60764, 60765, 60766, 60767, 60768, 60769, 60770, 60771, 60772, 60773, 60774, 60775, 60776, 60777, 60778, 60779, 60780, 60781, 60782, 60783, 60784, 60785, 60786, 60787, 60788, 60789, 60790, 60791, 60792, 60793, 60794, 60795, 60796, 60797, 60798, 60800, 60801, 52900, 51405, 60802, 47787, 59576, 59577, 59578, 48834, 60803, 60804, 60805, 60806, 60807, 54004, 60808, 54479, 51672, 60809, 60810, 60811, 60812, 60813, 60814, 60815, 60816, 60817, 60818, 60819, 60820, 60821, 60822, 60823, 60824, 60825, 60826, 60827, 60828, 60829, 60830, 60831, 60832, 60992, 60993, 60994, 60995, 60996, 60997, 60998, 60999, 61000, 61001, 61002, 61003, 61004, 61005, 61006, 61007, 61008, 61009, 61010, 61011, 61012, 61013, 61014, 61015, 61016, 61017, 61018, 61019, 61020, 61021, 61022, 61023, 61024, 61025, 61026, 61027, 61028, 61029, 61030, 61031, 61032, 61033, 61034, 61035, 61036, 61037, 61038, 61039, 61040, 61041, 61042, 61043, 61044, 61045, 61046, 61047, 61048, 61049, 61050, 61051, 61052, 61053, 61054, 61056, 61057, 61058, 61059, 61060, 61061, 61062, 61063, 61064, 61065, 61066, 61067, 61068, 61069, 61070, 61071, 61072, 61073, 61074, 61075, 61076, 61077, 61078, 61079, 61080, 61081, 61082, 61083, 61084, 61085, 61086, 61087, 61088, 61248, 61249, 61250, 61251, 61252, 61253, 53939, 46757, 51178, 61948, 53230, 52147, 53483, 59375, 52711, 47563, 46809, 61949, 45284, 52172, 61950, 54436, 49837, 49644, 50884, 48817, 62113, 48341, 61254, 62114, 62115, 61255, 62116, 53955, 50869, 61256, 52679, 62117, 61257, 54193, 49093, 52450, 61258, 62118, 62119, 53717, 46830, 62120, 62121, 46559, 62122, 62123, 61259, 45820, 62124, 62125, 51367, 61260, 61261, 61262, 61263, 61264, 61265, 61266, 61267, 61268, 61269, 61270, 61271, 61272, 61273, 61274, 61275, 61276, 61277, 61278, 61279, 61280, 61281, 61282, 61283, 61284, 61285, 61286, 61287, 61288, 61289, 61290, 61291, 61292, 61293, 61294, 61295, 61296, 61297, 47079, 61298, 61299, 60585, 60586, 60587, 61300, 60588, 61301, 61302, 50862, 60589, 60590, 61303, 61304, 61305, 47049, 51891, 61306, 61307, 61308, 61309, 61310, 61312, 61313, 58040, 63439, 61314, 61315, 61316, 61317, 61318, 61319, 61320, 61321, 61322, 61323, 61324, 61325, 61326, 61327, 61328, 61329, 61330, 61331, 61332, 61333, 61334, 61335, 61336, 61337, 61338, 61339, 61340, 61341, 61342, 61343, 61344, 61504, 61505, 61506, 61507, 61508, 63440, 61509, 61510, 45773, 61511, 61512, 61513, 61514, 61515, 61516, 61517, 61518, 61519, 61520, 61521, 61522, 61523, 61524, 61525, 61526, 61527, 61528, 61529, 61530, 61531, 61532, 61533, 61534, 61535, 61536, 61537, 61538, 61539, 63441, 61540, 61541, 61542, 61543, 61544, 61545, 61546, 61547, 61548, 61549, 61550, 61551, 61552, 61553, 61554, 61555, 61556, 61557, 61558, 61559, 61560, 61561, 61562, 61563, 61564, 61565, 61566, 61568, 61569, 61570, 61571, 61572, 61573, 61574, 61575, 61576, 61577, 63443, 63442, 61578, 61579, 61580, 61581, 61582, 61583, 61584, 61585, 61586, 61587, 61588, 61589, 61590, 58043, 61591, 48290, 61592, 58044, 58045, 58046, 58047, 58048, 58049, 47033, 54011, 48548, 51918, 45477, 52167, 61593, 58050, 46844, 51396, 58051, 61594, 61595, 48584, 61596, 45565, 58052, 61597, 46838, 58053, 50393, 61598, 61599, 58054, 53210, 47581, 58055, 49313, 61600, 58056, 45814, 61760, 58057, 61761, 49651, 58058, 58059, 49912, 58060, 58061, 58062, 51927, 55480, 55781, 53219, 61762, 61763, 61764, 61765, 61766, 61767, 61768, 61769, 61770, 61771, 61772, 61605, 61773, 61774, 56496, 61775, 61776, 61777, 61778, 61779, 61780, 61781, 61782, 61783, 61784, 61785, 61786, 61787, 61788, 61789, 61790, 61791, 61792, 61793, 61794, 61795, 61796, 61797, 61798, 61799, 61800, 61801, 61802, 61803, 61804, 61805, 61806, 61807, 61808, 61809, 61810, 61811, 61812, 61813, 61814, 61815, 61816, 61817, 61818, 61819, 61820, 61821, 61822, 61824, 61825, 61826, 61827, 61828, 61829, 61830, 61831, 61832, 61833, 61834, 61835, 61836, 61837, 61838, 61839, 61840, 61841, 61842, 61843, 61844, 61845, 61846, 61847, 61848, 61849, 61850, 61851, 61852, 61853, 61854, 61855, 61856, 62016, 62017, 62018, 62019, 62020, 62021, 62022, 62023, 62024, 62025, 62026, 62027, 62028, 62029, 62030, 62031, 62032, 62033, 62034, 62035, 62036, 62037, 62038, 62039, 62040, 62041, 62042, 62043, 62044, 62045, 62046, 62047, 62048, 62049, 62050, 62051, 62052, 62053, 62054, 62055, 62056, 62057, 62058, 62059, 62060, 62061, 62062, 62063, 62064, 62065, 62066, 62067, 62068, 62069, 62070, 62071, 62072, 62073, 62074, 62075, 62076, 62077, 62078, 62080, 62081, 62082, 62083, 62084, 62085, 62086, 62087, 62088, 62089, 62090, 62091, 62092, 62093, 62094, 62095, 62096, 62097, 62098, 62099, 62100, 62101, 62102, 62103, 62104, 62105, 62106, 62107, 62108, 62109, 62110, 62111, 62112, 62272, 62273, 62274, 62275, 62276, 62277, 62278, 62279, 62280, 62281, 62282, 62283, 62284, 62285, 62286, 62287, 62288, 62289, 49901, 54438, 52692, 53681, 46043, 51197, 62290, 45749, 49855, 59104, 51899, 59105, 59106, 48852, 59107, 55204, 52693, 59109, 48349, 59108, 59110, 59111, 49902, 62291, 48574, 59112, 49894, 47783, 59113, 62292, 59114, 46034, 53737, 62293, 62294, 49061, 59115, 50927, 59116, 59117, 62295, 62296, 59118, 50861, 59119, 62297, 51623, 59120, 59121, 59122, 58809, 59123, 59124, 49890, 59125, 59126, 55016, 59127, 62298, 59128, 47559, 62299, 62300, 62301, 62302, 62303, 62304, 62305, 63419, 63418, 62306, 62307, 62308, 62309, 63422, 63420, 47777, 62310, 63423, 62311, 63424, 62312, 62313, 62314, 63426, 63425, 63428, 62315, 62316, 63427, 62317, 62318, 62319, 62320, 62321, 63429, 63430, 62322, 62323, 62324, 62325, 63431, 62326, 52200, 62327, 62328, 62329, 62330, 47327, 62331, 62332, 62333, 62334, 62336, 62337, 63444, 62338, 63445, 62339, 62340, 62341, 62342, 63446, 62343, 62344, 62345, 62346, 63448, 62347, 63450, 62348, 63447, 62349, 62350, 62351, 62352, 62353, 62354, 62355, 62356, 62357, 63451, 62358, 63449, 62359, 62360, 62361, 62362, 62363, 62364, 62365, 55255, 62366, 62367, 62368, 62528, 63452, 62529, 62530, 62531, 62532, 62533, 62534, 63453, 62535, 62536, 62537, 63454, 62538, 62539, 62540, 62541, 62542, 62543, 62544, 62545, 62546, 62547, 62548, 63455, 62549, 62550, 62551, 63456, 62552, 62553, 62554, 62555, 62556, 62557, 62558, 62559, 62560, 62561, 62562, 56267, 62563, 62564, 55466, 62565, 62566, 62567, 62568, 62569, 62570, 62571, 62572, 58871, 47597, 62573, 62574, 62575, 62576, 49149, 48106, 63433, 50887, 63432, 62577, 63434, 63436, 63435, 62578, 62579, 62580, 63437, 62581, 52922, 62582, 63438, 62583, 62584, 50343, 62585, 62586, 62587, 62588, 62589, 62590, 62592, 62593, 62594, 62595, 62596, 62597, 62598, 62599, 62600, 62601, 62602, 62603, 62604, 62605, 62606, 62607, 62608, 62609, 62610, 62611, 62612, 62613, 62614, 62615, 62616, 62617, 62618, 62619, 62620, 62621, 62622, 62623, 62624, 62784, 62785, 62786, 62787, 62788, 62789, 62790, 62791, 62792, 62793, 62794, 62795, 62796, 62797, 62798, 62799, 62800, 62801, 62802, 62803, 62804, 62805, 62806, 62807, 62808, 62809, 62810, 62811, 62812, 62813, 62814, 62815, 62816, 62817, 62818, 62819, 62820, 62821, 62822, 62823, 62824, 62825, 62826, 62827, 62828, 62829, 62830, 62831, 62832, 62833, 62834, 62835, 62836, 62837, 62838, 62839, 62840, 62841, 62842, 62843, 62844, 62845, 62846, 62848, 62849, 62850, 62851, 62852, 62853, 62854, 62855, 62856, 62857, 62858, 62859, 62860, 62861, 62862, 62863, 62864, 62865, 62866, 62867, 62868, 62869, 62870, 62871, 62872, 62873, 62874, 62875, 62876, 62877, 62878, 62879, 62880, 63040, 63041, 63042, 63043, 63044, 63045, 63046, 63047, 63048, 63049, 63050, 63051, 63052, 63053, 63054, 63055, 63056, 63057, 63058, 63059, 63060, 63061, 63062, 63063, 63064, 63065, 63066, 63067, 63068, 63069, 63070, 63071, 63072, 63073, 63074, 63075, 63076, 63077, 63078, 63079, 63080, 63081, 63082, 63083, 63084, 63085, 63086, 63087, 63088, 63089, 63090, 63091, 63092, 63093, 63094, 63095, 63096, 63097, 63098, 63099, 63100, 63101, 63102, 63104, 63105, 63106, 63107, 63108, 63109, 63110, 63111, 63112, 63113, 63114, 63115, 63116, 63117, 63118, 63119, 63120, 63121, 63122, 63123, 63124, 63125, 63126, 63127, 63128, 63129, 63130, 63131, 63132, 63133, 63134, 63135, 63136, 63296, 63297, 63298, 63299, 63300, 63301, 63302, 63303, 63304, 63305, 63306, 63307, 63308, 63309, 63310, 63311, 63312, 63313, 63314, 63315, 63316, 63317, 63318, 63319, 63320, 63321, 63322, 63323, 63324, 63325, 63326, 63327, 63328, 63329, 63330, 63331, 63332, 63333, 63334, 63335, 63336, 63337, 63338, 63339, 63340, 63341, 63342, 63343, 63344, 63345, 63346, 63347, 63348, 63349, 63350, 63351, 63352, 63353, 63354, 63355, 63356, 63357, 63358, 63360, 54243, 63361, 63362, 63183, 63363, 49843, 63184, 63364, 63365, 63185, 63186, 63187, 63188, 63366, 63367, 63190, 63368, 45483, 63191, 63369, 63192, 63193, 63194, 63370, 63195, 63196, 63371, 63372, 63373, 63374, 63197, 63198, 53194, 63375, 63199, 63200, 63201, 63202, 63203, 63204, 49392, 63205, 63206, 63207, 63208, 63209, 63376, 63210, 63377, 63211, 63212, 63378, 63213, 63214, 63215, 63216, 63217, 63218, 63219, 63220, 48808, 63379, 63221, 63222, 63223, 63224, 63380, 63381, 63382, 63383, 63384, 51450, 63225, 63226, 63227, 63228, 63385, 63386, 63229, 63230, 63393, 63394, 63395, 63396, 63397, 63387, 63388, 63398, 63399, 63400, 45550, 63401, 63402, 63403, 63389, 63390, 63404, 63405, 49627, 63406, 63391, 63392, 63407, 63552, 63553, 63554, 63555, 63556, 63557, 63558, 63559, 63560, 63561, 63562, 63563, 63564, 63565, 63566, 63567, 63568, 63569, 63570, 63571, 63572, 63573, 63574, 63575, 63576, 63577, 63578, 63579, 63580, 63581, 63582, 63583, 63584, 63585, 63586, 63587, 63588, 63589, 63590, 63591, 63592, 63593, 63594, 63595, 63596, 63597, 63598, 63599, 63600, 63601, 63602, 63603, 63604, 63605, 63606, 63607, 63608, 63609, 63610, 63611, 63612, 63613, 63614, 63616, 63617, 63618, 63619, 63620, 63621, 63622, 63623, 63624, 63625, 63626, 63627, 63628, 63629, 63630, 63631, 63632, 63633, 63634, 63635, 63636, 63637, 63638, 63639, 63640, 63641, 63642, 63643, 63644, 63645, 63646, 63647, 63648, 63808, 63809, 63810, 63811, 63812, 63813, 63814, 63815, 63816, 63817, 63818, 63819, 63820, 63821, 63822, 63823, 63824, 63825, 63826, 63827, 63828, 63829, 63830, 63831, 63832, 63833, 63834, 63835, 63836, 63837, 63838, 63839, 63840, 63841, 63842, 63843, 63844, 63845, 63846, 63847, 63848, 63849, 63850, 63851, 63852, 63853, 63854, 63855, 63856, 63857, 63858, 63859, 63860, 63861, 63862, 63863, 63864, 63865, 63866, 63867, 63868, 63869, 63870, 63872, 63873, 63874, 63875, 63876, 63877, 63878, 63879, 63880, 63881, 63882, 63883, 63884, 63885, 63886, 63887, 63888, 63889, 63890, 63891, 63892, 63893, 63894, 63895, 63896, 63897, 63898, 63899, 63900, 63901, 63902, 63903, 63904, 64064, 64065, 64066, 64067, 64068, 64069, 64070, 64071, 64072, 64073, 64074, 64075, 64076, 64077, 64078, 64079, 64080, 64081, 64082, 64083, 64084, 64085, 64086, 64087, 64088, 64089, 64090, 64091, 64092, 64093, 64094, 64095, 64096, 64097, 64098, 64099, 64100, 64101, 64102, 64103, 64104, 64105, 64106, 64107, 64108, 64109, 64110, 64111, 64112, 64113, 64114, 64115, 64116, 64117, 64118, 64119, 64120, 64121, 64122, 64123, 64124, 64125, 64126, 64128, 64129, 64130, 64131, 64132, 64133, 64134, 64135, 64136, 64137, 64138, 64139, 64140, 64141, 64142, 64143, 64144, 64145, 64146, 64147, 64148, 64149, 64150, 64151, 64152, 64153, 64154, 64155, 64156, 64157, 64158, 64159, 64160, 64320, 64321, 64322, 64323, 64324, 64325, 64326, 64327, 64328, 64329, 64330, 64331, 64332, 64333, 64334, 64335, 64336, 64337, 64338, 64339, 64340, 64341, 64342, 64343, 64344, 64345, 64346, 64347, 50417, 61615, 48294, 61616, 50169, 64348, 50616, 53691, 64349, 61617, 61618, 61619, 61620, 61621, 53692, 64350, 53740, 64351, 61623, 61622, 54439, 64352, 52690, 61624, 61626, 61625, 61627, 61628, 64353, 64354, 47339, 61629, 47848, 64355, 61630, 61631, 48873, 61632, 46828, 61633, 61634, 61635, 61636, 51381, 61637, 61638, 64356, 61639, 50676, 64357, 61640, 64358, 64359, 64360, 61641, 64361, 61642, 63421, 64362, 61643, 61644, 61645, 64363, 61646, 64364, 64365, 64366, 64367, 61647, 47831, 64368, 61648, 61649, 61650, 61651, 61652, 61653, 61654, 61656, 64369, 64370, 54181, 61655, 64371, 61657, 64372, 64373, 64374, 64375, 64376, 64377, 64378, 64379, 64380, 64381, 62906, 49849, 64382, 64384, 63460, 64385, 64386, 64387, 64388, 63461, 63462, 64389, 64390, 63463, 64391, 64392, 64393, 64394, 64395, 64396, 63464, 49844, 64397, 64398, 64399, 64400, 64401, 64402, 64403, 64404, 64405, 63466, 64406, 63467, 64407, 64408, 64409, 64410, 64411, 64412, 49907, 64413, 64414, 64415, 64416, 64576, 64577, 64578, 64579, 64580, 64581, 64582, 64583, 64584, 62704, 64585, 64586, 64587, 62703, 64588, 64589, 49897, 64590, 63457, 63458, 64591, 64592, 64593, 64594, 64595, 48070, 64596, 64597, 64598, 64599, 55780, 64600, 64601, 64602, 51954, 49384, 61604, 64603, 47834, 64604, 64605, 51117, 64606, 64607, 64608, 50348, 64609, 64610, 63468, 63469, 63470, 64611, 63472, 63471, 64612, 63473, 64613, 64614, 63476, 64615, 63475, 64616, 63474, 63477, 64617, 64618, 64619, 64620, 63478, 64621, 64622, 64623, 64624, 64625, 64626, 64627, 64628, 64629, 60905, 64630, 60906, 60907, 64631, 63164, 64632, 64633, 64634, 64635, 64636, 64637, 64638, 64640, 64641, 64642, 64643, 64644, 63165, 64645, 63166, 46758, 64646, 55486, 64647, 64648, 47556, 64649, 64650, 64651, 55483, 64652, 56497, 64653, 64654, 64655, 64656, 64657, 64658, 51955, 64659, 63479, 64660, 64661, 64662, 64663, 64664, 64665, 64666, 64667, 64668, 63480, 64669, 64670, 63481, 64671, 64672, 64832, 64833, 64834, 64835, 64836, 63483, 64837, 63482, 64838, 45511, 64839, 63484, 63485, 64840, 64841, 64842, 64843, 64844, 63486, 64845, 64846, 64847, 64848, 64849, 64850, 64851, 64852, 64853, 64854, 64855, 50923, 60596, 64856, 64857, 64858, 64859, 64860, 64861, 64862, 64863, 64864, 64865, 64866, 64867, 64868, 64869, 64870, 64871, 64872, 64873, 64874, 64875, 64876, 64877, 64878, 64879, 64880, 64881, 64882, 64883, 64884, 64885, 64886, 64887, 64888, 64889, 64890, 64891, 64892, 64893, 64894, 64896, 64897, 64898, 64899, 64900, 64901, 46045, 63155, 64902, 64903, 63156, 49636, 63157, 63158, 63159, 63160, 63161, 63162, 51363, 63163, 64904, 64905, 64906, 64907, 64908, 64909, 64910, 64911, 64912, 64913, 64914, 64915, 49658, 47528, 60904, 64916, 64917, 64918, 47594, 55775, 64919, 64920, 64921, 64922, 64923]);
		encode1 = $toNativeArray($kindUint16, [43356, 0, 0, 43075, 41386, 43076, 41388, 0, 41390, 41391, 0, 0, 41392, 41393, 0, 0, 0, 0, 0, 0, 0, 43077, 41389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41451, 0, 41444, 41445, 0, 43078, 0, 0, 0, 0, 0, 41465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41446, 0, 43079, 0, 0, 0, 43080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41713, 41714, 41715, 41716, 41717, 41718, 41719, 41720, 41721, 41722, 41723, 41724, 0, 0, 0, 0, 41633, 41634, 41635, 41636, 41637, 41638, 41639, 41640, 41641, 41642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41467, 41468, 41466, 41469, 0, 0, 43081, 43082, 43083, 43084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41418, 0, 0, 0, 0, 0, 0, 41415, 0, 41414, 0, 0, 0, 43085, 0, 0, 0, 0, 41420, 0, 0, 41432, 41438, 43086, 41423, 0, 0, 43087, 0, 41422, 0, 41412, 41413, 41417, 41416, 41426, 0, 0, 41427, 0, 0, 0, 0, 0, 41440, 41439, 41411, 41419, 0, 0, 0, 0, 0, 41431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41430, 0, 0, 0, 41429, 0, 0, 0, 0, 0, 43088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41433, 41428, 0, 0, 41436, 41437, 43089, 43090, 0, 0, 0, 0, 0, 0, 41434, 41435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43154, 0, 0, 0, 41425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41689, 41690, 41691, 41692, 41693, 41694, 41695, 41696, 41697, 41698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41669, 41670, 41671, 41672, 41673, 41674, 41675, 41676, 41677, 41678, 41679, 41680, 41681, 41682, 41683, 41684, 41685, 41686, 41687, 41688, 41649, 41650, 41651, 41652, 41653, 41654, 41655, 41656, 41657, 41658, 41659, 41660, 41661, 41662, 41663, 41664, 41665, 41666, 41667, 41668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43428, 43429, 43430, 43431, 43432, 43433, 43434, 43435, 43436, 43437, 43438, 43439, 43440, 43441, 43442, 43443, 43444, 43445, 43446, 43447, 43448, 43449, 43450, 43451, 43452, 43453, 43454, 43455, 43456, 43457, 43458, 43459, 43460, 43461, 43462, 43463, 43464, 43465, 43466, 43467, 43468, 43469, 43470, 43471, 43472, 43473, 43474, 43475, 43476, 43477, 43478, 43479, 43480, 43481, 43482, 43483, 43484, 43485, 43486, 43487, 43488, 43489, 43490, 43491, 43492, 43493, 43494, 43495, 43496, 43497, 43498, 43499, 43500, 43501, 43502, 43503, 0, 0, 0, 0, 43092, 43093, 43094, 43095, 43096, 43097, 43098, 43099, 43100, 43101, 43102, 43103, 43104, 43105, 43106, 43107, 43108, 43109, 43110, 43111, 43112, 43113, 43114, 43115, 43116, 43117, 43118, 43119, 43120, 43121, 43122, 43123, 43124, 43125, 43126, 43127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43128, 43129, 43130, 43131, 43132, 43133, 43134, 43136, 43137, 43138, 43139, 43140, 43141, 43142, 43143, 0, 0, 0, 43144, 43145, 43146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41462, 41461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41464, 41463, 0, 0, 0, 0, 0, 0, 0, 0, 43147, 43148, 0, 0, 0, 0, 0, 0, 0, 0, 41460, 41459, 0, 0, 0, 41456, 0, 0, 41458, 41457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43149, 43150, 43151, 43152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41455, 41454, 0, 0, 43153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41442, 0, 41441]);
		encode2 = $toNativeArray($kindUint16, [41448, 0, 0, 41452, 41383, 0, 0, 0, 0, 0, 0, 0, 41443, 41408, 0, 0, 0, 0, 0, 41380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41409, 0, 0, 0, 0, 0, 0, 0, 0, 43172, 43170, 0, 0, 0, 0, 0, 0, 43176, 43174, 43194, 0, 43180, 43178, 0, 0, 0, 0, 43184, 43182, 0, 0, 0, 41410, 0, 43188, 43186, 0, 43193, 0, 0, 0, 0, 43169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43173, 0, 0, 0, 0, 0, 0, 0, 43175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43197, 0, 0, 0, 43198, 0, 0, 0, 0, 43181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43171, 0, 43179, 0, 43183, 0, 43187, 0, 43189, 0, 43190, 0, 43191, 0, 43192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41382, 0, 41381, 43072, 43073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42657, 42658, 42659, 42660, 42661, 42662, 42663, 42664, 42665, 42666, 42667, 42668, 42669, 42670, 42671, 42672, 42673, 0, 42674, 42675, 42676, 42677, 42678, 42679, 42680, 0, 0, 0, 0, 0, 0, 0, 42689, 42690, 42691, 42692, 42693, 42694, 42695, 42696, 42697, 42698, 42699, 42700, 42701, 42702, 42703, 42704, 42705, 0, 42706, 42707, 42708, 42709, 42710, 42711, 42712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42913, 42914, 42915, 42916, 42917, 42918, 42920, 42921, 42922, 42923, 42924, 42925, 42926, 42927, 42928, 42929, 42930, 42931, 42932, 42933, 42934, 42935, 42936, 42937, 42938, 42939, 42940, 42941, 42942, 42943, 42944, 42945, 42961, 42962, 42963, 42964, 42965, 42966, 42968, 42969, 42970, 42971, 42972, 42973, 42974, 42975, 42976, 42977, 42978, 42979, 42980, 42981, 42982, 42983, 42984, 42985, 42986, 42987, 42988, 42989, 42990, 42991, 42992, 42993, 0, 42967]);
		encode3 = $toNativeArray($kindUint16, [43349, 42738, 0, 42740, 42741, 42720, 42721, 42736, 42737, 42722, 42723, 42734, 42735, 42726, 42727, 42724, 42725, 42728, 42729, 42730, 42731, 0, 0, 0, 0, 43368, 43369, 43370, 43371, 43372, 43373, 43374, 43375, 43376, 43377, 0, 43378, 43379, 43380, 43381, 0, 43382, 43383, 43384, 43385, 43386, 43387, 43388, 43389, 43390, 43392, 43393, 43394, 43395, 43396, 0, 43397, 43398, 43399, 43400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41889, 41890, 41891, 41447, 41893, 41894, 41895, 41896, 41897, 41898, 41899, 41900, 41901, 41902, 41903, 41904, 41905, 41906, 41907, 41908, 41909, 41910, 41911, 41912, 41913, 41914, 41915, 41916, 41917, 41918, 41919, 41920, 41921, 41922, 41923, 41924, 41925, 41926, 41927, 41928, 41929, 41930, 41931, 41932, 41933, 41934, 41935, 41936, 41937, 41938, 41939, 41940, 41941, 41942, 41943, 41944, 41945, 41946, 41947, 41948, 41949, 41950, 41951, 41952, 41953, 41954, 41955, 41956, 41957, 41958, 41959, 41960, 41961, 41962, 41963, 41964, 41965, 41966, 41967, 41968, 41969, 41970, 41971, 41972, 41973, 41974, 41975, 41976, 41977, 41978, 41979, 41980, 41981, 41387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41449, 41450, 43350, 41982, 43351, 41892]);
		encode4 = $toNativeArray($kindUint16, [64924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65088, 65089, 65090, 65091, 0, 65092, 0, 65093, 65094, 0, 0, 0, 65095, 0, 0, 0, 0, 0, 0, 65096, 65097, 65098, 0, 65099, 65100, 0, 0, 65101, 65102, 65103]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/traditionalchinese"] = (function() {
	var $pkg = {}, $init, errors, encoding, internal, identifier, transform, utf8, big5Decoder, big5Encoder, sliceType$1, big5, big5_ptr, errInvalidBig5, decode, encode0, encode1, encode2, encode3, encode4, encode5, encode6, encode7, x, x$1, init;
	errors = $packages["errors"];
	encoding = $packages["golang.org/x/text/encoding"];
	internal = $packages["golang.org/x/text/encoding/internal"];
	identifier = $packages["golang.org/x/text/encoding/internal/identifier"];
	transform = $packages["golang.org/x/text/transform"];
	utf8 = $packages["unicode/utf8"];
	big5Decoder = $pkg.big5Decoder = $newType(0, $kindStruct, "traditionalchinese.big5Decoder", "big5Decoder", "golang.org/x/text/encoding/traditionalchinese", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	big5Encoder = $pkg.big5Encoder = $newType(0, $kindStruct, "traditionalchinese.big5Encoder", "big5Encoder", "golang.org/x/text/encoding/traditionalchinese", function(NopResetter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NopResetter = new transform.NopResetter.ptr();
			return;
		}
		this.NopResetter = NopResetter_;
	});
	sliceType$1 = $sliceType($Uint8);
	big5Decoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, atEOF, c0, c1, dst, err, i, nDst, nSrc, r, s, size, src, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; _tmp$2 = ""; r = _tmp; size = _tmp$1; s = _tmp$2;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			c0 = ((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]);
			/* */ if (c0 < 128) { $s = 3; continue; }
			/* */ if (129 <= c0 && c0 < 255) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (c0 < 128) { */ case 3:
				_tmp$3 = (c0 >> 0); _tmp$4 = 1; r = _tmp$3; size = _tmp$4;
				$s = 6; continue;
			/* } else if (129 <= c0 && c0 < 255) { */ case 4:
				if ((nSrc + 1 >> 0) >= src.$length) {
					err = transform.ErrShortSrc;
					/* break loop; */ $s = 2; continue s;
				}
				c1 = (x$2 = nSrc + 1 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2]));
				if (64 <= c1 && c1 < 127) {
					c1 = c1 - (64) << 24 >>> 24;
				} else if (161 <= c1 && c1 < 255) {
					c1 = c1 - (98) << 24 >>> 24;
				} else {
					err = errInvalidBig5;
					/* break loop; */ $s = 2; continue s;
				}
				_tmp$5 = 65533; _tmp$6 = 2; r = _tmp$5; size = _tmp$6;
				i = (((c0 - 129 << 24 >>> 24) >> 0) * 157 >> 0) + (c1 >> 0) >> 0;
				/* */ if (i < 19782) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (i < 19782) { */ case 7:
					/* */ if (1133 <= i && i < 1167) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (1133 <= i && i < 1167) { */ case 9:
						_ref = i;
						/* */ if (_ref === 1133) { $s = 11; continue; }
						/* */ if (_ref === 1135) { $s = 12; continue; }
						/* */ if (_ref === 1164) { $s = 13; continue; }
						/* */ if (_ref === 1166) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (_ref === 1133) { */ case 11:
							s = "\xC3\x8A\xCC\x84";
							/* goto writeStr */ $s = 16; continue;
							$s = 15; continue;
						/* } else if (_ref === 1135) { */ case 12:
							s = "\xC3\x8A\xCC\x8C";
							/* goto writeStr */ $s = 16; continue;
							$s = 15; continue;
						/* } else if (_ref === 1164) { */ case 13:
							s = "\xC3\xAA\xCC\x84";
							/* goto writeStr */ $s = 16; continue;
							$s = 15; continue;
						/* } else if (_ref === 1166) { */ case 14:
							s = "\xC3\xAA\xCC\x8C";
							/* goto writeStr */ $s = 16; continue;
						/* } */ case 15:
					/* } */ case 10:
					r = (((i < 0 || i >= decode.length) ? $throwRuntimeError("index out of range") : decode[i]) >> 0);
					if (r === 0) {
						r = 65533;
					}
				/* } */ case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errInvalidBig5;
				/* break loop; */ $s = 2; continue s;
			/* } */ case 6:
			if ((nDst + utf8.RuneLen(r) >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break loop; */ $s = 2; continue s;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue loop; */ $s = 1; continue s;
			/* writeStr: */ case 16:
			if ((nDst + s.length >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break loop; */ $s = 2; continue s;
			}
			nDst = nDst + ($copyString($subslice(dst, nDst), s)) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue loop; */ $s = 1; continue s;
		/* } */ $s = 1; continue; case 2:
		if (atEOF && $interfaceIsEqual(err, transform.ErrShortSrc)) {
			err = errInvalidBig5;
		}
		_tmp$7 = nDst; _tmp$8 = nSrc; _tmp$9 = err; nDst = _tmp$7; nSrc = _tmp$8; err = _tmp$9;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	big5Decoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	big5Encoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, atEOF, dst, err, nDst, nSrc, r, size, src, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; r = _tmp; size = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(nSrc < src.$length)) { break; } */ if(!(nSrc < src.$length)) { $s = 2; continue; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			if (r < 128) {
				size = 1;
			} else {
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						/* break; */ $s = 2; continue;
					}
				}
			}
			/* */ if (r >= 128) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r >= 128) { */ case 3:
				/* */ if (131105 <= r && r < 173738) { $s = 5; continue; }
				/* */ if (11904 <= r && r < 40908) { $s = 6; continue; }
				/* */ if (7870 <= r && r < 10046) { $s = 7; continue; }
				/* */ if (167 <= r && r < 1106) { $s = 8; continue; }
				/* */ if (65072 <= r && r < 65518) { $s = 9; continue; }
				/* */ if (194597 <= r && r < 195029) { $s = 10; continue; }
				/* */ if (63751 <= r && r < 64014) { $s = 11; continue; }
				/* */ if (175615 <= r && r < 175616) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (131105 <= r && r < 173738) { */ case 5:
					r = ((x$2 = r - 131105 >> 0, ((x$2 < 0 || x$2 >= encode0.length) ? $throwRuntimeError("index out of range") : encode0[x$2])) >> 0);
					/* */ if (!((r === 0))) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!((r === 0))) { */ case 14:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 15:
					$s = 13; continue;
				/* } else if (11904 <= r && r < 40908) { */ case 6:
					r = ((x$3 = r - 11904 >> 0, ((x$3 < 0 || x$3 >= encode1.length) ? $throwRuntimeError("index out of range") : encode1[x$3])) >> 0);
					/* */ if (!((r === 0))) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!((r === 0))) { */ case 17:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 18:
					$s = 13; continue;
				/* } else if (7870 <= r && r < 10046) { */ case 7:
					r = ((x$4 = r - 7870 >> 0, ((x$4 < 0 || x$4 >= encode2.length) ? $throwRuntimeError("index out of range") : encode2[x$4])) >> 0);
					/* */ if (!((r === 0))) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!((r === 0))) { */ case 19:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 20:
					$s = 13; continue;
				/* } else if (167 <= r && r < 1106) { */ case 8:
					r = ((x$5 = r - 167 >> 0, ((x$5 < 0 || x$5 >= encode3.length) ? $throwRuntimeError("index out of range") : encode3[x$5])) >> 0);
					/* */ if (!((r === 0))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!((r === 0))) { */ case 21:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 22:
					$s = 13; continue;
				/* } else if (65072 <= r && r < 65518) { */ case 9:
					r = ((x$6 = r - 65072 >> 0, ((x$6 < 0 || x$6 >= encode4.length) ? $throwRuntimeError("index out of range") : encode4[x$6])) >> 0);
					/* */ if (!((r === 0))) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (!((r === 0))) { */ case 23:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 24:
					$s = 13; continue;
				/* } else if (194597 <= r && r < 195029) { */ case 10:
					r = ((x$7 = r - 194597 >> 0, ((x$7 < 0 || x$7 >= encode5.length) ? $throwRuntimeError("index out of range") : encode5[x$7])) >> 0);
					/* */ if (!((r === 0))) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!((r === 0))) { */ case 25:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 26:
					$s = 13; continue;
				/* } else if (63751 <= r && r < 64014) { */ case 11:
					r = ((x$8 = r - 63751 >> 0, ((x$8 < 0 || x$8 >= encode6.length) ? $throwRuntimeError("index out of range") : encode6[x$8])) >> 0);
					/* */ if (!((r === 0))) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!((r === 0))) { */ case 27:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 28:
					$s = 13; continue;
				/* } else if (175615 <= r && r < 175616) { */ case 12:
					r = ((x$9 = r - 175615 >> 0, ((x$9 < 0 || x$9 >= encode7.length) ? $throwRuntimeError("index out of range") : encode7[x$9])) >> 0);
					/* */ if (!((r === 0))) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (!((r === 0))) { */ case 29:
						/* goto write2 */ $s = 16; continue;
					/* } */ case 30:
				/* } */ case 13:
				r = 26;
			/* } */ case 4:
			if (nDst >= dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			((nDst < 0 || nDst >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + nDst] = (r << 24 >>> 24));
			nDst = nDst + (1) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
			/* write2: */ case 16:
			if ((nDst + 2 >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				/* break; */ $s = 2; continue;
			}
			(x$10 = nDst + 0 >> 0, ((x$10 < 0 || x$10 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$10] = ((r >> 8 >> 0) << 24 >>> 24)));
			(x$11 = nDst + 1 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = (r << 24 >>> 24)));
			nDst = nDst + (2) >> 0;
			nSrc = nSrc + (size) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = nDst; _tmp$3 = nSrc; _tmp$4 = err; nDst = _tmp$2; nSrc = _tmp$3; err = _tmp$4;
		return [nDst, nSrc, err];
		/* */ $s = -1; case -1: } return; }
	};
	big5Encoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	init = function() {
		var $ptr;
	};
	big5Decoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	big5Encoder.methods = [{prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType$1, sliceType$1, $Bool], [$Int, $Int, $error], false)}];
	big5Decoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	big5Encoder.init([{prop: "NopResetter", name: "", pkg: "", typ: transform.NopResetter, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = internal.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = identifier.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		big5 = new internal.Encoding.ptr(new internal.SimpleEncoding.ptr((x = new big5Decoder.ptr(new transform.NopResetter.ptr()), new x.constructor.elem(x)), (x$1 = new big5Encoder.ptr(new transform.NopResetter.ptr()), new x$1.constructor.elem(x$1))), "Big5", 2026);
		$pkg.Big5 = big5;
		errInvalidBig5 = errors.New("traditionalchinese: invalid Big5 encoding");
		decode = $toNativeArray($kindUint
		encode0 = $toNativeArray($kindUint
		encode1 = $toNativeArray($kindUint16, [51414, 0, 0, 0, 51415, 0, 51416, 51417, 51418, 0, 51419, 0, 51420, 51421, 0, 0, 0, 0, 0, 0, 0, 51422, 0, 0, 0, 0, 0, 0, 51423, 51424, 0, 0, 0, 0, 0, 0, 0, 51425, 0, 51426, 0, 0, 51427, 0, 51428, 0, 51429, 0, 0, 0, 0, 0, 0, 0, 51430, 0, 0, 0, 0, 0, 51431, 0, 51432, 0, 0, 0, 0, 0, 0, 0, 51433, 0, 0, 0, 51434, 0, 51435, 51436, 0, 51437, 0, 0, 0, 0, 0, 0, 51438, 51439, 0, 0, 0, 0, 0, 0, 51440, 0, 0, 0, 0, 51441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41280, 41282, 41283, 50910, 0, 50912, 50913, 50914, 41329, 41330, 41325, 41326, 41333, 41334, 41337, 41338, 41321, 41322, 41541, 0, 41317, 41318, 0, 0, 0, 0, 0, 0, 0, 41385, 41386, 0, 0, 41667, 41668, 41669, 41670, 41671, 41672, 41673, 41674, 41675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50919, 50920, 50921, 50922, 50923, 50924, 50925, 50926, 50927, 50928, 50929, 50930, 50931, 50932, 50933, 50934, 50935, 50936, 50937, 50938, 50939, 50940, 50941, 50942, 51008, 51009, 51010, 51011, 51012, 51013, 51014, 51015, 51016, 51017, 51018, 51019, 51020, 51021, 51022, 51023, 51024, 51025, 51026, 51027, 51028, 51029, 51030, 51031, 51032, 51033, 51034, 51035, 51036, 51037, 51038, 51039, 51040, 51041, 51042, 51043, 51044, 51045, 51046, 51047, 51048, 51049, 51050, 51051, 51052, 51053, 51054, 51055, 51056, 51057, 51058, 51059, 51060, 51061, 51062, 51063, 51064, 51065, 51066, 0, 0, 0, 0, 0, 0, 0, 51412, 51413, 50908, 50909, 0, 0, 51067, 51068, 51069, 51070, 51105, 51106, 51107, 51108, 51109, 51110, 51111, 51112, 51113, 51114, 51115, 51116, 51117, 51118, 51119, 51120, 51121, 51122, 51123, 51124, 51125, 51126, 51127, 51128, 51129, 51130, 51131, 51132, 51133, 51134, 51135, 51136, 51137, 51138, 51139, 51140, 51141, 51142, 51143, 51144, 51145, 51146, 51147, 51148, 51149, 51150, 51151, 51152, 51153, 51154, 51155, 51156, 51157, 51158, 51159, 51160, 51161, 51162, 51163, 51164, 51165, 51166, 51167, 51168, 51169, 51170, 51171, 51172, 51173, 51174, 51175, 51176, 51177, 51178, 51179, 51180, 51181, 51182, 51183, 51184, 51185, 51186, 0, 0, 0, 0, 0, 50915, 50906, 50907, 0, 0, 0, 0, 0, 0, 41844, 41845, 41846, 41847, 41848, 41849, 41850, 41851, 41852, 41853, 41854, 41889, 41890, 41891, 41892, 41893, 41894, 41895, 41896, 41897, 41898, 41899, 41900, 41901, 41902, 41903, 41904, 41905, 41906, 41907, 41908, 41909, 41910, 41911, 41912, 41913, 41914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34880, 34881, 34882, 34883, 34884, 34886, 34889, 34890, 34893, 34895, 34896, 34897, 34898, 34900, 34901, 51321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41557, 41558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41552, 41553, 41554, 0, 0, 41556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41555, 0, 0, 41451, 41450, 0, 0, 41551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36084, 0, 35285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39903, 0, 0, 0, 0, 0, 0, 64104, 0, 0, 35290, 36697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35291, 0, 0, 36701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35546, 0, 0, 0, 0, 35804, 0, 0, 0, 0, 0, 0, 38875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40531, 0, 0, 0, 0, 40362, 0, 34750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35304, 0, 35306, 0, 0, 0, 0, 0, 35915, 0, 0, 0, 0, 0, 0, 0, 64368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35309, 0, 0, 38109, 0, 35310, 0, 0, 0, 0, 40628, 35539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38107, 35321, 0, 0, 0, 0, 0, 0, 0, 0, 64378, 0, 0, 0, 35323, 0, 0, 0, 0, 0, 0, 0, 40700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35324, 0, 35263, 0, 0, 0, 35326, 0, 35302, 0, 0, 40262, 0, 0, 0, 40430, 0, 0, 0, 41086, 0, 0, 0, 41064, 0, 0, 0, 0, 39145, 0, 35688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36349, 35774, 40921, 0, 0, 0, 0, 0, 0, 0, 35563, 0, 0, 40919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40028, 0, 35761, 0, 0, 0, 0, 0, 0, 0, 0, 64350, 0, 34672, 0, 0, 0, 0, 0, 0, 0, 40435, 0, 0, 0, 0, 0, 0, 0, 41168, 0, 0, 0, 64614, 0, 0, 0, 0, 37609, 0, 0, 0, 0, 0, 0, 0, 0, 39660, 36779, 64072, 0, 0, 0, 0, 36421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40047, 0, 36188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40670, 0, 0, 0, 0, 0, 0, 35311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40635, 0, 0, 0, 0, 38110, 0, 40632, 0, 0, 0, 38842, 64357, 0, 0, 0, 38358, 0, 0, 0, 40123, 0, 0, 38874, 0, 0, 0, 0, 36677, 0, 64381, 37208, 65124, 0, 38998, 39757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37723, 38343, 0, 38887, 0, 0, 0, 0, 0, 0, 37721, 0, 0, 0, 37365, 38840, 0, 0, 64930, 64438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37719, 0, 35750, 0, 0, 0, 0, 64441, 0, 38832, 0, 0, 64964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40097, 0, 0, 0, 0, 0, 37362, 37369, 0, 36849, 0, 0, 0, 0, 0, 0, 38725, 38995, 0, 0, 65144, 0, 64449, 37457, 0, 0, 0, 0, 0, 0, 40365, 0, 0, 0, 0, 0, 64876, 0, 0, 64107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35680, 0, 0, 0, 0, 0, 0, 0, 0, 37707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39613, 0, 0, 0, 0, 37303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38324, 0, 0, 0, 0, 0, 65221, 0, 0, 40688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37481, 0, 0, 0, 0, 0, 0, 36199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64490, 0, 0, 0, 0, 0, 0, 0, 0, 64495, 0, 36200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37222, 0, 0, 0, 0, 0, 0, 0, 0, 64205, 0, 0, 0, 0, 37853, 0, 0, 36178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36083, 0, 0, 0, 0, 0, 0, 0, 36960, 0, 0, 0, 0, 0, 0, 0, 0, 36212, 38851, 0, 0, 0, 0, 0, 0, 0, 35536, 0, 0, 0, 0, 0, 0, 37492, 0, 39870, 0, 0, 0, 0, 0, 40136, 0, 0, 40122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40633, 0, 0, 0, 0, 0, 38234, 0, 0, 37300, 0, 0, 0, 0, 0, 0, 35400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36221, 0, 0, 35453, 0, 0, 35522, 0, 0, 64842, 0, 36257, 0, 0, 35537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64692, 35655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37796, 40666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36262, 0, 0, 0, 0, 0, 0, 40645, 0, 0, 0, 0, 64708, 0, 0, 0, 0, 41080, 0, 38069, 0, 0, 0, 0, 0, 0, 0, 64706, 35435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64585, 0, 37825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36975, 0, 36272, 0, 0, 34722, 0, 0, 0, 0, 0, 38014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38009, 0, 0, 0, 0, 0, 0, 0, 0, 36274, 0, 0, 0, 0, 0, 0, 0, 0, 64750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39291, 0, 0, 0, 0, 0, 0, 0, 0, 36276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36279, 0, 0, 0, 0, 0, 0, 0, 37299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36283, 36282, 0, 0, 0, 0, 0, 0, 0, 0, 36284, 36932, 0, 0, 0, 64844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34635, 37860, 0, 0, 37856, 0, 0, 0, 0, 0, 0, 0, 64851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36291, 0, 39864, 0, 0, 0, 64496, 0, 37865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37878, 0, 0, 0, 0, 0, 36293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36298, 0, 0, 0, 0, 0, 36300, 64861, 37813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64865, 0, 0, 0, 40184, 0, 0, 0, 37458, 0, 0, 41192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36310, 0, 38848, 0, 0, 0, 41182, 0, 0, 0, 0, 38866, 0, 0, 0, 0, 0, 64165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64931, 0, 0, 0, 36315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36074, 36527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64841, 0, 0, 0, 0, 0, 0, 0, 0, 64977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36331, 0, 0, 0, 0, 0, 38854, 0, 64974, 0, 0, 37116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64601, 0, 0, 38614, 0, 0, 0, 0, 0, 0, 38853, 36335, 0, 0, 0, 0, 38871, 0, 0, 0, 0, 0, 36336, 0, 0, 0, 0, 0, 0, 0, 38566, 0, 0, 0, 0, 0, 0, 0, 64447, 0, 0, 36063, 0, 36339, 0, 0, 0, 0, 37961, 0, 36341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39026, 0, 0, 0, 0, 0, 0, 0, 36459, 0, 0, 0, 0, 0, 0, 64253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36688, 0, 0, 0, 0, 0, 0, 40396, 64613, 0, 35908, 0, 0, 39278, 38049, 0, 0, 0, 0, 0, 36707, 0, 0, 0, 0, 0, 0, 0, 41178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37459, 65001, 0, 0, 40373, 0, 0, 0, 0, 0, 0, 0, 39033, 34666, 0, 0, 40285, 0, 0, 0, 0, 36195, 38505, 0, 0, 0, 0, 0, 0, 0, 0, 40816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64618, 0, 0, 35527, 0, 0, 0, 0, 35287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65275, 39100, 64204, 0, 0, 38320, 0, 0, 0, 37988, 0, 0, 0, 0, 0, 0, 37743, 0, 0, 0, 0, 0, 0, 38073, 0, 0, 38380, 0, 0, 0, 0, 37358, 0, 0, 39107, 0, 38390, 0, 0, 0, 36861, 39109, 0, 0, 0, 0, 38758, 65134, 0, 0, 38877, 36010, 0, 0, 37586, 0, 0, 38753, 39115, 0, 0, 0, 0, 38384, 0, 38749, 0, 37347, 34686, 0, 0, 0, 39116, 0, 0, 37993, 39117, 0, 0, 0, 0, 0, 39118, 0, 38396, 0, 0, 38051, 38498, 0, 0, 0, 65206, 0, 37987, 36167, 0, 0, 0, 0, 0, 0, 39120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39121, 0, 0, 0, 0, 38005, 64224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39129, 0, 0, 0, 0, 0, 0, 0, 36186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39131, 0, 0, 0, 0, 39133, 0, 0, 0, 0, 0, 0, 0, 0, 39080, 0, 0, 0, 0, 0, 0, 0, 35437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35579, 35502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64457, 0, 0, 0, 0, 35933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35405, 0, 0, 0, 37463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38367, 0, 0, 41132, 0, 0, 0, 0, 39147, 0, 0, 0, 0, 39148, 0, 36035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34777, 0, 0, 0, 0, 0, 0, 35512, 0, 0, 0, 40679, 0, 0, 0, 0, 0, 0, 0, 0, 38076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64721, 0, 0, 0, 0, 0, 0, 40134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36170, 0, 40574, 0, 0, 0, 0, 0, 0, 0, 36164, 39166, 65000, 0, 0, 0, 0, 39232, 0, 0, 0, 0, 38089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34758, 38099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39238, 0, 0, 0, 0, 37056, 0, 38097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36174, 0, 0, 38259, 0, 34766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39243, 0, 0, 0, 0, 0, 36437, 0, 0, 0, 0, 39246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36191, 0, 36441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36043, 0, 0, 0, 39254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39257, 0, 0, 0, 0, 0, 0, 0, 39259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64069, 0, 0, 0, 37047, 0, 0, 38723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38349, 0, 0, 0, 0, 0, 0, 38857, 64848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39271, 0, 0, 36067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35513, 0, 0, 0, 0, 0, 0, 36348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35446, 0, 0, 0, 0, 0, 40273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39283, 0, 0, 34624, 0, 40271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39290, 38244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39333, 0, 0, 0, 0, 0, 0, 0, 39335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39341, 0, 51326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37998, 36720, 0, 64208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39347, 0, 0, 0, 0, 0, 0, 41043, 0, 0, 0, 0, 0, 36190, 0, 0, 38492, 0, 0, 36064, 0, 64890, 0, 0, 0, 0, 0, 0, 0, 0, 38910, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37565, 36189, 38909, 0, 34779, 0, 0, 36708, 0, 0, 0, 0, 64759, 38242, 38861, 40548, 0, 0, 0, 0, 0, 0, 0, 37452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36553, 39356, 0, 0, 0, 0, 40357, 0, 36692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36732, 0, 0, 0, 0, 36181, 0, 36514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36730, 0, 0, 0, 0, 0, 0, 38830, 0, 0, 0, 0, 38600, 0, 0, 36068, 0, 0, 0, 0, 39363, 0, 37078, 0, 40126, 0, 0, 0, 36726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38000, 64331, 0, 0, 64970, 0, 0, 36079, 0, 0, 0, 36551, 0, 0, 0, 0, 36180, 41209, 0, 0, 0, 0, 0, 0, 0, 36777, 0, 0, 36177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39367, 34628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40671, 36185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34626, 0, 0, 39374, 0, 0, 0, 0, 0, 0, 0, 0, 36794, 0, 0, 0, 0, 0, 36843, 0, 39375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37577, 0, 0, 0, 0, 0, 38876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38323, 40057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38322, 0, 36172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36827, 0, 0, 0, 0, 39907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40570, 34647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39393, 0, 0, 0, 0, 0, 0, 35431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39413, 64586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65110, 0, 0, 0, 0, 0, 40612, 0, 0, 0, 0, 0, 0, 40265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39416, 0, 0, 0, 0, 0, 0, 38500, 0, 0, 0, 0, 36949, 0, 0, 38612, 0, 34756, 34734, 0, 0, 0, 0, 38780, 0, 0, 0, 0, 0, 0, 38477, 0, 38881, 0, 0, 0, 0, 0, 0, 39496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39497, 0, 65149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37034, 0, 0, 0, 0, 39504, 0, 0, 0, 0, 0, 0, 0, 37703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37065, 0, 0, 0, 0, 0, 39509, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37052, 0, 0, 0, 0, 0, 39512, 0, 35768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38465, 0, 0, 0, 0, 0, 0, 39514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35515, 0, 0, 0, 39850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35928, 0, 0, 0, 0, 0, 0, 0, 0, 39523, 0, 0, 0, 0, 0, 0, 35913, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38507, 39534, 0, 37199, 0, 0, 0, 0, 0, 0, 0, 0, 38726, 0, 0, 41190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37591, 0, 38517, 0, 0, 37844, 0, 0, 37307, 38521, 0, 0, 0, 0, 0, 39536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38520, 37325, 0, 40010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41071, 0, 0, 41066, 0, 0, 0, 0, 0, 0, 37215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34625, 0, 0, 0, 0, 0, 0, 0, 0, 40869, 0, 0, 35258, 0, 34639, 0, 0, 0, 0, 0, 0, 34638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34645, 0, 0, 0, 40653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36082, 0, 0, 0, 36183, 0, 40398, 0, 0, 0, 36050, 0, 0, 0, 34649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38585, 0, 38588, 0, 0, 0, 0, 0, 0, 40145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40686, 34633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34651, 0, 40649, 0, 0, 0, 0, 0, 0, 64467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36184, 34630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36182, 0, 0, 0, 0, 0, 0, 0, 40312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42048, 42050, 0, 42051, 40627, 0, 0, 51525, 42070, 42068, 42071, 42069, 51526, 42147, 51535, 51533, 42146, 42145, 0, 0, 42306, 42305, 42304, 0, 42307, 42238, 40626, 0, 40406, 0, 42464, 42465, 0, 39247, 0, 0, 35278, 0, 43203, 0, 35776, 0, 40900, 42072, 35796, 42148, 51536, 35954, 42149, 51555, 42730, 52145, 0, 0, 50879, 35833, 42073, 42150, 0, 42308, 51556, 35142, 0, 50880, 0, 0, 51520, 42052, 0, 42075, 0, 51527, 42076, 64229, 0, 42151, 0, 42309, 42311, 42310, 0, 0, 42466, 42467, 0, 0, 43204, 0, 44476, 42049, 51323, 35782, 51521, 42053, 42078, 42077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42468, 40023, 0, 0, 0, 0, 0, 0, 0, 0, 43205, 0, 0, 0, 0, 39675, 0, 0, 0, 0, 0, 45230, 54347, 35280, 35279, 46787, 56497, 56498, 50881, 42054, 35281, 42153, 35298, 0, 43206, 42055, 51528, 42079, 0, 0, 42154, 42156, 51537, 42157, 42155, 0, 0, 37502, 42469, 40378, 43207, 0, 0, 43208, 43845, 50882, 42080, 42158, 35951, 42470, 42472, 42471, 0, 42731, 0, 0, 43209, 43210, 43846, 43847, 0, 0, 0, 0, 44477, 0, 0, 56499, 64504, 0, 63190, 42056, 35783, 37483, 0, 0, 35282, 42160, 42159, 51538, 42161, 42167, 0, 42162, 42163, 51540, 51539, 42165, 42166, 0, 42164, 40911, 0, 0, 0, 0, 0, 42314, 42315, 42316, 42317, 42313, 42320, 51562, 0, 51558, 51561, 42321, 42337, 0, 51560, 0, 42318, 42319, 42312, 0, 0, 51557, 51559, 40361, 35283, 0, 0, 39394, 0, 42485, 51632, 42482, 42486, 51642, 51630, 42483, 51634, 37479, 0, 0, 42484, 0, 42487, 0, 42473, 51633, 42488, 51637, 37540, 51641, 51638, 0, 0, 51635, 42474, 42476, 42489, 0, 42478, 51627, 42481, 42479, 42480, 51643, 51640, 51631, 42477, 0, 35955, 51628, 42475, 35150, 0, 0, 51636, 0, 0, 0, 0, 51639, 0, 0, 0, 0, 0, 35151, 37496, 0, 0, 51629, 51814, 0, 42818, 42740, 0, 37302, 51815, 42737, 0, 42820, 35284, 42745, 40914, 42744, 51803, 42748, 42743, 51808, 51816, 0, 51812, 37543, 42746, 0, 38306, 42749, 42734, 42823, 51805, 0, 37486, 52157, 42732, 42819, 42733, 42741, 42742, 51810, 51806, 42747, 42739, 51802, 42735, 51813, 42821, 42824, 42738, 42816, 42822, 42736, 51811, 42817, 51817, 51804, 42750, 51807, 0, 0, 51809, 0, 43224, 52159, 52171, 43216, 0, 52172, 43211, 43221, 0, 38634, 43214, 52153, 43222, 52152, 52156, 52163, 52161, 43230, 43225, 52147, 52149, 43227, 43215, 52150, 52162, 52169, 43220, 52155, 52148, 43219, 52151, 43223, 52154, 37487, 43218, 0, 43213, 0, 43228, 52164, 43229, 52168, 0, 52166, 52170, 43226, 52158, 52146, 0, 52160, 43217, 52165, 43212, 52167, 0, 0, 0, 37539, 0, 0, 0, 0, 0, 35152, 0, 0, 64087, 0, 0, 43862, 43850, 39014, 0, 52704, 52712, 36088, 43849, 43857, 43869, 0, 52718, 52716, 52711, 0, 35286, 0, 43851, 52717, 52707, 43865, 43856, 43864, 52702, 0, 52714, 39090, 52705, 43860, 52706, 37547, 52701, 43867, 43854, 43863, 43853, 0, 52703, 52708, 0, 52715, 43861, 43858, 52710, 43866, 52713, 52709, 43855, 43868, 43859, 43852, 43848, 0, 0, 38622, 37548, 0, 0, 0, 0, 0, 0, 52719, 0, 44503, 44481, 35952, 44497, 40814, 44502, 53456, 53455, 53460, 53461, 44484, 36594, 44493, 0, 0, 40812, 44506, 0, 44494, 0, 0, 35288, 0, 53449, 44487, 53450, 64089, 44508, 0, 44499, 44478, 44479, 53469, 45247, 0, 44492, 44491, 53451, 44495, 54363, 44486, 53462, 44501, 44500, 44490, 53454, 53463, 0, 53448, 44489, 53464, 44498, 53452, 44480, 0, 44483, 44482, 53465, 44496, 64095, 44505, 44507, 53459, 44504, 37544, 53467, 53453, 53468, 0, 53457, 37219, 53466, 0, 53458, 0, 0, 0, 35904, 44488, 0, 0, 0, 54371, 54359, 0, 45235, 0, 54364, 54370, 45234, 54357, 45238, 54361, 54354, 45236, 54358, 45241, 45246, 0, 54375, 0, 54353, 0, 45242, 40819, 54374, 37549, 0, 45237, 54360, 45233, 54355, 54351, 54365, 54352, 54350, 54362, 54368, 54369, 45239, 39913, 0, 55387, 54366, 54349, 54367, 37545, 45249, 54372, 45248, 54348, 0, 54356, 54373, 45244, 45243, 45240, 45245, 0, 0, 45231, 0, 0, 64102, 0, 0, 46024, 37546, 55390, 55383, 0, 46021, 0, 55391, 35289, 0, 0, 55381, 55384, 46020, 55385, 0, 64854, 46023, 55389, 0, 55379, 55378, 46025, 0, 46026, 46022, 46027, 55377, 55388, 55386, 55380, 0, 0, 0, 46019, 55382, 0, 0, 40872, 0, 0, 0, 0, 0, 46794, 46788, 56503, 46797, 56509, 56512, 46790, 46791, 56506, 46789, 56515, 46795, 56516, 0, 56511, 46796, 35953, 56500, 46793, 56501, 0, 56510, 56508, 0, 56504, 46792, 56502, 46798, 56507, 56514, 56505, 56513, 0, 37537, 47542, 47539, 37091, 47540, 0, 57593, 57585, 47538, 47535, 57586, 0, 41126, 47537, 57589, 0, 57591, 0, 38059, 57598, 64626, 0, 57597, 57592, 47534, 57584, 47532, 57587, 47543, 57590, 0, 57594, 47536, 47533, 57596, 57595, 47541, 0, 57588, 38852, 48120, 58604, 0, 58601, 48121, 0, 48119, 37550, 58608, 58605, 58598, 48118, 64103, 48122, 58599, 48117, 48125, 58602, 58603, 48123, 48124, 58609, 58606, 58607, 37538, 64105, 0, 48810, 59640, 48807, 59637, 48809, 48811, 0, 59638, 48808, 0, 59639, 0, 59636, 0, 0, 49270, 60605, 49271, 60603, 0, 60604, 60602, 60601, 0, 0, 60606, 49269, 37480, 0, 61368, 61369, 0, 58600, 61367, 49272, 50015, 61931, 61932, 0, 50391, 50392, 62913, 62912, 50540, 50539, 63440, 0, 42057, 42081, 42169, 0, 42168, 42323, 42322, 42492, 42491, 42493, 42490, 0, 42826, 42825, 42827, 0, 0, 0, 0, 43232, 0, 43231, 43233, 35153, 43870, 0, 41561, 53470, 41562, 45250, 41564, 41563, 55392, 64111, 41565, 47544, 41566, 0, 42058, 0, 42170, 42494, 43234, 64113, 42059, 42173, 42171, 42172, 0, 0, 42560, 0, 0, 35154, 42828, 43236, 43235, 43237, 37978, 0, 0, 44509, 0, 0, 0, 48812, 0, 50883, 0, 0, 0, 35293, 51534, 51362, 42324, 42325, 0, 0, 42561, 0, 51818, 0, 43872, 43871, 53472, 53471, 45251, 50884, 42174, 51541, 0, 40530, 0, 35155, 0, 52173, 0, 43873, 0, 44512, 0, 44510, 44511, 0, 40533, 37562, 0, 48813, 50885, 42326, 0, 35931, 0, 42562, 51644, 64125, 64168, 39528, 64071, 42829, 42830, 64126, 51819, 0, 0, 52174, 43238, 52175, 0, 0, 0, 0, 37563, 53474, 53475, 44515, 64950, 53476, 64162, 53473, 44516, 44514, 44513, 53477, 64163, 54376, 64164, 39860, 64166, 55393, 0, 0, 56517, 57664, 0, 0, 35295, 48126, 48814, 59641, 64987, 42060, 42074, 64169, 0, 35156, 0, 0, 0, 0, 0, 0, 0, 0, 64171, 0, 0, 45252, 46029, 0, 47545, 64634, 51522, 42175, 0, 42329, 42327, 42328, 0, 35296, 43239, 40783, 0, 42061, 42062, 51325, 42082, 0, 35297, 42176, 42177, 42178, 51646, 42330, 64176, 51563, 0, 42566, 0, 51647, 42564, 42565, 51645, 0, 0, 42567, 42563, 0, 0, 0, 0, 51820, 43756, 51821, 40909, 41191, 51822, 0, 0, 42832, 42831, 64177, 35238, 42835, 42833, 42834, 0, 0, 0, 43245, 0, 43244, 52180, 52177, 52178, 40698, 52176, 43246, 43242, 43241, 0, 43243, 43240, 64178, 0, 0, 0, 0, 43247, 0, 43875, 52720, 0, 52179, 43880, 0, 52721, 43876, 43879, 43878, 43877, 43874, 34748, 0, 0, 53480, 0, 44519, 53483, 44517, 64180, 0, 37572, 53479, 44520, 44518, 44521, 53481, 53482, 40815, 53478, 53484, 0, 0, 0, 0, 0, 35760, 46033, 45253, 54377, 54379, 54378, 54380, 45254, 0, 0, 46030, 40876, 46031, 46032, 0, 46800, 56519, 35299, 56518, 56520, 56521, 46801, 0, 46799, 57665, 57666, 47547, 47546, 58202, 0, 0, 48192, 48193, 48194, 48196, 58610, 58611, 48195, 0, 39891, 35300, 48815, 0, 48816, 64181, 0, 61933, 62915, 62914, 63441, 40917, 42063, 0, 0, 0, 42332, 42331, 35157, 0, 42568, 37573, 0, 51648, 0, 35158, 42837, 42838, 42836, 42839, 51823, 51824, 0, 0, 0, 0, 0, 0, 64179, 0, 0, 0, 64182, 0, 43249, 52181, 0, 43248, 0, 52722, 43884, 52723, 43883, 0, 64183, 0, 43881, 0, 43882, 0, 0, 40668, 53485, 0, 0, 64452, 40817, 45255, 54382, 0, 45258, 54381, 45541, 45257, 45256, 0, 46036, 0, 46035, 46034, 46802, 64186, 37575, 46805, 46806, 46804, 0, 46803, 0, 0, 57667, 0, 57668, 0, 0, 0, 58613, 48197, 58612, 0, 48817, 60607, 49273, 0, 61934, 50261, 50886, 42083, 42179, 51542, 0, 42180, 42181, 0, 39500, 0, 0, 0, 64189, 42334, 0, 42569, 51825, 52182, 52183, 0, 43885, 53486, 45260, 45259, 55395, 55394, 0, 0, 42064, 42182, 42335, 0, 45261, 51523, 0, 51564, 42336, 0, 51650, 42571, 42570, 51649, 42840, 35944, 0, 0, 35301, 0, 0, 44522, 0, 40829, 54383, 0, 46807, 57669, 47548, 41129, 64196, 59642, 0, 0, 62461, 50887, 42183, 0, 35159, 52184, 52724, 45264, 45262, 45263, 42065, 64170, 42084, 64197, 42186, 0, 42185, 42184, 42339, 42338, 0, 51565, 51651, 35160, 0, 0, 43253, 43250, 43252, 43251, 0, 0, 43886, 0, 0, 46037, 0, 42066, 35811, 42187, 35681, 42341, 42340, 0, 51826, 39665, 0, 43254, 40631, 0, 50888, 0, 0, 51543, 64209, 42343, 42342, 42572, 42573, 51827, 42841, 64210, 42842, 0, 43255, 43256, 43257, 0, 43887, 52725, 40634, 64212, 64213, 0, 0, 51524, 0, 42188, 0, 0, 0, 0, 0, 51652, 0, 0, 0, 51828, 51829, 0, 0, 52185, 64217, 52186, 0, 52727, 52726, 52729, 52728, 43888, 0, 54384, 44525, 53487, 44524, 64219, 0, 40160, 0, 55396, 46038, 64503, 55397, 64506, 35303, 41082, 64220, 57670, 47549, 64221, 0, 35305, 0, 48198, 0, 61935, 0, 50889, 0, 0, 51544, 0, 42344, 0, 0, 0, 0, 0, 64226, 35307, 45265, 0, 64227, 0, 0, 42067, 42085, 42190, 42189, 37064, 42191, 0, 0, 37594, 35161, 40181, 0, 43259, 0, 43258, 43260, 35162, 64231, 40866, 43889, 0, 0, 0, 44526, 64234, 59643, 49743, 42086, 42346, 42361, 42356, 0, 42351, 42350, 42357, 42355, 42348, 42362, 42349, 42345, 42360, 42359, 42358, 42347, 0, 42354, 64237, 36781, 42353, 0, 0, 42363, 42352, 0, 64345, 0, 0, 42579, 0, 42585, 42581, 0, 42587, 51653, 42584, 42574, 42577, 42580, 42576, 42583, 42586, 42575, 42578, 42582, 42588, 64239, 38639, 0, 40428, 0, 51838, 51835, 40394, 42855, 51836, 42843, 42845, 42869, 42864, 64877, 0, 35308, 51877, 51837, 42847, 42849, 51876, 42856, 51832, 42868, 42870, 42844, 42861, 64324, 51830, 42867, 40418, 42852, 35957, 42862, 42863, 51831, 42860, 42858, 0, 42859, 42865, 51873, 42846, 0, 42866, 51875, 42854, 42851, 0, 51834, 42850, 51878, 42853, 0, 42857, 40640, 34757, 40534, 42848, 51874, 0, 0, 0, 0, 51833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52203, 52202, 43343, 52205, 52207, 52196, 52199, 52206, 43344, 40825, 39623, 52193, 52197, 64244, 0, 52201, 52809, 43339, 52813, 43261, 52198, 43262, 43340, 43333, 43329, 0, 52194, 43332, 43337, 43346, 52195, 52188, 43331, 52189, 52191, 0, 43334, 39073, 43336, 52187, 52192, 0, 0, 43345, 43341, 52200, 43347, 64248, 43338, 52190, 43335, 35312, 40519, 43330, 43328, 40439, 52204, 0, 43342, 0, 40915, 0, 39626, 0, 52808, 52731, 52811, 35313, 64249, 52733, 43896, 43944, 43892, 43943, 43901, 43940, 43890, 52732, 52803, 43939, 52815, 43941, 36442, 43897, 35314, 0, 52805, 52802, 43895, 35315, 52730, 43942, 52810, 43900, 52812, 43945, 43891, 43902, 43899, 52800, 43937, 52806, 52807, 43898, 43938, 43894, 0, 37469, 35665, 37600, 43893, 52734, 35316, 0, 0, 0, 0, 0, 52804, 0, 0, 0, 40916, 0, 0, 0, 52814, 0, 53572, 44539, 53489, 35449, 53494, 44532, 44608, 53492, 44527, 44537, 44542, 53499, 0, 44538, 44541, 35317, 0, 53502, 44533, 53493, 0, 0, 0, 53570, 53571, 0, 44535, 53569, 44531, 44611, 0, 53496, 0, 44529, 38823, 53574, 53497, 53501, 44534, 44610, 53498, 44540, 53568, 53575, 54433, 37818, 53573, 44612, 44528, 53500, 53491, 40536, 44536, 0, 0, 53490, 35318, 0, 53495, 0, 0, 0, 40535, 0, 0, 0, 0, 35319, 0, 35393, 53488, 44609, 35320, 0, 54391, 64241, 45284, 54439, 45282, 45279, 54396, 45275, 54434, 45286, 54390, 54395, 54394, 44530, 45281, 54437, 0, 54440, 54387, 0, 46056, 35322, 54441, 45287, 0, 45273, 45270, 54398, 45267, 64322, 54438, 64191, 45274, 54442, 0, 54388, 54436, 45277, 54389, 54392, 54397, 64419, 0, 45278, 45276, 45288, 0, 0, 0, 0, 45283, 64247, 45271, 45522, 0, 45272, 54393, 45285, 45280, 54435, 45269, 0, 0, 40526, 45268, 38108, 0, 0, 0, 0, 0, 38362, 40440, 40810, 0, 54385, 54386, 55402, 0, 35511, 0, 46039, 46042, 55413, 46062, 55416, 46040, 55409, 46046, 46052, 46525, 0, 64326, 46050, 55406, 46063, 46043, 46051, 55414, 56535, 55419, 55407, 35398, 55398, 55411, 55405, 46049, 55417, 0, 0, 46045, 46065, 46058, 0, 46047, 46044, 0, 46055, 0, 55418, 55404, 55410, 55412, 55400, 55415, 46041, 55399, 64327, 46048, 46064, 46060, 55401, 46054, 0, 37192, 46061, 46057, 46053, 37598, 55408, 0, 0, 0, 35667, 40438, 46059, 39898, 0, 0, 56533, 56529, 40318, 56544, 56522, 56531, 46821, 46822, 46814, 56540, 46824, 56527, 56526, 56524, 56542, 46812, 56536, 56525, 46815, 56534, 46810, 56530, 56537, 56539, 35325, 39396, 56543, 46819, 56523, 46813, 56528, 40515, 46808, 0, 46820, 56538, 46816, 46817, 46823, 46811, 41567, 46809, 56532, 40425, 0, 36690, 0, 0, 46818, 40437, 40432, 56541, 0, 0, 39399, 47565, 47560, 0, 57685, 57681, 35773, 57675, 47554, 47550, 57684, 47551, 57678, 57680, 0, 57683, 64328, 47556, 0, 47563, 47557, 0, 0, 57673, 47558, 47559, 57676, 47564, 40887, 57674, 57679, 47555, 57672, 47561, 47553, 0, 0, 0, 47552, 57677, 57682, 40400, 47562, 40939, 36265, 40399, 39137, 0, 40421, 0, 57671, 0, 48205, 58695, 0, 58692, 40392, 48199, 48211, 48212, 0, 48202, 58690, 48204, 58617, 48210, 64335, 58694, 48201, 58696, 48200, 0, 58691, 58693, 48203, 58689, 58618, 58615, 40427, 0, 55403, 58621, 0, 58614, 58620, 58619, 0, 58616, 64340, 48207, 64341, 39586, 0, 35542, 48206, 39519, 0, 0, 48208, 58622, 48818, 58688, 0, 0, 40693, 59717, 0, 59645, 36791, 48830, 59714, 48822, 48826, 59713, 0, 48825, 48821, 48824, 48819, 48829, 59715, 59646, 48828, 59644, 48827, 59716, 59712, 48209, 0, 48831, 59718, 48823, 48820, 39634, 40554, 40680, 0, 60614, 60616, 49275, 60617, 60615, 60613, 60612, 49277, 60611, 49278, 0, 35775, 37314, 40290, 60609, 60610, 49274, 49313, 49276, 0, 37472, 60608, 0, 49744, 0, 61372, 61370, 61375, 61373, 0, 61371, 61374, 37470, 37313, 0, 35525, 0, 0, 38819, 50016, 61938, 61939, 50262, 0, 61940, 61936, 61941, 61937, 49745, 35692, 0, 36222, 62462, 62529, 50265, 62528, 50264, 50263, 0, 40020, 0, 0, 50266, 62917, 62918, 40381, 50394, 50393, 50395, 62916, 0, 63192, 63191, 0, 50541, 50543, 50542, 63193, 50632, 63654, 0, 0, 0, 50673, 0, 63653, 63726, 0, 40133, 51529, 0, 0, 42365, 42364, 0, 42591, 42590, 51655, 42589, 51654, 35163, 0, 42873, 51881, 0, 51880, 0, 0, 42871, 42874, 0, 64348, 51879, 64347, 42872, 64343, 0, 0, 0, 0, 0, 52208, 0, 52209, 43348, 34661, 0, 39111, 0, 43946, 64346, 53576, 53577, 44613, 44614, 0, 0, 54444, 45289, 45291, 54443, 45290, 55420, 46066, 0, 0, 0, 0, 46825, 46826, 56545, 40174, 47567, 0, 47566, 0, 58697, 59720, 59719, 37602, 63851, 42087, 51545, 0, 51566, 51567, 0, 0, 0, 0, 42594, 42598, 51657, 0, 42596, 42595, 51656, 42597, 42593, 0, 38055, 42592, 51658, 0, 0, 0, 0, 0, 0, 42918, 0, 36044, 42915, 39892, 42877, 51882, 64356, 64374, 0, 51883, 64352, 42913, 0, 51885, 42875, 51886, 51884, 42878, 42914, 42917, 42916, 42876, 51887, 0, 39397, 0, 0, 39618, 0, 0, 0, 37371, 0, 0, 0, 41075, 0, 43353, 52222, 0, 43355, 0, 43354, 40818, 52288, 43352, 43351, 52213, 0, 52212, 0, 52210, 52215, 52214, 52211, 52220, 52221, 52218, 52216, 43350, 0, 0, 40908, 52219, 43356, 52289, 39077, 37608, 52217, 0, 43947, 43349, 0, 0, 0, 0, 39868, 0, 38643, 43948, 52820, 37607, 0, 52826, 64615, 0, 0, 43954, 52824, 52830, 0, 52821, 52825, 52827, 52829, 52823, 35709, 52822, 52817, 52818, 43949, 39924, 43951, 43950, 52819, 52828, 0, 40695, 0, 0, 40641, 0, 0, 0, 43953, 0, 0, 0, 0, 34755, 39279, 52816, 53587, 0, 53586, 53591, 53582, 38641, 53585, 53584, 36417, 53588, 0, 53592, 44615, 44618, 38218, 0, 53583, 53589, 38886, 0, 0, 44617, 53578, 0, 43952, 54458, 53590, 0, 53581, 0, 44616, 53580, 0, 38645, 0, 0, 0, 0, 54449, 37606, 40770, 45292, 45296, 54465, 54447, 54461, 45297, 54463, 64359, 54469, 0, 54473, 0, 0, 54464, 54452, 54460, 39337, 54474, 54472, 54462, 54457, 54450, 55462, 54448, 45301, 54455, 45302, 45298, 54445, 54467, 54453, 64230, 0, 54451, 54470, 45299, 64361, 54476, 45293, 45295, 54459, 54454, 44619, 45294, 54456, 54471, 54475, 54466, 0, 54468, 0, 38885, 0, 54446, 0, 0, 0, 34760, 55457, 0, 55466, 55465, 46074, 55458, 0, 46075, 46073, 38525, 55460, 46070, 55464, 64364, 55459, 55461, 55421, 46068, 0, 55474, 55473, 55470, 46067, 46071, 46072, 53579, 55467, 46069, 45300, 55469, 55422, 55472, 55471, 39330, 55475, 0, 56559, 0, 55468, 39611, 0, 0, 0, 39525, 0, 0, 37966, 55463, 56551, 46836, 46839, 46834, 56550, 56554, 56549, 0, 46828, 46838, 56546, 46832, 56553, 0, 46830, 46829, 56556, 46831, 56558, 64366, 56555, 46827, 39391, 0, 0, 46837, 56560, 56548, 56557, 0, 0, 56547, 39139, 0, 46833, 37460, 46835, 0, 56552, 0, 56561, 38523, 35503, 57693, 47568, 57699, 0, 0, 47573, 57695, 57702, 57687, 47575, 47569, 57692, 48213, 57691, 57700, 47570, 0, 47574, 57690, 57696, 57701, 57686, 47572, 57694, 0, 0, 57698, 57704, 57688, 57697, 35959, 47571, 57703, 0, 34736, 0, 57689, 35759, 40637, 0, 48217, 58699, 48215, 48214, 58701, 58706, 0, 58702, 0, 58705, 48220, 40678, 48805, 48219, 64367, 58698, 58704, 0, 48218, 58703, 36577, 58700, 0, 48216, 0, 39805, 40062, 0, 0, 0, 59725, 63961, 59727, 59722, 48833, 59724, 0, 48832, 59726, 0, 0, 48835, 59728, 48834, 59721, 59723, 0, 37610, 0, 0, 49317, 60620, 35960, 49316, 60621, 49315, 60619, 49314, 60618, 0, 49747, 49746, 61942, 61944, 64370, 61943, 50017, 50018, 64369, 0, 50019, 62530, 50267, 0, 0, 63443, 63442, 50674, 0, 42088, 42192, 0, 0, 42919, 35164, 0, 39152, 38642, 52831, 0, 0, 0, 0, 46076, 46077, 64372, 56562, 47576, 57705, 58707, 0, 0, 35777, 51546, 35165, 35294, 51888, 35166, 0, 0, 50890, 0, 52290, 52832, 53593, 44620, 0, 65090, 61945, 0, 50396, 42089, 42366, 51568, 0, 42599, 42600, 0, 43357, 34664, 0, 64379, 45303, 0, 47578, 0, 47579, 47577, 0, 42090, 0, 42193, 42195, 42194, 51547, 42196, 42401, 51569, 0, 42402, 35167, 0, 35168, 0, 0, 42601, 42602, 0, 0, 0, 51659, 0, 42920, 0, 51889, 0, 0, 0, 43361, 52291, 0, 43359, 43360, 43358, 53594, 0, 0, 0, 43958, 43957, 43959, 43956, 0, 52833, 43362, 43955, 0, 44621, 44622, 0, 44623, 0, 54477, 0, 0, 0, 46078, 55476, 45304, 0, 0, 39885, 0, 46840, 0, 47581, 47580, 57706, 0, 48221, 48836, 0, 61376, 63194, 63444, 42091, 42403, 40403, 42404, 51665, 42604, 42607, 0, 51663, 51661, 42606, 51664, 51666, 51660, 42609, 42608, 42605, 42603, 51662, 0, 0, 0, 38988, 42931, 0, 0, 42928, 51894, 51897, 51896, 0, 42922, 42930, 38738, 0, 42927, 51893, 51891, 42926, 38339, 0, 0, 42921, 42924, 39862, 51892, 51899, 51895, 42925, 42929, 42932, 51890, 51898, 42923, 0, 0, 0, 39609, 0, 43367, 43375, 38835, 52303, 52296, 43376, 52307, 52292, 52299, 40820, 37617, 43366, 52293, 43364, 52300, 52304, 43363, 36090, 52305, 52298, 0, 52301, 38879, 43378, 43369, 52308, 52306, 64422, 43374, 43372, 52297, 43371, 52295, 52294, 43370, 43368, 43377, 43373, 43365, 0, 52302, 0, 43961, 64427, 43968, 52847, 43960, 52839, 52835, 0, 52851, 52834, 0, 43963, 52844, 43966, 43969, 0, 43964, 52848, 43967, 39031, 44630, 52854, 52836, 38996, 38341, 52838, 52845, 52849, 52853, 52850, 52843, 52846, 40277, 64434, 52840, 43971, 52842, 52841, 52852, 43962, 52837, 43970, 38270, 43965, 0, 0, 0, 0, 0, 44636, 53602, 38722, 44635, 38118, 0, 53600, 0, 44624, 37621, 44629, 0, 53599, 53596, 53601, 44625, 53595, 36037, 44628, 44626, 0, 53603, 44627, 44631, 37629, 0, 44632, 64418, 44634, 0, 40017, 0, 44633, 38121, 39004, 37616, 53597, 53598, 0, 0, 0, 0, 53604, 0, 54484, 45305, 55490, 54483, 54502, 0, 0, 45376, 37964, 54500, 0, 45310, 45306, 54509, 54493, 54496, 37227, 45379, 54506, 54498, 45307, 45380, 0, 54503, 54501, 0, 0, 54486, 54507, 54495, 54490, 35704, 54480, 54508, 54492, 54479, 38114, 45378, 54497, 54510, 54494, 54482, 54487, 54478, 38991, 45377, 64437, 54491, 54488, 45308, 54481, 37489, 54505, 45309, 37733, 54489, 54485, 39003, 0, 54504, 38992, 0, 0, 0, 0, 0, 64440, 55483, 38844, 55480, 55497, 55485, 55498, 37619, 46146, 0, 37696, 38989, 55494, 55491, 0, 38258, 0, 65007, 0, 55492, 55495, 55499, 0, 54499, 55501, 56647, 64961, 46147, 55502, 55478, 55488, 64442, 55493, 0, 37611, 46145, 46148, 55500, 55503, 55482, 55479, 64627, 38839, 55481, 0, 34671, 55486, 55484, 46149, 0, 55496, 0, 64436, 55487, 0, 55489, 55477, 56570, 56568, 46914, 46912, 56643, 56569, 56644, 56640, 56567, 56646, 56566, 56573, 46846, 46845, 46844, 56571, 56641, 46841, 46913, 37031, 56564, 0, 56574, 56563, 56572, 46842, 56642, 56565, 46843, 56645, 38721, 37620, 0, 34674, 0, 64444, 0, 57710, 47586, 47585, 47587, 57722, 57712, 57718, 57707, 57721, 57720, 57724, 57717, 47582, 57716, 47588, 38263, 57709, 47583, 0, 57723, 47584, 57711, 57714, 57719, 57713, 57708, 0, 40674, 0, 36728, 57715, 58709, 48225, 58712, 58711, 58714, 58716, 63964, 48223, 0, 58710, 38514, 58708, 0, 58717, 58715, 58713, 0, 58719, 0, 58718, 48227, 48222, 0, 48224, 48226, 40629, 0, 58720, 59735, 38475, 0, 59734, 59733, 36012, 59736, 59729, 0, 59730, 59738, 59731, 0, 48837, 59740, 41210, 59739, 59732, 0, 60625, 49320, 60623, 60628, 60627, 59737, 0, 49319, 38261, 60626, 60622, 60630, 60629, 49318, 0, 60624, 0, 48838, 0, 0, 0, 49748, 0, 0, 0, 61377, 61946, 61947, 61948, 50268, 37082, 0, 50269, 37735, 62531, 65188, 62920, 62919, 0, 37087, 63195, 63196, 63445, 63655, 37716, 42092, 42093, 0, 42094, 42197, 42405, 51667, 42610, 42611, 0, 42935, 42936, 42934, 42933, 0, 43379, 0, 0, 52309, 43381, 43380, 52310, 35169, 0, 35764, 43972, 0, 44637, 53605, 40384, 54512, 0, 45381, 46151, 54511, 46150, 36424, 47589, 64453, 57725, 48839, 0, 49321, 60631, 64455, 50270, 0, 50544, 50891, 51570, 64121, 42406, 51571, 42614, 0, 42612, 42613, 42615, 0, 42938, 42937, 0, 51900, 42939, 40551, 0, 51901, 52311, 0, 52312, 36057, 43382, 43384, 43386, 43383, 43387, 43385, 64466, 35170, 35171, 0, 0, 43976, 43973, 43975, 43977, 43974, 53606, 52855, 0, 64637, 0, 53608, 53607, 44643, 0, 44639, 0, 0, 44640, 44642, 44644, 44641, 34675, 44646, 44645, 0, 0, 0, 0, 0, 45386, 54514, 54513, 45385, 40811, 45384, 45383, 45387, 45382, 0, 0, 55509, 55506, 46153, 55505, 55510, 0, 46155, 55508, 46152, 46154, 55507, 64460, 56648, 65198, 56649, 56650, 0, 34669, 0, 0, 47590, 47598, 57726, 47592, 47596, 57761, 47597, 47593, 47594, 47591, 47595, 48230, 55504, 48231, 48229, 0, 48228, 59741, 48840, 60632, 60633, 64465, 0, 50020, 50271, 0, 42095, 0, 42616, 0, 0, 0, 0, 64373, 0, 43978, 0, 53609, 44647, 64468, 0, 45390, 45389, 45388, 46156, 46157, 55511, 47599, 48841, 42096, 51548, 42198, 51572, 64470, 64472, 51668, 42617, 0, 0, 0, 43388, 0, 35677, 0, 37708, 56651, 39650, 0, 42097, 35785, 42199, 51669, 0, 0, 51902, 0, 51903, 0, 42940, 0, 0, 0, 55512, 46158, 0, 56652, 0, 0, 0, 49322, 42098, 42152, 42200, 51573, 42407, 0, 42944, 42943, 42941, 42942, 0, 0, 52313, 43390, 43425, 52314, 43389, 64475, 40905, 43982, 52856, 43981, 43979, 43980, 44650, 44648, 0, 40772, 53611, 44649, 53610, 0, 44638, 54515, 0, 0, 45392, 45393, 39149, 0, 45391, 0, 47600, 57762, 48232, 48233, 0, 58721, 49323, 61378, 61379, 0, 50397, 63656, 51531, 42201, 0, 42099, 0, 51575, 51574, 0, 0, 0, 36073, 42618, 51671, 51672, 51670, 0, 51673, 0, 0, 0, 0, 0, 0, 64477, 51911, 0, 51906, 51908, 51910, 51907, 42948, 51904, 0, 51905, 42945, 42946, 51909, 51912, 42947, 51913, 0, 0, 0, 36338, 35172, 0, 65010, 52328, 37709, 52322, 52317, 43427, 52325, 52323, 52316, 52329, 52332, 52327, 52320, 43429, 52326, 43430, 52321, 52324, 52315, 52319, 52331, 43431, 0, 43432, 0, 52318, 52330, 43426, 43428, 0, 64487, 0, 0, 0, 0, 0, 0, 41202, 39016, 0, 0, 0, 52907, 52900, 52906, 52899, 52901, 52861, 52859, 0, 52908, 52905, 52857, 40792, 43984, 52903, 52904, 36070, 52902, 52860, 52858, 43983, 52898, 52862, 0, 0, 52897, 52909, 0, 0, 0, 0, 0, 36211, 0, 0, 44655, 64478, 44654, 0, 53612, 44651, 53614, 64479, 44656, 53615, 0, 0, 44659, 35912, 44657, 53616, 52910, 53618, 0, 44653, 34676, 44652, 0, 53613, 53617, 44658, 0, 0, 0, 0, 45395, 45394, 0, 0, 0, 54517, 54521, 54523, 45396, 54526, 64483, 45400, 54593, 0, 45402, 36264, 45398, 45406, 64484, 45403, 54519, 45397, 0, 54518, 54516, 54595, 54520, 0, 45399, 54594, 45404, 54525, 54524, 45405, 54522, 45401, 0, 0, 40053, 0, 54596, 39032, 54592, 55527, 55534, 55523, 46161, 55519, 55535, 55513, 55532, 55530, 55524, 0, 55533, 55526, 36192, 55518, 55536, 55516, 55529, 55514, 0, 55537, 64485, 46162, 36193, 55531, 56655, 55517, 46159, 0, 55521, 0, 46160, 55520, 55525, 0, 0, 55522, 36194, 41121, 0, 55528, 0, 40000, 0, 0, 56659, 0, 0, 0, 56662, 56654, 0, 56656, 0, 56661, 56660, 46915, 0, 55515, 56658, 0, 0, 46916, 39085, 56653, 56657, 0, 40682, 0, 0, 57769, 36076, 57776, 57767, 36052, 57774, 57765, 57773, 57777, 57764, 57768, 57763, 0, 47601, 40171, 57766, 47602, 57772, 57771, 57770, 64480, 0, 57775, 40785, 0, 0, 0, 58725, 58727, 48235, 58728, 0, 58723, 0, 58722, 58732, 0, 58730, 48234, 58733, 58724, 58729, 58731, 58726, 0, 36197, 0, 0, 59745, 59750, 59744, 59749, 40177, 59742, 59752, 59748, 59753, 59747, 59743, 59751, 0, 59754, 59746, 64600, 60634, 49327, 36198, 49325, 0, 49324, 49326, 0, 0, 61380, 38484, 61810, 61949, 0, 0, 62532, 62533, 0, 50272, 0, 62921, 0, 50398, 0, 62922, 0, 63198, 50546, 0, 50545, 63197, 50633, 64488, 63446, 0, 0, 50892, 0, 42100, 42619, 51674, 51914, 43189, 45407, 0, 0, 42101, 42410, 42409, 42408, 0, 0, 42949, 0, 0, 44660, 0, 56663, 42102, 42103, 42104, 42202, 40910, 0, 43985, 0, 52911, 0, 0, 0, 46163, 42105, 51549, 0, 0, 42411, 42412, 51576, 0, 42620, 0, 0, 64508, 51915, 39652, 42950, 0, 51916, 0, 0, 43438, 40821, 0, 52334, 43436, 43435, 52333, 43433, 52335, 43434, 43437, 0, 43986, 0, 43988, 52915, 52912, 52913, 52914, 52916, 43987, 0, 0, 53620, 53619, 0, 44662, 0, 44661, 64497, 0, 0, 0, 0, 45410, 54598, 0, 45409, 45411, 45408, 0, 0, 0, 0, 46165, 54597, 0, 46166, 55539, 36201, 46167, 55538, 46164, 0, 0, 37711, 0, 56666, 56668, 46917, 56667, 56665, 56664, 0, 0, 0, 57780, 47607, 47605, 0, 47606, 57778, 57779, 0, 47603, 58737, 58735, 37710, 48237, 58736, 48238, 48236, 47604, 0, 0, 59757, 59755, 59756, 58734, 60636, 49328, 60635, 61381, 61382, 59758, 61950, 0, 42106, 42413, 42622, 64499, 42621, 0, 43439, 46918, 64500, 42203, 42414, 43989, 46168, 50894, 51577, 0, 51578, 64451, 51676, 0, 35173, 42952, 51920, 51918, 42953, 51917, 51919, 51921, 0, 42951, 0, 0, 35962, 0, 0, 43443, 43444, 43441, 0, 35963, 43440, 52920, 43442, 0, 0, 0, 43990, 0, 52919, 52921, 52918, 52922, 43991, 44665, 53621, 0, 53623, 44663, 53624, 44664, 53622, 0, 52917, 54599, 54602, 54603, 54600, 45415, 45414, 45412, 45413, 54601, 0, 0, 0, 36202, 45416, 0, 0, 46170, 46171, 0, 46172, 56669, 56671, 56673, 46920, 46919, 46169, 56672, 56670, 37715, 57784, 0, 64505, 57782, 57788, 47608, 57789, 57786, 47609, 57783, 57781, 57787, 48240, 58739, 57785, 48242, 58740, 48241, 48244, 58741, 48239, 48243, 0, 59763, 59761, 59760, 59762, 59759, 0, 0, 50022, 0, 62534, 62535, 0, 62923, 63199, 50773, 64509, 0, 43445, 42954, 36953, 64576, 43992, 64577, 64579, 0, 42107, 42204, 0, 42415, 51677, 0, 42955, 51922, 0, 52923, 43993, 0, 47610, 42108, 40920, 64582, 37730, 42657, 0, 0, 46921, 42109, 42205, 42206, 0, 42417, 42416, 0, 51678, 42658, 0, 51923, 0, 42956, 0, 0, 52337, 52338, 52339, 36203, 43446, 43447, 52336, 43448, 0, 0, 0, 43994, 52924, 0, 53626, 44666, 0, 53625, 0, 45417, 54604, 45418, 54605, 0, 64588, 36094, 46173, 0, 0, 0, 56674, 0, 0, 57791, 57790, 0, 47611, 0, 48245, 58742, 48842, 59764, 49329, 38328, 50547, 63448, 50896, 35786, 0, 0, 52340, 0, 52925, 45419, 64591, 46922, 0, 0, 39034, 49749, 0, 0, 0, 50897, 42958, 64593, 42957, 43995, 0, 53627, 0, 45421, 45891, 45422, 45420, 46174, 0, 57792, 47612, 48246, 64596, 51532, 51679, 0, 51925, 42959, 51924, 42960, 0, 64175, 43452, 52343, 52342, 43451, 43449, 43450, 52341, 36204, 0, 43997, 52926, 44000, 43996, 44002, 43998, 43999, 44001, 0, 0, 0, 44669, 44668, 44667, 0, 0, 0, 54607, 45423, 45426, 45424, 0, 54606, 45429, 0, 45425, 54608, 45428, 45427, 0, 0, 64097, 55542, 55541, 64599, 46177, 46175, 46176, 55543, 46923, 56676, 46924, 56675, 0, 39792, 58743, 0, 0, 48248, 57793, 48247, 0, 47613, 41041, 60638, 59765, 49330, 60637, 62016, 62536, 62537, 35964, 42207, 35787, 42418, 0, 0, 0, 51579, 0, 0, 42962, 42964, 0, 51682, 51928, 51927, 51926, 0, 51681, 51680, 42660, 42963, 42961, 42659, 0, 37742, 0, 43453, 52344, 64725, 43454, 51933, 0, 51935, 51934, 52345, 0, 0, 51930, 0, 42968, 42966, 0, 51929, 51931, 51937, 0, 42965, 0, 51932, 51941, 43456, 0, 51938, 42967, 0, 51936, 51939, 0, 43455, 0, 43457, 51940, 0, 0, 0, 0, 0, 0, 0, 0, 52399, 52386, 52350, 52398, 52393, 44007, 43458, 52394, 52397, 44003, 52396, 43459, 43464, 43462, 52387, 0, 52348, 52389, 43469, 52400, 44004, 52390, 0, 44005, 43465, 52392, 64681, 52941, 44006, 52347, 43466, 44008, 43467, 43463, 43468, 52391, 52346, 52395, 43460, 0, 64609, 52349, 52388, 52385, 43461, 0, 52927, 0, 52928, 0, 35174, 0, 0, 0, 0, 52938, 53665, 52939, 44014, 52942, 52932, 44013, 52934, 0, 52935, 64203, 0, 52937, 44009, 0, 0, 44707, 0, 63962, 52933, 52929, 44708, 0, 0, 52943, 44670, 53629, 52936, 0, 53628, 52931, 52940, 0, 0, 44012, 44705, 44018, 44706, 52944, 53630, 44011, 44710, 44017, 44016, 44015, 44709, 52945, 44711, 44010, 0, 52930, 0, 0, 37754, 0, 41184, 0, 0, 0, 0, 0, 0, 37739, 45430, 53668, 53670, 0, 53672, 44712, 44718, 54611, 53676, 53667, 45432, 54609, 0, 44717, 44715, 53678, 0, 54610, 0, 53669, 0, 44716, 53673, 44719, 53675, 0, 0, 44714, 53674, 53677, 53671, 64619, 44713, 45433, 0, 53666, 45431, 64620, 0, 0, 37992, 45434, 0, 0, 0, 0, 0, 0, 0, 54613, 54622, 46180, 64621, 45436, 45475, 46181, 54624, 45482, 55545, 54614, 45474, 45477, 45438, 54612, 54626, 54629, 55625, 0, 54627, 55549, 45473, 45480, 45484, 54621, 55544, 54625, 45435, 55546, 54628, 55548, 54617, 0, 46178, 0, 54615, 54616, 45479, 0, 36209, 45478, 54619, 45483, 54623, 45476, 54620, 64868, 45481, 46182, 46179, 55547, 39354, 54618, 0, 45437, 39632, 39521, 41189, 0, 0, 0, 0, 0, 0, 46187, 46191, 55616, 46929, 46189, 55620, 46193, 56677, 55622, 46931, 46185, 46188, 55623, 41051, 55624, 55630, 46195, 46932, 0, 55626, 55631, 55619, 46942, 38572, 46933, 46194, 55617, 55632, 38720, 46941, 46192, 46926, 55629, 0, 46196, 55621, 55550, 46186, 55618, 0, 55627, 40689, 46925, 46930, 46183, 55628, 0, 46928, 0, 0, 35917, 46184, 0, 0, 0, 46940, 57795, 56688, 0, 56680, 57794, 0, 56684, 56686, 40830, 0, 56683, 0, 46939, 0, 56682, 46943, 0, 0, 0, 57810, 0, 36210, 46938, 47680, 56689, 57796, 64630, 0, 46936, 56681, 56685, 47614, 46927, 56678, 56679, 47681, 46935, 46937, 46934, 56687, 38569, 0, 57800, 57801, 57806, 48253, 57813, 0, 47687, 41070, 47686, 57808, 64682, 48252, 57797, 47685, 64461, 57812, 47683, 47684, 64628, 57809, 58794, 48250, 46190, 0, 57811, 48291, 57803, 0, 48251, 41076, 48290, 57798, 57802, 57799, 57805, 47688, 48249, 47682, 0, 58746, 57807, 0, 48289, 41073, 48292, 0, 57804, 64633, 48254, 58745, 0, 0, 0, 64636, 0, 58750, 48846, 58744, 59811, 58793, 48296, 0, 48294, 48844, 58790, 58786, 48300, 40016, 59768, 0, 37753, 37752, 48298, 58785, 41181, 59766, 0, 58789, 0, 58792, 58749, 0, 48299, 0, 0, 48293, 59767, 48845, 58791, 48295, 48297, 58788, 48301, 58787, 58748, 58747, 48843, 58795, 59770, 60640, 48848, 36213, 59810, 36214, 59774, 0, 60641, 0, 48849, 59809, 37748, 59772, 49332, 60639, 0, 59769, 59771, 49333, 48851, 49331, 48850, 49335, 59773, 48847, 0, 36215, 64677, 0, 0, 64674, 0, 0, 61391, 0, 61383, 0, 37059, 0, 0, 0, 60647, 61384, 60643, 0, 41081, 49750, 60645, 60644, 49334, 60642, 60646, 61392, 61388, 61390, 0, 61385, 61386, 0, 61389, 61387, 50023, 0, 0, 50026, 50025, 50024, 50273, 62538, 50274, 62017, 50399, 62924, 50400, 50548, 50634, 63449, 0, 63450, 63451, 0, 0, 63930, 42208, 51580, 42419, 0, 42662, 42663, 42661, 0, 42664, 42970, 42969, 0, 52401, 43471, 43470, 0, 0, 53679, 45485, 45486, 0, 0, 0, 46197, 56690, 46944, 46945, 56692, 56694, 56693, 0, 57815, 0, 57814, 47689, 57816, 36217, 58796, 48302, 0, 48852, 0, 49336, 49751, 49337, 0, 42209, 35836, 0, 41078, 51942, 0, 0, 52402, 43473, 43472, 43474, 44019, 52946, 52947, 0, 0, 53680, 44720, 45487, 46198, 55633, 42210, 35789, 42110, 42211, 0, 51581, 42423, 42422, 42420, 42421, 0, 0, 0, 42667, 51689, 51691, 42666, 51683, 0, 51684, 0, 51690, 51686, 51688, 42665, 51685, 51692, 51687, 0, 40794, 0, 0, 0, 0, 42977, 42986, 42984, 51952, 51949, 51957, 42982, 51958, 0, 42975, 51955, 0, 42981, 51951, 51950, 42979, 51956, 42980, 43475, 42974, 51953, 40948, 51943, 42971, 40890, 42990, 51948, 51954, 42976, 42978, 0, 51944, 0, 51945, 51946, 36218, 42989, 42983, 42988, 51947, 42987, 42973, 42972, 42985, 0, 0, 0, 0, 40517, 0, 0, 0, 0, 0, 0, 37808, 0, 41077, 0, 43489, 52414, 52407, 43484, 43503, 52403, 52410, 52412, 52415, 43498, 0, 52411, 52404, 43496, 52408, 0, 52416, 43481, 0, 52413, 43491, 43490, 52406, 43479, 0, 34781, 43480, 39750, 43478, 64686, 43502, 43494, 43488, 43476, 52409, 43487, 43477, 43495, 43504, 52948, 43492, 52405, 43482, 43485, 43486, 64688, 43500, 43501, 43499, 43493, 43497, 43483, 44020, 0, 0, 64081, 0, 0, 0, 0, 0, 36219, 0, 0, 0, 0, 0, 52954, 44097, 44024, 44026, 44096, 52966, 44029, 53681, 44721, 44099, 52951, 52959, 44030, 52958, 52955, 52963, 52965, 44023, 44027, 44098, 44723, 52960, 44025, 44101, 52953, 0, 0, 0, 44028, 44722, 44022, 0, 52950, 52957, 52949, 52952, 52956, 53682, 44100, 0, 52961, 52962, 52964, 44021, 0, 36220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44737, 53694, 44735, 44736, 53684, 53700, 40662, 44726, 0, 37804, 54630, 53702, 53696, 40795, 53687, 37801, 53705, 53690, 44732, 54653, 53693, 44734, 44725, 0, 53707, 53695, 44728, 53688, 53685, 53686, 44729, 53701, 53708, 44731, 53692, 53691, 44739, 44738, 44724, 44730, 44733, 53704, 0, 0, 53698, 44727, 53683, 53706, 53697, 53699, 53703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41084, 54631, 0, 45495, 45515, 45514, 0, 45503, 64690, 54649, 54645, 54642, 54694, 45498, 45490, 0, 0, 54647, 46248, 45494, 54689, 35521, 45516, 45513, 54651, 54634, 0, 40884, 45512, 54691, 54633, 45501, 45505, 54690, 0, 54643, 45506, 45500, 54632, 64684, 46200, 54693, 54641, 45511, 54644, 54692, 45510, 0, 55634, 0, 45491, 54639, 45496, 45507, 0, 45502, 54648, 54638, 54636, 54654, 45488, 45508, 45492, 46199, 54652, 45493, 0, 45489, 45504, 45499, 45497, 54640, 45509, 54637, 54650, 54646, 55636, 55635, 0, 0, 0, 0, 0, 0, 0, 40524, 0, 0, 0, 54635, 55652, 0, 46202, 36805, 55658, 55641, 55655, 56695, 46205, 55659, 55662, 46204, 55644, 55661, 55660, 46206, 55637, 46201, 46243, 37805, 46241, 55657, 0, 55647, 46245, 55664, 55656, 55665, 46253, 46251, 55654, 55653, 40387, 55651, 55645, 46244, 36258, 46242, 53689, 55638, 40266, 56759, 55639, 46203, 46250, 56697, 0, 46246, 46247, 55640, 55663, 56696, 55648, 55643, 46249, 55649, 55646, 0, 64694, 46254, 0, 36259, 40523, 0, 40525, 0, 0, 0, 0, 0, 0, 0, 46960, 36260, 0, 56700, 56753, 56758, 56746, 46956, 56763, 46953, 56698, 0, 56699, 46946, 46955, 56740, 46958, 46959, 56741, 0, 56754, 56760, 46954, 0, 46948, 56739, 56701, 56762, 56744, 56745, 56702, 56756, 56747, 56757, 56749, 0, 46949, 57817, 46952, 46950, 56761, 56752, 56748, 0, 35581, 56737, 47699, 56751, 46957, 56743, 64693, 56742, 64707, 37810, 0, 46951, 46947, 57838, 56755, 56750, 0, 56738, 0, 0, 0, 0, 0, 0, 0, 57833, 0, 57818, 57829, 0, 57836, 47697, 46252, 57834, 47692, 0, 0, 0, 47691, 57841, 36261, 57819, 57832, 57820, 57831, 47695, 57835, 55650, 0, 0, 0, 57842, 57827, 47698, 58810, 48303, 0, 57840, 57839, 47700, 58797, 48304, 58798, 37793, 57823, 57824, 57821, 57826, 57822, 57843, 47694, 48305, 47696, 47701, 35526, 57825, 0, 57837, 0, 0, 57830, 0, 0, 58801, 0, 47690, 48308, 59818, 58806, 58805, 58807, 35419, 0, 58804, 64697, 35149, 48315, 48312, 0, 48313, 58799, 58802, 58812, 48321, 48319, 0, 58803, 55642, 48306, 58809, 58800, 0, 48322, 58808, 47693, 48311, 57828, 0, 0, 48314, 0, 48318, 48320, 48317, 48316, 65236, 48310, 58811, 48307, 48323, 35448, 0, 37803, 0, 0, 0, 0, 48856, 48857, 59817, 48866, 48863, 36263, 48854, 48861, 59819, 48859, 48853, 0, 48860, 0, 59816, 49339, 48855, 0, 48862, 49338, 59815, 59814, 0, 48864, 40773, 48865, 0, 59813, 59812, 49340, 59822, 48858, 59820, 0, 35414, 0, 0, 49341, 64703, 49346, 60650, 60652, 64704, 49343, 36582, 60653, 60649, 35492, 60651, 49344, 49347, 0, 60648, 49342, 49345, 49753, 59821, 49752, 0, 0, 49758, 61396, 0, 49756, 49757, 61399, 61395, 49754, 61393, 50027, 61397, 0, 61398, 61394, 0, 49755, 62018, 0, 62021, 35139, 0, 62022, 62020, 62023, 50028, 62019, 37875, 0, 62542, 50276, 62541, 62540, 62539, 50275, 50277, 0, 62925, 50402, 50401, 64683, 40610, 63201, 63200, 63203, 50635, 50549, 63453, 63202, 0, 0, 63452, 50637, 50636, 50675, 63657, 63727, 42212, 40391, 0, 55666, 59823, 50898, 35790, 42668, 51959, 42993, 42991, 0, 42992, 0, 52417, 43505, 44102, 0, 52967, 0, 52968, 0, 44103, 53710, 0, 44740, 44741, 53709, 0, 0, 64709, 0, 45523, 0, 45519, 0, 54695, 45526, 45525, 45518, 45521, 45524, 45520, 0, 0, 55670, 45517, 46255, 64715, 0, 0, 46257, 46258, 55669, 55672, 46256, 55667, 55671, 0, 55668, 37811, 46961, 64714, 0, 56764, 0, 0, 47702, 57844, 48867, 48324, 58813, 48325, 48326, 58815, 58814, 58816, 59825, 0, 0, 59824, 60655, 60654, 49348, 49349, 62024, 64713, 36268, 42213, 64454, 35175, 0, 35966, 55673, 0, 0, 0, 46260, 46259, 56765, 0, 61400, 50403, 63454, 42214, 0, 44742, 0, 45528, 45527, 55674, 55675, 46962, 57845, 47703, 59826, 0, 42215, 42424, 0, 43506, 52418, 0, 52969, 44104, 45529, 0, 55676, 46261, 46963, 0, 58817, 58818, 0, 64717, 60656, 49759, 63728, 42216, 0, 52419, 43507, 44105, 40179, 52970, 0, 44743, 53714, 53712, 53713, 44744, 53711, 0, 0, 0, 0, 45531, 45532, 54696, 45533, 45530, 55677, 64720, 55678, 56766, 38331, 0, 47705, 47704, 0, 0, 60657, 61401, 0, 62026, 62025, 62543, 64723, 51550, 44106, 64724, 0, 42217, 42425, 0, 42670, 42669, 0, 0, 42671, 42672, 51694, 51693, 51960, 42994, 51963, 51962, 51961, 51964, 0, 0, 0, 0, 43508, 52425, 52421, 52430, 0, 36270, 43515, 0, 43513, 52426, 52422, 52429, 43512, 43584, 52424, 52420, 43518, 52427, 43511, 52428, 43514, 43516, 52432, 52431, 52423, 43510, 43509, 43517, 0, 0, 64727, 0, 0, 0, 52975, 52981, 37851, 44112, 44109, 52972, 52977, 65123, 44115, 44107, 52976, 44110, 44113, 0, 0, 52979, 0, 44108, 52984, 44111, 37845, 44114, 52973, 52978, 52982, 52974, 52971, 0, 0, 52983, 52980, 0, 0, 0, 0, 0, 0, 44752, 44745, 44748, 64730, 44751, 0, 53717, 39793, 44746, 53715, 64733, 44750, 34660, 0, 44747, 0, 53718, 44749, 36271, 0, 0, 0, 64242, 0, 54700, 45535, 54699, 54701, 45534, 45539, 53716, 34741, 54698, 54702, 37848, 45536, 54697, 45538, 64735, 45537, 0, 55719, 37843, 55714, 0, 46262, 46266, 46263, 55717, 55720, 64737, 64738, 0, 46265, 46270, 56775, 55718, 46268, 55715, 55713, 36470, 46269, 0, 55716, 0, 0, 0, 46969, 64610, 56767, 46966, 46967, 46965, 56772, 56771, 56768, 46971, 37841, 0, 56770, 46267, 36273, 0, 56774, 56769, 46968, 46964, 46970, 56773, 39001, 0, 0, 47708, 0, 57848, 57847, 57846, 47706, 0, 64338, 0, 0, 0, 47707, 58821, 58824, 48328, 0, 64339, 48327, 58825, 58820, 48330, 58822, 64333, 48329, 58819, 40127, 58823, 48873, 48870, 59835, 59834, 0, 59833, 59828, 39794, 59829, 0, 0, 0, 48871, 0, 48868, 48872, 59827, 48869, 59830, 59831, 59836, 64336, 37822, 59832, 0, 0, 60658, 0, 0, 0, 49351, 0, 61404, 49350, 61402, 61403, 49760, 50030, 62027, 0, 50029, 0, 0, 62545, 62546, 0, 50278, 36059, 62544, 50404, 0, 63455, 50638, 63658, 63659, 0, 42218, 40433, 42673, 42674, 42995, 0, 52433, 44116, 44753, 45540, 0, 0, 45266, 0, 46271, 46272, 46028, 55721, 64747, 46972, 57850, 57849, 0, 0, 42219, 42675, 52434, 43586, 41147, 43585, 39806, 52985, 52986, 0, 53719, 53720, 44754, 44755, 36275, 44756, 54703, 35922, 0, 45542, 0, 46274, 39656, 46273, 56776, 57210, 57851, 59837, 0, 36572, 49761, 50279, 42220, 0, 42428, 42429, 42427, 42430, 42426, 0, 0, 42678, 0, 51702, 42677, 42679, 40185, 0, 51697, 51696, 51699, 51698, 51701, 42676, 51695, 51700, 0, 0, 0, 0, 64080, 51965, 43005, 51966, 52035, 43004, 0, 52039, 52034, 52037, 42997, 42998, 42999, 43000, 0, 43072, 0, 52033, 43002, 43073, 0, 52032, 52038, 0, 43001, 52036, 64753, 42996, 43006, 39143, 64755, 0, 0, 0, 0, 64754, 0, 0, 43607, 36042, 52436, 43587, 34677, 43597, 43598, 43590, 43608, 43592, 52444, 43603, 52439, 43593, 52454, 52455, 52447, 52440, 43606, 52452, 43601, 43599, 0, 52453, 34746, 52451, 52443, 52435, 52442, 43594, 0, 43600, 0, 43588, 52446, 52445, 52437, 37861, 43602, 52449, 52438, 43605, 52456, 43589, 0, 43596, 52441, 52450, 43604, 0, 43591, 43595, 0, 52448, 39513, 0, 0, 0, 36277, 0, 0, 0, 0, 0, 0, 0, 64845, 0, 53083, 44124, 44137, 64862, 53078, 53068, 44130, 53066, 44123, 53061, 44133, 53074, 52990, 53057, 0, 0, 0, 36733, 53060, 52987, 53073, 53089, 44128, 53062, 53080, 0, 52989, 53087, 53088, 53091, 53082, 53067, 53075, 44134, 44121, 44129, 44141, 44118, 44120, 0, 38215, 64758, 53059, 44138, 44131, 53085, 53056, 44140, 44135, 53065, 0, 0, 44139, 53072, 53064, 44132, 53084, 53076, 0, 44126, 53090, 53063, 44122, 53081, 53071, 44127, 53077, 44119, 52988, 44136, 44771, 44125, 53070, 53069, 53058, 37456, 53086, 0, 53079, 0, 35176, 44117, 36278, 64763, 41085, 39164, 35177, 0, 0, 0, 0, 0, 0, 0, 0, 65103, 0, 0, 37462, 0, 53740, 44778, 53741, 0, 53729, 44767, 44779, 0, 53722, 64201, 53731, 53739, 37864, 53721, 53748, 44757, 64760, 0, 0, 53747, 53742, 0, 53743, 44765, 44776, 53733, 0, 53734, 53744, 53735, 0, 53730, 53724, 53725, 53738, 53732, 40163, 64937, 44758, 44762, 53746, 53726, 44774, 44770, 64580, 0, 44773, 44780, 44763, 44775, 53737, 44777, 44760, 38464, 44759, 53723, 36280, 53727, 44768, 53745, 53736, 53728, 44772, 44769, 0, 44761, 44764, 39754, 36793, 0, 0, 0, 0, 0, 0, 64766, 0, 0, 0, 0, 0, 0, 0, 35178, 0, 0, 0, 0, 0, 54724, 0, 54708, 54709, 54713, 0, 54728, 54725, 0, 54718, 54717, 45549, 54721, 54736, 54704, 0, 54737, 54723, 54741, 54729, 45548, 54727, 45543, 45564, 45554, 36281, 45558, 45557, 54705, 37246, 54734, 54740, 54732, 54739, 0, 0, 54720, 54706, 54738, 54722, 45546, 45559, 0, 54731, 45552, 37876, 0, 0, 54730, 54707, 45560, 0, 45562, 54733, 45563, 45545, 54714, 54735, 0, 64380, 45551, 45561, 54716, 54726, 54711, 54715, 45556, 54710, 45544, 45553, 45550, 54719, 44766, 55744, 45547, 37863, 0, 0, 38895, 0, 0, 0, 65098, 0, 0, 0, 0, 0, 64837, 45555, 38565, 55747, 55769, 55758, 46294, 65248, 46289, 55741, 46290, 55757, 0, 55750, 55763, 46286, 55723, 55765, 46276, 55731, 46279, 46278, 0, 46295, 0, 55725, 55759, 55760, 46281, 46277, 55739, 0, 46288, 55734, 0, 55761, 46284, 55753, 55766, 55728, 55733, 55727, 0, 46283, 55746, 56798, 55729, 46287, 55738, 55762, 46282, 55735, 55732, 55749, 46285, 46275, 46297, 55752, 55751, 0, 0, 64840, 64839, 65266, 65130, 55724, 46280, 55764, 55740, 55742, 36285, 55755, 55754, 55722, 46291, 46293, 55730, 55737, 55745, 46292, 55736, 55748, 55767, 0, 55756, 39841, 36002, 39607, 36604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55768, 0, 0, 0, 0, 55726, 0, 40865, 0, 0, 56818, 47014, 0, 56816, 56795, 56800, 56793, 64849, 56812, 56779, 56786, 0, 56810, 56820, 56796, 64173, 56783, 56802, 56807, 56787, 36286, 56804, 56784, 35236, 0, 56791, 56792, 47016, 56811, 56809, 0, 56780, 56814, 0, 56815, 56817, 47020, 47012, 39641, 54712, 56788, 56806, 56789, 47009, 47025, 56813, 47023, 47019, 56778, 47011, 64846, 56781, 47024, 36288, 56797, 56777, 38896, 47017, 56801, 56785, 47018, 56794, 46974, 46296, 56803, 55743, 56782, 37812, 64836, 56808, 47013, 56805, 47010, 56799, 47021, 56790, 56819, 0, 0, 0, 0, 40871, 0, 47015, 57030, 0, 36290, 47022, 0, 0, 0, 39350, 0, 0, 57930, 57928, 0, 57950, 57926, 0, 57944, 46973, 47711, 57922, 57949, 64850, 57927, 57941, 47716, 47709, 0, 57947, 36289, 57920, 57946, 36422, 47727, 57937, 57953, 47725, 57929, 47710, 57931, 57945, 47719, 57924, 47723, 47713, 57933, 57923, 57852, 41169, 57943, 47720, 57952, 57853, 47717, 0, 57939, 0, 47718, 57925, 57936, 57932, 57934, 40906, 47712, 57951, 47726, 57935, 0, 57954, 0, 0, 57854, 57940, 47715, 47724, 47722, 57921, 57942, 47721, 37583, 0, 47714, 57938, 40180, 36292, 0, 0, 57948, 0, 0, 0, 0, 0, 0, 0, 64833, 58837, 0, 58833, 58829, 58849, 58846, 48333, 39756, 0, 58853, 58836, 48344, 58843, 0, 0, 58832, 58842, 48341, 58862, 0, 58859, 58845, 58830, 64855, 64751, 58850, 58852, 48337, 58840, 58835, 58826, 48334, 48342, 40158, 58855, 48343, 58827, 58861, 58848, 58854, 48340, 64834, 39020, 58851, 0, 58858, 0, 48345, 0, 48339, 58844, 58831, 58863, 58828, 58856, 48336, 38905, 58838, 38232, 58839, 48335, 48332, 58834, 48338, 0, 48331, 0, 58857, 58860, 58841, 59850, 34742, 0, 39006, 65147, 38093, 0, 0, 0, 0, 59842, 37870, 59838, 48886, 0, 0, 48875, 48880, 48876, 59852, 59863, 48874, 59844, 59853, 58847, 59854, 0, 36003, 48881, 64858, 59869, 48885, 48888, 59840, 0, 48884, 37877, 59867, 59868, 59858, 59857, 59849, 37871, 36586, 59859, 59866, 59865, 36699, 48879, 48877, 59851, 59848, 0, 59845, 59864, 48887, 59862, 48883, 48882, 35934, 59856, 36294, 59839, 59841, 59843, 59861, 59855, 48878, 0, 59846, 0, 59860, 0, 36296, 0, 0, 36295, 0, 59847, 0, 0, 0, 37879, 0, 0, 0, 49359, 60741, 49352, 60661, 36297, 60737, 49354, 60744, 0, 60668, 0, 60663, 64498, 0, 60745, 60659, 60670, 38512, 49361, 60740, 60746, 60669, 49353, 60736, 60660, 49360, 0, 36299, 60743, 60665, 49356, 64860, 60667, 60664, 49362, 60666, 49355, 49358, 60739, 60662, 60742, 36709, 60738, 0, 0, 36301, 49763, 61415, 49768, 49769, 0, 40360, 38137, 49762, 61414, 36302, 61411, 61412, 49766, 61406, 61410, 49765, 0, 61407, 37866, 0, 0, 0, 49767, 49764, 0, 61405, 61409, 61413, 64863, 37872, 40886, 62033, 62030, 62039, 0, 62038, 62036, 62031, 0, 50034, 36303, 0, 0, 0, 38755, 62032, 50033, 49357, 62035, 50032, 62040, 62034, 62029, 61408, 0, 0, 0, 50031, 0, 62028, 62550, 0, 62549, 62037, 50280, 0, 62553, 62554, 62548, 62552, 0, 62547, 0, 0, 36304, 0, 62929, 62551, 50407, 50405, 62927, 0, 0, 0, 62930, 0, 62926, 62928, 50406, 37873, 0, 0, 63205, 63206, 50550, 63204, 0, 0, 0, 63458, 50639, 63456, 63457, 63660, 0, 0, 50774, 63731, 63729, 63730, 63732, 0, 0, 64866, 63931, 0, 42221, 42680, 0, 43609, 0, 52457, 0, 0, 53092, 0, 0, 0, 53749, 53751, 0, 53750, 0, 53752, 45565, 54743, 53753, 64869, 54742, 54744, 54745, 55770, 46299, 55771, 55773, 46300, 46298, 55772, 0, 56826, 56824, 56823, 0, 56822, 56821, 47026, 56825, 47728, 57955, 57957, 47729, 57956, 48347, 0, 48346, 58864, 40923, 0, 59871, 59870, 59872, 37880, 0, 48889, 0, 60747, 49363, 0, 61416, 49770, 62041, 50551, 42222, 42431, 42681, 43074, 43610, 43611, 0, 0, 44142, 0, 0, 53754, 0, 35831, 0, 0, 47027, 0, 64870, 0, 59089, 48890, 49771, 42223, 35791, 42682, 0, 0, 52459, 43612, 52458, 36305, 53093, 44143, 53094, 0, 44144, 0, 53756, 44782, 44781, 0, 54750, 54748, 54749, 54747, 0, 54746, 0, 0, 55774, 55777, 46302, 55775, 46301, 55776, 0, 56827, 0, 0, 57958, 57959, 57960, 0, 58867, 58866, 48348, 58865, 58868, 59873, 0, 0, 59874, 59875, 0, 60748, 49364, 49772, 62042, 0, 50408, 51551, 0, 44145, 53095, 44783, 0, 0, 45566, 0, 46303, 55778, 0, 47029, 47028, 36306, 0, 57961, 57962, 48349, 48350, 59877, 59876, 61417, 63459, 42224, 51552, 42432, 0, 43075, 52040, 0, 44146, 47030, 42225, 0, 53096, 44147, 53097, 0, 49365, 42226, 64881, 0, 52460, 0, 53098, 64879, 53826, 53825, 53758, 0, 53757, 53827, 53824, 0, 36307, 45632, 45633, 0, 0, 46304, 55779, 0, 55780, 55781, 0, 0, 0, 56897, 56898, 56896, 40935, 56829, 56830, 47031, 57963, 58871, 58870, 58869, 58872, 59879, 59878, 48891, 59880, 0, 49366, 60749, 0, 61418, 62043, 63207, 0, 42227, 42434, 42433, 0, 43613, 51553, 51582, 42683, 0, 51703, 52041, 52042, 43614, 37053, 52461, 0, 44148, 53099, 53100, 0, 44784, 44788, 53828, 44787, 44785, 44786, 0, 54751, 45634, 46307, 0, 46305, 46306, 55782, 40912, 0, 47730, 42228, 35792, 51617, 64882, 42435, 40110, 35793, 51620, 0, 35547, 42438, 51619, 42437, 42436, 43076, 51618, 0, 0, 51704, 0, 0, 64228, 51708, 51710, 51776, 42693, 42694, 51707, 42689, 0, 51705, 0, 51709, 42690, 0, 42685, 38350, 42686, 64886, 42692, 51706, 42684, 43077, 42687, 42688, 42691, 0, 0, 0, 52059, 52057, 52044, 43089, 52051, 43084, 52045, 0, 52053, 64354, 52050, 43087, 52049, 43094, 52058, 43096, 36308, 43098, 0, 52043, 64888, 43085, 52060, 0, 43092, 43095, 36579, 52549, 43079, 43102, 43093, 52046, 43082, 43097, 52054, 43080, 43081, 52547, 52047, 43088, 43099, 52061, 52048, 43086, 0, 43091, 52462, 43100, 52055, 43090, 0, 43101, 43078, 52052, 43083, 64951, 52548, 0, 36982, 0, 0, 39110, 0, 0, 0, 0, 0, 0, 0, 36309, 43626, 43642, 52469, 43633, 38865, 52555, 43618, 40630, 43621, 52546, 0, 52467, 52471, 43629, 43631, 52474, 43638, 43624, 43622, 43623, 43637, 52551, 43632, 52473, 52475, 43630, 43635, 52476, 52554, 0, 44149, 43641, 64199, 43619, 52553, 41026, 52557, 52472, 52559, 52544, 43628, 52468, 43627, 43645, 43634, 0, 52466, 53109, 43640, 43644, 52545, 52550, 39027, 43646, 43639, 43625, 43615, 0, 43620, 0, 52470, 43616, 52558, 40956, 52464, 52463, 52477, 52465, 43643, 44789, 43636, 52478, 43617, 0, 44198, 0, 0, 0, 52556, 0, 0, 0, 0, 0, 36005, 53116, 53153, 36311, 53156, 53111, 37627, 36312, 53159, 53162, 53164, 53108, 44150, 44155, 53833, 44205, 53157, 53165, 53115, 53107, 0, 0, 0, 53860, 44158, 53154, 53112, 53114, 44197, 0, 53117, 44157, 53104, 53160, 0, 53163, 0, 37967, 44154, 36313, 44200, 53101, 44202, 44152, 44206, 53161, 53103, 44203, 53854, 52552, 44156, 44151, 53110, 53102, 44204, 44196, 53155, 44201, 44199, 53113, 44193, 53105, 44194, 44195, 53106, 53158, 44153, 53118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35179, 0, 0, 0, 0, 0, 0, 0, 0, 38862, 53836, 44797, 44867, 64243, 64942, 0, 53845, 53851, 53847, 53834, 53837, 53830, 53831, 44874, 44794, 53846, 53855, 44869, 44790, 0, 44864, 53838, 44866, 53839, 53849, 64431, 37559, 0, 44868, 53864, 53832, 44796, 44795, 44872, 53829, 53862, 53850, 53863, 53857, 53843, 53858, 36314, 53852, 53861, 53859, 44873, 53844, 44793, 44792, 44865, 44871, 53856, 44870, 53841, 45635, 40026, 53865, 53840, 53835, 44798, 44875, 44791, 64941, 53848, 53853, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36316, 37956, 0, 0, 0, 0, 45669, 54753, 54757, 0, 45650, 45648, 0, 36317, 45639, 54755, 54754, 45659, 0, 54760, 45653, 41174, 54778, 54855, 45636, 54775, 54768, 45671, 54752, 0, 54780, 0, 45668, 45656, 45667, 45646, 54764, 54782, 54774, 45647, 45641, 54853, 0, 54781, 54848, 45649, 45657, 54850, 54762, 54779, 54767, 54852, 45662, 45638, 45660, 54772, 54770, 54771, 45651, 54766, 54765, 45640, 54759, 54854, 45642, 54769, 45672, 0, 45666, 54758, 45663, 45661, 45670, 54776, 45665, 53842, 54777, 45664, 54849, 45637, 54773, 45655, 54761, 45654, 0, 45652, 45644, 45643, 55783, 54851, 35905, 0, 54763, 0, 38869, 55804, 37962, 45645, 0, 0, 0, 0, 37965, 0, 0, 0, 0, 38859, 0, 0, 0, 0, 0, 36318, 0, 0, 36319, 46401, 45658, 46318, 55798, 64952, 0, 55786, 46315, 46311, 55881, 46317, 46321, 46316, 46325, 55885, 55876, 36320, 65273, 55793, 46330, 46324, 55805, 64955, 55882, 55875, 46312, 55799, 46327, 55893, 55894, 0, 46309, 55880, 46329, 55803, 55789, 55790, 46333, 55794, 55801, 55795, 0, 46331, 46404, 55791, 55784, 55785, 0, 55787, 46314, 55800, 0, 46328, 46402, 64960, 64761, 55802, 55891, 55883, 46310, 55889, 46322, 36061, 46320, 64382, 55895, 46319, 55873, 55796, 55806, 46407, 55877, 55874, 55792, 46403, 55887, 55884, 55892, 46313, 55872, 46406, 0, 55879, 0, 0, 46323, 46326, 0, 55878, 46405, 55797, 54756, 0, 37555, 55888, 55886, 55890, 0, 0, 64943, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36321, 0, 55788, 46400, 0, 38355, 0, 56929, 56928, 56902, 47037, 0, 56927, 56905, 56906, 0, 47047, 56936, 47042, 56926, 35265, 56899, 47048, 47038, 56914, 56904, 56907, 56931, 47032, 56938, 56930, 47041, 56919, 47052, 0, 0, 47051, 47045, 0, 0, 56937, 47033, 56917, 56908, 56921, 56933, 47053, 64872, 47035, 56916, 40119, 56909, 47044, 36323, 47043, 56912, 56922, 56932, 56903, 56913, 47036, 56923, 47049, 47040, 56910, 47039, 56901, 56915, 56935, 46334, 47792, 56918, 57964, 56920, 56934, 47046, 56911, 47034, 47050, 48368, 56900, 0, 56925, 64192, 36325, 64100, 56924, 35143, 0, 0, 0, 0, 36324, 0, 0, 0, 0, 0, 36327, 36328, 0, 58026, 47789, 57981, 58020, 47778, 0, 57966, 47791, 0, 47735, 57965, 58032, 47793, 57969, 58019, 64967, 57971, 58035, 58031, 47733, 47777, 58963, 47790, 47741, 57967, 64944, 58030, 47779, 58027, 58040, 57973, 57982, 37957, 38870, 58038, 58028, 47740, 0, 0, 57980, 47734, 47732, 47784, 64710, 38980, 57978, 57975, 57976, 0, 58034, 0, 58039, 58037, 47738, 58041, 47742, 47783, 36329, 57968, 58874, 57977, 0, 47736, 47788, 47785, 47739, 58021, 57972, 47786, 58023, 47780, 47782, 47731, 36330, 58025, 58017, 57970, 47781, 58033, 58036, 57979, 58024, 65104, 47737, 48351, 58022, 58873, 0, 58029, 64972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57974, 58948, 58958, 48354, 58957, 58969, 48356, 58955, 40359, 58959, 48367, 0, 58950, 48359, 64973, 58962, 59888, 48371, 48370, 58964, 58947, 58974, 48365, 0, 48355, 58967, 0, 58971, 58976, 58965, 58953, 48358, 48361, 48369, 48364, 0, 58956, 58018, 64975, 0, 58952, 58975, 48360, 38354, 48363, 58977, 48352, 58966, 58875, 58972, 49375, 36333, 58954, 0, 48353, 58949, 48357, 58876, 47787, 58945, 64698, 58970, 58946, 58944, 48362, 0, 58968, 0, 58878, 58961, 58960, 58973, 58951, 48366, 0, 0, 0, 0, 0, 64965, 59891, 64978, 48969, 48894, 59968, 59883, 48961, 59895, 48968, 48963, 59893, 60751, 59899, 59970, 59898, 59881, 59896, 59972, 59974, 48893, 59973, 48964, 48970, 40156, 48967, 0, 59902, 48966, 59897, 38351, 59885, 59890, 36334, 59901, 48965, 48962, 48892, 48960, 59889, 0, 58877, 59884, 59887, 59969, 59892, 59882, 60750, 59971, 59886, 59900, 0, 0, 0, 64980, 60753, 49379, 0, 0, 49367, 38636, 38635, 49371, 60755, 60761, 60759, 49369, 49370, 49377, 60762, 60754, 49372, 0, 60758, 60757, 60763, 49378, 0, 49373, 49376, 60756, 49380, 49374, 49381, 49368, 60760, 0, 60752, 0, 37046, 61431, 64963, 0, 49777, 61428, 61430, 0, 49775, 61426, 61427, 61422, 0, 39083, 59894, 61423, 49776, 61419, 0, 49773, 61432, 49774, 61420, 61421, 61425, 49779, 0, 49778, 0, 0, 61424, 50040, 62047, 62053, 50041, 62044, 50038, 50035, 62055, 50039, 38638, 50036, 62046, 62049, 62050, 62051, 62054, 0, 61429, 62045, 50037, 62052, 62056, 62048, 36340, 0, 0, 62557, 50282, 62560, 50283, 62568, 62559, 62556, 0, 62558, 62562, 62565, 62564, 62567, 62555, 0, 50281, 62563, 62566, 62569, 62561, 62931, 62932, 62936, 62937, 0, 62934, 62935, 62933, 64992, 50409, 35943, 0, 0, 36342, 50552, 63211, 0, 36343, 63208, 63209, 63210, 50553, 0, 63461, 63460, 36858, 63663, 50676, 63661, 63664, 63662, 63733, 50775, 50789, 63907, 63852, 38864, 63906, 63952, 63953, 42229, 35794, 0, 34782, 36344, 42695, 51777, 0, 0, 52062, 37081, 43103, 35911, 43106, 64240, 52063, 0, 43104, 43105, 64993, 36345, 0, 64995, 52568, 52570, 52565, 52562, 52564, 0, 0, 36346, 43684, 64355, 0, 0, 43682, 37030, 0, 52566, 43683, 52563, 52560, 43681, 52567, 0, 52561, 43685, 52569, 0, 0, 0, 0, 53167, 39280, 53171, 0, 37355, 44215, 38768, 39023, 64994, 0, 53174, 0, 44207, 44210, 44212, 44214, 44211, 53170, 53169, 0, 44209, 53172, 53173, 0, 53166, 44213, 39154, 44208, 39676, 35180, 65021, 53168, 0, 39262, 0, 0, 0, 38333, 53879, 53880, 53881, 44880, 0, 44876, 53870, 64996, 53878, 53883, 44881, 37350, 53868, 53874, 53867, 53877, 64997, 64998, 53873, 44877, 44879, 53882, 0, 53866, 53869, 53875, 64999, 53876, 53884, 53872, 0, 44878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45677, 54862, 37972, 0, 54864, 54860, 39352, 54872, 54858, 54871, 45673, 54856, 55899, 54866, 45676, 38889, 54867, 54870, 0, 54874, 0, 54863, 37702, 54868, 0, 0, 45674, 45675, 54873, 54861, 54857, 54875, 0, 54865, 0, 0, 54869, 0, 0, 0, 54859, 0, 46408, 46409, 55909, 46415, 39011, 55897, 55906, 55896, 46412, 55904, 55902, 0, 55903, 46410, 0, 55907, 38332, 0, 65005, 65015, 0, 55900, 55898, 46411, 55901, 55905, 39024, 38646, 36521, 46413, 0, 0, 0, 55908, 37969, 0, 0, 36419, 0, 35674, 56944, 56951, 56953, 56993, 65006, 47066, 56939, 0, 47058, 65008, 56954, 47063, 56994, 47054, 65012, 56957, 39925, 56941, 56958, 56940, 0, 47068, 36078, 56952, 47055, 56995, 0, 47060, 56945, 47065, 56956, 56943, 56950, 56946, 56942, 47057, 47064, 47062, 47059, 47067, 47056, 56949, 38782, 47061, 0, 65009, 0, 56955, 39893, 56947, 39619, 0, 38856, 41179, 37328, 56948, 0, 40932, 58049, 36829, 47796, 37353, 0, 58045, 58051, 58047, 0, 47798, 58046, 58050, 58042, 39136, 58044, 47797, 0, 37578, 0, 38999, 58048, 58043, 35921, 47799, 0, 47794, 0, 65003, 58052, 39753, 47795, 58983, 58980, 58992, 58986, 58988, 48372, 58982, 58990, 40310, 40623, 58989, 58987, 0, 58993, 48375, 58984, 58991, 0, 48373, 40140, 0, 58979, 58981, 48374, 58978, 58994, 65002, 58985, 0, 36337, 59978, 48977, 65019, 0, 59989, 59987, 48971, 59977, 59980, 59981, 59976, 48981, 48982, 59975, 59990, 59985, 48975, 48972, 59984, 59982, 0, 0, 48978, 59986, 48973, 36435, 48974, 0, 59983, 48976, 59979, 0, 59988, 48979, 59991, 59992, 48980, 64207, 0, 49383, 49390, 60764, 60770, 0, 60768, 49386, 49385, 49382, 60766, 0, 0, 38649, 49388, 49387, 49384, 0, 60769, 60765, 60767, 0, 49389, 39103, 40521, 0, 49783, 61435, 0, 49780, 49781, 61437, 49782, 61434, 36007, 61433, 62060, 61436, 0, 62061, 50042, 62059, 0, 39882, 62058, 0, 62057, 50043, 65022, 37596, 50284, 0, 0, 62570, 62571, 65089, 37324, 37346, 0, 62940, 62939, 50410, 0, 62938, 63212, 63213, 0, 0, 63462, 63665, 65092, 34655, 63734, 63932, 50809, 63942, 42230, 35795, 43686, 43687, 65095, 0, 44216, 0, 0, 0, 0, 49391, 42231, 0, 43688, 44882, 47069, 42232, 0, 45678, 47800, 51554, 65096, 53175, 53885, 0, 58053, 0, 49392, 42233, 43689, 53176, 53177, 55910, 46416, 0, 0, 56996, 41188, 0, 47070, 58054, 0, 65099, 48376, 65100, 50044, 42234, 55911, 42235, 36287, 42697, 51778, 42696, 43109, 43108, 43107, 52064, 0, 0, 40568, 43690, 0, 43691, 52571, 0, 53178, 0, 53181, 44218, 53179, 0, 44217, 53180, 44219, 0, 53922, 53921, 53886, 44883, 0, 54877, 54878, 45679, 54876, 54879, 46418, 45680, 65105, 0, 46417, 55915, 55914, 37974, 55912, 55913, 0, 55916, 56998, 56997, 57001, 40289, 57000, 56999, 47801, 58057, 37975, 58056, 47802, 58055, 58995, 0, 58996, 48377, 0, 59993, 59994, 39270, 0, 62066, 50045, 62065, 62064, 62062, 62063, 50411, 62572, 63214, 63735, 0, 42236, 35797, 51621, 42439, 51622, 0, 41065, 0, 51779, 51780, 0, 0, 0, 0, 52070, 0, 0, 52066, 0, 52065, 43692, 52069, 43111, 52067, 43110, 52071, 52068, 0, 0, 52575, 53182, 52573, 52580, 39092, 43693, 0, 43696, 52581, 52577, 0, 52578, 0, 52572, 43695, 52574, 43694, 52579, 0, 52576, 0, 0, 53186, 44221, 44222, 41033, 53189, 53183, 0, 53188, 0, 53184, 44220, 53187, 53185, 0, 0, 0, 0, 0, 0, 0, 53928, 53925, 0, 53927, 44888, 44887, 44885, 53924, 53929, 44884, 44886, 53926, 54887, 53923, 53930, 41036, 0, 40549, 0, 0, 54882, 54886, 0, 54885, 55918, 55929, 0, 0, 54888, 39093, 54883, 55917, 45684, 0, 0, 45683, 54881, 54884, 45685, 0, 45682, 45681, 54880, 54889, 0, 0, 0, 55920, 55927, 0, 46420, 55926, 55923, 65112, 46422, 65106, 65107, 41061, 55925, 65113, 0, 55919, 55921, 55924, 55922, 46421, 55928, 46419, 47071, 39095, 39096, 57005, 57004, 57002, 0, 47074, 47073, 57006, 39098, 57003, 58058, 47803, 47072, 0, 0, 39099, 57008, 57007, 0, 58061, 58059, 48378, 40892, 47804, 58060, 58998, 0, 0, 0, 0, 48379, 58997, 59006, 59005, 59003, 0, 59002, 58999, 59000, 59001, 59004, 59041, 0, 0, 59999, 59996, 59997, 48983, 59995, 60001, 60000, 59998, 0, 60772, 60773, 49393, 41034, 49394, 60771, 40647, 49785, 61438, 49784, 50046, 0, 50081, 50285, 62574, 62573, 62941, 63215, 50554, 63464, 63463, 63465, 42440, 53190, 44889, 45686, 54890, 42441, 51623, 42237, 36009, 0, 51781, 39086, 0, 0, 52076, 52074, 52075, 52072, 43112, 52073, 37590, 0, 0, 0, 64225, 52589, 37332, 43699, 52587, 52583, 52586, 0, 52582, 43701, 52585, 64222, 43698, 43697, 65115, 43700, 52588, 52584, 0, 0, 0, 0, 44226, 44229, 53198, 53197, 53196, 44223, 53205, 53195, 35923, 44225, 53935, 0, 53202, 53200, 44228, 0, 53192, 53203, 34751, 53194, 53204, 53201, 53193, 65118, 44224, 53206, 53191, 44227, 64471, 65114, 38085, 0, 53940, 53931, 53942, 64202, 53934, 53945, 53946, 53932, 53944, 53941, 53939, 53943, 44895, 0, 44893, 39105, 38748, 53937, 65140, 53933, 38771, 53936, 53947, 53938, 44894, 53199, 0, 44890, 44892, 64070, 0, 0, 0, 38756, 54904, 54893, 54891, 65128, 54892, 38478, 54899, 38757, 54900, 54896, 45691, 54901, 54898, 54895, 35930, 45689, 54894, 45687, 45690, 54897, 54905, 44891, 45688, 54903, 54902, 45692, 0, 0, 0, 35233, 38394, 0, 37588, 65129, 55934, 64325, 0, 39112, 55969, 46432, 37103, 55975, 39113, 39114, 55977, 55970, 46426, 55974, 55973, 46427, 46433, 0, 46434, 55976, 46424, 55933, 55931, 55971, 55930, 46431, 55932, 55972, 55978, 46425, 46430, 46428, 46429, 37997, 38071, 65132, 46423, 0, 37995, 0, 0, 47081, 57015, 47080, 57019, 37628, 57009, 38379, 57020, 65139, 38766, 65119, 57010, 57011, 34744, 57021, 57018, 57016, 57017, 57013, 57012, 64957, 57022, 47077, 37589, 57014, 0, 47082, 47076, 47083, 65135, 65209, 47079, 47078, 65137, 34680, 58062, 47806, 47805, 64443, 0, 58067, 41173, 48380, 47807, 38395, 65143, 47809, 58068, 47075, 47808, 58064, 58066, 58063, 65145, 58065, 65141, 0, 0, 59051, 37981, 0, 59050, 59047, 48448, 60002, 48449, 59046, 65148, 48382, 0, 59048, 59045, 59042, 59049, 59043, 59044, 48381, 37700, 36518, 0, 0, 60777, 0, 60006, 0, 60005, 60007, 0, 60774, 48986, 37587, 60003, 38072, 48984, 34681, 48988, 48987, 60004, 60008, 0, 48985, 64625, 60781, 49397, 49786, 49398, 49395, 60778, 60776, 0, 60779, 0, 60782, 49396, 60780, 60775, 0, 38750, 61506, 61509, 62069, 61504, 36013, 62575, 61510, 0, 50082, 61508, 49787, 61505, 61507, 61511, 62070, 0, 62068, 34753, 0, 65191, 0, 50083, 62067, 37994, 0, 0, 50286, 37859, 0, 0, 39119, 50413, 63217, 50412, 63219, 63216, 63218, 50640, 63666, 42442, 52590, 53948, 53949, 45693, 57023, 48989, 50084, 50555, 63667, 42443, 41177, 52591, 65194, 0, 0, 53207, 0, 53208, 0, 41151, 41037, 41144, 0, 53950, 53951, 45694, 45729, 41166, 0, 0, 55979, 0, 57026, 57025, 57024, 58069, 0, 58070, 58071, 47810, 41143, 0, 59053, 59052, 0, 0, 60009, 48990, 48991, 65193, 60786, 60783, 60784, 60785, 61513, 61512, 49788, 62071, 62942, 42444, 35267, 44230, 0, 45730, 57027, 65195, 42445, 0, 53952, 45731, 0, 0, 46435, 46436, 0, 42446, 42447, 51782, 43114, 43113, 44231, 53209, 55980, 42448, 42449, 42450, 42451, 40436, 35181, 0, 43115, 43116, 52078, 52077, 40059, 0, 43702, 52594, 52592, 52593, 0, 39122, 0, 0, 0, 40873, 53210, 53211, 0, 65202, 44235, 44233, 65201, 44234, 44232, 0, 38873, 0, 41156, 44896, 38006, 0, 0, 0, 44900, 44899, 53953, 44898, 44897, 0, 53954, 39288, 0, 45734, 54907, 54906, 45732, 45733, 65203, 0, 0, 46438, 46437, 55982, 39123, 65204, 55981, 45735, 0, 39124, 0, 0, 0, 47085, 57029, 47086, 57028, 40889, 0, 0, 58072, 59054, 48450, 60010, 0, 0, 38001, 60787, 0, 50086, 50085, 0, 0, 50556, 42452, 52595, 39125, 65208, 45736, 58073, 47811, 50900, 0, 52079, 52080, 0, 0, 52596, 43704, 43705, 0, 0, 43703, 65210, 0, 0, 0, 44239, 44240, 44237, 44238, 0, 53212, 0, 0, 53213, 44236, 0, 0, 0, 0, 53955, 40540, 44904, 44905, 65211, 45739, 53961, 0, 44910, 44908, 53962, 53957, 44907, 44906, 44901, 53960, 53959, 53956, 44909, 41028, 53958, 44902, 0, 44903, 39127, 0, 45740, 54945, 54946, 45741, 54908, 54910, 54948, 54947, 54909, 0, 45737, 45738, 0, 55990, 46443, 46442, 55984, 46440, 39128, 55987, 46444, 55988, 46445, 55985, 46439, 46441, 55989, 0, 55986, 55983, 0, 0, 0, 0, 0, 57042, 0, 57031, 47088, 47091, 47090, 47095, 47094, 57043, 57041, 57034, 57038, 57037, 47092, 57040, 57036, 57044, 57035, 47093, 47087, 47089, 65212, 57033, 0, 0, 0, 40958, 58075, 47815, 58079, 47814, 58076, 47813, 0, 57032, 57039, 58078, 0, 47816, 58080, 58077, 58074, 0, 0, 59057, 59061, 59063, 59059, 59058, 59056, 48453, 48451, 48456, 48457, 59060, 48454, 59055, 48455, 47812, 59062, 48452, 0, 0, 65213, 60012, 0, 60011, 60019, 60013, 60018, 60015, 48992, 60017, 0, 0, 48993, 0, 48994, 40413, 60016, 60014, 0, 0, 40673, 0, 49400, 60788, 0, 0, 49399, 60791, 60789, 60790, 0, 0, 49401, 39130, 40415, 65215, 61517, 65214, 49825, 61518, 40683, 0, 49789, 61519, 49790, 61516, 61520, 0, 61514, 0, 0, 50087, 62072, 50088, 50287, 0, 61515, 50288, 40537, 41052, 0, 50414, 62943, 0, 50558, 63220, 50557, 65216, 63466, 50677, 50678, 38007, 39132, 63948, 65217, 0, 44241, 53214, 39134, 46446, 46447, 42453, 42698, 51783, 0, 52081, 43117, 0, 43706, 0, 44242, 44243, 44244, 54950, 53963, 44911, 0, 0, 45742, 54949, 65219, 0, 55992, 46449, 0, 55991, 46448, 0, 0, 57045, 48458, 59067, 59064, 59065, 59066, 0, 0, 65224, 0, 0, 60792, 65225, 61521, 0, 0, 0, 62577, 62576, 0, 63221, 42454, 52597, 44912, 0, 0, 0, 46450, 57046, 0, 65226, 58081, 0, 48459, 60020, 0, 61522, 62578, 42455, 0, 0, 43707, 44247, 53215, 44248, 44246, 0, 44245, 53964, 44913, 0, 65227, 44914, 44915, 0, 0, 0, 45744, 54951, 45743, 0, 40898, 0, 0, 35947, 55993, 45745, 46451, 57047, 47096, 47097, 0, 47817, 0, 47818, 48460, 48996, 60021, 48995, 0, 60793, 49402, 0, 61523, 62579, 42456, 43118, 52600, 52599, 43708, 52598, 43709, 52601, 0, 53221, 44251, 44250, 53223, 53222, 44255, 0, 44254, 0, 0, 44249, 0, 53217, 53218, 53219, 0, 44256, 53216, 44252, 53220, 44253, 39108, 0, 38064, 38065, 53967, 53971, 53969, 53968, 0, 53972, 0, 0, 0, 53973, 53974, 53966, 0, 53965, 65233, 44917, 44918, 0, 53975, 53970, 41153, 54960, 65234, 53976, 44919, 44916, 0, 41165, 0, 54954, 0, 54953, 0, 54955, 54956, 54958, 54957, 54962, 45749, 45746, 45750, 54952, 45751, 54961, 45748, 54959, 45747, 0, 65235, 0, 0, 39141, 55996, 55998, 55994, 55995, 0, 0, 55999, 56001, 56002, 55997, 56000, 46452, 0, 0, 57051, 0, 57056, 57048, 57052, 0, 65238, 57057, 57053, 47098, 47171, 0, 47101, 57049, 57050, 47822, 47174, 47102, 0, 47172, 47100, 57055, 47173, 57054, 47169, 47099, 47170, 57058, 58086, 58088, 0, 0, 37348, 0, 0, 0, 0, 36807, 38062, 47168, 35407, 38066, 58083, 47820, 58089, 47821, 58087, 58082, 58085, 58090, 47819, 58084, 0, 48462, 59071, 59070, 0, 48465, 48463, 59068, 48461, 59069, 0, 48464, 0, 36820, 0, 60029, 0, 60065, 39146, 60030, 60022, 60026, 60025, 60023, 48998, 48999, 48997, 60024, 60027, 60028, 0, 49000, 0, 49472, 60835, 0, 49404, 60795, 49406, 49473, 0, 65240, 49405, 60834, 60796, 49403, 60833, 60794, 60798, 60797, 0, 40416, 61525, 49828, 49829, 49826, 39150, 49827, 0, 0, 61524, 38340, 62075, 64744, 0, 50089, 0, 62073, 62074, 39151, 62580, 62583, 62581, 62582, 62944, 0, 0, 50415, 63467, 63668, 0, 50679, 63736, 63737, 50790, 42457, 44257, 35950, 56003, 0, 57059, 0, 42458, 43119, 0, 43710, 64216, 53224, 53225, 44920, 0, 0, 56004, 46453, 47175, 49474, 60836, 62076, 62584, 42459, 65244, 0, 0, 52641, 52602, 52604, 52606, 52605, 52603, 43711, 41134, 0, 0, 0, 44258, 53234, 0, 53229, 53226, 0, 40268, 65245, 0, 0, 44260, 44261, 53232, 53231, 53230, 53227, 53228, 53235, 44259, 0, 0, 0, 39153, 0, 0, 0, 39155, 44924, 38081, 44964, 44963, 53985, 53979, 53977, 0, 44961, 54969, 44922, 53982, 53986, 53988, 53984, 53978, 44962, 53983, 53981, 44921, 53989, 44965, 53987, 44925, 53980, 0, 44926, 44923, 39157, 0, 0, 64079, 38626, 0, 0, 0, 0, 37968, 45753, 38562, 54970, 0, 39158, 54963, 54965, 54967, 38629, 54968, 54966, 45754, 0, 54971, 39159, 54964, 41030, 38627, 0, 0, 0, 0, 0, 0, 0, 56008, 46454, 56016, 0, 56005, 0, 56017, 0, 56006, 56007, 39160, 0, 56015, 56014, 56011, 45752, 46455, 56009, 56012, 46456, 56013, 56010, 0, 0, 0, 0, 0, 0, 0, 57070, 40676, 57074, 47182, 0, 58096, 47185, 57072, 63958, 0, 57069, 57064, 57066, 57067, 57060, 38083, 47181, 0, 0, 47180, 38082, 47176, 57063, 0, 47183, 0, 47184, 57062, 57065, 57073, 47178, 47179, 57071, 57061, 0, 0, 0, 58098, 47824, 58100, 57068, 58102, 47828, 58103, 58099, 0, 47825, 58095, 47827, 58092, 58097, 58101, 58094, 0, 65249, 47177, 65257, 58091, 47826, 58093, 0, 38628, 0, 35244, 38619, 48468, 59073, 48472, 0, 48470, 0, 0, 47823, 0, 59080, 59081, 48467, 0, 65250, 59079, 59082, 48469, 48466, 59075, 59072, 59077, 59074, 48473, 59076, 38084, 65251, 59078, 48471, 0, 65255, 40955, 0, 49002, 60072, 0, 60066, 60070, 60076, 60077, 60073, 60074, 60071, 35929, 60068, 0, 49004, 49001, 60067, 60069, 0, 49003, 60075, 37833, 49478, 38120, 64342, 60842, 60837, 49477, 37061, 0, 49475, 0, 60844, 49476, 60840, 60841, 60838, 60845, 61526, 0, 49479, 60839, 0, 60846, 60843, 41128, 0, 0, 61530, 0, 0, 61527, 0, 49830, 0, 61531, 61533, 61532, 61528, 61529, 0, 0, 62115, 0, 50090, 0, 62078, 62114, 62077, 62116, 0, 0, 62113, 0, 62586, 62589, 62585, 50289, 62587, 62588, 62590, 50290, 50292, 50291, 62945, 65253, 62947, 0, 62946, 39165, 39163, 65256, 63222, 36543, 0, 63669, 63738, 42460, 35800, 65271, 52082, 43712, 52643, 43713, 43714, 52642, 0, 53240, 53239, 44262, 44265, 44264, 44263, 53236, 53238, 53237, 0, 0, 53992, 44967, 53996, 53995, 53994, 53990, 44966, 44970, 44973, 36712, 38086, 44974, 53991, 53993, 44972, 44971, 44969, 44968, 54978, 40426, 54976, 54972, 45755, 0, 54973, 45756, 54974, 54975, 54977, 0, 45757, 0, 0, 56021, 64617, 56020, 56019, 56018, 0, 0, 0, 0, 57078, 47186, 0, 57075, 57077, 40154, 47187, 65267, 47188, 57076, 40050, 0, 0, 65264, 35273, 58177, 0, 58105, 58106, 0, 47831, 47829, 47830, 58179, 39233, 58178, 58110, 58109, 58108, 58107, 58176, 58104, 39234, 59083, 59088, 59086, 65269, 0, 37335, 59085, 59084, 59087, 0, 60078, 38092, 49005, 49480, 60848, 65272, 49481, 60847, 61535, 61534, 49831, 0, 62117, 50091, 62625, 50593, 63223, 0, 63671, 63670, 51624, 44266, 44267, 54979, 0, 47190, 42461, 43122, 43121, 43120, 0, 0, 38824, 52644, 65276, 0, 43716, 43715, 36062, 44270, 64959, 53242, 53245, 53243, 34739, 44268, 44269, 0, 65278, 53241, 53244, 0, 44981, 0, 0, 0, 54003, 54005, 54004, 44978, 53999, 0, 38609, 44976, 44975, 0, 44979, 44977, 0, 44980, 54002, 53997, 53998, 54001, 54000, 0, 0, 38101, 0, 0, 38096, 0, 54982, 54983, 54981, 0, 54980, 45758, 0, 0, 0, 0, 46461, 0, 56022, 56024, 56026, 46460, 39236, 0, 46458, 0, 56023, 46459, 56025, 46457, 0, 0, 57153, 57079, 57082, 57086, 47194, 57084, 0, 57083, 57080, 57081, 47192, 57152, 47191, 0, 47196, 47195, 47193, 0, 57085, 0, 0, 0, 58185, 0, 58184, 0, 35939, 58180, 34747, 41139, 47832, 58183, 58182, 47833, 34740, 0, 0, 0, 0, 48478, 0, 59090, 38095, 48479, 48475, 48477, 40954, 48474, 48476, 0, 0, 37349, 60079, 40042, 49008, 60081, 60080, 36425, 58181, 49010, 49009, 49006, 49007, 0, 0, 0, 0, 0, 60853, 0, 60851, 49482, 60852, 0, 60854, 60850, 60849, 0, 0, 61536, 49834, 49832, 49833, 0, 0, 36428, 0, 62118, 62119, 50093, 0, 50092, 62627, 62628, 62626, 0, 63224, 63225, 34761, 0, 42462, 51784, 43123, 0, 52645, 43718, 43717, 52646, 0, 36429, 53312, 44271, 53246, 44272, 0, 39539, 44982, 54008, 54006, 54012, 44983, 54007, 54011, 54009, 54010, 0, 0, 54984, 54986, 39239, 45759, 36017, 54985, 45760, 46498, 46497, 46462, 56027, 0, 0, 0, 0, 57156, 47197, 47198, 0, 57155, 57154, 0, 0, 0, 0, 58186, 47835, 47834, 58187, 58188, 0, 48481, 48480, 36432, 60085, 59091, 59093, 59092, 60084, 60082, 60086, 60083, 0, 49011, 36431, 39241, 0, 60855, 49483, 60856, 60857, 36433, 36434, 49835, 49836, 0, 50293, 39602, 35237, 50641, 42463, 0, 0, 0, 39244, 0, 53313, 0, 40952, 0, 0, 0, 0, 54013, 44984, 36438, 39245, 37322, 36439, 0, 46010, 46009, 0, 38113, 46500, 56029, 46499, 56028, 36935, 0, 36824, 36440, 57157, 0, 47836, 58189, 47837, 0, 0, 0, 0, 0, 0, 50294, 62629, 0, 42699, 43719, 52647, 34723, 44274, 38123, 44273, 53314, 53315, 0, 0, 54080, 54082, 44985, 0, 54084, 54087, 54085, 36444, 38227, 0, 54086, 54083, 54014, 44986, 54088, 54081, 40933, 0, 0, 0, 54995, 45766, 55004, 45763, 0, 54997, 45767, 40790, 45761, 0, 54992, 55005, 54993, 54990, 45765, 38223, 45762, 36446, 54996, 54999, 45764, 55000, 45768, 55001, 54991, 54998, 55002, 54994, 54989, 54987, 0, 0, 55003, 39274, 0, 56031, 0, 0, 0, 0, 56036, 0, 40036, 40153, 56032, 56038, 46503, 54988, 56033, 46501, 56030, 46508, 56034, 46507, 56035, 46509, 46504, 46510, 46505, 0, 46506, 36445, 46502, 0, 56037, 0, 0, 0, 0, 0, 0, 0, 47201, 57168, 39248, 57171, 57159, 57164, 57158, 47203, 0, 57162, 0, 0, 39249, 57160, 47202, 36450, 57167, 57166, 57163, 57165, 57161, 47841, 57170, 47199, 57169, 0, 0, 39250, 0, 0, 0, 0, 0, 0, 58205, 0, 47848, 58200, 0, 47847, 58190, 0, 58192, 47840, 58197, 58196, 58199, 47845, 58194, 58193, 36456, 0, 47844, 47839, 58195, 47842, 58201, 58203, 0, 58198, 58191, 47843, 0, 0, 48489, 47838, 36449, 40793, 58204, 0, 0, 0, 0, 0, 0, 0, 59097, 48482, 34768, 59099, 0, 48483, 35763, 0, 48485, 59102, 0, 59094, 47846, 59100, 0, 0, 0, 0, 59096, 0, 47200, 48488, 0, 0, 48484, 34745, 48486, 48487, 0, 49014, 59101, 59095, 48490, 0, 59098, 40797, 36454, 0, 0, 0, 60096, 60091, 0, 0, 60101, 49012, 60093, 49016, 60099, 60090, 60087, 60102, 49489, 49017, 60098, 60088, 49015, 60092, 49019, 60089, 60094, 49018, 60097, 60100, 36018, 0, 0, 0, 60875, 60876, 60860, 60867, 60865, 0, 0, 49487, 60872, 60095, 36462, 60863, 40804, 60873, 49486, 60862, 60861, 60871, 60868, 60870, 0, 60858, 60874, 49484, 0, 60869, 60878, 60866, 49488, 49485, 60864, 60859, 60877, 49013, 39251, 0, 0, 64184, 0, 0, 0, 61539, 0, 39252, 61537, 61543, 49840, 61541, 61540, 49842, 61546, 49841, 0, 61547, 61544, 49838, 61545, 61538, 49839, 49837, 62123, 61542, 0, 0, 61548, 0, 0, 62120, 0, 36464, 0, 50098, 50096, 62122, 0, 62124, 62121, 50097, 50094, 50095, 50099, 0, 40801, 50296, 36466, 62634, 0, 62633, 62631, 62630, 62632, 0, 50295, 50297, 0, 0, 50416, 41067, 0, 62949, 62948, 0, 40768, 63226, 0, 63228, 63230, 63229, 63227, 38125, 0, 50595, 50594, 0, 0, 50643, 50642, 50644, 63469, 63468, 0, 63739, 63672, 63740, 50776, 38126, 50777, 63853, 40893, 0, 50814, 42700, 36475, 52648, 0, 0, 53317, 53318, 53316, 39255, 38135, 44275, 40799, 53319, 53320, 53321, 0, 36467, 54089, 54095, 40802, 0, 54093, 44987, 54091, 0, 54092, 54094, 38134, 0, 0, 54090, 45769, 0, 55006, 45771, 55008, 45770, 55007, 0, 0, 0, 39256, 0, 56040, 46511, 0, 56042, 56039, 55009, 0, 46512, 36469, 63963, 56041, 0, 0, 0, 36978, 0, 38136, 57174, 0, 47204, 57172, 47205, 57173, 47206, 0, 0, 39258, 47849, 58209, 58206, 58208, 47850, 47851, 58207, 0, 0, 41136, 36019, 0, 59103, 0, 36473, 59104, 36472, 48491, 59106, 59105, 38131, 41569, 0, 60106, 60107, 60103, 39087, 60104, 49020, 49021, 60105, 0, 49495, 41138, 0, 49491, 49496, 49492, 49494, 49490, 0, 49493, 0, 0, 0, 36474, 49843, 60879, 0, 62126, 0, 62125, 39260, 62635, 50298, 50299, 63297, 62950, 36476, 63296, 36477, 63741, 63908, 42701, 35801, 0, 43124, 35234, 52649, 43720, 0, 44278, 53324, 44276, 53322, 44281, 44277, 44282, 44280, 53323, 44279, 44991, 44990, 54106, 44999, 54099, 54105, 44995, 54098, 54104, 54102, 44994, 44996, 54101, 44989, 54100, 45000, 44997, 45001, 44998, 54097, 54096, 54103, 44992, 44988, 44993, 0, 0, 40663, 0, 0, 55024, 55017, 0, 46517, 55016, 0, 45775, 45782, 45779, 45785, 45784, 45780, 0, 55010, 55013, 0, 55012, 45776, 55014, 55023, 45777, 55011, 55020, 55021, 45778, 55018, 45783, 45773, 45781, 55015, 45772, 55019, 0, 0, 55022, 0, 0, 41142, 56059, 56050, 46514, 56057, 56054, 56046, 56055, 46516, 56047, 0, 56043, 0, 40514, 47212, 56052, 36516, 46513, 56058, 0, 46520, 46522, 56045, 0, 0, 46521, 56048, 46515, 56056, 56049, 56053, 0, 56051, 46518, 56044, 46523, 45774, 46519, 46524, 0, 0, 0, 0, 0, 47208, 57181, 57183, 57185, 57189, 0, 57179, 57177, 47210, 0, 57184, 57188, 57180, 57176, 0, 57175, 36519, 0, 35958, 57186, 57178, 57182, 47211, 0, 47209, 57190, 47207, 57187, 34663, 58226, 38210, 0, 0, 0, 0, 47854, 58218, 48504, 58228, 47857, 58232, 47863, 58213, 39037, 0, 58229, 58210, 38741, 58231, 58214, 36520, 47870, 47867, 58230, 58224, 47853, 47861, 47860, 36522, 47859, 47865, 0, 58211, 47866, 58225, 47862, 47852, 58227, 47855, 47856, 47864, 58216, 58215, 58212, 0, 58220, 58217, 58221, 47869, 0, 58233, 47858, 58222, 58223, 35235, 58219, 39264, 39266, 0, 47868, 38140, 39265, 0, 0, 59111, 48496, 48505, 48501, 59108, 38138, 48498, 48502, 59120, 48492, 59112, 0, 48500, 36526, 36530, 59115, 59110, 48499, 48503, 59109, 0, 48497, 0, 59119, 48494, 59118, 59117, 48506, 58738, 48493, 36528, 59116, 59107, 0, 48507, 59114, 48495, 0, 39267, 38826, 0, 0, 0, 0, 59113, 0, 0, 0, 38139, 49058, 49063, 49022, 60120, 60111, 60123, 60115, 60121, 49064, 49057, 60108, 60114, 60124, 60117, 60122, 60110, 0, 0, 60118, 49059, 60116, 49062, 49061, 60112, 60113, 60109, 60119, 49060, 60126, 60125, 0, 36539, 0, 60890, 60886, 49503, 0, 60880, 49497, 49513, 60892, 49505, 49501, 60883, 49508, 49511, 60894, 49500, 60885, 49509, 60896, 60893, 60881, 49504, 49498, 49512, 60888, 49507, 60882, 49502, 60895, 49506, 49499, 60889, 49510, 60887, 0, 0, 60891, 0, 0, 0, 61550, 61556, 49849, 61559, 49844, 49845, 61551, 61558, 61553, 49850, 49847, 36060, 61549, 0, 49846, 61555, 61557, 49848, 61554, 61552, 0, 39030, 0, 36513, 62136, 50103, 50104, 50100, 36020, 50101, 36535, 62132, 62130, 0, 62134, 50106, 62135, 62128, 62127, 62131, 62129, 50102, 62133, 62636, 50302, 50301, 62637, 40358, 62639, 62638, 50337, 0, 0, 0, 62955, 62952, 62953, 0, 62951, 62954, 50418, 62956, 40624, 50417, 0, 63298, 36536, 50645, 50647, 63470, 50646, 63673, 63808, 63810, 63742, 63809, 50796, 0, 0, 40304, 0, 0, 0, 0, 35182, 0, 0, 0, 0, 0, 0, 0, 35183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35185, 0, 0, 0, 0, 0, 0, 0, 35186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42702, 35189, 44283, 53871, 45002, 0, 0, 45786, 56060, 56061, 36540, 36541, 0, 60127, 49514, 60897, 0, 36542, 49851, 40401, 62138, 62137, 50338, 62957, 38141, 63299, 50680, 51785, 35799, 35802, 43721, 43125, 0, 0, 53325, 0, 0, 54112, 54107, 54111, 54109, 45003, 54110, 54108, 0, 55025, 0, 56062, 56128, 57193, 57194, 47214, 47215, 57192, 57195, 57191, 47213, 0, 47936, 41186, 47216, 58234, 0, 48508, 59121, 48509, 40937, 49065, 60130, 60128, 60129, 60900, 60899, 60898, 0, 0, 0, 62139, 0, 50105, 62140, 63300, 50681, 63674, 42703, 43723, 43722, 53327, 44284, 64936, 0, 53326, 54114, 35559, 45004, 55026, 54113, 36546, 0, 0, 45788, 55029, 55027, 55028, 45787, 0, 56130, 56131, 56129, 36548, 47219, 57197, 57196, 57198, 47218, 47217, 0, 0, 59122, 59124, 39268, 48510, 59123, 60131, 49066, 61561, 39269, 61560, 50107, 62141, 50109, 50108, 62640, 62958, 50419, 42704, 53328, 44285, 54117, 45006, 54116, 54115, 0, 45005, 0, 55035, 0, 55037, 55030, 55031, 45789, 55032, 45790, 55036, 55033, 55034, 45791, 0, 46526, 46527, 0, 56132, 0, 0, 0, 57199, 57200, 38222, 58238, 47939, 47937, 47938, 58235, 58236, 0, 58237, 59129, 39091, 59130, 48545, 59127, 59126, 59128, 59125, 49069, 60132, 49067, 49068, 60902, 49515, 60901, 61352, 0, 61562, 61563, 49852, 36555, 49853, 49516, 62142, 62143, 62641, 50339, 42705, 35807, 42706, 44286, 43724, 45007, 53329, 36558, 0, 0, 46528, 42707, 44353, 53330, 53331, 44352, 44354, 42708, 0, 53332, 45009, 54118, 45011, 45008, 45010, 0, 55105, 45792, 36559, 55104, 55038, 39272, 57201, 0, 0, 58273, 39273, 48546, 0, 49070, 60134, 60133, 0, 60903, 0, 39275, 36561, 62959, 39276, 0, 42709, 52083, 52650, 44355, 53333, 0, 54120, 0, 36564, 36565, 45012, 54119, 45013, 0, 0, 0, 55107, 0, 0, 45794, 55106, 55108, 0, 45793, 0, 0, 0, 0, 56134, 56135, 56133, 46529, 0, 39277, 0, 47220, 0, 47221, 0, 47941, 41150, 58275, 58274, 47940, 0, 0, 36566, 41148, 41141, 59131, 0, 41140, 59132, 0, 0, 0, 0, 60135, 0, 0, 49520, 49519, 49517, 49518, 49521, 0, 61564, 49855, 49854, 62144, 62642, 0, 0, 0, 50597, 50596, 42710, 35808, 0, 53755, 0, 47223, 46530, 47222, 47942, 0, 42711, 51625, 42712, 42713, 0, 0, 52651, 52086, 0, 52087, 43127, 0, 52084, 43126, 0, 43129, 52085, 43131, 43130, 52088, 43128, 0, 35253, 0, 43729, 43727, 52653, 0, 43726, 0, 36573, 0, 43731, 43733, 43730, 0, 52656, 52652, 43734, 0, 43728, 43132, 0, 43732, 52655, 40541, 39281, 52654, 0, 43725, 0, 35246, 40424, 0, 0, 0, 0, 53339, 44359, 44360, 53341, 38245, 53335, 53338, 53347, 53345, 0, 44361, 53351, 44364, 53348, 53340, 53337, 0, 0, 56137, 53346, 44356, 53349, 53334, 53343, 44358, 44363, 53344, 44367, 44365, 0, 53336, 44362, 0, 53342, 44366, 44357, 53350, 0, 0, 39282, 0, 0, 35676, 45018, 0, 45027, 45016, 45014, 54122, 45022, 45019, 54124, 35249, 0, 45021, 54123, 54121, 54126, 45026, 45024, 56136, 0, 54127, 54125, 45015, 41152, 0, 45017, 45020, 36575, 45023, 38246, 45025, 0, 39284, 0, 39286, 0, 0, 0, 39287, 0, 39289, 55118, 45796, 40410, 55109, 55111, 36576, 55112, 0, 55120, 55116, 55114, 0, 55117, 55121, 45797, 45801, 55110, 0, 55119, 0, 45799, 37724, 45798, 55115, 55113, 0, 45795, 45800, 0, 40422, 0, 35679, 0, 0, 38243, 0, 46536, 56145, 0, 0, 56143, 46538, 0, 0, 0, 38247, 56138, 57249, 0, 46537, 56142, 40419, 0, 56139, 46533, 46539, 56144, 46535, 56141, 47943, 46534, 56140, 46540, 46532, 46531, 39292, 0, 0, 39293, 39294, 57207, 57205, 0, 57211, 0, 57203, 57250, 57208, 0, 57202, 47227, 47267, 57213, 0, 57206, 0, 47230, 36091, 35675, 47228, 57214, 47225, 47224, 57209, 47229, 46541, 0, 57212, 57204, 47226, 47265, 47266, 0, 39331, 0, 0, 47948, 47944, 0, 47949, 58278, 39332, 0, 58277, 58279, 47946, 58276, 47947, 58282, 58281, 58280, 0, 47945, 0, 0, 0, 39334, 0, 59201, 0, 59204, 48552, 59203, 48551, 48547, 48548, 48549, 59200, 59134, 48550, 0, 59202, 59133, 0, 39336, 60137, 60147, 49073, 49072, 35518, 60141, 60143, 0, 60138, 0, 60142, 60136, 60145, 49071, 60144, 60140, 40545, 60146, 0, 60139, 49524, 60904, 60910, 49528, 49530, 49527, 49526, 39338, 49525, 49523, 60905, 60908, 49522, 60909, 41160, 49529, 60907, 0, 60906, 49856, 0, 49857, 61601, 61565, 61566, 0, 0, 62146, 0, 62145, 50110, 62644, 50340, 62643, 0, 62960, 63301, 50598, 63811, 63812, 50648, 42714, 39339, 43735, 56146, 47950, 49531, 60911, 42715, 0, 45029, 45028, 56147, 65220, 0, 0, 60148, 42716, 44368, 0, 39106, 56148, 56149, 56150, 47951, 49074, 42717, 0, 43736, 53352, 45030, 54128, 45802, 0, 56151, 47268, 0, 47952, 49075, 49532, 49858, 62645, 42718, 43737, 0, 0, 45031, 55122, 46542, 0, 47953, 58283, 59205, 0, 36584, 0, 41146, 42719, 46543, 57251, 47954, 42720, 52657, 53353, 44369, 0, 0, 54130, 64887, 0, 45034, 36590, 45032, 45033, 45035, 40639, 0, 54129, 0, 0, 55127, 55124, 55126, 45803, 45805, 45804, 55123, 45806, 55125, 0, 56152, 56153, 35266, 56154, 57254, 0, 57255, 0, 57253, 57256, 0, 47269, 0, 57252, 0, 47955, 0, 0, 59210, 59206, 59209, 59211, 59208, 59207, 39340, 60149, 60150, 60151, 49076, 49077, 60913, 60912, 60914, 0, 61603, 61602, 0, 62148, 38251, 62149, 62147, 38252, 50341, 0, 62646, 62647, 0, 63302, 63471, 63675, 42721, 43133, 0, 49533, 42722, 0, 55128, 56155, 39343, 50753, 51786, 39242, 35190, 36680, 51787, 51789, 42723, 51790, 51788, 0, 0, 52130, 52131, 52091, 0, 64494, 0, 0, 52129, 43169, 0, 43170, 52092, 52090, 52089, 52093, 43134, 52094, 53354, 0, 0, 0, 52662, 43740, 52661, 52663, 0, 43739, 52668, 43743, 52658, 52672, 52678, 43750, 52675, 43747, 39342, 52665, 52671, 52673, 36603, 52660, 43746, 43741, 52666, 43748, 43751, 43745, 0, 43738, 52670, 52664, 52677, 43753, 43749, 43744, 52669, 45036, 52667, 43742, 43752, 36048, 52659, 0, 52674, 52676, 35666, 0, 0, 0, 0, 0, 39344, 0, 0, 0, 0, 35191, 36673, 44386, 44380, 44388, 44385, 53361, 53364, 44381, 39345, 53355, 0, 44374, 44384, 0, 44387, 44389, 53410, 53367, 36681, 44373, 53409, 44377, 44375, 44370, 53359, 0, 53374, 53363, 53366, 53413, 64077, 44390, 53373, 44382, 53368, 53412, 53365, 53369, 53372, 40420, 36021, 53357, 53411, 53371, 64489, 39764, 53356, 39346, 53360, 44383, 44378, 44371, 44376, 44372, 44391, 53358, 54181, 44379, 0, 40552, 53370, 52801, 0, 0, 0, 0, 0, 0, 0, 0, 54184, 45050, 36682, 54134, 36674, 54179, 54141, 36689, 54194, 0, 54186, 0, 54142, 0, 54185, 54136, 54140, 54197, 45053, 54189, 54180, 45037, 54195, 54132, 0, 54188, 0, 45052, 45047, 54131, 45045, 45044, 45049, 54187, 45041, 45048, 53362, 56156, 54182, 38982, 0, 54138, 45051, 54139, 54177, 45054, 54133, 54191, 0, 54190, 54198, 45043, 45040, 54196, 54192, 54183, 54178, 45046, 45042, 54135, 45038, 54193, 45039, 0, 54137, 39348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36597, 64853, 0, 0, 40141, 0, 0, 0, 0, 0, 0, 0, 0, 35192, 0, 0, 0, 55134, 55136, 55141, 55161, 45820, 45810, 0, 55133, 45821, 45822, 55144, 55151, 55157, 0, 55138, 0, 55145, 0, 36691, 45888, 55159, 55154, 45818, 45816, 55150, 55146, 55132, 45807, 55137, 55129, 36719, 45815, 45817, 55142, 55139, 45812, 55155, 45809, 55140, 55162, 55148, 36451, 55147, 45808, 0, 45819, 0, 45811, 55130, 55135, 55152, 55158, 45889, 55131, 55143, 55149, 45814, 36694, 0, 55160, 55153, 55156, 0, 0, 0, 0, 0, 0, 0, 0, 65142, 0, 0, 0, 45813, 40902, 56172, 56160, 46551, 56189, 56231, 56234, 46549, 56168, 56227, 56169, 56183, 46562, 56179, 46559, 64172, 56180, 56157, 0, 56228, 0, 36696, 46568, 56225, 56181, 56236, 56176, 57288, 0, 56239, 46566, 56174, 56186, 46569, 46548, 56178, 56237, 56171, 56164, 56175, 0, 56163, 56161, 46544, 56229, 56170, 56232, 38984, 56233, 46552, 46557, 46553, 46561, 56190, 46554, 56182, 56166, 0, 46546, 56158, 56226, 56235, 56165, 46560, 56240, 56177, 0, 56173, 0, 46545, 46565, 39351, 56188, 46567, 0, 56184, 46556, 46550, 46558, 46547, 46564, 56185, 56167, 56187, 56162, 56230, 38501, 0, 64108, 0, 40423, 0, 0, 56238, 40546, 0, 0, 0, 38604, 36455, 0, 56159, 64629, 0, 39038, 0, 0, 57287, 0, 57309, 47189, 57292, 64953, 57290, 57269, 47273, 57285, 57305, 57281, 47281, 57304, 57279, 46563, 57295, 57280, 57302, 47280, 47272, 38908, 57258, 57266, 0, 57291, 57283, 57308, 57286, 47286, 57303, 39161, 47277, 36710, 57289, 57297, 57270, 57296, 0, 57313, 57265, 57298, 38254, 57311, 37445, 57259, 46555, 36704, 57273, 57272, 47279, 40657, 57276, 57278, 57293, 57310, 47282, 65229, 47283, 39353, 57264, 47275, 57268, 57306, 47284, 0, 47276, 47278, 47285, 57312, 57299, 57294, 36706, 38732, 57275, 57274, 47274, 57260, 47271, 57284, 57261, 57282, 0, 0, 57271, 57307, 37319, 38239, 0, 47270, 0, 34731, 0, 57267, 0, 39355, 0, 0, 0, 0, 57263, 57301, 57262, 47968, 58323, 36461, 36721, 58306, 0, 38091, 58284, 58314, 47960, 58299, 58309, 47963, 58302, 47961, 58287, 58317, 58286, 58305, 38321, 58285, 0, 0, 58303, 58312, 58310, 58298, 58293, 58291, 39666, 58292, 58311, 58322, 58300, 47962, 0, 58295, 0, 58315, 0, 47965, 58294, 58288, 58304, 47969, 38595, 39357, 47957, 47966, 58296, 58290, 0, 47959, 57300, 47958, 58307, 0, 47956, 47971, 47964, 58308, 58297, 58289, 58316, 58301, 47970, 58320, 47967, 58319, 0, 58313, 58318, 0, 0, 41167, 58321, 0, 0, 36717, 0, 0, 39358, 36596, 0, 36722, 38372, 0, 59251, 59252, 59239, 59238, 59234, 48564, 0, 48556, 59254, 59253, 57257, 59231, 59235, 59229, 0, 59248, 59233, 39359, 59255, 59226, 59224, 59236, 59246, 59241, 48566, 59215, 0, 59245, 37444, 34775, 64421, 48567, 57277, 59227, 59218, 59221, 59259, 59228, 59219, 59217, 59214, 39360, 48560, 59237, 48559, 48563, 59232, 59240, 48553, 59256, 59260, 48555, 0, 59223, 59243, 59247, 59220, 59257, 48562, 0, 48561, 59212, 48565, 59250, 59222, 59242, 59216, 59230, 59225, 48557, 48558, 59244, 59261, 59258, 59249, 0, 64948, 36727, 0, 0, 0, 39361, 0, 0, 59213, 0, 48554, 60233, 0, 60224, 60227, 64185, 49083, 60229, 60153, 60225, 60231, 49080, 49084, 49078, 36672, 64068, 60155, 60236, 0, 0, 60230, 39362, 60156, 60245, 60239, 60152, 60998, 60158, 49079, 36700, 60234, 0, 60244, 49087, 36029, 60241, 60157, 60228, 60232, 60226, 60246, 60243, 60240, 49081, 49082, 49086, 60154, 60247, 49085, 60237, 39364, 39365, 60235, 0, 36731, 0, 60238, 61011, 60992, 60997, 61010, 60996, 60923, 60993, 0, 49570, 0, 60916, 61005, 61007, 60915, 49569, 61009, 61001, 49576, 61008, 60994, 49578, 60921, 60242, 61002, 60999, 60917, 61013, 49572, 0, 34678, 49573, 60919, 61000, 36022, 61012, 61003, 60925, 49575, 49571, 61004, 60926, 61014, 60920, 60995, 61006, 60922, 60924, 0, 49867, 60918, 49577, 49860, 49534, 0, 0, 0, 0, 49574, 49864, 61619, 0, 61609, 61604, 61610, 61620, 61624, 61623, 49866, 49865, 0, 0, 61611, 61625, 61614, 61606, 36771, 61608, 61607, 61613, 61618, 61605, 61612, 61617, 49863, 0, 61615, 0, 49861, 61616, 49859, 49862, 62165, 61621, 0, 0, 50114, 36046, 62157, 62161, 62153, 62156, 0, 62164, 50112, 62169, 62162, 39366, 62154, 62170, 62163, 50115, 50116, 62167, 0, 62155, 50111, 50113, 62150, 62158, 62152, 38605, 62168, 62166, 62151, 62159, 0, 0, 0, 62654, 50117, 62160, 50343, 50345, 50342, 38599, 62659, 62651, 62649, 62653, 62650, 36773, 0, 62655, 62657, 50346, 50348, 0, 62656, 50349, 50347, 62658, 64187, 0, 35937, 38256, 50344, 0, 34735, 37736, 0, 36734, 50420, 62961, 62967, 50422, 62652, 62966, 0, 62973, 62964, 62971, 62970, 62648, 62965, 61622, 62974, 62963, 62968, 36778, 62972, 62962, 0, 63306, 50421, 62969, 41040, 0, 63476, 63307, 63305, 63303, 63304, 63308, 0, 50649, 63474, 63472, 63477, 63475, 0, 63478, 50650, 63473, 0, 37075, 63676, 0, 38230, 63813, 63814, 63815, 0, 0, 63943, 63933, 51791, 43754, 0, 44392, 0, 54200, 54199, 45120, 45890, 55164, 0, 0, 55163, 0, 46570, 47288, 0, 47287, 47289, 0, 58324, 59262, 60248, 60250, 60249, 0, 49579, 61015, 61626, 63909, 42724, 36792, 52681, 52682, 52680, 52679, 43755, 39368, 53417, 53415, 0, 0, 53414, 0, 44393, 44395, 44394, 53416, 0, 36783, 0, 0, 0, 0, 0, 0, 54212, 54209, 54207, 0, 0, 45121, 54210, 45126, 54204, 54219, 0, 54221, 54205, 39369, 45123, 54222, 54217, 54203, 54208, 54218, 54214, 54211, 0, 45128, 54220, 54206, 0, 38265, 54215, 54201, 45127, 45124, 54213, 0, 54216, 54202, 45125, 45122, 0, 0, 40777, 0, 45900, 55205, 45899, 39370, 55208, 55211, 45896, 45894, 55166, 55209, 55207, 55204, 55212, 55213, 55215, 55216, 55165, 45893, 55202, 55201, 55214, 45895, 55203, 45897, 45892, 55206, 45901, 0, 45898, 55210, 0, 0, 0, 46577, 56255, 0, 56244, 46574, 0, 57319, 56253, 56241, 46572, 56246, 46575, 56250, 56248, 46578, 46571, 0, 0, 56242, 56245, 46576, 0, 56243, 0, 56254, 56252, 56247, 56249, 56251, 46573, 0, 39371, 0, 0, 0, 0, 0, 57320, 57326, 57316, 57322, 47290, 57318, 47296, 0, 0, 47295, 0, 47294, 57325, 47297, 47298, 57315, 57328, 47299, 47293, 47292, 57324, 47300, 57314, 57317, 57327, 57323, 0, 0, 58356, 58345, 47291, 0, 0, 0, 0, 47978, 58333, 58354, 58334, 47973, 0, 58331, 0, 58340, 58332, 47975, 58326, 58353, 47976, 58350, 58351, 58327, 47981, 58342, 0, 58336, 58343, 58330, 0, 58355, 58347, 58341, 58325, 47977, 58348, 0, 47980, 58352, 0, 58346, 47974, 58344, 0, 58338, 47972, 58329, 58337, 58349, 58335, 0, 0, 58339, 0, 0, 0, 0, 0, 48577, 57321, 59314, 59323, 59313, 59309, 59306, 48578, 59304, 47979, 59297, 48576, 59303, 48575, 59308, 59305, 59321, 59316, 59310, 59315, 48571, 59307, 59326, 59298, 59299, 59322, 48572, 59327, 48574, 59328, 59312, 58328, 59318, 59311, 59320, 59317, 40405, 36784, 0, 59302, 48569, 59325, 48570, 59300, 48573, 60260, 59319, 59324, 0, 64122, 0, 0, 0, 60257, 48568, 49088, 60267, 60263, 40543, 60261, 60256, 60271, 0, 39373, 41161, 49092, 0, 60252, 60264, 60265, 60255, 60254, 60268, 0, 60258, 60253, 60259, 0, 60270, 60251, 60269, 60266, 49090, 49089, 0, 0, 49091, 60262, 61643, 39643, 0, 0, 0, 41158, 61017, 49585, 61021, 61018, 61025, 61031, 61020, 36788, 61040, 49582, 61034, 61023, 61035, 61030, 61037, 61022, 49587, 49586, 61024, 61038, 61016, 61036, 49580, 41175, 61028, 61027, 61032, 61019, 49584, 0, 49588, 61026, 61033, 49589, 61029, 0, 41159, 0, 0, 49581, 49583, 61639, 61637, 0, 41027, 61644, 61641, 61645, 36789, 61630, 61638, 61649, 61039, 61634, 49871, 59301, 61629, 61642, 61636, 61633, 61628, 61627, 61648, 0, 61632, 61631, 49869, 61640, 36786, 49868, 0, 0, 49870, 61635, 61647, 41057, 62174, 62175, 0, 50121, 62172, 50118, 62180, 0, 50122, 62182, 62171, 61646, 62184, 62173, 40542, 50119, 62179, 0, 62181, 62176, 62183, 62178, 62177, 50120, 0, 41059, 62661, 62662, 0, 62664, 50350, 50351, 62665, 62663, 40936, 62660, 0, 63042, 63045, 63041, 0, 50426, 63043, 50425, 50424, 50423, 63044, 63313, 63311, 40114, 63310, 63040, 63312, 63046, 63309, 38268, 63481, 63447, 63479, 50651, 63480, 63482, 0, 63679, 50682, 63678, 63677, 50683, 0, 50778, 63854, 63911, 63910, 63912, 42725, 53418, 40903, 54223, 54224, 36795, 36796, 0, 56256, 0, 63047, 63680, 42726, 44396, 53419, 36844, 0, 0, 55217, 45902, 0, 56258, 56257, 46579, 0, 47301, 59329, 48579, 0, 48580, 36800, 0, 37738, 49093, 50684, 42727, 35812, 40060, 0, 53420, 43757, 53422, 53421, 44397, 0, 54225, 38305, 54232, 45129, 54230, 54228, 0, 54235, 54226, 54227, 45130, 0, 45134, 0, 0, 54236, 45133, 54234, 54231, 54229, 45131, 45132, 54233, 65260, 0, 0, 38307, 45904, 55218, 0, 45909, 55234, 45908, 55236, 35909, 36024, 55224, 45906, 55235, 0, 55219, 45907, 55231, 55227, 55229, 55223, 55230, 36801, 34743, 45903, 55226, 41042, 55225, 55221, 0, 55232, 0, 0, 55228, 55220, 0, 55222, 45905, 55233, 0, 39376, 0, 0, 46582, 56269, 0, 36803, 36804, 56265, 56267, 56262, 56261, 56259, 0, 56266, 56268, 56264, 38308, 56263, 46580, 46581, 0, 0, 36806, 0, 40544, 0, 56271, 47309, 57330, 57336, 57331, 57332, 63960, 57337, 0, 47311, 0, 47303, 47310, 57329, 56260, 47306, 47304, 57335, 57334, 47305, 47307, 57333, 47302, 0, 47308, 0, 0, 0, 0, 38309, 58358, 47988, 0, 0, 58434, 58433, 0, 58363, 47990, 58432, 58359, 58360, 47982, 47984, 40115, 58365, 58357, 47986, 47985, 58361, 58366, 58364, 47987, 58362, 39377, 65265, 56270, 47983, 0, 0, 59330, 59337, 48582, 0, 59341, 48586, 59333, 59331, 0, 59340, 0, 48581, 59339, 48583, 48584, 59332, 48585, 59338, 59334, 59335, 59336, 47989, 0, 0, 0, 60272, 60284, 0, 49098, 60279, 60281, 39378, 49096, 60273, 60277, 0, 60280, 49094, 49097, 60283, 60275, 60276, 60282, 60274, 60278, 49095, 61042, 0, 61041, 49591, 61047, 49593, 0, 0, 49590, 61043, 49594, 61044, 0, 0, 61045, 61048, 40130, 49592, 0, 61654, 39379, 0, 61657, 0, 61651, 61653, 38311, 0, 61652, 61655, 61656, 61046, 61650, 38313, 0, 50125, 62188, 62191, 62193, 62186, 62187, 62190, 62192, 50126, 50124, 50123, 62189, 62185, 62666, 50352, 38310, 62667, 0, 0, 63049, 50427, 63051, 50428, 63048, 63050, 50600, 0, 63314, 50599, 63485, 63484, 0, 63483, 40029, 0, 63816, 63817, 63819, 63818, 0, 51792, 42728, 39138, 44398, 55237, 46583, 0, 57338, 49872, 36809, 62194, 41154, 36810, 43171, 0, 0, 0, 45911, 0, 39380, 0, 45910, 41145, 56272, 46584, 56274, 56273, 0, 0, 57339, 47312, 58435, 58438, 58437, 0, 58436, 59342, 59344, 59343, 39768, 49100, 36813, 0, 41172, 49099, 0, 49595, 61049, 61051, 61050, 0, 0, 49873, 0, 0, 0, 62196, 62195, 0, 62668, 50353, 0, 36814, 50429, 63316, 63315, 50779, 35813, 0, 0, 0, 0, 35193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43172, 53423, 44399, 55240, 55238, 0, 0, 55239, 56276, 56277, 57411, 56275, 0, 57340, 57409, 57408, 57410, 47313, 57342, 57341, 57412, 36816, 58441, 58439, 0, 58440, 59347, 59345, 0, 0, 59346, 60285, 61052, 61053, 49874, 0, 62197, 62669, 50354, 0, 63052, 63317, 50601, 0, 63486, 63820, 43173, 0, 44401, 44402, 53424, 0, 0, 53425, 44400, 0, 45140, 0, 45138, 0, 45137, 45144, 45136, 45145, 54237, 45142, 0, 45139, 45143, 45141, 45135, 0, 0, 45919, 38326, 45913, 55244, 45918, 0, 0, 45920, 45914, 0, 45915, 0, 55242, 0, 39382, 45912, 38373, 55243, 45917, 0, 0, 55241, 45916, 0, 0, 46660, 0, 46662, 0, 39383, 56280, 46661, 46585, 46589, 38325, 47332, 57417, 56282, 46590, 0, 0, 56285, 56286, 46659, 0, 56288, 41162, 56290, 0, 56291, 56279, 56278, 56292, 46658, 56289, 56287, 0, 46656, 46587, 46663, 56283, 56284, 56281, 0, 46657, 0, 0, 46588, 0, 46586, 57416, 47327, 47322, 0, 0, 47317, 40957, 47333, 47318, 0, 47314, 47329, 47326, 47328, 0, 47319, 47324, 47315, 47316, 57424, 57421, 57413, 57418, 0, 47330, 57425, 47331, 47321, 0, 41048, 57415, 0, 57423, 57419, 57422, 57420, 47325, 57414, 47320, 0, 0, 0, 58444, 47992, 47995, 0, 58446, 36822, 48037, 58445, 47997, 39384, 48591, 58447, 0, 48036, 58443, 48038, 0, 36819, 0, 47993, 0, 47323, 47996, 0, 47994, 47998, 48034, 47991, 48039, 48035, 36837, 48033, 58442, 0, 0, 0, 36841, 48598, 0, 48594, 0, 39385, 0, 48601, 0, 59350, 48602, 59362, 59355, 48587, 59363, 59357, 48597, 59358, 0, 48596, 59361, 48590, 59359, 59349, 48589, 60330, 48595, 0, 48592, 36087, 48600, 0, 59348, 0, 59352, 48588, 59351, 59353, 59354, 48599, 59356, 59360, 59364, 37500, 48603, 49106, 60325, 60331, 60328, 60286, 60332, 60321, 0, 60327, 0, 49101, 49107, 60333, 0, 40005, 49103, 0, 49113, 49108, 60335, 60329, 49104, 60322, 49114, 60323, 60324, 49115, 49112, 48593, 36072, 49102, 60336, 49116, 0, 49109, 60334, 49105, 49110, 49111, 0, 49603, 61092, 61101, 61098, 61100, 0, 49600, 61093, 36830, 61099, 49596, 61095, 49604, 61091, 61096, 61103, 60326, 61097, 61090, 49597, 61089, 49598, 61104, 49599, 61102, 49602, 61054, 36831, 49601, 0, 61094, 61660, 61674, 61669, 61671, 61659, 49875, 0, 61658, 49878, 49877, 41035, 61673, 61665, 61662, 61668, 0, 61661, 0, 61663, 61672, 61670, 0, 49876, 61677, 61675, 61666, 61676, 61667, 36834, 62201, 50127, 62273, 41164, 0, 63055, 50134, 61664, 62199, 50130, 62200, 62205, 36835, 36836, 50132, 50133, 62198, 62272, 62274, 62202, 62204, 62206, 62203, 62275, 50129, 50135, 50131, 0, 50128, 62672, 39876, 50359, 62670, 0, 39932, 62674, 0, 62675, 50357, 62676, 62673, 38476, 62671, 50360, 50356, 62677, 0, 50358, 50355, 0, 0, 0, 50430, 0, 0, 50496, 63054, 63053, 63056, 63057, 0, 50497, 63318, 63323, 50602, 39670, 63320, 36014, 63319, 63322, 63321, 0, 63555, 0, 50652, 63554, 63552, 0, 63553, 34763, 36839, 0, 50686, 50685, 63681, 63682, 50752, 0, 63821, 63822, 50791, 36840, 50797, 0, 63913, 63944, 35815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43174, 0, 55245, 0, 55246, 57426, 58448, 59365, 49606, 0, 49605, 61678, 62276, 0, 63556, 43175, 54238, 45146, 45921, 57428, 57427, 48604, 59366, 48605, 61105, 49879, 39386, 0, 0, 50806, 43176, 52683, 54239, 0, 0, 45922, 0, 55247, 55248, 0, 56293, 0, 46664, 47334, 0, 57430, 57429, 57431, 0, 58449, 58450, 48040, 49117, 48606, 49118, 0, 61109, 61106, 61108, 61107, 49607, 0, 61679, 62278, 62277, 52132, 45148, 45147, 54240, 0, 55249, 0, 0, 56295, 56294, 46665, 0, 57433, 57434, 57432, 0, 0, 47336, 47335, 0, 48042, 48041, 0, 59367, 60339, 60337, 60338, 49119, 61111, 61110, 0, 61682, 61681, 61680, 62279, 36845, 63914, 43177, 44403, 38336, 44404, 45149, 45150, 54242, 54241, 55250, 0, 45928, 45926, 45923, 45927, 45925, 45924, 41163, 0, 46666, 56298, 0, 47341, 46668, 46673, 56300, 46675, 46674, 46677, 56299, 56296, 46671, 46667, 46669, 56297, 46676, 46672, 46670, 47343, 47342, 47340, 47344, 0, 47338, 47339, 0, 47337, 0, 57435, 40520, 0, 58452, 0, 48044, 48045, 48043, 39387, 58451, 36851, 58453, 0, 59370, 59372, 36857, 48615, 59373, 48608, 59369, 48607, 48617, 48613, 48614, 48610, 59368, 48609, 59374, 59371, 38337, 48616, 41038, 48611, 48612, 60341, 0, 60343, 60342, 39388, 60344, 49120, 60340, 0, 41060, 49611, 61112, 49608, 49612, 49610, 49609, 61683, 0, 61686, 0, 61685, 36855, 61684, 49880, 62280, 62281, 50136, 62282, 50137, 35248, 41032, 50362, 0, 50361, 63058, 36859, 36854, 50498, 63059, 63324, 50603, 50604, 40412, 63557, 0, 50754, 39389, 35816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43178, 0, 45930, 45929, 57436, 57437, 0, 48046, 60345, 48618, 60346, 61113, 43179, 0, 53426, 44406, 44405, 0, 54243, 45151, 54244, 55253, 37569, 55252, 0, 55251, 0, 0, 56302, 46680, 40918, 0, 56301, 46679, 0, 0, 0, 56303, 46678, 0, 57439, 57442, 57440, 57441, 57445, 57438, 57446, 57443, 57444, 48048, 58454, 0, 0, 48047, 0, 59378, 59376, 0, 0, 48619, 59375, 59377, 0, 48620, 0, 60347, 41170, 60348, 49613, 36928, 62284, 62286, 62283, 62285, 62678, 63060, 0, 0, 63855, 43180, 44407, 54245, 54247, 54246, 0, 55256, 45932, 0, 55254, 0, 45931, 55257, 35524, 55258, 55255, 39392, 0, 56315, 46688, 56307, 56313, 0, 0, 46683, 46686, 56306, 46681, 56310, 57452, 46685, 0, 56305, 40944, 56311, 56308, 56314, 56304, 56312, 46684, 46687, 56309, 46682, 0, 47346, 57448, 47345, 57455, 57454, 47352, 0, 47353, 57456, 47347, 57453, 47351, 57458, 57449, 0, 57451, 47348, 57447, 57450, 57457, 47349, 57459, 0, 0, 0, 0, 0, 47350, 0, 48049, 58459, 58465, 58457, 58466, 40947, 58456, 58461, 58467, 58464, 58463, 58462, 0, 58455, 58460, 0, 0, 58458, 40383, 48625, 48622, 59387, 59457, 59459, 59456, 59384, 59386, 59461, 59458, 59388, 59462, 59385, 59460, 48623, 48629, 48627, 59379, 48628, 48624, 59380, 59382, 59381, 59389, 59390, 40950, 48626, 38344, 48621, 0, 40538, 59383, 0, 60358, 49122, 0, 60349, 49123, 49126, 60354, 0, 60351, 49125, 39395, 0, 60355, 60356, 60350, 60359, 60352, 60357, 49124, 0, 49121, 60353, 35402, 61119, 49616, 49614, 49617, 49615, 61118, 61115, 61114, 40945, 61117, 0, 0, 61116, 61765, 49886, 61691, 61690, 0, 49881, 61761, 61760, 61687, 61763, 61692, 49885, 61689, 61762, 61688, 49882, 49884, 61693, 49883, 61694, 35495, 61764, 62290, 0, 50142, 62287, 0, 62291, 0, 39398, 50139, 62289, 50144, 40951, 50141, 40941, 62288, 0, 50143, 62292, 50138, 0, 35420, 0, 40366, 50364, 50366, 0, 62681, 50365, 62679, 50140, 62680, 50363, 50499, 50501, 63062, 50500, 63061, 0, 63329, 50605, 63328, 50606, 63326, 63325, 63330, 63331, 63558, 0, 63327, 0, 0, 63686, 63683, 63684, 63685, 50780, 0, 63825, 63824, 63823, 63856, 38345, 63934, 63915, 50798, 43181, 45152, 36936, 0, 0, 39400, 0, 47354, 0, 0, 0, 36937, 0, 0, 36026, 48630, 0, 37041, 60360, 0, 0, 49887, 0, 62293, 36938, 0, 0, 0, 0, 0, 63916, 43182, 43758, 44409, 44408, 39402, 45155, 0, 54248, 45153, 54249, 45154, 0, 0, 55263, 55259, 0, 39889, 45933, 55262, 55261, 55260, 45934, 55264, 55265, 39403, 0, 39404, 56387, 56385, 56389, 56390, 56396, 0, 56392, 56394, 39405, 56386, 56316, 0, 56393, 39406, 0, 56395, 56388, 56391, 56317, 46690, 56384, 56318, 46689, 46691, 0, 47357, 57461, 57463, 57462, 57467, 47355, 0, 57464, 57460, 57465, 57466, 47356, 47358, 57468, 0, 58471, 58470, 0, 58468, 58469, 48051, 48053, 48050, 48052, 59469, 59470, 59465, 36940, 59466, 48632, 48637, 48631, 48638, 48633, 59467, 0, 0, 59468, 59464, 48704, 48635, 0, 0, 48634, 48636, 0, 59463, 36941, 60362, 49128, 38347, 0, 60364, 49130, 60367, 60363, 60361, 60366, 49129, 60365, 0, 49127, 0, 0, 49619, 49622, 61121, 38882, 49620, 61120, 49618, 49621, 61766, 61767, 61768, 49888, 38348, 61769, 0, 49889, 50146, 62296, 62297, 62295, 62294, 62298, 50145, 62685, 62683, 62684, 62686, 62682, 62687, 63064, 40824, 63065, 63063, 50502, 63332, 50607, 63333, 63560, 63559, 0, 35196, 35197, 0, 0, 0, 0, 0, 0, 35198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39261, 0, 0, 0, 0, 0, 0, 0, 43183, 46692, 0, 0, 47424, 39770, 0, 0, 48054, 0, 36944, 49132, 35919, 49131, 0, 0, 0, 0, 50147, 50300, 50503, 43184, 45156, 47425, 36948, 62299, 50902, 39592, 39407, 65259, 40355, 40353, 39235, 39237, 0, 40317, 52134, 0, 39408, 43185, 0, 43188, 43187, 43186, 0, 0, 52133, 39409, 52685, 39410, 52687, 43759, 36028, 40288, 43761, 52684, 52686, 43760, 52689, 52688, 52690, 0, 0, 41123, 0, 0, 0, 0, 0, 53430, 53428, 44412, 53427, 44451, 44414, 44411, 0, 44452, 0, 44413, 44450, 0, 44449, 53429, 0, 44410, 0, 0, 0, 45162, 54251, 54257, 45159, 45166, 36955, 45161, 54254, 54256, 45164, 54250, 54253, 45160, 45157, 54252, 45163, 54255, 45165, 45158, 0, 40667, 0, 0, 55267, 55270, 45936, 0, 45946, 45942, 55268, 40313, 0, 45950, 45943, 45948, 45938, 0, 45935, 45937, 45949, 55269, 45941, 45944, 45940, 45945, 55271, 45947, 45939, 55266, 0, 0, 0, 0, 0, 0, 0, 0, 56397, 46693, 56399, 0, 46695, 46697, 39411, 56398, 46694, 46698, 36962, 46696, 0, 0, 0, 47431, 57507, 47439, 57470, 0, 47440, 47429, 0, 57505, 0, 34749, 47434, 0, 57506, 47427, 47426, 40789, 47437, 47436, 47435, 47433, 47438, 57469, 47428, 47430, 47432, 39929, 0, 48056, 48059, 0, 48063, 48057, 48062, 48060, 0, 48055, 36965, 48061, 48058, 38624, 0, 0, 59474, 48707, 48705, 0, 59475, 39102, 48708, 48706, 59473, 59472, 0, 49136, 59471, 49134, 49133, 60368, 48709, 49135, 60369, 49138, 60370, 49137, 49624, 61123, 49623, 49628, 49626, 49627, 49891, 49625, 61122, 60371, 49890, 49892, 0, 50148, 50149, 0, 62688, 0, 50654, 50653, 43190, 0, 0, 51797, 45167, 0, 51794, 51795, 51793, 0, 51796, 0, 0, 52138, 52135, 52140, 52136, 43191, 43194, 0, 52137, 43193, 52139, 36968, 0, 43192, 0, 0, 0, 36972, 52693, 52695, 43764, 52691, 52694, 52692, 43762, 43765, 0, 43763, 0, 0, 38360, 0, 53432, 53436, 53433, 0, 44455, 0, 44456, 36970, 53435, 0, 53437, 53439, 0, 44453, 53438, 0, 0, 44454, 0, 0, 0, 0, 0, 55278, 53434, 54258, 54267, 54265, 54260, 54261, 54266, 54268, 45169, 0, 54263, 54259, 45168, 45170, 54262, 54269, 54264, 0, 0, 45985, 55281, 55273, 55279, 55280, 45986, 0, 55272, 55274, 53431, 55276, 55277, 55275, 46700, 0, 0, 0, 56406, 60372, 56407, 56404, 45987, 46702, 56403, 56409, 56408, 46699, 56412, 56402, 56411, 56400, 56410, 56405, 46701, 0, 57514, 0, 57509, 57515, 57510, 57508, 57511, 47441, 0, 57513, 0, 57512, 47442, 48065, 48064, 58478, 58481, 58473, 58477, 48066, 58476, 58474, 58480, 58475, 58472, 58479, 0, 59481, 48712, 61770, 59478, 59479, 59477, 56401, 48711, 59482, 59476, 48710, 48713, 59480, 60373, 49139, 60374, 60375, 0, 61124, 49629, 61771, 61772, 0, 0, 61773, 62301, 62300, 62690, 0, 62689, 63067, 63068, 63066, 63334, 50608, 43195, 44458, 44457, 45173, 45172, 54336, 54337, 54270, 40882, 45171, 55285, 0, 55286, 55282, 45988, 55283, 40878, 55284, 0, 40880, 0, 35245, 56415, 56417, 56413, 56416, 46703, 56414, 46704, 0, 36974, 56691, 47445, 47444, 0, 47443, 0, 57516, 57517, 40561, 0, 58483, 58485, 48070, 48067, 40522, 48069, 48068, 58484, 58482, 0, 40924, 0, 0, 0, 59489, 59486, 59487, 48717, 59488, 59483, 59484, 48714, 0, 48715, 59485, 48716, 35243, 60379, 40888, 60380, 60377, 60378, 49140, 60376, 0, 0, 0, 0, 0, 61128, 61125, 61127, 49632, 61131, 49631, 61129, 61132, 61130, 61126, 49630, 0, 61775, 0, 61776, 61774, 36976, 61778, 49893, 49894, 62303, 50151, 61777, 62302, 50150, 62693, 62694, 50367, 62692, 35683, 62691, 0, 63069, 50504, 38364, 63561, 63688, 63687, 0, 50755, 50781, 63689, 63857, 36977, 50799, 43196, 43766, 0, 47446, 0, 50368, 43197, 44459, 45989, 46705, 49895, 43767, 0, 53441, 53440, 54338, 64606, 45176, 45174, 45178, 54340, 0, 45177, 45175, 0, 35145, 0, 0, 54339, 45992, 55292, 38491, 45991, 45993, 55362, 45995, 55294, 55360, 55287, 45994, 55363, 0, 0, 55289, 0, 55290, 55288, 45990, 35920, 55361, 55291, 55293, 38054, 0, 0, 56429, 36821, 56428, 56426, 56418, 56433, 56421, 56431, 56438, 56430, 46713, 40563, 46709, 56419, 0, 56425, 46711, 36981, 56424, 46712, 46714, 56427, 39415, 46706, 46707, 56439, 56437, 34738, 56436, 56422, 0, 56434, 0, 46710, 0, 0, 36031, 0, 46708, 56435, 56420, 56423, 56432, 39417, 0, 38499, 38329, 0, 58554, 57527, 0, 57520, 57539, 57548, 57523, 47457, 38100, 57536, 47447, 47449, 47461, 57521, 0, 64762, 47450, 47452, 47462, 47451, 36983, 0, 0, 37035, 47460, 57529, 0, 57518, 47458, 57528, 47454, 57546, 47459, 57544, 57532, 57542, 47456, 57519, 57545, 57540, 40269, 57547, 47448, 39418, 0, 47463, 47453, 0, 37603, 57525, 38843, 57533, 57537, 36984, 57541, 47455, 57524, 57522, 57534, 0, 0, 0, 39419, 57531, 57530, 38880, 57535, 57538, 0, 57543, 0, 0, 0, 58488, 38620, 48071, 58532, 58490, 48076, 48080, 58541, 58549, 58534, 48072, 40104, 58538, 57526, 38770, 48073, 58545, 58550, 58542, 37952, 58544, 58553, 58546, 58494, 58537, 37618, 0, 48081, 0, 48077, 58492, 58539, 48075, 58533, 48074, 58547, 58530, 58489, 48078, 58552, 0, 0, 58491, 58543, 58540, 58535, 58487, 58486, 58529, 58548, 48079, 58551, 58493, 58531, 48722, 0, 39421, 0, 0, 39420, 48730, 48725, 59556, 59553, 59495, 48720, 0, 63959, 38474, 48719, 48726, 0, 38616, 39422, 59493, 48724, 59505, 59491, 59492, 48718, 59555, 48728, 59508, 59513, 59507, 60398, 59503, 59511, 59509, 59496, 59490, 59517, 48727, 59518, 36939, 59512, 0, 59501, 59499, 59494, 0, 64065, 0, 59502, 59515, 59498, 59514, 59554, 0, 39488, 48723, 38747, 59510, 59516, 59506, 59500, 48721, 39489, 37341, 0, 58536, 59504, 48729, 59497, 37884, 39490, 39491, 0, 38489, 60404, 49143, 60403, 60400, 60484, 49147, 39492, 60481, 60408, 60483, 60393, 60406, 36945, 49149, 0, 60385, 38079, 60383, 60482, 0, 60480, 60414, 60397, 60396, 60386, 49216, 0, 60392, 60402, 60413, 49219, 60485, 0, 49640, 49221, 49150, 60390, 0, 60399, 60382, 60384, 49141, 49218, 49146, 60391, 60407, 60401, 49217, 60381, 49635, 60409, 60412, 49148, 37026, 60395, 49220, 49145, 40107, 38774, 0, 49144, 60405, 60411, 49142, 0, 60388, 60410, 0, 0, 60389, 0, 0, 0, 64597, 65093, 38056, 39493, 64075, 40417, 60394, 61138, 38617, 61143, 49637, 49639, 61149, 49633, 61164, 61155, 61144, 61145, 61154, 0, 49646, 61153, 61137, 61152, 61140, 61165, 49645, 49643, 61141, 0, 61160, 38772, 61146, 61159, 65013, 61161, 61136, 49638, 37605, 61162, 38469, 37338, 61150, 37027, 49642, 61147, 41055, 0, 49644, 61156, 0, 37039, 38847, 49636, 61142, 61157, 37196, 61151, 60387, 61158, 61139, 38522, 49641, 0, 61163, 37342, 49634, 61134, 39494, 65200, 38777, 37996, 61792, 61785, 49897, 0, 61780, 61795, 61787, 61148, 39000, 61797, 61781, 0, 49896, 61791, 49898, 49906, 49904, 61793, 49905, 61783, 37478, 61784, 61789, 61794, 37883, 61133, 49899, 61802, 61799, 61803, 61790, 61786, 61800, 62314, 61788, 0, 49902, 39495, 49901, 61135, 49903, 61796, 61798, 49900, 61801, 61779, 0, 61782, 38729, 0, 0, 38728, 0, 37706, 0, 40162, 62323, 0, 62307, 50155, 62321, 0, 37476, 62305, 50156, 0, 62316, 37343, 62312, 50161, 62322, 62306, 62309, 50153, 62324, 64377, 62317, 62320, 50159, 50164, 50162, 62313, 62308, 38615, 50157, 50158, 62304, 50154, 37699, 50152, 50160, 62319, 50163, 0, 62315, 62325, 50165, 0, 0, 0, 62311, 0, 62318, 0, 64971, 65146, 0, 37339, 35946, 62707, 62786, 62709, 62716, 62310, 62714, 62697, 62784, 50371, 62701, 62718, 62708, 38831, 0, 50370, 38365, 0, 62788, 62710, 37704, 62715, 62717, 62695, 62785, 62706, 62711, 62699, 62703, 62787, 62713, 62696, 62700, 62702, 62712, 39499, 50369, 62705, 0, 64581, 0, 39501, 0, 0, 62698, 0, 0, 0, 37308, 37090, 37044, 38369, 62704, 63073, 63078, 50511, 63080, 39502, 50505, 34733, 63076, 63082, 50510, 50506, 0, 50507, 63072, 63079, 50509, 63077, 50508, 63071, 63075, 63074, 39503, 63070, 63081, 0, 65088, 65091, 50609, 63341, 63344, 63340, 63342, 63343, 63337, 63338, 63335, 38621, 0, 63339, 63336, 50610, 50611, 0, 39505, 63563, 0, 63565, 38567, 0, 0, 37040, 0, 63564, 63566, 0, 50656, 0, 63562, 50655, 50657, 40014, 0, 37955, 63691, 63692, 50756, 63690, 36538, 63827, 63826, 63828, 50783, 63829, 50782, 63830, 63858, 63861, 63860, 50792, 63859, 39506, 0, 64705, 50802, 50800, 50801, 50807, 63936, 63937, 63935, 63945, 0, 35817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40111, 0, 0, 35837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39612, 0, 39608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43768, 35818, 0, 55364, 56440, 59557, 62326, 0, 35819, 43769, 0, 44460, 45179, 0, 37042, 55365, 0, 55366, 45996, 0, 46717, 56442, 56441, 46755, 46716, 56443, 46718, 46754, 46753, 46715, 0, 38377, 38376, 47464, 38374, 0, 57552, 57550, 0, 57551, 57549, 37045, 48082, 39508, 48085, 48087, 48086, 37043, 38375, 48083, 48084, 35664, 59559, 59558, 48731, 59560, 0, 59561, 48732, 0, 0, 0, 60493, 60491, 61171, 0, 60489, 60490, 49222, 60486, 60494, 60488, 60492, 61167, 0, 0, 61169, 0, 61170, 49651, 61166, 49650, 61168, 49647, 49648, 49649, 60487, 0, 0, 49909, 61806, 61804, 61805, 49907, 49910, 49908, 0, 0, 0, 62327, 62328, 50166, 0, 62789, 62791, 62790, 50372, 50512, 63085, 63084, 63083, 0, 0, 35820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39510, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43770, 35835, 51626, 0, 51800, 42729, 51798, 51801, 51799, 0, 0, 0, 52142, 0, 43201, 0, 43202, 52144, 43199, 52143, 52141, 43200, 43198, 39511, 0, 0, 0, 0, 41130, 52696, 52699, 43773, 52698, 52697, 0, 43772, 43771, 40870, 43840, 52700, 43774, 39372, 0, 0, 0, 0, 53446, 44462, 44463, 44464, 53447, 53443, 44461, 53444, 0, 53445, 53442, 0, 40025, 0, 45220, 0, 0, 45217, 54341, 45218, 45221, 54342, 0, 45182, 45180, 45181, 45219, 0, 0, 0, 0, 39349, 45997, 55369, 46005, 55368, 0, 55371, 46001, 55370, 46763, 45999, 46002, 45998, 46003, 46004, 46000, 0, 0, 37054, 55367, 46759, 56445, 0, 56483, 40879, 0, 56482, 46764, 46760, 46761, 56444, 56446, 56481, 46756, 46758, 0, 46762, 46757, 38386, 0, 57555, 57553, 57554, 47466, 47467, 37055, 57556, 47465, 48088, 0, 48090, 48089, 0, 58555, 0, 0, 58556, 59563, 37057, 59562, 65252, 0, 49223, 49224, 60495, 49225, 0, 61174, 0, 61172, 0, 61173, 49652, 0, 61807, 50167, 0, 50903, 0, 49653, 43841, 0, 45222, 54343, 37063, 0, 55372, 46006, 46765, 56484, 56486, 46767, 46766, 46768, 46769, 56485, 47470, 47471, 47469, 48091, 47468, 57557, 0, 0, 0, 48092, 59564, 60496, 49226, 49654, 61808, 61812, 49913, 61809, 49914, 49912, 61813, 49915, 61811, 0, 62329, 49911, 50168, 0, 63693, 0, 0, 43842, 46008, 46007, 0, 0, 0, 0, 46770, 56488, 56487, 46771, 0, 37604, 57561, 47475, 47472, 57560, 47474, 57558, 47473, 0, 57559, 0, 58557, 48093, 0, 59567, 40786, 48733, 59565, 48734, 48735, 59566, 48736, 0, 60497, 0, 49230, 49227, 49232, 60499, 49228, 60498, 49231, 0, 0, 49229, 0, 61177, 61179, 0, 37083, 49655, 61178, 49656, 61176, 61175, 41062, 61815, 61814, 49916, 61816, 62334, 50170, 62333, 62330, 50169, 62331, 62332, 0, 62792, 62793, 50373, 37074, 50515, 0, 34667, 63086, 37076, 0, 50513, 50514, 63087, 0, 0, 50612, 50613, 63345, 39515, 38397, 50757, 63695, 50759, 0, 63694, 63696, 50758, 63831, 34737, 63917, 0, 0, 0, 0, 0, 35780, 43843, 0, 0, 35942, 47476, 37086, 58558, 0, 59568, 49233, 49234, 40164, 43844, 37089, 48737, 50171, 44465, 0, 0, 0, 49235, 0, 50658, 44466, 55373, 0, 56489, 40518, 56491, 0, 56490, 38481, 57565, 57562, 47477, 0, 47478, 57563, 57564, 0, 58560, 58565, 48094, 58559, 58561, 58568, 58563, 58567, 58564, 58562, 58566, 48095, 0, 64344, 59571, 37094, 59569, 48739, 0, 48738, 59570, 48740, 0, 0, 0, 0, 60502, 0, 0, 60501, 49236, 60500, 61180, 38480, 61182, 61249, 61248, 37095, 49657, 61181, 61857, 49917, 61821, 61858, 49918, 0, 61819, 0, 61822, 61820, 61817, 49984, 61818, 0, 0, 37096, 39517, 62369, 40826, 0, 62371, 62370, 39772, 62794, 40828, 62795, 0, 64594, 37097, 63088, 37098, 50615, 39518, 50614, 63567, 63568, 50760, 63697, 40822, 50793, 0, 44467, 46772, 58570, 58569, 59573, 59572, 0, 37099, 49658, 61251, 61250, 61861, 61859, 61862, 61860, 0, 0, 50172, 62372, 62373, 62374, 37100, 63089, 0, 63346, 0, 63698, 35822, 0, 0, 0, 0, 0, 0, 44468, 37102, 0, 60503, 61252, 37318, 44469, 0, 37106, 48096, 0, 60504, 49985, 61863, 50173, 0, 62796, 62797, 50516, 63569, 44470, 46011, 46012, 55374, 46773, 46774, 56492, 46775, 0, 47482, 0, 47484, 57567, 57568, 57566, 47479, 47480, 47483, 47481, 64700, 35444, 58571, 48097, 48098, 0, 0, 59580, 48743, 59575, 59574, 38487, 59579, 48741, 0, 40175, 49243, 0, 59576, 59581, 59578, 59577, 0, 48742, 0, 49241, 40927, 60506, 49237, 0, 60507, 37111, 37110, 60505, 0, 49240, 49238, 49242, 0, 49239, 0, 0, 0, 0, 0, 61253, 0, 61258, 61254, 61257, 49659, 39774, 60884, 61256, 61255, 37112, 49988, 49986, 49989, 49987, 61864, 61865, 61866, 49990, 0, 0, 36092, 62378, 50240, 62376, 0, 50241, 62375, 62377, 50174, 62801, 62798, 0, 62799, 62800, 63090, 50518, 37113, 50517, 36041, 63348, 63347, 50616, 64106, 0, 0, 50659, 50761, 50784, 63832, 63918, 63919, 35823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44471, 56493, 0, 0, 57569, 58572, 58573, 48099, 0, 48100, 59582, 48744, 40928, 0, 49660, 37186, 61867, 39522, 49991, 62381, 50242, 62380, 62382, 62379, 63093, 62802, 62803, 38249, 50374, 0, 63092, 37188, 37187, 63091, 37185, 63349, 63920, 0, 35824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44472, 38496, 0, 35825, 44473, 39414, 37193, 45223, 54344, 0, 55375, 37194, 46776, 0, 46779, 46777, 56494, 37195, 46781, 0, 46778, 0, 39524, 46780, 0, 47486, 35519, 57570, 0, 0, 57571, 59584, 0, 47485, 47521, 47522, 0, 58575, 0, 58574, 48101, 0, 48102, 0, 58576, 59583, 48104, 48745, 0, 48103, 0, 39526, 0, 49244, 59585, 48747, 48746, 59586, 59589, 59587, 59588, 48748, 39527, 49249, 49247, 39529, 0, 49246, 60509, 0, 49248, 0, 0, 60508, 61259, 0, 60510, 49245, 60511, 61262, 61260, 61261, 61266, 49995, 61265, 61268, 61267, 61264, 61263, 0, 49661, 0, 39530, 38482, 37197, 61870, 38502, 61869, 49994, 49992, 49993, 40827, 61868, 39531, 62385, 0, 50243, 0, 62384, 62383, 50244, 41068, 62808, 62807, 38503, 62805, 0, 62804, 50376, 50375, 62809, 63350, 50617, 63095, 50519, 63094, 62806, 0, 63351, 50660, 39532, 50785, 63833, 0, 63921, 39533, 35826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44474, 55376, 61269, 44475, 0, 38506, 58578, 58577, 60512, 0, 0, 61271, 0, 61270, 64746, 49996, 62386, 62387, 50377, 0, 38508, 63922, 45224, 46783, 46782, 57572, 57574, 47524, 57573, 47523, 47525, 57575, 0, 0, 37316, 58580, 58582, 58581, 38519, 58584, 0, 0, 0, 48105, 58583, 58579, 39412, 39535, 0, 58585, 0, 59596, 0, 59599, 59601, 59591, 59595, 59592, 48750, 48753, 48755, 59593, 59594, 48754, 59597, 59600, 59598, 48756, 40875, 48752, 59590, 48749, 0, 48751, 36030, 36545, 49251, 60518, 60516, 60515, 38229, 60521, 0, 60520, 60519, 0, 60514, 49250, 60513, 0, 60517, 49252, 0, 0, 61274, 37202, 61278, 61275, 61277, 61276, 61273, 61279, 61282, 61280, 61281, 49728, 0, 49662, 61272, 61283, 61875, 61878, 61880, 61879, 0, 61873, 61877, 61872, 37203, 61874, 49997, 61871, 37205, 61876, 0, 0, 62400, 62389, 50245, 0, 0, 50246, 62388, 62393, 62399, 62391, 62398, 38237, 62395, 38513, 62394, 62397, 62392, 62390, 40045, 62396, 0, 62816, 62814, 50378, 62813, 62819, 62817, 38515, 50379, 62812, 62810, 0, 62811, 50381, 62815, 50380, 62818, 63096, 63102, 37204, 39537, 63097, 50523, 63137, 50522, 63101, 63100, 50521, 63099, 50520, 63098, 0, 63357, 63393, 63358, 0, 63355, 50619, 63352, 63356, 63395, 0, 63394, 63353, 63354, 50618, 63570, 50663, 37206, 63571, 50661, 50662, 38509, 0, 63699, 50762, 63862, 0, 50794, 38231, 63923, 50795, 63924, 63925, 63939, 63938, 50810, 63949, 35270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45225, 0, 0, 57577, 0, 57576, 0, 48106, 48107, 58586, 35434, 59602, 60524, 0, 35671, 48757, 49253, 60522, 40929, 60525, 49254, 39775, 61284, 60523, 61881, 49998, 62401, 0, 0, 0, 62822, 62820, 0, 0, 62821, 0, 0, 63138, 0, 50524, 63396, 50666, 50620, 50664, 50665, 63700, 50786, 41053, 45226, 0, 0, 0, 61882, 0, 0, 54345, 37211, 47526, 37212, 58587, 0, 0, 48108, 58588, 0, 0, 0, 59604, 59603, 49256, 48758, 48759, 0, 59607, 59606, 59605, 37214, 0, 60526, 60529, 0, 60528, 60527, 49255, 61288, 61286, 61285, 40796, 0, 61287, 40791, 49999, 61884, 61885, 50000, 0, 61883, 40805, 62403, 62402, 62405, 50247, 62404, 39538, 62823, 62825, 62824, 0, 37216, 63139, 63142, 63140, 63141, 63397, 50621, 0, 0, 0, 63572, 63573, 63574, 0, 50763, 50787, 63926, 45227, 0, 48760, 49257, 61886, 40798, 63398, 0, 37217, 63940, 54346, 0, 50811, 45228, 60530, 37220, 61887, 0, 62406, 0, 40769, 63143, 63399, 45229, 0, 58589, 58590, 37225, 48109, 48110, 59609, 48762, 48761, 59608, 0, 61289, 0, 61888, 61890, 61889, 50003, 50002, 50001, 37224, 50526, 63144, 0, 50525, 63401, 63400, 0, 50764, 63701, 46013, 57578, 0, 0, 0, 58593, 58591, 58592, 0, 0, 59618, 0, 59613, 59610, 59617, 39540, 0, 0, 59619, 0, 0, 48764, 59616, 59612, 0, 0, 59611, 59615, 59614, 48763, 0, 0, 60541, 60536, 60534, 60577, 60535, 38578, 60531, 39541, 60537, 64933, 0, 60532, 61298, 60533, 60578, 0, 0, 40681, 0, 35770, 37229, 41056, 60540, 49258, 60539, 60538, 0, 60542, 0, 40926, 0, 0, 61290, 61293, 0, 40899, 61292, 38581, 61300, 61295, 61299, 0, 61297, 61296, 61294, 0, 61291, 0, 49731, 49730, 0, 49732, 49729, 61301, 41063, 0, 0, 0, 0, 61896, 61899, 0, 61897, 61901, 0, 0, 0, 61902, 0, 61894, 50008, 61895, 0, 61893, 61900, 0, 61892, 61891, 50007, 50005, 50004, 0, 0, 0, 0, 38579, 0, 0, 0, 61898, 62415, 62421, 50250, 62416, 0, 62419, 62423, 50251, 62418, 39542, 62410, 0, 62409, 62422, 62413, 0, 62411, 62420, 62412, 50249, 50248, 38357, 62407, 62408, 62417, 40650, 0, 0, 62414, 39543, 0, 0, 39544, 0, 0, 62828, 62831, 0, 0, 0, 0, 50006, 0, 37232, 0, 0, 37231, 0, 0, 62829, 62835, 62833, 62827, 62838, 40867, 62826, 37233, 50383, 62834, 0, 38577, 0, 62830, 50382, 62837, 40803, 0, 62836, 0, 0, 0, 40807, 63147, 63146, 0, 35769, 39546, 63153, 0, 63149, 63152, 50528, 35670, 0, 63150, 63151, 0, 63145, 63148, 50527, 0, 39642, 0, 50623, 63412, 63407, 63411, 38576, 63414, 63410, 0, 63406, 39550, 50625, 63409, 63413, 50624, 63404, 62832, 63408, 0, 0, 63405, 40414, 63402, 0, 63403, 50622, 63578, 63580, 63583, 63579, 63584, 38573, 63577, 0, 63575, 38574, 50667, 63581, 50669, 50668, 63576, 63582, 0, 0, 0, 40609, 63706, 50765, 63707, 0, 63705, 63702, 0, 0, 63704, 63703, 63834, 0, 0, 0, 0, 63836, 63835, 0, 0, 63865, 40528, 63864, 63863, 63866, 0, 50803, 50804, 63946, 63950, 38575, 35828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46014, 56495, 57581, 0, 47527, 57579, 0, 0, 57580, 0, 0, 0, 58594, 58595, 48113, 48111, 58596, 48112, 59624, 0, 59627, 59621, 59628, 59620, 59622, 0, 59623, 59626, 0, 40868, 48801, 59631, 59630, 48765, 59625, 59629, 48766, 0, 0, 38589, 0, 0, 0, 60588, 0, 49263, 0, 60583, 49259, 38644, 60580, 60586, 60589, 0, 49264, 0, 60585, 60582, 60590, 60581, 38584, 60587, 49260, 0, 60579, 49261, 0, 49262, 60584, 0, 0, 0, 61353, 61306, 61307, 61310, 61308, 0, 61302, 64161, 0, 61305, 61349, 61309, 37287, 0, 49733, 0, 61351, 61348, 49734, 61350, 61303, 61346, 61347, 41054, 61345, 0, 0, 0, 39549, 61906, 61908, 61911, 0, 35144, 61905, 40625, 50009, 61913, 61904, 61914, 0, 61910, 61912, 61916, 61909, 61917, 61907, 61903, 50010, 40411, 61915, 50011, 50253, 0, 0, 0, 0, 0, 61304, 62449, 62440, 50255, 62436, 50256, 38335, 35443, 62445, 62439, 62429, 50254, 62442, 62437, 62438, 0, 62424, 62431, 62446, 0, 62443, 40702, 62435, 37242, 62447, 62430, 62425, 62444, 37243, 62427, 62441, 62432, 62448, 62428, 50252, 62426, 62433, 62434, 0, 0, 0, 62845, 0, 62843, 39587, 62882, 0, 62894, 62885, 62844, 62840, 62887, 62846, 62883, 62842, 62890, 62839, 62881, 62886, 62888, 62891, 62841, 38594, 62895, 62896, 62889, 62893, 62884, 40823, 63169, 63172, 0, 50529, 0, 63171, 63176, 63174, 50530, 63165, 63155, 63154, 50532, 63167, 63168, 63164, 63156, 39588, 63161, 62892, 39589, 63157, 50531, 63163, 37281, 63162, 0, 63158, 63170, 35256, 63159, 63419, 63173, 63175, 63166, 63160, 63420, 63422, 63416, 50626, 37235, 63429, 63427, 50627, 63426, 63425, 63418, 63415, 63421, 63430, 63417, 63423, 0, 63593, 63598, 63588, 63591, 50670, 63595, 0, 63602, 63424, 0, 63589, 63599, 63603, 63594, 63587, 63597, 0, 63596, 63601, 63600, 63428, 63592, 63586, 63590, 50766, 50767, 63585, 39590, 63718, 63709, 63717, 63714, 63715, 63708, 63711, 63719, 63713, 63712, 63710, 0, 63716, 35261, 63837, 35257, 63838, 37245, 63840, 63839, 63842, 63841, 63868, 63867, 63927, 0, 63928, 38587, 63941, 50808, 50812, 40946, 63951, 50813, 35829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46015, 0, 0, 0, 50384, 63177, 39593, 50768, 50769, 0, 46016, 57582, 40788, 47528, 59632, 40931, 40685, 60592, 60593, 60591, 61355, 61354, 49735, 61919, 61356, 61918, 0, 37290, 62451, 50257, 50259, 62450, 37291, 41072, 50258, 40813, 62897, 62899, 62898, 63178, 50533, 37292, 50671, 63720, 63843, 37293, 0, 63954, 46017, 41213, 58597, 40930, 48802, 37295, 40513, 39594, 60595, 60594, 37296, 61357, 39595, 0, 0, 50260, 50385, 63431, 63947, 0, 0, 0, 46018, 48114, 39596, 48803, 39498, 62452, 37298, 63604, 46784, 35830, 0, 39597, 35254, 61358, 0, 0, 0, 50788, 46785, 48804, 49736, 63605, 46786, 0, 59633, 49266, 60596, 60597, 0, 49265, 0, 61359, 49740, 49738, 49739, 49737, 61920, 50012, 0, 39599, 0, 62901, 62900, 62903, 62902, 50386, 0, 0, 63179, 0, 63181, 63180, 50534, 63432, 39600, 63606, 63607, 50672, 63844, 63869, 50805, 39601, 56496, 60598, 61360, 62453, 57583, 39585, 61361, 61922, 61921, 37305, 0, 0, 0, 63608, 50770, 37306, 63845, 63870, 0, 0, 0, 47529, 59634, 59635, 0, 60599, 47530, 0, 50013, 61923, 40806, 63183, 50535, 63184, 63182, 63609, 0, 63721, 0, 47531, 0, 61364, 61363, 61362, 61924, 41025, 35767, 61928, 61927, 61926, 61925, 50014, 62454, 62905, 50387, 62904, 63185, 63435, 63434, 50628, 63433, 63612, 63611, 63610, 37312, 0, 48115, 0, 60600, 49741, 0, 62455, 62456, 63436, 63613, 39603, 37315, 63722, 63846, 63929, 63956, 48116, 49742, 61929, 62457, 63186, 63614, 41212, 0, 48806, 40942, 61365, 61930, 62458, 62459, 62460, 62910, 40809, 62906, 50536, 62909, 62908, 50388, 62907, 50390, 37320, 50389, 63188, 63187, 50537, 50538, 0, 37321, 50630, 63437, 50629, 0, 63651, 63652, 63650, 63649, 50772, 0, 63723, 63724, 63725, 50771, 63847, 63850, 63849, 63848, 0, 0, 63955, 36326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49267, 37323, 0, 50021, 62911, 63189, 0, 50631, 63438, 34732, 34724, 63957, 35272, 0, 0, 49268, 0, 0, 36266, 61366, 0, 63439, 0, 63905, 40925, 35907, 35949, 35956, 36023, 36025, 36027, 36032, 36055, 36056, 36058, 51361, 51363, 36077, 36168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34754, 34770, 34774, 34778, 34783]);
		encode2 = $toNativeArray($kindUint16, [34915, 34980, 34917, 34982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41302, 41304, 0, 0, 0, 41381, 41382, 0, 0, 41383, 41384, 0, 0, 0, 0, 0, 0, 0, 41292, 41291, 41285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41388, 0, 0, 41387, 0, 0, 0, 0, 0, 41392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41546, 0, 41409, 0, 0, 0, 41547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41657, 41658, 41659, 41660, 41661, 41662, 41663, 41664, 41665, 41666, 0, 0, 0, 0, 0, 0, 50869, 50870, 50871, 50872, 50873, 50874, 50875, 50876, 50877, 50878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41462, 41460, 41463, 41461, 0, 0, 41464, 41465, 41467, 41466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51319, 51320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41537, 0, 0, 0, 0, 41428, 0, 0, 0, 41435, 41448, 41447, 0, 0, 41469, 0, 41468, 0, 0, 0, 41444, 41445, 41452, 0, 0, 41453, 0, 0, 0, 0, 0, 41455, 41454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41434, 41437, 0, 0, 0, 0, 41432, 41433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41458, 0, 0, 0, 41459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34985, 34986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41920, 41921, 41922, 41923, 41924, 41925, 41926, 41927, 41928, 41929, 41930, 41931, 41932, 41933, 41934, 41935, 41936, 41937, 41938, 41939, 41940, 41941, 41942, 41943, 41944, 41945, 41946, 41947, 41948, 41949, 41950, 41951, 0, 41952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50849, 50850, 50851, 50852, 50853, 50854, 50855, 50856, 50857, 50858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50859, 50860, 50861, 50862, 50863, 50864, 50865, 50866, 50867, 50868, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41591, 0, 41592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41594, 0, 0, 0, 41595, 0, 0, 0, 41596, 0, 0, 0, 41597, 0, 0, 0, 41589, 0, 0, 0, 0, 0, 0, 0, 41588, 0, 0, 0, 0, 0, 0, 0, 41587, 0, 0, 0, 0, 0, 0, 0, 41586, 0, 0, 0, 0, 0, 0, 0, 41585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63993, 63992, 63974, 63983, 63965, 63976, 63985, 63967, 63980, 63989, 63971, 63982, 63991, 63973, 63977, 63986, 63968, 63979, 63988, 63970, 63975, 63984, 63966, 63981, 63990, 63972, 63978, 63987, 63969, 63994, 63995, 63997, 63996, 41644, 41645, 41646, 41306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41570, 41571, 41572, 41573, 41574, 41575, 41576, 41577, 41584, 41583, 41582, 41581, 41580, 41579, 41578, 0, 0, 0, 0, 41590, 41593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41405, 41404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41398, 41397, 0, 0, 0, 0, 0, 0, 0, 0, 41407, 41406, 0, 0, 0, 0, 0, 0, 0, 0, 41403, 41402, 0, 0, 0, 41395, 0, 0, 41399, 41396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41640, 41641, 41643, 41642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41401, 41400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41456, 0, 41457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50918]);
		encode3 = $toNativeArray($kindUint16, [41393, 50904, 0, 0, 0, 0, 0, 0, 41410, 41560, 41427, 0, 0, 0, 0, 0, 41296, 0, 0, 0, 0, 0, 0, 0, 0, 34905, 34903, 0, 0, 0, 0, 0, 0, 34909, 34907, 34918, 0, 0, 0, 0, 0, 0, 0, 34913, 34911, 0, 0, 0, 41425, 0, 0, 0, 0, 0, 0, 0, 0, 34922, 34920, 0, 0, 0, 0, 0, 0, 34927, 34925, 34983, 0, 34931, 34929, 0, 0, 0, 0, 34935, 34933, 0, 0, 0, 41426, 51451, 34939, 34937, 0, 34978, 0, 0, 0, 34902, 34919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34906, 34924, 0, 0, 0, 0, 0, 0, 34908, 34926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51452, 34910, 34932, 0, 0, 0, 0, 0, 51450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34904, 34921, 0, 34930, 34912, 34934, 0, 34938, 0, 34940, 0, 34941, 0, 34942, 0, 34977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51446, 34923, 0, 0, 51448, 0, 0, 0, 0, 0, 0, 51447, 0, 0, 0, 0, 0, 34984, 0, 0, 0, 0, 0, 0, 0, 0, 51454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51445, 0, 0, 0, 0, 0, 0, 51453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50905, 41918, 0, 41916, 41917, 41919, 0, 41413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41796, 41797, 41798, 41799, 41800, 41801, 41802, 41803, 41804, 41805, 41806, 41807, 41808, 41809, 41810, 41811, 41812, 0, 41813, 41814, 41815, 41816, 41817, 41818, 41819, 0, 0, 0, 0, 0, 0, 0, 41820, 41821, 41822, 41823, 41824, 41825, 41826, 41827, 41828, 41829, 41830, 41831, 41832, 41833, 41834, 41835, 41836, 0, 41837, 41838, 41839, 41840, 41841, 41842, 41843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51187, 51188, 51189, 51190, 51191, 51192, 51194, 51195, 51196, 51197, 51198, 51264, 51265, 51266, 51267, 51268, 51269, 51270, 51271, 51272, 51273, 51274, 51275, 51276, 51277, 51278, 51279, 51280, 51281, 51282, 51283, 51284, 51285, 51286, 51287, 51288, 51289, 51290, 51292, 51293, 51294, 51295, 51296, 51297, 51298, 51299, 51300, 51301, 51302, 51303, 51304, 51305, 51306, 51307, 51308, 51309, 51310, 51311, 51312, 51313, 51314, 51315, 51316, 51317, 0, 51291]);
		encode4 = $toNativeArray($kindUint16, [41290, 41303, 0, 41305, 41307, 41311, 41312, 41315, 41316, 41319, 41320, 41323, 41324, 41327, 41328, 41331, 41332, 41335, 41336, 41339, 41340, 0, 0, 0, 0, 41414, 41415, 41418, 41419, 41416, 41417, 41308, 41293, 41294, 41295, 0, 41297, 41298, 41299, 41300, 0, 41341, 41342, 41377, 41378, 41379, 41380, 41420, 41421, 41422, 41438, 41439, 41440, 41441, 41442, 0, 41538, 41548, 41549, 41550, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41289, 51408, 41389, 41539, 41544, 41390, 51407, 41309, 41310, 41391, 41423, 41281, 41424, 41284, 41470, 41647, 41648, 41649, 41650, 41651, 41652, 41653, 41654, 41655, 41656, 41287, 41286, 41429, 41431, 41430, 41288, 41545, 41679, 41680, 41681, 41682, 41683, 41684, 41685, 41686, 41687, 41688, 41689, 41690, 41691, 41692, 41693, 41694, 41695, 41696, 41697, 41698, 41699, 41700, 41701, 41702, 41703, 41704, 50916, 41536, 50917, 0, 41412, 0, 41705, 41706, 41707, 41708, 41709, 41710, 41711, 41712, 41713, 41714, 41715, 41716, 41717, 41718, 41719, 41720, 41721, 41722, 41723, 41724, 41725, 41726, 41792, 41793, 41794, 41795, 41313, 41301, 41314, 41443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41542, 41543, 51405, 41411, 51406, 41540, 0, 0, 0, 0, 0, 0, 0, 63998]);
		encode5 = $toNativeArray($kindUint16, [39028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39624, 0, 0, 0, 0, 41031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36848]);
		encode6 = $toNativeArray($kindUint16, [35832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51530, 56828]);
		encode7 = $toNativeArray($kindUint16, [34780]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/text/encoding/unicode"] = (function() {
	var $pkg = {}, $init, errors, encoding, transform, utf16, utf8, BOMPolicy, Endianness, utf16Encoding, utf16Decoder, utf16Encoder, sliceType, ptrType$1, ptrType$2, utf16le, utf16be, UTF16, isHighSurrogate;
	errors = $packages["errors"];
	encoding = $packages["golang.org/x/text/encoding"];
	transform = $packages["golang.org/x/text/transform"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	BOMPolicy = $pkg.BOMPolicy = $newType(1, $kindBool, "unicode.BOMPolicy", "BOMPolicy", "golang.org/x/text/encoding/unicode", null);
	Endianness = $pkg.Endianness = $newType(1, $kindBool, "unicode.Endianness", "Endianness", "golang.org/x/text/encoding/unicode", null);
	utf16Encoding = $pkg.utf16Encoding = $newType(0, $kindStruct, "unicode.utf16Encoding", "utf16Encoding", "golang.org/x/text/encoding/unicode", function(endianness_, bomPolicy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.endianness = false;
			this.bomPolicy = false;
			return;
		}
		this.endianness = endianness_;
		this.bomPolicy = bomPolicy_;
	});
	utf16Decoder = $pkg.utf16Decoder = $newType(0, $kindStruct, "unicode.utf16Decoder", "utf16Decoder", "golang.org/x/text/encoding/unicode", function(endianness_, initialBOMPolicy_, currentBOMPolicy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.endianness = false;
			this.initialBOMPolicy = false;
			this.currentBOMPolicy = false;
			return;
		}
		this.endianness = endianness_;
		this.initialBOMPolicy = initialBOMPolicy_;
		this.currentBOMPolicy = currentBOMPolicy_;
	});
	utf16Encoder = $pkg.utf16Encoder = $newType(0, $kindStruct, "unicode.utf16Encoder", "utf16Encoder", "golang.org/x/text/encoding/unicode", function(endianness_, initialBOMPolicy_, currentBOMPolicy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.endianness = false;
			this.initialBOMPolicy = false;
			this.currentBOMPolicy = false;
			return;
		}
		this.endianness = endianness_;
		this.initialBOMPolicy = initialBOMPolicy_;
		this.currentBOMPolicy = currentBOMPolicy_;
	});
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(utf16Decoder);
	ptrType$2 = $ptrType(utf16Encoder);
	UTF16 = function(e, b) {
		var $ptr, b, e, x;
		return (x = new utf16Encoding.ptr(e, b), new x.constructor.elem(x));
	};
	$pkg.UTF16 = UTF16;
	utf16Encoding.ptr.prototype.NewDecoder = function() {
		var $ptr, u;
		u = $clone(this, utf16Encoding);
		return new utf16Decoder.ptr(u.endianness, u.bomPolicy, u.bomPolicy);
	};
	utf16Encoding.prototype.NewDecoder = function() { return this.$val.NewDecoder(); };
	utf16Encoding.ptr.prototype.NewEncoder = function() {
		var $ptr, u;
		u = $clone(this, utf16Encoding);
		return new utf16Encoder.ptr(u.endianness, u.bomPolicy, u.bomPolicy);
	};
	utf16Encoding.prototype.NewEncoder = function() { return this.$val.NewEncoder(); };
	utf16Encoding.ptr.prototype.String = function() {
		var $ptr, _tmp, _tmp$1, b, e, u;
		u = $clone(this, utf16Encoding);
		_tmp = "B"; _tmp$1 = "Ignore"; e = _tmp; b = _tmp$1;
		if (u.endianness === true) {
			e = "L";
		}
		if (u.bomPolicy === true) {
			b = "Expect";
		}
		return "UTF-16" + e + "E (" + b + " BOM)";
	};
	utf16Encoding.prototype.String = function() { return this.$val.String(); };
	utf16Decoder.ptr.prototype.Reset = function() {
		var $ptr, u;
		u = this;
		u.currentBOMPolicy = u.initialBOMPolicy;
	};
	utf16Decoder.prototype.Reset = function() { return this.$val.Reset(); };
	utf16Decoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, atEOF, dSize, dst, err, nDst, nSrc, r, sSize, src, u, x, x$1, x$2, x$3, x$4;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		u = this;
		if (u.currentBOMPolicy === true) {
			if (src.$length < 2) {
				_tmp = 0; _tmp$1 = 0; _tmp$2 = transform.ErrShortSrc; nDst = _tmp; nSrc = _tmp$1; err = _tmp$2;
				return [nDst, nSrc, err];
			}
			if (((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) === 254) && ((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) === 255)) {
				u.endianness = false;
			} else if (((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) === 255) && ((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) === 254)) {
				u.endianness = true;
			} else {
				_tmp$3 = 0; _tmp$4 = 0; _tmp$5 = $pkg.ErrMissingBOM; nDst = _tmp$3; nSrc = _tmp$4; err = _tmp$5;
				return [nDst, nSrc, err];
			}
			u.currentBOMPolicy = false;
			nSrc = 2;
		}
		r = 0;
		_tmp$6 = 0; _tmp$7 = 0; dSize = _tmp$6; sSize = _tmp$7;
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			if ((nSrc + 1 >> 0) < src.$length) {
				x$2 = ((((x = nSrc + 0 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) << 16 >>> 16) << 8 << 16 >>> 16) | ((x$1 = nSrc + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) << 16 >>> 16)) >>> 0;
				if (u.endianness === true) {
					x$2 = ((x$2 >>> 8 << 16 >>> 16) | (x$2 << 8 << 16 >>> 16)) >>> 0;
				}
				_tmp$8 = (x$2 >> 0); _tmp$9 = 2; r = _tmp$8; sSize = _tmp$9;
				if (utf16.IsSurrogate(r)) {
					if ((nSrc + 3 >> 0) < src.$length) {
						x$2 = ((((x$3 = nSrc + 2 >> 0, ((x$3 < 0 || x$3 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$3])) << 16 >>> 16) << 8 << 16 >>> 16) | ((x$4 = nSrc + 3 >> 0, ((x$4 < 0 || x$4 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$4])) << 16 >>> 16)) >>> 0;
						if (u.endianness === true) {
							x$2 = ((x$2 >>> 8 << 16 >>> 16) | (x$2 << 8 << 16 >>> 16)) >>> 0;
						}
						if (isHighSurrogate((x$2 >> 0))) {
							_tmp$10 = utf16.DecodeRune(r, (x$2 >> 0)); _tmp$11 = 4; r = _tmp$10; sSize = _tmp$11;
						}
					} else if (!atEOF) {
						err = transform.ErrShortSrc;
						break;
					}
				}
				dSize = utf8.RuneLen(r);
				if (dSize < 0) {
					_tmp$12 = 65533; _tmp$13 = 3; r = _tmp$12; dSize = _tmp$13;
				}
			} else if (atEOF) {
				_tmp$14 = 65533; _tmp$15 = 3; _tmp$16 = 1; r = _tmp$14; dSize = _tmp$15; sSize = _tmp$16;
			} else {
				err = transform.ErrShortSrc;
				break;
			}
			if ((nDst + dSize >> 0) > dst.$length) {
				err = transform.ErrShortDst;
				break;
			}
			nDst = nDst + (utf8.EncodeRune($subslice(dst, nDst), r)) >> 0;
			nSrc = nSrc + (sSize) >> 0;
		}
		_tmp$17 = nDst; _tmp$18 = nSrc; _tmp$19 = err; nDst = _tmp$17; nSrc = _tmp$18; err = _tmp$19;
		return [nDst, nSrc, err];
	};
	utf16Decoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	isHighSurrogate = function(r) {
		var $ptr, r;
		return 56320 <= r && r <= 57343;
	};
	utf16Encoder.ptr.prototype.Reset = function() {
		var $ptr, u;
		u = this;
		u.currentBOMPolicy = u.initialBOMPolicy;
	};
	utf16Encoder.prototype.Reset = function() { return this.$val.Reset(); };
	utf16Encoder.ptr.prototype.Transform = function(dst, src, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, atEOF, dst, err, i, nDst, nSrc, r, r1, r2, size, src, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		nDst = 0;
		nSrc = 0;
		err = $ifaceNil;
		u = this;
		if (u.currentBOMPolicy === true) {
			if (dst.$length < 2) {
				_tmp = 0; _tmp$1 = 0; _tmp$2 = transform.ErrShortDst; nDst = _tmp; nSrc = _tmp$1; err = _tmp$2;
				return [nDst, nSrc, err];
			}
			_tmp$3 = 254; _tmp$4 = 255; (0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = _tmp$3); (1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = _tmp$4);
			u.currentBOMPolicy = false;
			nDst = 2;
		}
		_tmp$5 = 0; _tmp$6 = 0; r = _tmp$5; size = _tmp$6;
		while (true) {
			if (!(nSrc < src.$length)) { break; }
			r = (((nSrc < 0 || nSrc >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + nSrc]) >> 0);
			if (r < 128) {
				size = 1;
			} else {
				_tuple = utf8.DecodeRune($subslice(src, nSrc)); r = _tuple[0]; size = _tuple[1];
				if (size === 1) {
					if (!atEOF && !utf8.FullRune($subslice(src, nSrc))) {
						err = transform.ErrShortSrc;
						break;
					}
				}
			}
			if (r <= 65535) {
				if ((nDst + 2 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					break;
				}
				(x = nDst + 0 >> 0, ((x < 0 || x >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x] = ((r >> 8 >> 0) << 24 >>> 24)));
				(x$1 = nDst + 1 >> 0, ((x$1 < 0 || x$1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$1] = (r << 24 >>> 24)));
				nDst = nDst + (2) >> 0;
			} else {
				if ((nDst + 4 >> 0) > dst.$length) {
					err = transform.ErrShortDst;
					break;
				}
				_tuple$1 = utf16.EncodeRune(r); r1 = _tuple$1[0]; r2 = _tuple$1[1];
				(x$2 = nDst + 0 >> 0, ((x$2 < 0 || x$2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$2] = ((r1 >> 8 >> 0) << 24 >>> 24)));
				(x$3 = nDst + 1 >> 0, ((x$3 < 0 || x$3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$3] = (r1 << 24 >>> 24)));
				(x$4 = nDst + 2 >> 0, ((x$4 < 0 || x$4 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$4] = ((r2 >> 8 >> 0) << 24 >>> 24)));
				(x$5 = nDst + 3 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$5] = (r2 << 24 >>> 24)));
				nDst = nDst + (4) >> 0;
			}
			nSrc = nSrc + (size) >> 0;
		}
		if (u.endianness === true) {
			i = 0;
			while (true) {
				if (!(i < nDst)) { break; }
				_tmp$7 = (x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$6])); _tmp$8 = ((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i]); ((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = _tmp$7); (x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$7] = _tmp$8));
				i = i + (2) >> 0;
			}
		}
		_tmp$9 = nDst; _tmp$10 = nSrc; _tmp$11 = err; nDst = _tmp$9; nSrc = _tmp$10; err = _tmp$11;
		return [nDst, nSrc, err];
	};
	utf16Encoder.prototype.Transform = function(dst, src, atEOF) { return this.$val.Transform(dst, src, atEOF); };
	utf16Encoding.methods = [{prop: "NewDecoder", name: "NewDecoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "NewEncoder", name: "NewEncoder", pkg: "", typ: $funcType([], [transform.Transformer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$Int, $Int, $error], false)}];
	ptrType$2.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$Int, $Int, $error], false)}];
	utf16Encoding.init([{prop: "endianness", name: "endianness", pkg: "golang.org/x/text/encoding/unicode", typ: Endianness, tag: ""}, {prop: "bomPolicy", name: "bomPolicy", pkg: "golang.org/x/text/encoding/unicode", typ: BOMPolicy, tag: ""}]);
	utf16Decoder.init([{prop: "endianness", name: "endianness", pkg: "golang.org/x/text/encoding/unicode", typ: Endianness, tag: ""}, {prop: "initialBOMPolicy", name: "initialBOMPolicy", pkg: "golang.org/x/text/encoding/unicode", typ: BOMPolicy, tag: ""}, {prop: "currentBOMPolicy", name: "currentBOMPolicy", pkg: "golang.org/x/text/encoding/unicode", typ: BOMPolicy, tag: ""}]);
	utf16Encoder.init([{prop: "endianness", name: "endianness", pkg: "golang.org/x/text/encoding/unicode", typ: Endianness, tag: ""}, {prop: "initialBOMPolicy", name: "initialBOMPolicy", pkg: "golang.org/x/text/encoding/unicode", typ: BOMPolicy, tag: ""}, {prop: "currentBOMPolicy", name: "currentBOMPolicy", pkg: "golang.org/x/text/encoding/unicode", typ: BOMPolicy, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		utf16be = UTF16(false, false);
		utf16le = UTF16(true, false);
		$pkg.ErrMissingBOM = errors.New("encoding: missing byte order mark");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["mime"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, sort, strings, sync, syscall, unicode, mimeTypesLower, mimeTypes, _map, _key, _r, clone;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	syscall = $packages["syscall"];
	unicode = $packages["unicode"];
	clone = function(m) {
		var $ptr, _entry, _i, _key$1, _keys, _r$1, _ref, k, m, m2, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key$1 = $f._key$1; _keys = $f._keys; _r$1 = $f._r$1; _ref = $f._ref; k = $f.k; m = $f.m; m2 = $f.m2; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = new $Map();
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key$1 = k; (m2 || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: v };
			_r$1 = strings.ToLower(k); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!(_r$1 === k)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(_r$1 === k)) { */ case 3:
				$panic(new $String("keys in mimeTypesLower must be lowercase"));
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return m2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key$1 = _key$1; $f._keys = _keys; $f._r$1 = _r$1; $f._ref = _ref; $f.k = k; $f.m = m; $f.m2 = m2; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		mimeTypesLower = (_map = new $Map(), _key = ".css", _map[_key] = { k: _key, v: "text/css; charset=utf-8" }, _key = ".gif", _map[_key] = { k: _key, v: "image/gif" }, _key = ".htm", _map[_key] = { k: _key, v: "text/html; charset=utf-8" }, _key = ".html", _map[_key] = { k: _key, v: "text/html; charset=utf-8" }, _key = ".jpg", _map[_key] = { k: _key, v: "image/jpeg" }, _key = ".js", _map[_key] = { k: _key, v: "application/x-javascript" }, _key = ".pdf", _map[_key] = { k: _key, v: "application/pdf" }, _key = ".png", _map[_key] = { k: _key, v: "image/png" }, _key = ".xml", _map[_key] = { k: _key, v: "text/xml; charset=utf-8" }, _map);
		_r = clone(mimeTypesLower); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		mimeTypes = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/net/html/charset"] = (function() {
	var $pkg = {}, $init, bytes, fmt, html, encoding, charmap, japanese, korean, simplifiedchinese, traditionalchinese, unicode, transform, io, mime, strings, utf8, structType$1, sliceType$3, encodings, _map, _key, Lookup, NewReaderLabel;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	html = $packages["golang.org/x/net/html"];
	encoding = $packages["golang.org/x/text/encoding"];
	charmap = $packages["golang.org/x/text/encoding/charmap"];
	japanese = $packages["golang.org/x/text/encoding/japanese"];
	korean = $packages["golang.org/x/text/encoding/korean"];
	simplifiedchinese = $packages["golang.org/x/text/encoding/simplifiedchinese"];
	traditionalchinese = $packages["golang.org/x/text/encoding/traditionalchinese"];
	unicode = $packages["golang.org/x/text/encoding/unicode"];
	transform = $packages["golang.org/x/text/transform"];
	io = $packages["io"];
	mime = $packages["mime"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	structType$1 = $structType([{prop: "e", name: "e", pkg: "golang.org/x/net/html/charset", typ: encoding.Encoding, tag: ""}, {prop: "name", name: "name", pkg: "golang.org/x/net/html/charset", typ: $String, tag: ""}]);
	sliceType$3 = $sliceType($emptyInterface);
	Lookup = function(label) {
		var $ptr, _entry, _r, _r$1, _tmp, _tmp$1, e, enc, label, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; e = $f.e; enc = $f.enc; label = $f.label; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $ifaceNil;
		name = "";
		_r = strings.Trim(label, "\t\n\r\f "); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = strings.ToLower(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		label = _r$1;
		enc = $clone((_entry = encodings[label], _entry !== undefined ? _entry.v : new structType$1.ptr()), structType$1);
		_tmp = enc.e; _tmp$1 = enc.name; e = _tmp; name = _tmp$1;
		return [e, name];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Lookup }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.e = e; $f.enc = enc; $f.label = label; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Lookup = Lookup;
	NewReaderLabel = function(label, input) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, e, input, label, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; e = $f.e; input = $f.input; label = $f.label; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Lookup(label); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; e = _tuple[0];
		/* */ if ($interfaceIsEqual(e, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(e, $ifaceNil)) { */ case 2:
			_r$1 = fmt.Errorf("unsupported charset: %q", new sliceType$3([new $String(label)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return [$ifaceNil, _r$1];
		/* } */ case 3:
		_arg = input;
		_r$2 = e.NewDecoder(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = transform.NewReader(_arg, _arg$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		return [_r$3, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NewReaderLabel }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.e = e; $f.input = input; $f.label = label; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderLabel = NewReaderLabel;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = html.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = charmap.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = japanese.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = korean.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = simplifiedchinese.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = traditionalchinese.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mime.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		encodings = (_map = new $Map(), _key = "unicode-1-1-utf-8", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Nop, "utf-8") }, _key = "utf-8", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Nop, "utf-8") }, _key = "utf8", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Nop, "utf-8") }, _key = "866", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.CodePage866, "ibm866") }, _key = "cp866", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.CodePage866, "ibm866") }, _key = "csibm866", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.CodePage866, "ibm866") }, _key = "ibm866", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.CodePage866, "ibm866") }, _key = "csisolatin2", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "iso-8859-2", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "iso-ir-101", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "iso8859-2", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "iso88592", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "iso_8859-2", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "iso_8859-2:1987", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "l2", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "latin2", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_2, "iso-8859-2") }, _key = "csisolatin3", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "iso-8859-3", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "iso-ir-109", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "iso8859-3", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "iso88593", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "iso_8859-3", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "iso_8859-3:1988", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "l3", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "latin3", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_3, "iso-8859-3") }, _key = "csisolatin4", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "iso-8859-4", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "iso-ir-110", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "iso8859-4", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "iso88594", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "iso_8859-4", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "iso_8859-4:1988", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "l4", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "latin4", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_4, "iso-8859-4") }, _key = "csisolatincyrillic", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "cyrillic", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "iso-8859-5", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "iso-ir-144", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "iso8859-5", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "iso88595", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "iso_8859-5", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "iso_8859-5:1988", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_5, "iso-8859-5") }, _key = "arabic", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "asmo-708", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "csiso88596e", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "csiso88596i", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "csisolatinarabic", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "ecma-114", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso-8859-6", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso-8859-6-e", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso-8859-6-i", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso-ir-127", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso8859-6", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso88596", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso_8859-6", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "iso_8859-6:1987", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_6, "iso-8859-6") }, _key = "csisolatingreek", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "ecma-118", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "elot_928", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "greek", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "greek8", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "iso-8859-7", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "iso-ir-126", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "iso8859-7", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "iso88597", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "iso_8859-7", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "iso_8859-7:1987", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "sun_eu_greek", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_7, "iso-8859-7") }, _key = "csiso88598e", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "csisolatinhebrew", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "hebrew", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso-8859-8", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso-8859-8-e", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso-ir-138", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso8859-8", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso88598", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso_8859-8", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "iso_8859-8:1988", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "visual", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8") }, _key = "csiso88598i", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8-i") }, _key = "iso-8859-8-i", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8-i") }, _key = "logical", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_8, "iso-8859-8-i") }, _key = "csisolatin6", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "iso-8859-10", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "iso-ir-157", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "iso8859-10", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "iso885910", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "l6", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "latin6", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_10, "iso-8859-10") }, _key = "iso-8859-13", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_13, "iso-8859-13") }, _key = "iso8859-13", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_13, "iso-8859-13") }, _key = "iso885913", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_13, "iso-8859-13") }, _key = "iso-8859-14", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_14, "iso-8859-14") }, _key = "iso8859-14", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_14, "iso-8859-14") }, _key = "iso885914", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_14, "iso-8859-14") }, _key = "csisolatin9", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_15, "iso-8859-15") }, _key = "iso-8859-15", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_15, "iso-8859-15") }, _key = "iso8859-15", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_15, "iso-8859-15") }, _key = "iso885915", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_15, "iso-8859-15") }, _key = "iso_8859-15", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_15, "iso-8859-15") }, _key = "l9", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_15, "iso-8859-15") }, _key = "iso-8859-16", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.ISO8859_16, "iso-8859-16") }, _key = "cskoi8r", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.KOI8R, "koi8-r") }, _key = "koi", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.KOI8R, "koi8-r") }, _key = "koi8", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.KOI8R, "koi8-r") }, _key = "koi8-r", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.KOI8R, "koi8-r") }, _key = "koi8_r", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.KOI8R, "koi8-r") }, _key = "koi8-u", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.KOI8U, "koi8-u") }, _key = "csmacintosh", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Macintosh, "macintosh") }, _key = "mac", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Macintosh, "macintosh") }, _key = "macintosh", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Macintosh, "macintosh") }, _key = "x-mac-roman", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Macintosh, "macintosh") }, _key = "dos-874", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows874, "windows-874") }, _key = "iso-8859-11", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows874, "windows-874") }, _key = "iso8859-11", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows874, "windows-874") }, _key = "iso885911", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows874, "windows-874") }, _key = "tis-620", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows874, "windows-874") }, _key = "windows-874", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows874, "windows-874") }, _key = "cp1250", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1250, "windows-1250") }, _key = "windows-1250", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1250, "windows-1250") }, _key = "x-cp1250", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1250, "windows-1250") }, _key = "cp1251", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1251, "windows-1251") }, _key = "windows-1251", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1251, "windows-1251") }, _key = "x-cp1251", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1251, "windows-1251") }, _key = "ansi_x3.4-1968", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "ascii", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "cp1252", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "cp819", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "csisolatin1", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "ibm819", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "iso-8859-1", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "iso-ir-100", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "iso8859-1", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "iso88591", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "iso_8859-1", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "iso_8859-1:1987", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "l1", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "latin1", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "us-ascii", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "windows-1252", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "x-cp1252", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1252, "windows-1252") }, _key = "cp1253", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1253, "windows-1253") }, _key = "windows-1253", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1253, "windows-1253") }, _key = "x-cp1253", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1253, "windows-1253") }, _key = "cp1254", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "csisolatin5", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "iso-8859-9", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "iso-ir-148", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "iso8859-9", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "iso88599", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "iso_8859-9", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "iso_8859-9:1989", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "l5", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "latin5", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "windows-1254", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "x-cp1254", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1254, "windows-1254") }, _key = "cp1255", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1255, "windows-1255") }, _key = "windows-1255", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1255, "windows-1255") }, _key = "x-cp1255", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1255, "windows-1255") }, _key = "cp1256", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1256, "windows-1256") }, _key = "windows-1256", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1256, "windows-1256") }, _key = "x-cp1256", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1256, "windows-1256") }, _key = "cp1257", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1257, "windows-1257") }, _key = "windows-1257", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1257, "windows-1257") }, _key = "x-cp1257", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1257, "windows-1257") }, _key = "cp1258", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1258, "windows-1258") }, _key = "windows-1258", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1258, "windows-1258") }, _key = "x-cp1258", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.Windows1258, "windows-1258") }, _key = "x-mac-cyrillic", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.MacintoshCyrillic, "x-mac-cyrillic") }, _key = "x-mac-ukrainian", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.MacintoshCyrillic, "x-mac-cyrillic") }, _key = "chinese", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "csgb2312", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "csiso58gb231280", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "gb2312", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "gb_2312", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "gb_2312-80", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "gbk", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "iso-ir-58", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "x-gbk", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GBK, "gbk") }, _key = "gb18030", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.GB18030, "gb18030") }, _key = "hz-gb-2312", _map[_key] = { k: _key, v: new structType$1.ptr(simplifiedchinese.HZGB2312, "hz-gb-2312") }, _key = "big5", _map[_key] = { k: _key, v: new structType$1.ptr(traditionalchinese.Big5, "big5") }, _key = "big5-hkscs", _map[_key] = { k: _key, v: new structType$1.ptr(traditionalchinese.Big5, "big5") }, _key = "cn-big5", _map[_key] = { k: _key, v: new structType$1.ptr(traditionalchinese.Big5, "big5") }, _key = "csbig5", _map[_key] = { k: _key, v: new structType$1.ptr(traditionalchinese.Big5, "big5") }, _key = "x-x-big5", _map[_key] = { k: _key, v: new structType$1.ptr(traditionalchinese.Big5, "big5") }, _key = "cseucpkdfmtjapanese", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.EUCJP, "euc-jp") }, _key = "euc-jp", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.EUCJP, "euc-jp") }, _key = "x-euc-jp", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.EUCJP, "euc-jp") }, _key = "csiso2022jp", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ISO2022JP, "iso-2022-jp") }, _key = "iso-2022-jp", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ISO2022JP, "iso-2022-jp") }, _key = "csshiftjis", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "ms_kanji", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "shift-jis", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "shift_jis", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "sjis", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "windows-31j", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "x-sjis", _map[_key] = { k: _key, v: new structType$1.ptr(japanese.ShiftJIS, "shift_jis") }, _key = "cseuckr", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "csksc56011987", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "euc-kr", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "iso-ir-149", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "korean", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "ks_c_5601-1987", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "ks_c_5601-1989", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "ksc5601", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "ksc_5601", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "windows-949", _map[_key] = { k: _key, v: new structType$1.ptr(korean.EUCKR, "euc-kr") }, _key = "csiso2022kr", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Replacement, "replacement") }, _key = "iso-2022-kr", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Replacement, "replacement") }, _key = "iso-2022-cn", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Replacement, "replacement") }, _key = "iso-2022-cn-ext", _map[_key] = { k: _key, v: new structType$1.ptr(encoding.Replacement, "replacement") }, _key = "utf-16be", _map[_key] = { k: _key, v: new structType$1.ptr(unicode.UTF16(false, false), "utf-16be") }, _key = "utf-16", _map[_key] = { k: _key, v: new structType$1.ptr(unicode.UTF16(true, false), "utf-16le") }, _key = "utf-16le", _map[_key] = { k: _key, v: new structType$1.ptr(unicode.UTF16(true, false), "utf-16le") }, _key = "x-user-defined", _map[_key] = { k: _key, v: new structType$1.ptr(charmap.XUserDefined, "x-user-defined") }, _map);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oov/mxl2mid/mxl"] = (function() {
	var $pkg = {}, $init, xml, midi, charset, transform, io, strconv, builder, MXLDoc, Identification, Encoding, Part, Measure, Attributes, Sound, Clef, Key, Time, Note, Tie, Pitch, Lyric, ptrType, sliceType, ptrType$1, sliceType$1, ptrType$2, sliceType$2, sliceType$3, ptrType$3, ptrType$4, ptrType$5, Decode;
	xml = $packages["encoding/xml"];
	midi = $packages["github.com/oov/mxl2mid/midi"];
	charset = $packages["golang.org/x/net/html/charset"];
	transform = $packages["golang.org/x/text/transform"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	builder = $pkg.builder = $newType(0, $kindStruct, "mxl.builder", "builder", "github.com/oov/mxl2mid/mxl", function(mxldoc_, metaTextTransformer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mxldoc = ptrType.nil;
			this.metaTextTransformer = $ifaceNil;
			return;
		}
		this.mxldoc = mxldoc_;
		this.metaTextTransformer = metaTextTransformer_;
	});
	MXLDoc = $pkg.MXLDoc = $newType(0, $kindStruct, "mxl.MXLDoc", "MXLDoc", "github.com/oov/mxl2mid/mxl", function(Score_, Identification_, Parts_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Score = new xml.Name.ptr();
			this.Identification = new Identification.ptr();
			this.Parts = sliceType$1.nil;
			return;
		}
		this.Score = Score_;
		this.Identification = Identification_;
		this.Parts = Parts_;
	});
	Identification = $pkg.Identification = $newType(0, $kindStruct, "mxl.Identification", "Identification", "github.com/oov/mxl2mid/mxl", function(Composer_, Encoding_, Rights_, Source_, Title_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Composer = "";
			this.Encoding = new Encoding.ptr();
			this.Rights = "";
			this.Source = "";
			this.Title = "";
			return;
		}
		this.Composer = Composer_;
		this.Encoding = Encoding_;
		this.Rights = Rights_;
		this.Source = Source_;
		this.Title = Title_;
	});
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "mxl.Encoding", "Encoding", "github.com/oov/mxl2mid/mxl", function(Software_, Date_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Software = "";
			this.Date = "";
			return;
		}
		this.Software = Software_;
		this.Date = Date_;
	});
	Part = $pkg.Part = $newType(0, $kindStruct, "mxl.Part", "Part", "github.com/oov/mxl2mid/mxl", function(Id_, Measures_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = "";
			this.Measures = sliceType$2.nil;
			return;
		}
		this.Id = Id_;
		this.Measures = Measures_;
	});
	Measure = $pkg.Measure = $newType(0, $kindStruct, "mxl.Measure", "Measure", "github.com/oov/mxl2mid/mxl", function(Number_, Attrs_, Events_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Number = 0;
			this.Attrs = new Attributes.ptr();
			this.Events = sliceType$3.nil;
			return;
		}
		this.Number = Number_;
		this.Attrs = Attrs_;
		this.Events = Events_;
	});
	Attributes = $pkg.Attributes = $newType(0, $kindStruct, "mxl.Attributes", "Attributes", "github.com/oov/mxl2mid/mxl", function(Key_, Time_, Divisions_, Clef_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = new Key.ptr();
			this.Time = new Time.ptr();
			this.Divisions = 0;
			this.Clef = new Clef.ptr();
			return;
		}
		this.Key = Key_;
		this.Time = Time_;
		this.Divisions = Divisions_;
		this.Clef = Clef_;
	});
	Sound = $pkg.Sound = $newType(0, $kindStruct, "mxl.Sound", "Sound", "github.com/oov/mxl2mid/mxl", function(Tempo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Tempo = 0;
			return;
		}
		this.Tempo = Tempo_;
	});
	Clef = $pkg.Clef = $newType(0, $kindStruct, "mxl.Clef", "Clef", "github.com/oov/mxl2mid/mxl", function(Sign_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sign = "";
			this.Line = 0;
			return;
		}
		this.Sign = Sign_;
		this.Line = Line_;
	});
	Key = $pkg.Key = $newType(0, $kindStruct, "mxl.Key", "Key", "github.com/oov/mxl2mid/mxl", function(Fifths_, Mode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Fifths = 0;
			this.Mode = "";
			return;
		}
		this.Fifths = Fifths_;
		this.Mode = Mode_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "mxl.Time", "Time", "github.com/oov/mxl2mid/mxl", function(Beats_, BeatType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Beats = 0;
			this.BeatType = 0;
			return;
		}
		this.Beats = Beats_;
		this.BeatType = BeatType_;
	});
	Note = $pkg.Note = $newType(0, $kindStruct, "mxl.Note", "Note", "github.com/oov/mxl2mid/mxl", function(Pitch_, Lyric_, Duration_, Voice_, Type_, Tie_, Rest_, Chord_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pitch = new Pitch.ptr();
			this.Lyric = new Lyric.ptr();
			this.Duration = 0;
			this.Voice = 0;
			this.Type = "";
			this.Tie = new Tie.ptr();
			this.Rest = new xml.Name.ptr();
			this.Chord = new xml.Name.ptr();
			return;
		}
		this.Pitch = Pitch_;
		this.Lyric = Lyric_;
		this.Duration = Duration_;
		this.Voice = Voice_;
		this.Type = Type_;
		this.Tie = Tie_;
		this.Rest = Rest_;
		this.Chord = Chord_;
	});
	Tie = $pkg.Tie = $newType(0, $kindStruct, "mxl.Tie", "Tie", "github.com/oov/mxl2mid/mxl", function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = "";
			return;
		}
		this.Type = Type_;
	});
	Pitch = $pkg.Pitch = $newType(0, $kindStruct, "mxl.Pitch", "Pitch", "github.com/oov/mxl2mid/mxl", function(Accidental_, Step_, Octave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Accidental = 0;
			this.Step = "";
			this.Octave = 0;
			return;
		}
		this.Accidental = Accidental_;
		this.Step = Step_;
		this.Octave = Octave_;
	});
	Lyric = $pkg.Lyric = $newType(0, $kindStruct, "mxl.Lyric", "Lyric", "github.com/oov/mxl2mid/mxl", function(Syllabic_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syllabic = "";
			this.Text = "";
			return;
		}
		this.Syllabic = Syllabic_;
		this.Text = Text_;
	});
	ptrType = $ptrType(MXLDoc);
	sliceType = $sliceType(midi.Track);
	ptrType$1 = $ptrType(builder);
	sliceType$1 = $sliceType(Part);
	ptrType$2 = $ptrType(midi.MIDI);
	sliceType$2 = $sliceType(Measure);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(xml.Decoder);
	ptrType$4 = $ptrType(Measure);
	ptrType$5 = $ptrType(Pitch);
	builder.ptr.prototype.buildConductorTrack = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _ref$2, br, event, measure, tr, v, v$1, x, x$1;
		br = this;
		tr = $clone(new midi.TrackBuilder.ptr(), midi.TrackBuilder);
		_ref = (x = br.mxldoc.Parts, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Measures;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			measure = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Measure);
			if (!((measure.Attrs.Time.Beats === 0))) {
				tr.AddEvent(new midi.TimeSignatureEvent.ptr((measure.Attrs.Time.Beats << 24 >>> 24), (measure.Attrs.Time.BeatType << 24 >>> 24)));
			}
			_ref$1 = measure.Events;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				event = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				_ref$2 = event;
				if ($assertType(_ref$2, Sound, true)[1]) {
					v = _ref$2.$val;
					tr.AddEvent(new midi.TempoEvent.ptr(v.Tempo));
				} else if ($assertType(_ref$2, Note, true)[1]) {
					v$1 = _ref$2.$val;
					tr.AddDeltaTime(v$1.Duration);
				}
				_i$1++;
			}
			_i++;
		}
		tr.AddEvent(new midi.EndOfTrackEvent.ptr());
		return (x$1 = tr.Track, $subslice(new midi.Track(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	builder.prototype.buildConductorTrack = function() { return this.$val.buildConductorTrack(); };
	builder.ptr.prototype.buildMainTrack = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _ref$2, br, event, measure, tr, v, x, x$1;
		br = this;
		tr = $clone(new midi.TrackBuilder.ptr(), midi.TrackBuilder);
		_ref = (x = br.mxldoc.Parts, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Measures;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			measure = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Measure);
			_ref$1 = measure.Events;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				event = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				_ref$2 = event;
				if ($assertType(_ref$2, Note, true)[1]) {
					v = _ref$2.$val;
					if (!(v.Rest.Local === "")) {
						tr.AddDeltaTime(v.Duration);
					} else if (!(v.Pitch.Step === "")) {
						if (!(v.Tie.Type === "stop")) {
							tr.AddEvent(new midi.TextEvent.ptr(5, v.Lyric.Text, br.metaTextTransformer));
							tr.AddEvent(new midi.NoteOnEvent.ptr(0, (v.Pitch.Key() << 24 >>> 24), 100));
						}
						tr.AddDeltaTime(v.Duration);
						if (!(v.Tie.Type === "start")) {
							tr.AddEvent(new midi.NoteOffEvent.ptr(0, (v.Pitch.Key() << 24 >>> 24), 0));
						}
					}
				}
				_i$1++;
			}
			_i++;
		}
		tr.AddEvent(new midi.EndOfTrackEvent.ptr());
		return (x$1 = tr.Track, $subslice(new midi.Track(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	builder.prototype.buildMainTrack = function() { return this.$val.buildMainTrack(); };
	MXLDoc.ptr.prototype.MIDI = function(metaTextTransformer) {
		var $ptr, br, d, metaTextTransformer;
		d = this;
		br = new builder.ptr(d, metaTextTransformer);
		return new midi.MIDI.ptr(1, (d.FindDivisions() << 16 >>> 16), new sliceType([br.buildConductorTrack(), br.buildMainTrack()]));
	};
	MXLDoc.prototype.MIDI = function(metaTextTransformer) { return this.$val.MIDI(metaTextTransformer); };
	MXLDoc.ptr.prototype.FindDivisions = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, d, measure, part;
		d = this;
		_ref = d.Parts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			part = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Part);
			_ref$1 = part.Measures;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				measure = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Measure);
				if (!((measure.Attrs.Divisions === 0))) {
					return measure.Attrs.Divisions;
				}
				_i$1++;
			}
			_i++;
		}
		return 0;
	};
	MXLDoc.prototype.FindDivisions = function() { return this.$val.FindDivisions(); };
	Measure.ptr.prototype.UnmarshalXML = function(d, start) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, attr, d, err, err$1, err$2, err$3, m, n, ok, snd, start, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; attr = $f.attr; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; n = $f.n; ok = $f.ok; snd = $f.snd; start = $f.start; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		start = $clone(start, xml.StartElement);
		_ref = start.Attr;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), xml.Attr);
			if (attr.Name.Local === "number") {
				_tuple = strconv.Atoi(attr.Value); m.Number = _tuple[0];
			}
			_i++;
		}
		/* while (true) { */ case 1:
			n = [n];
			snd = [snd];
			t = [t];
			_r = d.Token(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; token = _tuple$1[0]; err = _tuple$1[1];
			if ($interfaceIsEqual(err, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_tuple$2 = $assertType(token, xml.StartElement, true); t[0] = $clone(_tuple$2[0], xml.StartElement); ok = _tuple$2[1];
			/* */ if (ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ok) { */ case 4:
				_ref$1 = t[0].Name.Local;
				/* */ if (_ref$1 === "attributes") { $s = 6; continue; }
				/* */ if (_ref$1 === "sound") { $s = 7; continue; }
				/* */ if (_ref$1 === "note") { $s = 8; continue; }
				/* */ if (_ref$1 === "direction") { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_ref$1 === "attributes") { */ case 6:
					_r$1 = d.DecodeElement(m.Attrs, t[0]); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err$1 = _r$1;
					/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 12:
						return err$1;
					/* } */ case 13:
					$s = 10; continue;
				/* } else if (_ref$1 === "sound") { */ case 7:
					snd[0] = $clone(new Sound.ptr(), Sound);
					_r$2 = d.DecodeElement(snd[0], t[0]); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					err$2 = _r$2;
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 15:
						return err$2;
					/* } */ case 16:
					m.Events = $append(m.Events, new snd[0].constructor.elem(snd[0]));
					$s = 10; continue;
				/* } else if (_ref$1 === "note") { */ case 8:
					n[0] = $clone(new Note.ptr(), Note);
					_r$3 = d.DecodeElement(n[0], t[0]); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err$3 = _r$3;
					/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 18:
						return err$3;
					/* } */ case 19:
					m.Events = $append(m.Events, new n[0].constructor.elem(n[0]));
					$s = 10; continue;
				/* } else if (_ref$1 === "direction") { */ case 9:
					_r$4 = d.Skip(); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
				/* } */ case 10:
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Measure.ptr.prototype.UnmarshalXML }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.attr = attr; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.n = n; $f.ok = ok; $f.snd = snd; $f.start = start; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Measure.prototype.UnmarshalXML = function(d, start) { return this.$val.UnmarshalXML(d, start); };
	Pitch.ptr.prototype.Key = function() {
		var $ptr, _ref, n, p;
		p = this;
		n = 0;
		_ref = p.Step;
		if (_ref === "C") {
			n = 0;
		} else if (_ref === "D") {
			n = 2;
		} else if (_ref === "E") {
			n = 4;
		} else if (_ref === "F") {
			n = 5;
		} else if (_ref === "G") {
			n = 7;
		} else if (_ref === "A") {
			n = 9;
		} else if (_ref === "B") {
			n = 11;
		}
		return (n + (((p.Octave + 1 >> 0)) * 12 >> 0) >> 0) + (p.Accidental >> 0) >> 0;
	};
	Pitch.prototype.Key = function() { return this.$val.Key(); };
	Decode = function(r) {
		var $ptr, _r, dec, err, mxl, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dec = $f.dec; err = $f.err; mxl = $f.mxl; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mxl = [mxl];
		mxl[0] = $clone(new MXLDoc.ptr(), MXLDoc);
		dec = xml.NewDecoder(r);
		dec.CharsetReader = charset.NewReaderLabel;
		_r = dec.Decode(mxl[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		return [mxl[0], $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f.$ptr = $ptr; $f._r = _r; $f.dec = dec; $f.err = err; $f.mxl = mxl; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	ptrType$1.methods = [{prop: "buildConductorTrack", name: "buildConductorTrack", pkg: "github.com/oov/mxl2mid/mxl", typ: $funcType([], [midi.Track], false)}, {prop: "buildMainTrack", name: "buildMainTrack", pkg: "github.com/oov/mxl2mid/mxl", typ: $funcType([], [midi.Track], false)}];
	ptrType.methods = [{prop: "MIDI", name: "MIDI", pkg: "", typ: $funcType([transform.Transformer], [ptrType$2], false)}, {prop: "FindDivisions", name: "FindDivisions", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$4.methods = [{prop: "UnmarshalXML", name: "UnmarshalXML", pkg: "", typ: $funcType([ptrType$3, xml.StartElement], [$error], false)}];
	ptrType$5.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [$Int], false)}];
	builder.init([{prop: "mxldoc", name: "mxldoc", pkg: "github.com/oov/mxl2mid/mxl", typ: ptrType, tag: ""}, {prop: "metaTextTransformer", name: "metaTextTransformer", pkg: "github.com/oov/mxl2mid/mxl", typ: transform.Transformer, tag: ""}]);
	MXLDoc.init([{prop: "Score", name: "Score", pkg: "", typ: xml.Name, tag: "xml:\"score-partwise\""}, {prop: "Identification", name: "", pkg: "", typ: Identification, tag: "xml:\"identification\""}, {prop: "Parts", name: "Parts", pkg: "", typ: sliceType$1, tag: "xml:\"part\""}]);
	Identification.init([{prop: "Composer", name: "Composer", pkg: "", typ: $String, tag: "xml:\"creator\""}, {prop: "Encoding", name: "Encoding", pkg: "", typ: Encoding, tag: "xml:\"encoding\""}, {prop: "Rights", name: "Rights", pkg: "", typ: $String, tag: "xml:\"rights\""}, {prop: "Source", name: "Source", pkg: "", typ: $String, tag: "xml:\"source\""}, {prop: "Title", name: "Title", pkg: "", typ: $String, tag: "xml:\"movement-title\""}]);
	Encoding.init([{prop: "Software", name: "Software", pkg: "", typ: $String, tag: "xml:\"software\""}, {prop: "Date", name: "Date", pkg: "", typ: $String, tag: "xml:\"encoding-date\""}]);
	Part.init([{prop: "Id", name: "Id", pkg: "", typ: $String, tag: "xml:\"id,attr\""}, {prop: "Measures", name: "Measures", pkg: "", typ: sliceType$2, tag: "xml:\"measure\""}]);
	Measure.init([{prop: "Number", name: "Number", pkg: "", typ: $Int, tag: "xml:\"number,attr\""}, {prop: "Attrs", name: "Attrs", pkg: "", typ: Attributes, tag: "xml:\"attributes\""}, {prop: "Events", name: "Events", pkg: "", typ: sliceType$3, tag: ""}]);
	Attributes.init([{prop: "Key", name: "Key", pkg: "", typ: Key, tag: "xml:\"key\""}, {prop: "Time", name: "Time", pkg: "", typ: Time, tag: "xml:\"time\""}, {prop: "Divisions", name: "Divisions", pkg: "", typ: $Int, tag: "xml:\"divisions\""}, {prop: "Clef", name: "Clef", pkg: "", typ: Clef, tag: "xml:\"clef\""}]);
	Sound.init([{prop: "Tempo", name: "Tempo", pkg: "", typ: $Float64, tag: "xml:\"tempo,attr\""}]);
	Clef.init([{prop: "Sign", name: "Sign", pkg: "", typ: $String, tag: "xml:\"sign\""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: "xml:\"line\""}]);
	Key.init([{prop: "Fifths", name: "Fifths", pkg: "", typ: $Int, tag: "xml:\"fifths\""}, {prop: "Mode", name: "Mode", pkg: "", typ: $String, tag: "xml:\"mode\""}]);
	Time.init([{prop: "Beats", name: "Beats", pkg: "", typ: $Int, tag: "xml:\"beats\""}, {prop: "BeatType", name: "BeatType", pkg: "", typ: $Int, tag: "xml:\"beat-type\""}]);
	Note.init([{prop: "Pitch", name: "Pitch", pkg: "", typ: Pitch, tag: "xml:\"pitch\""}, {prop: "Lyric", name: "Lyric", pkg: "", typ: Lyric, tag: "xml:\"lyric\""}, {prop: "Duration", name: "Duration", pkg: "", typ: $Int, tag: "xml:\"duration\""}, {prop: "Voice", name: "Voice", pkg: "", typ: $Int, tag: "xml:\"voice\""}, {prop: "Type", name: "Type", pkg: "", typ: $String, tag: "xml:\"type\""}, {prop: "Tie", name: "Tie", pkg: "", typ: Tie, tag: "xml:\"tie\""}, {prop: "Rest", name: "Rest", pkg: "", typ: xml.Name, tag: "xml:\"rest\""}, {prop: "Chord", name: "Chord", pkg: "", typ: xml.Name, tag: "xml:\"chord\""}]);
	Tie.init([{prop: "Type", name: "Type", pkg: "", typ: $String, tag: "xml:\"type,attr\""}]);
	Pitch.init([{prop: "Accidental", name: "Accidental", pkg: "", typ: $Int8, tag: "xml:\"alter\""}, {prop: "Step", name: "Step", pkg: "", typ: $String, tag: "xml:\"step\""}, {prop: "Octave", name: "Octave", pkg: "", typ: $Int, tag: "xml:\"octave\""}]);
	Lyric.init([{prop: "Syllabic", name: "Syllabic", pkg: "", typ: $String, tag: "xml:\"syllabic\""}, {prop: "Text", name: "Text", pkg: "", typ: $String, tag: "xml:\"text\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = xml.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = midi.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = charset.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = transform.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, bytes, js, mxl, charset, ptrType, funcType, sliceType, main, arrayBufferToByteSlice, conv;
	bytes = $packages["bytes"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	mxl = $packages["github.com/oov/mxl2mid/mxl"];
	charset = $packages["golang.org/x/net/html/charset"];
	ptrType = $ptrType(js.Object);
	funcType = $funcType([ptrType, $String], [ptrType], false);
	sliceType = $sliceType($Uint8);
	main = function() {
		var $ptr;
		$global.Mxl2mid = $externalize(conv, funcType);
	};
	arrayBufferToByteSlice = function(a) {
		var $ptr, a;
		return $assertType($internalize(new ($global.Uint8Array)(a), $emptyInterface), sliceType);
	};
	conv = function(in$1, cs) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, buf, cs, e, err, in$1, metaTextTransformer, mxldoc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; buf = $f.buf; cs = $f.cs; e = $f.e; err = $f.err; in$1 = $f.in$1; metaTextTransformer = $f.metaTextTransformer; mxldoc = $f.mxldoc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = bytes.NewBuffer(arrayBufferToByteSlice(in$1));
		_r = mxl.Decode(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; mxldoc = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		buf.Reset();
		_r$1 = charset.Lookup(cs); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; e = _tuple$1[0];
		_r$2 = e.NewEncoder(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		metaTextTransformer = _r$2;
		_r$3 = mxldoc.MIDI(metaTextTransformer).WriteTo(buf); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		return js.NewArrayBuffer(buf.Bytes());
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: conv }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.buf = buf; $f.cs = cs; $f.e = e; $f.err = err; $f.in$1 = in$1; $f.metaTextTransformer = metaTextTransformer; $f.mxldoc = mxldoc; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mxl.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = charset.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		main();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
$packages["runtime"].$init();
$go($packages["main"].$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=gjs.js.map
